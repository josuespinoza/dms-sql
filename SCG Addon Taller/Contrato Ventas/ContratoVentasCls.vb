Option Explicit On

Imports DMSOneFramework
Imports DMSOneFramework.SCGCommon
Imports DMS_Addon.GastosContratoVentas
Imports SCG.DMSOne.Framework.MenuManager
Imports SCG.DMSOne.Framework
Imports SAPbobsCOM
Imports SAPbouiCOM
Imports SCG.SBOFramework
Imports SCG.UX.Windows
Imports System.Data.SqlClient
Imports System.Globalization
Imports DMSOneFramework.SCGDataAccess
Imports System.IO
Imports System.Collections.Generic
Imports SCG.Financiamiento
Imports SCG.SBOFramework.DI
Imports Microsoft.Office.Interop
Imports SCG.SBOFramework.UI.Extensions
Imports System.Linq
Imports DMS_Connector.Business_Logic.DataContract.Localizacion

Public Class ContratoVentasCls

    Public Shared FormType As String = "SCGD_frmContVent"
    Public Shared NombreUDO As String = "SCGD_CVT"
    Public Shared TablaContrato As String = "@SCGD_CVENTA"
    Public Shared TablaAccesorios As String = "SCGD_ACCXCONT"
    Public Shared TablaLineasResta As String = "SCGD_LINEASRES"
    Public Shared TablaLineasSuma As String = "SCGD_LINEASSUM"
    Public Shared TablaHistorial As String = "SCGD_HIST_CV"
    Public Shared strTablaUsaXContrato As String = "@SCGD_USADOXCONT"
    Public Shared IDMenu As String = "SCGD_UIDContVent"
    Public n As NumberFormatInfo
    Private m_oVehiculos As VehiculosCls
    Private Shared g_strSeparadorDecimalesSAP As String
    Private Shared g_strSeparadorMilesSAP As String

    Dim objComentario As ComentariosHistorial
    Dim objHistorial As HistorialAprobaciones
    Private Const g_strFormcomentariosApr As String = "SCGD_CHCV"
    Private Const mc_strControlCVenta As String = "SCGD_frmContVent"

#Region "Estructuras"

    Public Structure CVentaUDT

        Public NoPlaca As Integer
        Public DescMArca As String
        Public DescModelo As String
        Public DescEstilo As String
        Public DescVehiculo As String
        Public Vin As String
        Public Año As Integer
        Public NoUnidad As Integer
        Public NumCliente As String
        Public DetCliente As String

    End Structure

    Public Structure LineaAsientoBono

        Public Unidad As String
        Public TipoBono As String
        Public CtaDebe As String
        Public CtaHaber As String
        Public MontoDebe As Decimal
        Public MontoHaber As Decimal
        Public Comentarios As String

    End Structure

    Public Structure ValidacionUsados

        Public intPosicion As Integer
        Public Existe As Boolean
        Public IdVehiculo As String

    End Structure

    Public Structure ValidacionNuevos

        Public intPosicion As Integer
        Public IdVehiculo As String
        Public TipoVenta As String
        Public NumUnid As String

    End Structure

    Public Structure BonosVehiculo
        Public strCodigoVehiculo As String
        Public strCodigoBono As String
        Public dblMonto As Double
    End Structure
#End Region

#Region "Enumerados"

    Public Enum TipoAprobacion
        Aprobacion = 1
        Rechazo = 2
        Cancelacion = 3
    End Enum

    Public Enum TipoControl
        EditText = 1
        ComboBox = 2
        Button = 3
    End Enum

    Public Enum TipoItem
        Accesorio = 1
        Tramite = 2
    End Enum

    Public Enum NombreCuentas

        ExpensesAc = 1
        RevenuesAc = 2
        SaleCostAc = 3

    End Enum

    Public Enum TipoDocumentoVehiculoUsado

        NotaCredito = 1
        FacturaProveedor = 2


    End Enum

#End Region

#Region "Declaraciones"

    Private m_blnPreguntaGuardaCambios As Boolean = True
    Private m_dtsVehiculo As New VehiculosAddonDataset
    Private m_tadVehiculo As New VehiculosAddonDatasetTableAdapters.SCG_VEHICULOTableAdapter
    Private m_tadConsultasVehiculos As New VehiculosAddonDatasetTableAdapters.SCG_VEHICULOTableAdapter
    Private m_objGoodReceiptusado As ObjetoGoodReceiptCls

    Private boolSeguroPV As Boolean = False

    Private strEditKmUnit As Boolean
    Private m_blnDehabilitaBusqueda As Boolean = False
    Private blnBtnMas As Boolean = False
    Private m_oCompany As SAPbobsCOM.Company
    Private m_strBDConfiguracion As String
    Private m_strBDTalller As String
    Private WithEvents m_SBO_Application As SAPbouiCOM.Application

    'moneda para cuando cambia el valor en el combo
    Public Shared strMonedaOrigen As String = String.Empty
    Public Shared strTipoCambioMoneda As String = String.Empty
    'Public strPrecioVentaOrigen As String = String.Empty
    'Public strPrecioAccsOrigen As String = String.Empty

    Public m_blnCargoManejarEstados As Boolean

    'JVR
    Public g_decTipoCambioContratro As Decimal

    Public g_decTipoCambioAntes As Decimal
    Public g_decPrecioVentaAntes As Decimal
    Public g_decTotalAccAntes As Decimal
    Public g_decGastosAntes As Decimal
    Public g_decGastosPrendaAntes As Decimal
    Public g_decPrimaAntes As Decimal
    Public g_decUsadoAntes As Decimal
    Public g_decDeudaUAntes As Decimal
    Public g_decCreditoAntes As Decimal
    Public g_decDebitoAntes As Decimal
    Public g_decFinanciaAntes As Decimal
    Public g_dbFinanciaExternoAntes As Double
    Public g_decAjusteAntes As Decimal
    Public g_decPrendaAntes As Decimal
    Public g_decAbonoMensualAntes As Decimal
    Public g_decCuotaTotalAntes As Decimal
    Public g_decGastosLocAntes As Decimal
    Public g_decVentaUsadoAntes As Decimal

    Public g_strUnidad As String

    Public g_decLineasSumMontoAntes() As Decimal
    Public g_decLineasResMontoAntes() As Decimal

    Public g_strSerieTramite As String = String.Empty

    Public Const mc_strFolder1 As String = "Folder1"
    Public Const mc_strFolder2 As String = "Folder2"
    Public Const mc_strFolder3 As String = "Folder3"
    Public Const mc_strFolder4 As String = "Folder4"
    Public Const mc_strFolder5 As String = "Folder5"
    Public Const mc_strFolder6 As String = "Folder6"
    Public Const mc_strFolder7 As String = "Folder7"
    Public Const mc_strFolder8 As String = "Folder8"
    Public Const mc_strFolder10 As String = "Folder10"
    Public Const mc_strFolder11 As String = "Folder11"

    Public Const mc_strPlacaUsado As String = "txtPlaca2"
    Public Const mc_strVINUsado As String = "txtVIN_Us"

    Public Const mc_strNumBP As String = "NumBP"
    Public Const mc_strNombreBP As String = "NomBP"

    Public Const mc_strBtnArchivos As String = "btnArch"
    '    Public Const mc_strNumContrato As String = "NumCont"
    Private Const mc_strTablaArchivosDigitales As String = "SCGTA_Archivos"

    Public Const mc_strCFLSCG As String = "CFL1"
    Public Const mc_strCFLBusinessPartner As String = "CFL2"
    Private Const mc_strPermisosAprobaciones As String = "PermisosAprobaciones"
    Private Const mc_CardCode As String = "CardCode"
    Private Const mc_CardName As String = "CardName"
    Public Const mc_strAnio As String = "txtanio"
    Public Const mc_strUnidad As String = "txtUnid"
    Public Const mc_strUnidadUs As String = "txtUnid_Us"
    Public Const mc_strPasajeros As String = "txtPas"
    Public Const mc_strPlaca As String = "txtPlaca"
    Public Const mc_strCliente As String = "txtCl"
    Public Const mc_strClienteConsignado As String = "txtClCon"
    Public Const mc_strIndicadorIVAConsignado As String = "txtInIVA"
    Public Const mc_strDetCliente As String = "txtDetCl"
    Public Const mc_strNoMotor As String = "txtMotor"
    Public Const mc_strMarcaMotor As String = "cboMarcM"
    Public Const mc_strEjes As String = "txtEjs"
    Public Const mc_strPuertas As String = "txtPrt"
    Public Const mc_strVIN As String = "txtVIN"
    Public Const mc_strObservaciones As String = "txtObs"
    Public Const mc_strNoPuertas As String = "txtPrt"
    Public Const mc_strPeso As String = "txtPeso"
    Public Const mc_strCilindrada As String = "txtCilind"
    Public Const mc_strCategoria As String = "cboCat"
    Public Const mc_strNoCilindros As String = "txtCil"
    Public Const mc_strGarantiaKM As String = "txtGaKm"
    Public Const mc_strGarantiaTiempo As String = "txtGaTM"
    Public Const mc_strPotenciaKW As String = "txtPot"
    Public Const mc_strTraccion As String = "cboTrac"
    Public Const mc_strCombustible As String = "cboComb"
    Public Const mc_strEstado As String = "cboSta"
    Public Const mc_strColor As String = "cboCol"
    Public Const mc_strColorTapiceria As String = "cboTap"
    Public Const mc_strTipo As String = "cboTipo"
    Public Const mc_strUbicaciones As String = "cboUbi"
    Public Const mc_strCabina As String = "cboCab"
    Public Const mc_strTecho As String = "cboTech"
    Public Const mc_strCarroceria As String = "cboCarr"
    Public Const mc_strTransmision As String = "cboTrans"
    Public Const mc_strEstilo As String = "txtEstilo"
    Public Const mc_strMarca As String = "txtMarca"
    Public Const mc_strModelo As String = "txtModelo"
    Public Const mc_strEstiloUS As String = "cboEsti_Us"
    Public Const mc_strMarcaUS As String = "cboMarc_Us"
    Public Const mc_strModeloUS As String = "cboModU"
    Public Const mc_strColorUs As String = "cboCol_Us"
    Public Const mc_strNumVehiculo As String = "txtNumVeh"
    Public Const mc_strNumContrato As String = "txtNumCont"
    Public Const mc_strIDVehiculo As String = "txtIDVehi"
    Public Const mc_strAcreedor As String = "txtAcreedo"
    Public Const mc_strPeriodoCobro As String = "cboPeriodo"
    Public Const mc_strMoneda As String = "cboModena"

    Public Const mc_strBuscar As String = "btnBuscar"
    Public Const mc_strPic_vend As String = "pic_vend"
    Public Const mc_strCodeVen As String = "txtCodeVen"
    Public Const mc_strNameVen As String = "txtNameVen"
    Public Const mc_strOwrCode As String = "txtOwrCode"
    Public Const mc_strOwrName As String = "txtOwrName"
    Private Const mc_strtxtVendedor As String = "txtVend"
    Private Const mc_strtxtTitular As String = "txtTitul"
    Private Const mc_strU_PorDes As String = "U_PorDes"

    Private Const mc_strEstadoUsado = "U"

    Public Const mc_strSinCostear As String = "S"
    Public Const mc_strCosteado As String = "C"
    Public Const mc_strNoCosteable As String = "N"

    Private oForm As Form

    'Estados Límites
    Private m_intEstadoInferior As Integer
    Private m_intEstadoSuperior As Integer
    Private m_intEstadoPrefacturacion As Integer
    Private m_strComentarioUsadoFactura As String
    Private m_decTipoCambio As Decimal
    Private m_strMonedaLocal As String
    Private m_strMonedaSistema As String
    Private m_objBLSBO As New BLSBO.GlobalFunctionsSBO
    Private strComentarioDeudaUsadoFactura As String
    Private strComentarioNumeroContratoVenta As String

    Public Event AgregoVehiculo(ByVal sender As Object, ByVal NoVehiculo As String)

    Private m_cnConeccionTransaccion As New SqlConnection
    Private m_tnTransaccion As SqlTransaction
    Private m_blnCierraForma As Boolean
    Private m_BloqueaTipoCambio As Boolean
    Private m_intTipoDocumentoCargoAdicional As BoDocumentSubType

    Private objConfiguracionGeneral As ConfiguracionesGeneralesAddon

    Private m_cn_Coneccion As New SqlConnection
    Private m_strConectionString As String


    '**************************************************************
    'para la creacion del asiento cuando se facture el contrato de venta
    Private intNumeroEntradaVehiculoUsado As Integer

    Private blnTieneVehiculoUsado As Boolean = False
    '****************************************************************


    Private g_blnCambiaBoton As Boolean

    Private g_blnEventoCerrarAfecta As Boolean

    Private g_blnEventoActualizarAfecta As Boolean

    Private blnUtilizaCosteoAccesorios As String = String.Empty

    'Asiento por ajuste de costo
    Private blnAsientoAjusteCosto As Boolean = False


    'Agregado 11/11/2010: Estructura para guardar valores base
    Public Structure ItemsValoresBase

        Public Shared g_strMonedaBase As String
        Public Shared g_decTipoCambioBase As Decimal
        Public Shared g_decPrecioVentaBase As Decimal
        Public Shared g_decPrecioAccesorios As Decimal
        Public Shared g_decGastosBase As Decimal
        Public Shared g_decGastosPrendaBase As Decimal
        Public Shared g_decPrimaBase As Decimal
        Public Shared g_decUsadoBase As Decimal
        Public Shared g_decDeudaUBase As Decimal
        Public Shared g_decCreditoBase As Decimal
        Public Shared g_decDebitoBase As Decimal
        Public Shared g_decFinanciaBase As Decimal
        Public Shared g_decFinanciaExternoBase As Double
        Public Shared g_decAjusteBase As Decimal
        Public Shared g_decPrendaBase As Decimal
        Public Shared g_decTasaAnualBase As Decimal
        Public Shared g_decAbonoMensBase As Decimal
        Public Shared g_decCuotaTotalBase As Decimal
        Public Shared g_decGastosLocBase As Decimal
        Public Shared g_decPagosBase As Decimal
        Public Shared g_decCotizacionBase As Decimal
        Public Shared g_decTempUsadoBase As Decimal
        Public Shared g_decTempImpUsado As Decimal
        Public Shared g_decTempTotalCImpUsa As Decimal
        Public Shared g_decImpuestoBase As Decimal
        Public Shared g_decPrecioVehBase As Decimal
        Public Shared g_decPagoVehBase As Decimal
        Public Shared g_decPrecioIniAcc As Decimal
        Public Shared g_decGasLocVehBase As Decimal
        Public Shared g_decOtrosVehBase As Decimal
        Public Shared g_decUsadoValVenta As Decimal
        Public Shared g_decBonoVehBase As Decimal
        Public Shared g_decPrecioListaBase As Decimal
        Public Shared g_decMontoNetoAseguradoraBase As Decimal
        Public Shared g_decMontoNetoFinancieraBase As Decimal
        Public Shared g_decPrecioNetoBase As Decimal
        Public Shared g_decOtrosCostos As Decimal
        Public Shared g_decCnsMontoNetoFacturar As Decimal
        Public Shared g_decCnsMontoNeto As Decimal
        Public Shared g_decCnsMontoIVA As Decimal
        Public Shared g_decCnsMontoTotal As Decimal



    End Structure


    Public Shared decAccBaseIni() As Decimal
    Public Shared decAccBase() As Decimal
    Public Shared decAccCostoBase() As Decimal
    Public Shared decAccTotalBase() As Decimal
    Public Shared decLineasSumMontoBase() As Decimal
    Public Shared decLineasResMontoBase() As Decimal
    Public Shared decPrecioUnidadBase() As Decimal
    Public Shared decPrecioTotalUnidadBase() As Decimal
    Public Shared decPagoUnidadBase() As Decimal
    Public Shared decAccUnidadBase() As Decimal
    Public Shared decGasLocUnidadBase() As Decimal
    Public Shared decOtrosUnidadBase() As Decimal
    Public Shared decValorReciboBase() As Decimal
    Public Shared decValorImpuestoBase() As Decimal
    Public Shared decValorTCImpuestoBase() As Decimal
    Public Shared decUsadosValVentaBase() As Decimal
    Public Shared decAjusteCostoBase() As Decimal
    Public Shared decMontoPago() As Decimal
    Public Shared decPrecioTramiteBase() As Decimal
    Public Shared decCostoTramiteBase() As Decimal
    Public Shared decPrecioNeto() As Decimal
    Public Shared decOtrosCostosBase() As Decimal

    Public Shared decBonos() As Decimal
    Public Shared decTotalNeto() As Decimal

    Public Shared strDocNumPago() As String
    Public Shared strFechaPago() As String
    Public Shared strCodUnid() As String
    Public Shared strCodUnidPago() As String

    Private blnPreguntaPrecio As Boolean = True
    Private blnModificaPrecio As Boolean

    'Private objStringWriter As New StringWriter()
    'Private strValoresBase As String
    'Private xmlValoresBase As New Xml.Serialization.XmlSerializer(objValoresBase.GetType)

    Private dataTable As DataTable
    Private dtUnidTotalCos As DataTable

    Private oDataTablePagosUni As SAPbouiCOM.DataTable
    Private oDataTablePagosRealizados As SAPbouiCOM.DataTable

    Private strFechaDocumento As String
    Private dtFechaDocumento As String

    Private g_strUnidadEliminada() As String
    Private g_intCantUnidadesEli As Integer

    Private blnCambiarMonedaporContrato As Boolean = False
    Private strMonedaSN As String = String.Empty
    'Private blnDejarMonedaConfigurada As Boolean = False

    Private m_formPlanPlagos As PlanPagosFormulario
    Private oGestorFormularios As GestorFormularios

    Private m_oPrestamo As PrestamoFormulario

    Private m_formGastosAdicionales As GastosAdicionales
    Public Shared oDataTableGastosUnidad As SAPbouiCOM.DataTable
    Private oDataTableConsultaGastos As SAPbouiCOM.DataTable
    Private oDataTableConfGastos As SAPbouiCOM.DataTable
    Dim dtConsulta As SAPbouiCOM.DataTable

    Public oDataTableFacturas As SAPbouiCOM.DataTable
    Public oDataTableValidaFacturas As SAPbouiCOM.DataTable

    Private oDataTableConfiguracionesDMS As SAPbouiCOM.DataTable
    Private oDataTableEstadosLimites As SAPbouiCOM.DataTable
    Private oDataTableEstados As SAPbouiCOM.DataTable
    'Private oDataTableGR As SAPbouiCOM.DataTable
    Private oDataTableValidValues As SAPbouiCOM.DataTable
    Private oDataTablePagosRecibidos As SAPbouiCOM.DataTable
    Private oDataTablePermisosAprobaciones As SAPbouiCOM.DataTable

    'manejo de la pantalla balance Contratos de venta
    Private m_formBalance As BalanceFormulario
    Private m_gestorBalance As GestorFormularios
    Private _UsaBalances As Boolean

    'manejo de direccion de excel
    Private _strDireccion As String
    Private _CargaMasiva As Boolean

    Private dtUnidadesBD As SAPbouiCOM.DataTable
    Private dtUnidadesBDOrdenadas As SAPbouiCOM.DataTable
    Private dtImp As SAPbouiCOM.DataTable
    Private dtAdmin1 As SAPbouiCOM.DataTable
    Private dtTransmision As SAPbouiCOM.DataTable
    Private dtUnidadesExcelSBO As SAPbouiCOM.DataTable
    Private dtBonosUnidad As SAPbouiCOM.DataTable
    Private dtAccesoriosUnidad As SAPbouiCOM.DataTable
    Private dtTotalesBonosXUnidad As SAPbouiCOM.DataTable
    Private dtMonedas As SAPbouiCOM.DataTable

    'Agregado 28/08/2012 - Diego Herrera: Arreglos para guardar datos de accesorios para comprar
    Private strArregloAccesorio() As String
    Private intArregloCantAcc() As Integer
    Private decArregloCostoAcc() As Decimal
    Private strArregloImpCompraAcc() As String
    Private strArregloProveedorAcc() As String
    Private intArregloPosicDSAcc() As Integer
    'numero de lineas para orden de compra

    Private intArregloLinesAcc() As Integer

    Private intContadorAccs As Integer
    Private strArregloProvAccs() As String
    Private intContProvAccs As Integer

    'Agregado 17/09/2012 - Diego Herrera: Arreglos para guardar datos de trámites para comprar
    Private strArregloTram() As String
    Private intArregloCantTram() As Integer
    Private decArregloCostoTram() As Decimal
    Private strArregloImpCompraTram() As String
    Private strArregloProveedorTram() As String
    Private intArregloPosicDSTram() As Integer

    Private intContadorTram As Integer
    Private strArregloProvTram() As String
    Private intContProvTram As Integer

    'manejo de Mensajeria
    Private dtMensajeria As SAPbouiCOM.DataTable

    'Agregado 18/12/2012 - Johnny Vargas: Trazabilidad de vehículos
    Private dataTableMonedaVehFact As DataTable
    Private dataTableVehRecibido As DataTable

    Public Const g_str_mtxBonos As String = "mtxBonos"
    Public Const g_str_mtxAccesorios As String = "mtx_0"
    Public Const g_str_mtxVehi As String = "mtx_Vehi"
    Public Const g_str_BONOXCONT As String = "@SCGD_BONOXCONT"
    Public Const g_str_ACCXCONT As String = "@SCGD_ACCXCONT"
    Public Const g_str_ColBono As String = "Col_Bono"
    Public Const g_str_ColMonto As String = "Col_Monto"
    Public Const g_str_ColUnidad As String = "Col_Unidad"
    Public Const g_strUBono As String = "U_Bono"
    Public Const g_strUMonto As String = "U_Monto"
    Public Const g_strUUnidad As String = "U_Unidad"
    Public Const g_strCodUnid As String = "U_Cod_Unid"

    Private dtBonosNoCobra As SAPbouiCOM.DataTable
    Private dtCostosUnidad As SAPbouiCOM.DataTable
    Private dtBodegasCostos As SAPbouiCOM.DataTable
    Private dtDisponibilidad As SAPbouiCOM.DataTable
    Public dtInfoReversion As SAPbouiCOM.DataTable
    Public dataTableUsadosReversion As SAPbouiCOM.DataTable

    'Usa Tipo de Cambio Contrato de Ventas
    Dim strUsaTCContrato As String = String.Empty

    Public Const g_str_mtxOtrosCostos As String = "mtx_OtrCos"
    Public Const g_str_OTROCXCV As String = "@SCGD_OTROCXCV"
    Public Const g_str_ColCodCos As String = "Col_CodCos"
    Public Const g_strUCodCos As String = "U_CodCos"
    Public Const g_strUDesCos As String = "U_DesCos"

    'datatable para cargar las dimensiones contables para cada tipo de inventario
    'a la hora de la facturacion del contrato

    Private oDataTableDimensionesContablesDMS As SAPbouiCOM.DataTable
    Private oDataTableDimensiones As System.Data.DataTable
    Private oDataTableConfiguracionDocumentosDimensiones As SAPbouiCOM.DataTable

    Private ListaConfiguracion As Hashtable


    Public Const mc_strDataTableDimensiones As String = "DimensionesContablesDMS"

    Public ClsLineasDocumentosDimension As AgregarDimensionLineasDocumentosCls = New AgregarDimensionLineasDocumentosCls(m_oCompany, m_SBO_Application)

    Public blnUsaDimensiones As Boolean = False

    Private strUsaDimensiones As String = String.Empty
    Private blnDibuja As Boolean = False

    'Private blnUsaTipoCambioContrato As Boolean = False
    Private blnUsaCompensacionAsientoEntradaVehiculo As Boolean = False

    'Usa Trámites Facturables
    Private strUsaTramitesFacturables As String = String.Empty
    Private blnCreoDocumentosTramitesFacturables As Boolean = False
    Private strUsaFacturaExectaVentaVehiculoUsado As String = String.Empty
    Private strUsaDistincionSocioNegocioReciboUsado As String = String.Empty
    Private blnUsaDistincionSocioNegocioReciboUsado As Boolean = False
    Private strUsaFacturaProveedorVehiculoUsado As String = String.Empty
    Private strNumeroFacturaProveedorVU As String = String.Empty
    Private strNumeroAsientoAdicionalVU As String = String.Empty
    Private strUsaSegurosPostVenta As String = String.Empty
    Private blnUsaFacturaProveedoresVehiculoUsado As Boolean = False

    Private _lstBonosEliminar As List(Of BonosVehiculo)

#End Region

#Region "Constructor"

    <System.CLSCompliant(False)> _
    Public Sub New(ByVal ocompany As SAPbobsCOM.Company, _
                   ByVal SBOAplication As Application)

        m_oCompany = ocompany
        m_SBO_Application = SBOAplication

        n = DIHelper.GetNumberFormatInfo(m_oCompany)

    End Sub

#End Region

#Region "Properties"

    Property ListaBonosEliminar() As List(Of BonosVehiculo)
        Get
            Return _lstBonosEliminar
        End Get
        Set(value As List(Of BonosVehiculo))
            _lstBonosEliminar = value
        End Set
    End Property

    Property SeguroPV() As Boolean
        Get
            Return boolSeguroPV
        End Get
        Set(value As Boolean)
            boolSeguroPV = value
        End Set
    End Property

    Public Property EnableKmUni() As Boolean
        Get
            Return strEditKmUnit
        End Get
        Set(ByVal value As Boolean)
            strEditKmUnit = value
        End Set
    End Property

    <System.CLSCompliant(False)> _
    Public Property SAPCompany() As SAPbobsCOM.Company
        Get
            Return m_oCompany
        End Get
        Set(ByVal value As SAPbobsCOM.Company)
            m_oCompany = value
        End Set
    End Property

    Public Property BDConfiguracion() As String
        Get
            Return m_strBDConfiguracion
        End Get
        Set(ByVal value As String)
            m_strBDConfiguracion = value
        End Set
    End Property

    Public Property BDTaller() As String
        Get
            Return m_strBDTalller
        End Get
        Set(ByVal value As String)
            m_strBDTalller = value
        End Set
    End Property

    Public ReadOnly Property CierraForma() As Boolean
        Get
            Return m_blnCierraForma
        End Get
    End Property

    Public Property UsaBalances As Boolean
        Get
            Return _UsaBalances
        End Get
        Set(ByVal value As Boolean)
            _UsaBalances = value
        End Set
    End Property

    Public Property StrDireccion As String
        Get
            Return _strDireccion
        End Get
        Set(ByVal value As String)
            _strDireccion = value
        End Set
    End Property

    Public Property CargaMasiva As Boolean
        Get
            Return _CargaMasiva
        End Get
        Set(ByVal value As Boolean)
            _CargaMasiva = value
        End Set
    End Property

#End Region


#Region "Metodos"

    Private Sub CargarEstadoslímites()

        Dim strValorLeido As String
        Dim strConsulta As String

        oDataTableEstadosLimites = oForm.DataSources.DataTables.Add("EstLimites")
        oDataTableEstados = oForm.DataSources.DataTables.Add("Estados")

        strConsulta = "SELECT Min(U_Prio) As Inferior, (Max(U_Prio) - 1) As PreFact, Max(U_Prio) As Superior FROM [@SCGD_ADMIN9] WITH (nolock) "

        oDataTableEstadosLimites.ExecuteQuery(strConsulta)

        strConsulta = "SELECT U_Prio, U_Codigo, U_Name FROM [@SCGD_ADMIN9] AS Adm WITH (NoLock) order by U_Prio"
        oDataTableEstados.ExecuteQuery(strConsulta)

        strValorLeido = oDataTableEstadosLimites.GetValue("Inferior", 0)
        If IsNumeric(strValorLeido) Then
            m_intEstadoInferior = CInt(strValorLeido)
        Else
            m_intEstadoInferior = 0
        End If
        strValorLeido = oDataTableEstadosLimites.GetValue("PreFact", 0)
        If IsNumeric(strValorLeido) Then
            m_intEstadoPrefacturacion = CInt(strValorLeido)
        Else
            m_intEstadoPrefacturacion = 1
        End If
        strValorLeido = oDataTableEstadosLimites.GetValue("Superior", 0)
        If IsNumeric(strValorLeido) Then
            m_intEstadoSuperior = CInt(strValorLeido)
        Else
            m_intEstadoSuperior = 2
        End If

    End Sub

    ''' <summary>
    ''' Valida que los datos de la pestaña Consignados estén completos si se vende un vehículo consignado.
    ''' </summary>
    ''' <param name="p_oForm">Formulario desde el cual se ejecuta el método</param>
    ''' <returns>True = Datos válidos, False = Datos inválidos o faltantes</returns>
    ''' <remarks></remarks>
    Private Function ValidarDatosConsignados(ByVal p_oForm As SAPbouiCOM.Form) As Boolean
        Dim boolResultado As Boolean = True
        Dim boolConsignado As Boolean = False
        Dim intTamano As Integer = 0
        Dim strNumeroUnidad As String = String.Empty
        Dim strCardCodeConsignado As String = String.Empty
        Dim strChkAuto As String = String.Empty
        Dim strChkManual As String = String.Empty
        Dim strChkSinComision As String = String.Empty
        Dim strIndicadorImpuesto As String = String.Empty
        Dim decMontoNeto As Decimal = 0

        Try
            intTamano = p_oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size

            'Recorre la matriz de vehículos venta y determina si algún vehículo es consignado
            If intTamano > 0 Then
                For i As Integer = 0 To intTamano - 1
                    strNumeroUnidad = p_oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).Trim()
                    If Not String.IsNullOrEmpty(strNumeroUnidad) AndAlso EsConsignado(strNumeroUnidad) Then
                        boolConsignado = True
                        Exit For
                    End If
                Next
            End If

            'Si un vehículo es consignado, se deben validar los datos de la pestaña "Consignado"
            If boolConsignado Then
                strCardCodeConsignado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CodClCon", 0).ToString().Trim()
                strChkAuto = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ComAuto", 0).ToString.Trim()
                strChkManual = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ComManua", 0).ToString.Trim()
                strChkSinComision = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SinCom", 0).ToString.Trim()
                decMontoNeto = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MNetoCns", 0), n)
                strIndicadorImpuesto = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ImpCmsCns", 0).ToString.Trim()

                If strChkAuto.ToUpper() <> "Y" And strChkManual.ToUpper() <> "Y" And strChkSinComision.ToUpper() <> "Y" Then
                    boolResultado = False
                    'Mensaje de error debe marcar el check del tipo de consignado en la pestaña Consignados
                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorTipoComisionConsignado, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                End If

                If strChkSinComision.ToUpper() <> "Y" Then
                    If String.IsNullOrEmpty(strCardCodeConsignado) Then
                        boolResultado = False
                        'Mensaje de error campo U_CodClCon Cliente de propietario consignado no puede estar en blanco
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorClienteConsignadoBlanco, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                    End If

                    If (strChkAuto.ToUpper() = "Y" Or strChkManual.ToUpper() = "Y") And decMontoNeto <= 0 Then
                        boolResultado = False
                        'Mensaje de error campo U_MNetoCns monto de la comisión por consignado debe ser mayor a cero 
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorMontoNetoConsignado, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                    End If

                    If String.IsNullOrEmpty(strIndicadorImpuesto) Then
                        boolResultado = False
                        'Mensaje de error, debe seleccionar un indicador de impuesto para la factura comisión consignados, en la pestaña consignado.
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorIVAConsignado, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                    End If
                End If

            End If

            Return boolResultado

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Private Function ValidarAsumeDeudaUsado(ByVal oform As Form, ByVal p_strSeparadorMilesSAP As String, ByVal p_strSeparadorDecimalesSAP As String, ByRef blDeudaSinProv As Boolean) As Boolean

        Dim blnAsumeDeuda As Boolean
        Dim strPlacaUsado As String = String.Empty
        Dim strVINUsado As String = String.Empty
        Dim decMontoDeudaUsado As Decimal
        Dim strProveedorDeudaUsado As String
        Dim oMatrix As Matrix
        Dim strUsado As String

        oMatrix = DirectCast(oform.Items.Item("mtx_Usado").Specific, Matrix)

        If oMatrix.RowCount > 0 Then
            strUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", 0)
            If Not String.IsNullOrEmpty(strUsado) Then
                strPlacaUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Placa", 0)
                strVINUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_VIN", 0)
            End If
        End If

        strProveedorDeudaUsado = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_Acre", 0)
        decMontoDeudaUsado = Utilitarios.ConvierteDecimal(oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deu_Usa", 0), n)
        blDeudaSinProv = False

        If Not String.IsNullOrEmpty(strPlacaUsado) Or Not String.IsNullOrEmpty(strVINUsado) Then
            If decMontoDeudaUsado > 0 Then
                If String.IsNullOrEmpty(strProveedorDeudaUsado) Then
                    If m_SBO_Application.MessageBox(My.Resources.Resource.PreguntaDeudaSinProveedor, 1, My.Resources.Resource.Si, My.Resources.Resource.No) = 1 Then
                        blnAsumeDeuda = False
                    Else
                        blDeudaSinProv = True
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.DeudaSinProveedor, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                    End If
                Else
                    blnAsumeDeuda = True
                End If
            End If
        End If
        Return blnAsumeDeuda

    End Function

    Private Function CargarTipoCambio(ByVal p_oform As SAPbouiCOM.Form) As Boolean

        Dim strMoneda As String
        Dim strConectionString As String = String.Empty
        Dim UsaTCContrato As String = String.Empty

        Dim strFechaContabilizacionCV As String
        Dim dtFechaContabilizacionCV As Date


        Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, strConectionString)

        Dim m_objUtilitarios As New DMSOneFramework.SCGDataAccess.Utilitarios(strConectionString)


        strFechaContabilizacionCV = p_oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0)
        dtFechaContabilizacionCV = Date.ParseExact(strFechaContabilizacionCV, "yyyyMMdd", Nothing)


        strMoneda = p_oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0)

        m_objBLSBO.Set_Compania(m_oCompany)
        Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, m_strConectionString)
        m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
        If m_strMonedaLocal <> Trim(strMoneda) Then

            UsaTCContrato = oDataTableConfiguracionesDMS.GetValue("U_TCCont", 0)

            If UsaTCContrato = "Y" Then

                m_decTipoCambio = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0), n)

            Else
                m_decTipoCambio = m_objBLSBO.RetornarTipoCambioMoneda(strMoneda, dtFechaContabilizacionCV, m_strConectionString, False)

            End If

            If m_decTipoCambio = -1 Then
                Return False
            End If


        Else
            m_decTipoCambio = 1
        End If

        Return True

    End Function

    Public Function RetornarMonedaCuentaAsociada(ByVal p_CardCodeContrato As String, ByVal p_MonedaContrato As String, _
                                                 ByVal p_CuentaAsociadaClienteFacturar As String) As Boolean

        Dim strMonedaCuentaAsociada As String
        Dim strConectionString As String = String.Empty

        Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, strConectionString)

        Dim m_objUtilitarios As New DMSOneFramework.SCGDataAccess.Utilitarios(strConectionString)

        strMonedaCuentaAsociada = Utilitarios.EjecutarConsulta("SELECT ActCurr FROM OACT WITH (nolock) where AcctCode = '" & p_CuentaAsociadaClienteFacturar & "'", m_oCompany.CompanyDB, m_oCompany.Server)

        If strMonedaCuentaAsociada = "##" Then
            Return True
        ElseIf strMonedaCuentaAsociada <> Trim(p_MonedaContrato) Then
            Return False
        ElseIf strMonedaCuentaAsociada = Trim(p_MonedaContrato) Then
            Return True
        End If

    End Function

    Public Function RetornarMonedaSN(ByVal p_MonedaSN As String, ByVal p_MonedaConfigurada As String, ByVal TipoDocumento As String) As Boolean

        Dim strMonedaSN As String = p_MonedaSN

        If strMonedaSN = "##" Then
            Return True
        ElseIf strMonedaSN <> Trim(p_MonedaConfigurada) Then
            If m_SBO_Application.MessageBox(My.Resources.Resource.MensajeMonedaDiferente & " " & p_MonedaConfigurada & ", " & My.Resources.Resource.MensajeMonedaDiferente2 & "  " & TipoDocumento & "." & _
                                            " " & My.Resources.Resource.MensajePreguntaMonedaContrato, 2, My.Resources.Resource.Si, My.Resources.Resource.No) = 1 Then
                blnCambiarMonedaporContrato = True
                Return True
            Else
                Return False
            End If

        ElseIf strMonedaSN = Trim(p_MonedaConfigurada) Then
            Return True
        End If

    End Function

    Private Sub GenerarFormalizacion(ByVal oForm As Form, ByRef blnResultado As Boolean)

        Dim intEstado As Integer

        Dim decPrecioVehiculo As Decimal
        Dim decAccesorios As Decimal
        Dim decGastosInscripcion As Decimal
        Dim decGastosLocales As Decimal
        Dim decGastosPrenda As Decimal
        Dim decOtrosGastos As String

        Dim strCardCodeClienteFacturar As String
        Dim strItemCodeLocales As String

        Dim strCardCodeClienteVehiculo As String
        Dim strCardNameClienteVehiculo As String
        Dim strCardNameClienteFacturar As String

        Dim strVendedor As String
        Dim strNombreVendedor As String

        Dim intError As Integer = 0

        Dim oCombo As SAPbouiCOM.ComboBox
        Dim oFactura As SAPbobsCOM.Documents
        Dim strFactura As String = String.Empty
        Dim decMontoNotaCredito As Decimal
        Dim decMontoAjusteCosto As Decimal
        Dim strFacturaDocNum As String = String.Empty

        Dim strNumeroContratoVenta As String
        Dim strDocCurrency As String
        Dim intSerieFactura As Integer
        Dim strIDVehiculo As String
        Dim strIDVehiculoUsado As String
        Dim strTipoVehiculo As String
        Dim strCodMarca As String
        Dim strNumUnid As String

        Dim intPeriodoPago As Integer

        Dim strEstadoDisponibilidadNuevo As String
        Dim strEstadoDisponibilidadUsado As String

        Dim strNoNotaCreditoUsado As String = String.Empty

        Dim intAsientoAjuste As Integer
        Dim strCuentaCarroRecibe As String = String.Empty
        Dim strTipo As String = String.Empty
        Dim strAñoVehiculo As String = String.Empty
        Dim strCodUnidadNuevo As String = String.Empty
        Dim strCodUnidadUsado As String = String.Empty
        Dim strDescColor As String = String.Empty
        Dim strDescEstilo As String = String.Empty
        Dim strDescModelo As String = String.Empty
        Dim strKmVenta As String = String.Empty
        Dim decKmVenta As Integer = 0
        Dim strDescMarca As String = String.Empty
        Dim strPlaca As String = String.Empty
        Dim strVIN As String = String.Empty
        Dim strCardName As String = String.Empty
        Dim strPlacaProvisional As String
        Dim strTipoVendido As String
        Dim strDescFactura As String
        Dim strConectionString As String = String.Empty
        Dim oMatriz As SAPbouiCOM.Matrix
        Dim blnDeudaUsadoAsumida As Boolean
        Dim strCuentaAsociadaClienteFacturar As String

        'Agregado 27/01/2011: Variables para facturación de múltiples unidades
        Dim strUnidad As String
        Dim oMatrixUsado As SAPbouiCOM.Matrix

        Dim strImpGasLoc As String
        Dim strImpvehusado As String

        Dim strFechaVenta As String
        Dim dtFechaVenta As Date

        Dim strGenFactAcc As String = String.Empty
        Dim strDetalleAccs As String = String.Empty
        Dim strBodegaAccGeneral As String
        Dim strManejoDescuentoFact As String
        Dim strMultiplesFact As String = String.Empty
        Dim strAlmacenPorTipo As String = String.Empty

        'variables booleanas para la utilizacion de configuraciones Generales del Addon
        'para facturacion de Contratos de venta
        Dim blnGenFactAcc As Boolean = False
        Dim blnManejoDescuentoFact As Boolean = False
        Dim blnMultiplesFact As Boolean = False
        Dim blnUsaTCContrato As Boolean = False

        Dim strBodegaTipoVeh As String = String.Empty
        Dim strSucursal As String = String.Empty
        Dim strCSucu As String = String.Empty

        Dim strIDVehs As String = String.Empty

        Dim strMonedaFactVeh As String
        Dim strMonedaVeh As String

        Dim strMonedaFactVehRec As String

        Dim n As NumberFormatInfo

        Dim ListaEntradasParaCrearAsientos As Generic.IList(Of Integer) = New Generic.List(Of Integer)
        Dim dtUnidadesTotalOtrosCostos As DataTable

        Dim strUsaCompensancionAsEntradaVeh As String = String.Empty
        strComentarioDeudaUsadoFactura = String.Empty

        Dim blnUsaTramitesFacturables As Boolean = False
        Dim blnUsaFacturaExectaVentaVehiculoUsado As Boolean = False


        Try
            Call GenerarCambioProspectoACliente(oForm)

            m_strComentarioUsadoFactura = String.Empty
            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            oMatrixUsado = DirectCast(oForm.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)
            oFactura = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oInvoices), SAPbobsCOM.Documents)

            '---------------------------------------Manejo de indicadores: 09/05/2012------------------------------------------------
            'Obtiene el indicador por default para el tipo de documento: Factura de Cliente
            'Factura de Cliente [Cliente] [Tipo 1]
            Dim strIndicador As String = Utilitarios.DevuelveCodIndicadores(m_SBO_Application, "1")

            oCombo = DirectCast(oForm.Items.Item(mc_strPeriodoCobro).Specific, SAPbouiCOM.ComboBox)
            If oCombo.Selected IsNot Nothing Then
                intPeriodoPago = oCombo.Selected.Value
            Else
                Throw New Exception(My.Resources.Resource.MensajeNoPeriodoPago)
            End If

            oCombo = DirectCast(oForm.Items.Item(mc_strEstado).Specific, SAPbouiCOM.ComboBox)
            intEstado = oCombo.Selected.Value

            'sucursal
            strSucursal = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Sucu", 0)
            strSucursal = strSucursal.Trim
            strCSucu = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CSucu", 0)
            strCSucu = strCSucu.Trim

            If intEstado = m_intEstadoPrefacturacion Then
                strNumeroContratoVenta = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0)
                strDocCurrency = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim
                strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0)
                strUnidad = strUnidad.Trim()
                strIDVehiculo = Utilitarios.EjecutarConsulta("Select Code from [@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                'valido si utiliza Costeo para Accesorios
                blnUtilizaCosteoAccesorios = Utilitarios.EjecutarConsulta("Select U_UsaAxC from dbo.[@SCGD_ADMIN] WITH (nolock)", m_oCompany.CompanyDB, m_oCompany.Server)

                ' Usa Tipo Cambio Contrato
                strUsaTCContrato = oDataTableConfiguracionesDMS.GetValue("U_TCCont", 0)
                strUsaDimensiones = oDataTableConfiguracionesDMS.GetValue("U_UsaDimC", 0)
                'variable para utilizar la compensacion en los asientos contables generados en el contrato de ventas
                strUsaCompensancionAsEntradaVeh = oDataTableConfiguracionesDMS.GetValue("U_ValCompAE", 0)
                strUsaTramitesFacturables = oDataTableConfiguracionesDMS.GetValue("U_UsaTrmFac", 0)
                'Usa Factura Exenta Venta Vehiculo Usado
                strUsaFacturaExectaVentaVehiculoUsado = oDataTableConfiguracionesDMS.GetValue("U_UsaFExVU", 0)
                strUsaDistincionSocioNegocioReciboUsado = oDataTableConfiguracionesDMS.GetValue("U_UsaDSNRU", 0)
                g_strSerieTramite = oDataTableConfiguracionesDMS.GetValue("U_SeTra", 0)
                strUsaFacturaProveedorVehiculoUsado = oDataTableConfiguracionesDMS.GetValue("U_UsaFPVU", 0)

                If Not String.IsNullOrEmpty(strUsaFacturaProveedorVehiculoUsado) Then
                    If strUsaFacturaProveedorVehiculoUsado = "Y" Then
                        blnUsaFacturaProveedoresVehiculoUsado = True
                    Else
                        blnUsaFacturaProveedoresVehiculoUsado = False
                    End If
                End If

                If Not String.IsNullOrEmpty(strUsaCompensancionAsEntradaVeh) Then
                    If strUsaCompensancionAsEntradaVeh = "Y" Then
                        blnUsaCompensacionAsientoEntradaVehiculo = True
                    End If
                End If

                If Not String.IsNullOrEmpty(strUsaDistincionSocioNegocioReciboUsado) Then
                    If strUsaDistincionSocioNegocioReciboUsado = "Y" Then
                        blnUsaDistincionSocioNegocioReciboUsado = True
                    ElseIf strUsaDistincionSocioNegocioReciboUsado = "N" Then
                        blnUsaDistincionSocioNegocioReciboUsado = False
                    End If
                End If

                If strUsaDimensiones = "Y" Then
                    'hago el llamado para cargar la configuracion de los documentos
                    'que usaran Dimensiones
                    ListaConfiguracion = New Hashtable
                    ListaConfiguracion = ClsLineasDocumentosDimension.DatatableConfiguracionDocumentosDimensiones()
                    blnUsaDimensiones = True
                End If

                If CargarTipoCambio(oForm) Then
                    If strIDVehiculo <> "" Then
                        Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, strConectionString)
                        m_tadVehiculo.ClearBeforeFill = True
                        'dmv
                        strTipoVehiculo = Utilitarios.EjecutarConsulta("Select U_Tipo from dbo.[@SCGD_Vehiculo] WITH (nolock) where Code = '" & strIDVehiculo & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        Dim blnBEvento As Boolean
                        objConfiguracionGeneral = Nothing
                        objConfiguracionGeneral = New SCGDataAccess.ConfiguracionesGeneralesAddon(strTipoVehiculo, m_cn_Coneccion, blnBEvento)

                        If m_cnConeccionTransaccion.State <> ConnectionState.Open Then
                            m_cnConeccionTransaccion.ConnectionString = strConectionString
                            m_cnConeccionTransaccion.Open()
                            m_tadVehiculo.Connection = m_cnConeccionTransaccion
                            m_tnTransaccion = m_cnConeccionTransaccion.BeginTransaction
                            m_tadVehiculo.SetTransaction(m_tnTransaccion)
                        Else
                            m_tadVehiculo.Connection = m_cnConeccionTransaccion
                            m_tnTransaccion = m_cnConeccionTransaccion.BeginTransaction
                            m_tadVehiculo.SetTransaction(m_tnTransaccion)
                        End If

                        '*********DOCUMENTADO******
                        'm_tadVehiculo.Fill(m_dtsVehiculo.SCG_VEHICULO, strIDVehiculo, strPlacaUsado, strVINUsado)

                        Dim blDeudaSinProveedor As Boolean = False
                        blnDeudaUsadoAsumida = ValidarAsumeDeudaUsado(oForm, g_strSeparadorMilesSAP, g_strSeparadorDecimalesSAP, blDeudaSinProveedor)

                        If blDeudaSinProveedor Then
                            If m_oCompany.InTransaction() Then
                                m_oCompany.EndTransaction(BoWfTransOpt.wf_RollBack)
                            End If
                            If m_cnConeccionTransaccion.State <> ConnectionState.Closed Then
                                If m_tnTransaccion IsNot Nothing AndAlso m_tnTransaccion.Connection IsNot Nothing Then
                                    m_tnTransaccion.Rollback()
                                End If
                                If m_cnConeccionTransaccion.State <> ConnectionState.Closed Then
                                    m_cnConeccionTransaccion.Close()
                                End If
                            End If

                            'Limpia DataSet de Vehiculos al facturar, para inserción de vehiculo usado
                            m_dtsVehiculo.SCG_VEHICULO.Clear()

                            oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE
                            g_blnEventoCerrarAfecta = False
                            oForm.Close()
                            g_blnEventoCerrarAfecta = True
                            Return
                        End If

                        '***************************************Facturas Exentas de Vehiculos*************************************************

                        If Not String.IsNullOrEmpty(strUsaFacturaExectaVentaVehiculoUsado) Then
                            If strUsaFacturaExectaVentaVehiculoUsado = "Y" Then
                                blnUsaFacturaExectaVentaVehiculoUsado = True
                            Else
                                blnUsaFacturaExectaVentaVehiculoUsado = False
                                'intSerieFactura = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaVentas)
                                'strImpuesto = objConfiguracionGeneral.Impuesto(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaVentas)
                                ''****************************************************************************************
                                ''Le asigno el tipo de Factura con la cual se va a crear el documento dependiendo de la SERIE.

                                ''****************************************************************************************
                                'Call TipoFactura(oFactura, intSerieFactura)
                            End If
                        Else
                            'intSerieFactura = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaVentas)
                            'strImpuesto = objConfiguracionGeneral.Impuesto(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaVentas)
                            ''****************************************************************************************
                            ''Le asigno el tipo de Factura con la cual se va a crear el documento dependiendo de la SERIE.

                            ''****************************************************************************************
                            'Call TipoFactura(oFactura, intSerieFactura)
                        End If

                        '***************************************Facturas Exentas de Vehiculos*************************************************

                        strPlacaProvisional = objConfiguracionGeneral.PlacaProvisional()
                        m_intTipoDocumentoCargoAdicional = objConfiguracionGeneral.TipoDocumentoDeuda

                        decPrecioVehiculo = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0), n)
                        decGastosLocales = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Loc", 0), n)
                        decAccesorios = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Ext_Adi", 0), n)
                        decGastosPrenda = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Pre", 0), n)
                        decGastosInscripcion = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Ins", 0), n)
                        decOtrosGastos = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Otros_L", 0), n)

                        Dim oMatrixAcc As SAPbouiCOM.Matrix
                        oMatrixAcc = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

                        If String.IsNullOrEmpty(strTipoVehiculo) Then
                            Throw New Exception(My.Resources.Resource.VehiculoSinTipo)
                        End If

                        strEstadoDisponibilidadNuevo = objConfiguracionGeneral.DisponibilidadVehiculoVendido
                        strEstadoDisponibilidadUsado = objConfiguracionGeneral.DisponibilidadVehiculoRecibido
                        strTipoVendido = objConfiguracionGeneral.InventarioVehiculoVendido

                        If strEstadoDisponibilidadNuevo <> "" Then
                            strEstadoDisponibilidadNuevo = strEstadoDisponibilidadNuevo.Trim(" ")
                        Else
                            strEstadoDisponibilidadNuevo = 1
                        End If

                        If strEstadoDisponibilidadUsado <> "" Then
                            strEstadoDisponibilidadUsado = strEstadoDisponibilidadUsado.Trim(" ")
                        Else
                            strEstadoDisponibilidadUsado = 1
                        End If

                        strVendedor = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SlpCode", 0).Trim()
                        strNombreVendedor = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SlpName", 0).Trim()
                        strCardCodeClienteFacturar = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0).Trim()
                        strCuentaAsociadaClienteFacturar = Utilitarios.EjecutarConsulta("Select DebPayAcct from OCRD with (nolock) where CardCode = '" & strCardCodeClienteFacturar & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        strCardNameClienteFacturar = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardName", 0).Trim()
                        strCardCodeClienteVehiculo = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CCl_Veh", 0).Trim()
                        strCardNameClienteVehiculo = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_NCl_Veh", 0).Trim()
                        strFechaDocumento = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0).Trim()
                        strGenFactAcc = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GenFaAcc", 0).Trim()
                        strDetalleAccs = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Det_Acc", 0).Trim()
                        strBodegaAccGeneral = oDataTableConfiguracionesDMS.GetValue("U_SCGD_BodAcc", 0)
                        strManejoDescuentoFact = oDataTableConfiguracionesDMS.GetValue("U_Desc_Fac", 0)
                        strMultiplesFact = oDataTableConfiguracionesDMS.GetValue("U_Mul_Fac", 0)

                        If Not String.IsNullOrEmpty(strFechaDocumento) Then

                            Dim Valor As String = String.Empty

                            If Not strDocCurrency = m_strMonedaLocal Then
                                Valor = Utilitarios.EjecutarConsulta("Select Rate from ORTT WITH (nolock) where RateDate = '" & strFechaDocumento & "' and Currency = '" & strDocCurrency & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                            End If

                            If Not String.IsNullOrEmpty(Valor) OrElse strDocCurrency = m_strMonedaLocal Then
                                dtFechaDocumento = Date.ParseExact(strFechaDocumento, "yyyyMMdd", Nothing)
                            Else
                                m_SBO_Application.SetStatusBarMessage(String.Format(My.Resources.Resource.MensajeFechaSinTipoCambio, strDocCurrency), BoMessageTime.bmt_Medium, True)
                                m_cnConeccionTransaccion.Close()
                                Exit Sub
                            End If
                        Else
                            dtFechaDocumento = Date.Now
                        End If

                        If Not RetornarMonedaCuentaAsociada(strCardCodeClienteFacturar, strDocCurrency, strCuentaAsociadaClienteFacturar) Then
                            If m_cnConeccionTransaccion.State <> ConnectionState.Closed Then
                                If m_tnTransaccion IsNot Nothing AndAlso m_tnTransaccion.Connection IsNot Nothing Then
                                    m_tnTransaccion.Rollback()
                                End If
                                If m_cnConeccionTransaccion.State <> ConnectionState.Closed Then
                                    m_cnConeccionTransaccion.Close()
                                End If
                            End If

                            m_dtsVehiculo.SCG_VEHICULO.Clear()
                            m_SBO_Application.SetStatusBarMessage(My.Resources.Resource.MonedaCuentaAsociadaNoCoincide)
                            Exit Sub
                        End If


                        strMonedaSN = Utilitarios.EjecutarConsulta("Select Currency from OCRD WITH (nolock) where CardCode = '" & strCardCodeClienteFacturar & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        'se genera la salida del vehiculo que se vende
                        Dim strGeneraSalida As String = oDataTableConfiguracionesDMS.GetValue("U_GeSalAut", 0)
                        'Dim strGeneraSalida As String = Utilitarios.EjecutarConsulta("Select U_GeSalAut from [@SCGD_ADMIN] where Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)

                        m_oCompany.StartTransaction()
                        If strCardCodeClienteFacturar <> "" Then
                            'se agrega para verificar la moneda del documento 
                            Dim strMonedaConfiguradaFV As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.FacturaVentas).Trim
                            '********Validacion de Moneda del socio de negocio con la moneda que se tienen configurada
                            Dim TipoDocumentoFV As String = "" & My.Resources.Resource.DocumentoFacturaVentas
                            If Not String.IsNullOrEmpty(strMonedaConfiguradaFV) Then
                                If Not RetornarMonedaSN(strMonedaSN, strMonedaConfiguradaFV, TipoDocumentoFV) Then
                                    Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                    Exit Sub
                                Else
                                    If blnCambiarMonedaporContrato Then
                                        strMonedaConfiguradaFV = strDocCurrency
                                        blnCambiarMonedaporContrato = False
                                    End If
                                End If
                            End If

                            oMatriz = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                            '*************************************************************************************
                            'se agrupan los vehiculos en caso de que se vendan Nuevos y Usados en un mismo
                            'contrato de ventas
                            AgruparVehiculos(oMatriz, "N", True)

                            If Not String.IsNullOrEmpty(strGenFactAcc) Then
                                If strGenFactAcc = "Y" Then
                                    blnGenFactAcc = True
                                Else
                                    blnGenFactAcc = False
                                End If
                            End If
                            If Not String.IsNullOrEmpty(strManejoDescuentoFact) Then
                                If strManejoDescuentoFact = "Y" Then
                                    blnManejoDescuentoFact = True
                                Else
                                    blnManejoDescuentoFact = False
                                End If
                            End If
                            If Not String.IsNullOrEmpty(strMultiplesFact) Then
                                If strMultiplesFact = "Y" Then
                                    blnMultiplesFact = True
                                Else
                                    blnMultiplesFact = False
                                End If
                            End If
                            If Not String.IsNullOrEmpty(strUsaTCContrato) Then
                                If strUsaTCContrato = "Y" Then
                                    blnUsaTCContrato = True
                                Else
                                    blnUsaTCContrato = False
                                End If
                            End If

                            intError = CrearEncabezadoFacturaPorTipo(oForm, oFactura, strCardCodeClienteFacturar, strNumeroContratoVenta, strMonedaConfiguradaFV, strDocCurrency, intPeriodoPago, strVendedor, _
                                                 strIndicador, "", "", "", intSerieFactura, "", blnMultiplesFact, blnUsaTCContrato, blnManejoDescuentoFact, blnGenFactAcc, blnUsaFacturaExectaVentaVehiculoUsado)

                            'If (intError = 0) Then
                            '    Dim ActualizaDueno As String

                            '    For y As Integer = 0 To oMatriz.RowCount - 1
                            '        Dim strUnidadValidacion = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", y).Trim()
                            '        ActualizaDueno = "Update [@SCGD_VEHICULO] SET  U_CardCode = '" + strCardCodeClienteVehiculo + "' , U_CardName = '" + strCardNameClienteVehiculo + "' Where  U_Cod_Unid = '" + strUnidadValidacion + "'"
                            '        Utilitarios.EjecutarConsulta(ActualizaDueno, m_oCompany.CompanyDB, m_oCompany.Server)
                            '    Next
                            'End If

                            dtUnidadesTotalOtrosCostos = g_dtUnidadesTotalOtrosCostos

                            strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim

                            If Utilitarios.ValidaExisteDataTable(oForm, "dtConsulta") Then
                                dtConsulta = oForm.DataSources.DataTables.Item("dtConsulta")
                            Else
                                dtConsulta = oForm.DataSources.DataTables.Add("dtConsulta")
                            End If

                            dtConsulta.ExecuteQuery("Select Code, U_Tipo, U_Cod_Marc from [@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & strUnidad & "'")
                            If dtConsulta.Rows.Count > 0 Then
                                strIDVehiculo = dtConsulta.GetValue("Code", 0)
                                strTipoVehiculo = dtConsulta.GetValue("U_Tipo", 0)
                                strCodMarca = dtConsulta.GetValue("U_Cod_Marc", 0)
                            End If

                            strItemCodeLocales = Utilitarios.EjecutarConsulta("Select U_ItemCode from [@SCGD_ADMIN1] WITH (nolock) where U_Tipo = '" & strTipoVehiculo & "' and U_Cod_Item = '2'", m_oCompany.CompanyDB, m_oCompany.Server)
                            strImpGasLoc = Utilitarios.EjecutarConsulta("Select U_Cod_Imp from [@SCGD_ADMIN3] WITH (nolock) where U_Tipo = '" & strTipoVehiculo & "' and U_Cod_Item = '1'", m_oCompany.CompanyDB, m_oCompany.Server)

                            strBodegaTipoVeh = objConfiguracionGeneral.AccesoriosXAlmacen(strTipoVehiculo)

                            Dim m As String = String.Empty

                            If intError <> 0 Then
                                m = m_oCompany.GetLastErrorDescription()
                                Throw New ExceptionsSBO(intError, m)
                            Else

                                Dim udoEntrada As UDOEntradaVehiculo = New UDOEntradaVehiculo(m_oCompany)

                                If Not blnMultiplesFacturas = True OrElse (blnMultiplesFacturas = True AndAlso oMatriz.RowCount = 1) Then
                                    strFactura = strNFactura
                                    oForm.Items.Item("txtNofac").Specific.string = strFactura
                                End If

                                oCombo.Select(CStr(m_intEstadoSuperior))
                                Dim UDOVehiculo As UDOVehiculos = Nothing

                                If oMatriz.RowCount > 1 Then
                                    strIDVehiculo = ""
                                End If

                                '09/05/2012 - Diego Herrera: Generación de Factura de Accesorios
                                If decAccesorios > 0 AndAlso strGenFactAcc = "Y" Then
                                    Dim strComentarioAccs As String = My.Resources.Resource.ContratoCorrespondiente & strNumeroContratoVenta
                                    Dim strMonedaConfiguradaFactAccesorios As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.FacturaAccesorios).Trim
                                    Dim TipoDocumentoFactAccesorios As String = "" & My.Resources.Resource.DocumentoFactAccesorios

                                    If Not String.IsNullOrEmpty(strMonedaConfiguradaFactAccesorios) Then
                                        If Not RetornarMonedaSN(strMonedaSN, strMonedaConfiguradaFactAccesorios, TipoDocumentoFactAccesorios) Then
                                            Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                            Exit Sub
                                        Else
                                            If blnCambiarMonedaporContrato Then
                                                strMonedaConfiguradaFactAccesorios = strDocCurrency
                                                blnCambiarMonedaporContrato = False
                                            End If
                                        End If
                                    End If

                                    Call GenerarFacturaAccesorios(strCardCodeClienteFacturar, strComentarioAccs, strMonedaConfiguradaFactAccesorios, intPeriodoPago, strVendedor, strDetalleAccs, strItemCodeLocales, strDocCurrency, strBodegaAccGeneral, strManejoDescuentoFact, strBodegaTipoVeh, strTipoVehiculo, strCodMarca)

                                End If

                                '20/06/2012 - Diego Herrera: Generación de Factura de Gastos Adcionales

                                If decOtrosGastos > 0 AndAlso strMultiplesFact = "Y" Then
                                    Dim strComentarioGA As String = My.Resources.Resource.ContratoCorrespondiente & strNumeroContratoVenta
                                    Dim strMonedaConfiguradaFactGastos As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.FacturaGastosAdicionales).Trim
                                    Dim TipoDocumentoFactGastos As String = "" & My.Resources.Resource.DocumentoFactGastos

                                    If Not String.IsNullOrEmpty(strMonedaConfiguradaFactGastos) Then
                                        If Not RetornarMonedaSN(strMonedaSN, strMonedaConfiguradaFactGastos, TipoDocumentoFactGastos) Then
                                            Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                            Exit Sub
                                        Else
                                            If blnCambiarMonedaporContrato Then
                                                strMonedaConfiguradaFactGastos = strDocCurrency
                                                blnCambiarMonedaporContrato = False
                                            End If
                                        End If
                                    End If

                                    Call GenerarFacturaGastos(strCardCodeClienteFacturar, strComentarioGA, strMonedaConfiguradaFactGastos, intPeriodoPago, strVendedor, strDocCurrency)

                                End If

                                '26/07/2012 - Diego Herrera: Generación de Asiento de Monto de Financiamiento Externo

                                Dim strFinancExterno As String
                                Dim strMontoFinanc As String
                                Dim decMontoFinanc As Decimal = 0
                                Dim strBanco As String
                                Dim strCuentaBanco As String
                                Dim strAsientoFinExt As String = String.Empty
                                Dim strCodigoBanco As String

                                strFinancExterno = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinE", 0)
                                strFinancExterno = strFinancExterno.Trim()
                                strMontoFinanc = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinanciaE", 0)
                                strMontoFinanc = strMontoFinanc.Trim()
                                If Not String.IsNullOrEmpty(strMontoFinanc) Then
                                    decMontoFinanc = Decimal.Parse(strMontoFinanc, n)
                                End If

                                If strFinancExterno = "Y" AndAlso decMontoFinanc > 0 AndAlso oDataTableConfiguracionesDMS.GetValue("U_Usa_FiEx", 0) = "Y" Then
                                    Dim strComentarioFinExterno As String = My.Resources.Resource.ComentarioFinExterno & strNumeroContratoVenta
                                    Dim strMonedaConfiguradaAsientoFinExterno As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoFinancExterno).Trim
                                    Dim TipoDocumentoAsientoFinExterno As String = "" & My.Resources.Resource.DocumentoAsientoFinancExterno

                                    If Not String.IsNullOrEmpty(strMonedaConfiguradaAsientoFinExterno) Then
                                        If Not RetornarMonedaSN(strMonedaSN, strMonedaConfiguradaAsientoFinExterno, TipoDocumentoAsientoFinExterno) Then
                                            Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                            Exit Sub
                                        Else
                                            If blnCambiarMonedaporContrato Then
                                                strMonedaConfiguradaAsientoFinExterno = strDocCurrency
                                                blnCambiarMonedaporContrato = False
                                            End If
                                        End If
                                    End If

                                    Dim strRef1 As String = My.Resources.Resource.Cont & strNumeroContratoVenta

                                    strBanco = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_EntFinE", 0)
                                    strBanco = strBanco.Trim()
                                    strCodigoBanco = Utilitarios.EjecutarConsulta("Select BankCode from dbo.[ODSC] WITH (nolock) where BankName = '" & strBanco & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                    strCuentaBanco = Utilitarios.EjecutarConsulta("Select U_Cuenta from dbo.[@SCGD_BANCO_CTA] WITH (nolock) where Name = '" & strCodigoBanco & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                                    Call GenerarAsiento(strComentarioFinExterno, strMonedaConfiguradaAsientoFinExterno, strDocCurrency, decMontoFinanc, strRef1, strCardCodeClienteFacturar, strCuentaBanco, strAsientoFinExt, strUnidad, strNumeroContratoVenta)

                                    If Not String.IsNullOrEmpty(strAsientoFinExt) Then
                                        oForm.Items.Item("txtAsFinEx").Specific.String = strAsientoFinExt
                                    End If

                                End If

                                Dim strTotalTramites As String
                                Dim decTotalTramites As Decimal = 0
                                Dim decTotalTramitesCostos As Decimal = 0

                                'Usa Trámites Facturables - Crea una Factura de Cliente con los items seleccionados como facturables
                                If Not String.IsNullOrEmpty(strUsaTramitesFacturables) Then

                                    If strUsaTramitesFacturables = "Y" Then
                                        Dim oMatrixTramite As SAPbouiCOM.Matrix
                                        Dim strPrecioTramiteFac As String
                                        Dim decPrecioTramFac As Decimal = 0
                                        oMatrixTramite = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

                                        'recorro el datasource para tomar los Costos de los trámites que son facturables y cambio el monto total para la generacion del asiento

                                        For i As Integer = 0 To oMatrixTramite.RowCount - 1
                                            If oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_SCGD_Fct", i).Trim() = "Y" Then
                                                strPrecioTramiteFac = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Costo", i).Trim
                                                If Not String.IsNullOrEmpty(strPrecioTramiteFac) Then
                                                    decPrecioTramFac = decPrecioTramFac + Decimal.Parse(strPrecioTramiteFac, n)
                                                End If
                                            End If
                                        Next

                                        decTotalTramitesCostos = decPrecioTramFac
                                        blnUsaTramitesFacturables = True

                                    End If
                                End If

                                'strTotalTramites = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tot_Tram", 0)
                                'strTotalTramites = strTotalTramites.Trim()
                                'If Not String.IsNullOrEmpty(strTotalTramites) Then
                                '    decTotalTramites = Decimal.Parse(strTotalTramites, n)
                                'End If
                                decTotalTramites = 0
                                For index As Integer = 0 To oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").Size - 1
                                    strTotalTramites = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Pre_Uni", index).Trim()
                                    If Not String.IsNullOrEmpty(strTotalTramites) Then
                                        decTotalTramites += Decimal.Parse(strTotalTramites, n)
                                    End If
                                Next

                                If decTotalTramites > 0 OrElse decTotalTramitesCostos > 0 Then
                                    Dim strMonedaConfiguradaAsientoTramite As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoTramites).Trim
                                    Dim TipoDocumentoAsientoTramites As String = "" & My.Resources.Resource.DocumentoAsientoTramite

                                    If Not String.IsNullOrEmpty(strMonedaConfiguradaAsientoTramite) Then
                                        If Not RetornarMonedaSN(strMonedaSN, strMonedaConfiguradaAsientoTramite, TipoDocumentoAsientoTramites) Then
                                            Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                            Exit Sub
                                        Else
                                            If blnCambiarMonedaporContrato Then
                                                strMonedaConfiguradaAsientoTramite = strDocCurrency
                                                blnCambiarMonedaporContrato = False
                                            End If
                                        End If
                                    End If

                                    If blnUsaTramitesFacturables Then
                                        Dim oMatrixTram As SAPbouiCOM.Matrix
                                        Dim strPrecioTram As String = String.Empty
                                        Dim decPrecioTram As Decimal = 0
                                        Dim strPrecioTramiteFac As String = String.Empty
                                        Dim decPrecioTramFac As Decimal = 0

                                        GenerarFacturaClienteTramites(strMonedaConfiguradaAsientoTramite, strDocCurrency, strCardCodeClienteFacturar, strNumeroContratoVenta, oForm, intPeriodoPago, oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0))
                                        oMatrixTram = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)
                                        'recorro el datasource para tomar los precios de los trámites que no son facturables y cambio el monto total para la generacion del asiento
                                        decPrecioTram = 0

                                        For i As Integer = 0 To oMatrixTram.RowCount - 1
                                            If String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_SCGD_Fct", i).Trim()) Then
                                                oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_SCGD_Fct", i, "N")
                                            End If
                                            If oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_SCGD_Fct", i).Trim() = "N" Then
                                                strPrecioTram = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Pre_Uni", i).Trim
                                                If Not String.IsNullOrEmpty(strPrecioTram) Then
                                                    decPrecioTram = decPrecioTram + Decimal.Parse(strPrecioTram, n)
                                                End If
                                            Else
                                                strPrecioTramiteFac = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Costo", i).Trim
                                                If Not String.IsNullOrEmpty(strPrecioTramiteFac) Then
                                                    decPrecioTramFac = decPrecioTramFac + Decimal.Parse(strPrecioTramiteFac, n)
                                                End If
                                            End If
                                        Next

                                        decTotalTramites = decPrecioTram

                                        If blnCreoDocumentosTramitesFacturables AndAlso decPrecioTramFac <> 0 Then
                                            GenerarAsientoTramitesFacturables(strMonedaConfiguradaAsientoTramite, strDocCurrency, decPrecioTramFac, strCardCodeClienteFacturar, strNumeroContratoVenta, oForm, strUnidad, blnUsaCompensacionAsientoEntradaVehiculo, oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), blnUsaTramitesFacturables)
                                        End If

                                    End If

                                    If Not String.IsNullOrEmpty(strUsaTCContrato) Then
                                        If strUsaTCContrato.Trim() = "Y" Then
                                            Call GenerarAsientoTramites_NUEVO(strMonedaConfiguradaAsientoTramite, strDocCurrency, decTotalTramites, strCardCodeClienteFacturar, strNumeroContratoVenta, oForm, strUnidad, blnUsaCompensacionAsientoEntradaVehiculo, oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), blnUsaTramitesFacturables)
                                        Else
                                            Call GenerarAsientoTramites_NUEVO(strMonedaConfiguradaAsientoTramite, strDocCurrency, decTotalTramites, strCardCodeClienteFacturar, strNumeroContratoVenta, oForm, strUnidad, Nothing, oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0), blnUsaTramitesFacturables)
                                        End If
                                    Else
                                        Call GenerarAsientoTramites_NUEVO(strMonedaConfiguradaAsientoTramite, strDocCurrency, decTotalTramites, strCardCodeClienteFacturar, strNumeroContratoVenta, oForm, strUnidad, Nothing, oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0), blnUsaTramitesFacturables)
                                    End If
                                End If

                                '********************************************************************************************************

                                'se agrega para verificar la moneda del documento 
                                Dim strMonedaConfiguradaNCDescuento As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.NotasCreditoDescuento).Trim
                                '********Validacion de Moneda del socio de negocio con la moneda que se tienen configurada
                                Dim TipoDocumentoNCDescuento As String = "" & My.Resources.Resource.DocumentoNotasCreditoDescuento
                                If Not String.IsNullOrEmpty(strMonedaConfiguradaNCDescuento) Then
                                    If Not RetornarMonedaSN(strMonedaSN, strMonedaConfiguradaNCDescuento, TipoDocumentoNCDescuento) Then
                                        Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                        Exit Sub
                                    Else
                                        If blnCambiarMonedaporContrato Then
                                            strMonedaConfiguradaNCDescuento = strDocCurrency
                                            blnCambiarMonedaporContrato = False
                                        End If
                                    End If
                                End If
                                '*******************************************************************************************

                                If Not strManejoDescuentoFact = "Y" Then
                                    Call GenerarNotaCreditoDescuento(strFactura, strCardCodeClienteFacturar, strIDVehiculo, strNumeroContratoVenta, strDocCurrency, strTipoVehiculo, strMonedaConfiguradaNCDescuento)
                                End If

                                'se agrega para verificar la moneda del documento 
                                Dim strMonedaConfiguradaPrima As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.PrimaVenta).Trim
                                '********Validacion de Moneda del socio de negocio con la moneda que se tienen configurada
                                Dim TipoDocumentoNCPrima As String = "" & My.Resources.Resource.DocumentoNotaCreditoPrima
                                If Not String.IsNullOrEmpty(strMonedaConfiguradaPrima) Then
                                    If Not RetornarMonedaSN(strMonedaSN, strMonedaConfiguradaPrima, TipoDocumentoNCPrima) Then
                                        Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                        Exit Sub
                                    Else
                                        If blnCambiarMonedaporContrato Then
                                            strMonedaConfiguradaPrima = strDocCurrency
                                            blnCambiarMonedaporContrato = False
                                        End If
                                    End If
                                End If

                                Dim strMontoPrima As String
                                Dim decMontoPrima As Decimal = 0

                                strMontoPrima = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deposito", 0).Trim
                                If Not String.IsNullOrEmpty(strMontoPrima) Then
                                    decMontoPrima = Decimal.Parse(strMontoPrima, n)
                                End If

                                If decMontoPrima > 0 Then
                                    Dim strGereneraPagoPrima As String = oDataTableConfiguracionesDMS.GetValue("U_Pag_Prim", 0).trim
                                    If (String.Equals(strGereneraPagoPrima, "Y")) Then
                                        Call GenerarPagoPrima(strCardCodeClienteFacturar, decMontoPrima, strDocCurrency, strMonedaConfiguradaPrima, strIDVehiculo)
                                    End If
                                End If

                                'se agrega para verificar la moneda del documento 
                                Dim strMonedaConfiguradaNDebito As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.NotaDebito).Trim
                                '********Validacion de Moneda del socio de negocio con la moneda que se tienen configurada
                                Dim TipoDocumentoNDebito As String = "" & My.Resources.Resource.DocumentoNotaDebito
                                If Not String.IsNullOrEmpty(strMonedaConfiguradaNDebito) Then
                                    If Not RetornarMonedaSN(strMonedaSN, strMonedaConfiguradaNDebito, TipoDocumentoNDebito) Then
                                        Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                        Exit Sub
                                    Else
                                        If blnCambiarMonedaporContrato Then
                                            strMonedaConfiguradaNDebito = strDocCurrency
                                            blnCambiarMonedaporContrato = False
                                        End If
                                    End If
                                End If
                                '*******************************************************************************************
                                Call GenerarNotaDebito(strFactura, strCardCodeClienteFacturar, strIDVehiculo, strNumeroContratoVenta, strDocCurrency, strTipoVehiculo, intPeriodoPago, strMonedaConfiguradaNDebito)

                                Dim blnNotaCredUsado As Boolean = False
                                Dim strTotalBonos As String
                                Dim decTotalBonos As Decimal = 0

                                strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim
                                strTotalBonos = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_BonoDV", 0).Trim

                                If Not String.IsNullOrEmpty(strTotalBonos) Then
                                    decTotalBonos = Decimal.Parse(strTotalBonos, n)
                                End If

                                If decTotalBonos > 0 Then
                                    Dim strMonedaConfiguradaAsientoBonos As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoBonos).Trim
                                    Dim TipoDocumentoAsientoBonos As String = "" & My.Resources.Resource.DocumentoAsientoBonos

                                    If Not String.IsNullOrEmpty(strMonedaConfiguradaAsientoBonos) Then
                                        If Not RetornarMonedaSN(strMonedaSN, strMonedaConfiguradaAsientoBonos, TipoDocumentoAsientoBonos) Then
                                            Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                            Exit Sub
                                        Else
                                            If blnCambiarMonedaporContrato Then
                                                strMonedaConfiguradaAsientoBonos = strDocCurrency
                                                blnCambiarMonedaporContrato = False
                                            End If
                                        End If
                                    End If

                                    Dim oLista_LAB As New List(Of LineaAsientoBono)
                                    Dim strUnidadBono As String
                                    Dim strTipoBono As String
                                    Dim strMontoDebe As String
                                    Dim strMontoHaber As String
                                    Dim dcMontoDebe As Decimal
                                    Dim dcMontoHaber As Decimal
                                    Dim strConsultaDescBono As String = "select Code from [@SCGD_TIPOBONO] WITH (nolock) where U_CobraBo = 'N' or U_CobraBo is null"
                                    Dim strBonoConfig As String
                                    Dim blBonoValido As Boolean

                                    dtBonosNoCobra = oForm.DataSources.DataTables.Item("dtNoCobBon")
                                    dtBonosNoCobra.ExecuteQuery(strConsultaDescBono)
                                    For L As Integer = 0 To oForm.DataSources.DBDataSources.Item("@SCGD_BONOXCONT").Size - 1
                                        blBonoValido = True
                                        strUnidadBono = oForm.DataSources.DBDataSources.Item("@SCGD_BONOXCONT").GetValue("U_Unidad", L).Trim
                                        strTipoBono = oForm.DataSources.DBDataSources.Item("@SCGD_BONOXCONT").GetValue("U_Bono", L).Trim

                                        For y As Integer = 0 To dtBonosNoCobra.Rows.Count - 1
                                            strBonoConfig = dtBonosNoCobra.GetValue("Code", y).ToString
                                            If strTipoBono = strBonoConfig Then
                                                blBonoValido = False
                                                Exit For
                                            End If
                                        Next

                                        If blBonoValido Then
                                            strMontoDebe = oForm.DataSources.DBDataSources.Item("@SCGD_BONOXCONT").GetValue("U_Monto", L)
                                            dcMontoDebe = Decimal.Parse(strMontoDebe, n)
                                            strMontoHaber = strMontoDebe
                                            dcMontoHaber = Decimal.Parse(strMontoHaber, n)

                                            If (dcMontoDebe > 0 AndAlso dcMontoHaber > 0) Then
                                                If Not ExisteBonoEnLista(strUnidadBono, strTipoBono, oLista_LAB, dcMontoDebe, dcMontoHaber) Then
                                                    Dim oLineaAsientoBonoNueva As LineaAsientoBono
                                                    With oLineaAsientoBonoNueva
                                                        .Unidad = strUnidadBono
                                                        .TipoBono = strTipoBono
                                                        .CtaDebe = ObtieneCuentaPorTipoBono(strTipoBono, True)
                                                        .CtaHaber = ObtieneCuentaPorTipoBono(strTipoBono, False)
                                                        .MontoDebe = dcMontoDebe
                                                        .MontoHaber = dcMontoHaber
                                                        .Comentarios = String.Format("{0} {1} {2} {3} {4}", My.Resources.Resource.DescNumContrato, strNumeroContratoVenta, My.Resources.Resource.DescUnidad, strUnidadBono, ObtieneComentarioPorTipoBono(strTipoBono, strUnidadBono))
                                                    End With
                                                    oLista_LAB.Add(oLineaAsientoBonoNueva)
                                                End If
                                            End If

                                        End If
                                    Next

                                    If oLista_LAB.Count > 0 Then
                                        If Not String.IsNullOrEmpty(strUsaTCContrato) Then
                                            If strUsaTCContrato.Trim() = "Y" Then
                                                Call GenerarAsientoBonos(strMonedaConfiguradaAsientoBonos, strDocCurrency, strNumeroContratoVenta, oLista_LAB, strUnidad, blnUsaCompensacionAsientoEntradaVehiculo, oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0))
                                            Else
                                                Call GenerarAsientoBonos(strMonedaConfiguradaAsientoBonos, strDocCurrency, strNumeroContratoVenta, oLista_LAB, strUnidad, oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0))
                                            End If
                                        Else
                                            Call GenerarAsientoBonos(strMonedaConfiguradaAsientoBonos, strDocCurrency, strNumeroContratoVenta, oLista_LAB, strUnidad, oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0))
                                        End If
                                    End If
                                End If

                                Dim strTotalOtrosCostos As String
                                Dim decTotalOtrosCostos As Decimal = 0

                                strTotalOtrosCostos = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_OtrCos", 0)
                                strTotalOtrosCostos = strTotalOtrosCostos.Trim()
                                If Not String.IsNullOrEmpty(strTotalOtrosCostos) Then
                                    decTotalOtrosCostos = Decimal.Parse(strTotalOtrosCostos, n)
                                End If

                                If decTotalOtrosCostos > 0 Then
                                    Dim strMonedaConfiguradaAsientoOtrosCostos As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoOtrosCostos).Trim
                                    Dim TipoDocumentoAsientoOtrosCostos As String = "" & My.Resources.Resource.DocumentoAsientoTramite

                                    If Not String.IsNullOrEmpty(strMonedaConfiguradaAsientoOtrosCostos) Then
                                        If Not RetornarMonedaSN(strMonedaSN, strMonedaConfiguradaAsientoOtrosCostos, TipoDocumentoAsientoOtrosCostos) Then
                                            Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                            Exit Sub
                                        Else
                                            If blnCambiarMonedaporContrato Then
                                                strMonedaConfiguradaAsientoOtrosCostos = strDocCurrency
                                                blnCambiarMonedaporContrato = False
                                            End If
                                        End If
                                    End If

                                    If Not String.IsNullOrEmpty(strUsaTCContrato) Then
                                        If strUsaTCContrato.Trim() = "Y" Then
                                            Call GenerarAsientoOtrosCostos(strMonedaConfiguradaAsientoOtrosCostos, strDocCurrency, strNumeroContratoVenta, oForm, dtUnidadesTotalOtrosCostos, blnUsaCompensacionAsientoEntradaVehiculo, oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0))
                                        Else
                                            Call GenerarAsientoOtrosCostos(strMonedaConfiguradaAsientoOtrosCostos, strDocCurrency, strNumeroContratoVenta, oForm, dtUnidadesTotalOtrosCostos, blnUsaCompensacionAsientoEntradaVehiculo, oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0))
                                        End If
                                    Else
                                        Call GenerarAsientoOtrosCostos(strMonedaConfiguradaAsientoOtrosCostos, strDocCurrency, strNumeroContratoVenta, oForm, dtUnidadesTotalOtrosCostos, blnUsaCompensacionAsientoEntradaVehiculo, oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0))
                                    End If
                                End If

                                Dim strMoNFinanciera As String
                                Dim decMoNFinanciera As Decimal = 0
                                Dim strMoNAseguradora As String
                                Dim decMoNAseguradora As Decimal = 0

                                strMoNFinanciera = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MoNFi", 0)
                                strMoNFinanciera = strMoNFinanciera.Trim()
                                If Not String.IsNullOrEmpty(strMoNFinanciera) Then
                                    decMoNFinanciera = Decimal.Parse(strMoNFinanciera, n)
                                End If
                                strMoNAseguradora = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MoNAs", 0)
                                strMoNAseguradora = strMoNAseguradora.Trim()
                                If Not String.IsNullOrEmpty(strMoNAseguradora) Then
                                    decMoNAseguradora = Decimal.Parse(strMoNAseguradora, n)
                                End If

                                'Valida si usa comisiones en los Contratos de Venta
                                Dim strUsaComisionesCV As String = Utilitarios.EjecutarConsulta("Select U_UsaComi from dbo.[@SCGD_ADMIN] WITH (nolock) where Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)

                                If strUsaComisionesCV = "Y" Then
                                    If decMoNAseguradora > 0 Or decMoNFinanciera > 0 Then
                                        Call GenerarAsientoComisiones(strDocCurrency, strNumeroContratoVenta, decMoNAseguradora, decMoNFinanciera, strUnidad)
                                    End If
                                End If

                                Dim lsValidacionUsados As New List(Of ValidacionUsados)
                                Dim objValidacionUsados As ValidacionUsados
                                Dim strCreaUnidad As String = oDataTableConfiguracionesDMS.GetValue("U_NewDMUCV", 0)
                                If String.IsNullOrEmpty(strCreaUnidad) Then strCreaUnidad = "N"
                                For x As Integer = 0 To oMatrixUsado.RowCount - 1
                                    Dim strUnidadValidacion = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", x).Trim()
                                    Dim strVINValidacion = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_VIN", x).Trim()
                                    Dim strPlacaValidacion = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Placa", x).Trim()

                                    If strCreaUnidad = "N" And BuscarVehiculo(strPlacaValidacion, strVINValidacion, strUnidadValidacion, strIDVehiculo) Then
                                        objValidacionUsados.intPosicion = x
                                        objValidacionUsados.Existe = True
                                        objValidacionUsados.IdVehiculo = strIDVehiculo
                                    Else
                                        objValidacionUsados.intPosicion = x
                                        objValidacionUsados.Existe = False
                                        objValidacionUsados.IdVehiculo = Nothing
                                    End If
                                    lsValidacionUsados.Add(objValidacionUsados)
                                Next

                                Dim lsValidacionNuevos As New List(Of ValidacionNuevos)
                                Dim objValidacionNuevos As ValidacionNuevos

                                For x As Integer = 0 To oMatriz.RowCount - 1
                                    Dim strUnidadValidacion = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", x).Trim()
                                    Dim strTipoInventario As String
                                    If BuscarVehiculo(String.Empty, String.Empty, strUnidadValidacion, strIDVehiculo) Then
                                        objValidacionNuevos.intPosicion = x
                                        objValidacionNuevos.IdVehiculo = strIDVehiculo
                                        objValidacionNuevos.NumUnid = strUnidadValidacion
                                        strTipoInventario = Utilitarios.EjecutarConsulta("Select U_Tipo from dbo.[@SCGD_Vehiculo] WITH (nolock) where Code = '" & strIDVehiculo & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                        objValidacionNuevos.TipoVenta = strTipoInventario
                                    End If
                                    lsValidacionNuevos.Add(objValidacionNuevos)
                                Next

                                Dim m_intSerie As Integer = Integer.Parse(Utilitarios.EjecutarConsulta(" SELECT DfltSeries FROM ONNM WITH (nolock) WHERE (ObjectCode = 'SCGD_GOODENT') ", m_oCompany.CompanyDB, m_oCompany.Server))
                                Dim m_intDocEntry As Integer = Integer.Parse(Utilitarios.EjecutarConsulta(" SELECT AutoKey FROM ONNM WITH (nolock) WHERE (ObjectCode = 'SCGD_GOODENT') ", m_oCompany.CompanyDB, m_oCompany.Server))
                                'Dim strONNMIDVehiculo As String = Utilitarios.EjecutarConsulta(" SELECT AutoKey FROM ONNM WITH (nolock) WHERE (ObjectCode = 'SCGD_VEH') ", m_oCompany.CompanyDB, m_oCompany.Server)
                                'Cambio en el manejo de la numeración para la versión 9.2
                                Dim strONNMIDVehiculo As String = Utilitarios.EjecutarConsulta(DMS_Connector.Queries.GetStrSpecificQuery("strAutoKeyVEH"))
                                Dim blnActualizaMatrizVehiculosUsados As Boolean = False

                                oListaDocumentosFacturaProveedorUsados = New List(Of ListaDocumentosFacturaVehiculosUsados)()

                                For i As Integer = 0 To oMatrixUsado.RowCount - 1
                                    Dim strUnidadUsado As String = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", i)
                                    strUnidadUsado = strUnidadUsado.Trim()

                                    If Not String.IsNullOrEmpty(strUnidadUsado) Then
                                        'moneda configurada para Nota de Credito del usado
                                        Dim strMonedaConfiguradaNC As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.NotasCreditoUsados).Trim
                                        m_strComentarioUsadoFactura = String.Empty

                                        If oMatrixUsado.RowCount > 1 Then
                                            m_strComentarioUsadoFactura = My.Resources.Resource.MultiplesUsados
                                            strCodUnidadUsado = ""
                                        Else
                                            m_strComentarioUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", 0).ToString().Trim()
                                            m_strComentarioUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Marca", 0).ToString().Trim()
                                            m_strComentarioUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Estilo", 0).ToString().Trim()
                                            m_strComentarioUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_MoUs", 0).ToString().Trim()
                                            m_strComentarioUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Anio", 0).ToString().Trim()
                                            m_strComentarioUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Color", 0).ToString().Trim()
                                            m_strComentarioUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_VIN", 0).ToString().Trim()
                                            m_strComentarioUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Placa", 0).ToString().Trim()
                                            strComentarioDeudaUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", 0).ToString().Trim()
                                            strComentarioDeudaUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Marca", 0).ToString().Trim()
                                            strComentarioDeudaUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Estilo", 0).ToString().Trim()
                                            strComentarioDeudaUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Anio", 0).ToString().Trim()
                                            strComentarioDeudaUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Color", 0).ToString().Trim()
                                            strComentarioDeudaUsadoFactura += " " + oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Placa", 0).ToString().Trim()
                                        End If

                                        '********Validacion de Moneda del socio de negocio con la moneda que se tienen configurada
                                        Dim TipoDocumentoNCU As String = "" & My.Resources.Resource.DocumentoNotasCreditoUsados
                                        If Not String.IsNullOrEmpty(strMonedaConfiguradaNC) Then
                                            If Not RetornarMonedaSN(strMonedaSN, strMonedaConfiguradaNC, TipoDocumentoNCU) Then
                                                Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                                Exit Sub
                                            Else
                                                If blnCambiarMonedaporContrato Then
                                                    strMonedaConfiguradaNC = strDocCurrency
                                                    blnCambiarMonedaporContrato = False
                                                End If
                                            End If
                                            '*******************************************************************************************
                                        Else
                                            strMonedaConfiguradaNC = strDocCurrency
                                        End If

                                        If Not blnNotaCredUsado Then
                                            'para comentario Deuda Asumida
                                            strComentarioNumeroContratoVenta = strNumeroContratoVenta
                                            If Not oDataTableConfiguracionesDMS.GetValue("U_UsaFPVU", 0).ToString.Trim = "Y" Then
                                                'Call GenerarNotaCreditoUsado(strFactura, strCardCodeClienteFacturar, strIDVehiculoUsado, strNumeroContratoVenta, strDocCurrency, strNoNotaCreditoUsado, m_strComentarioUsadoFactura, strCodUnidadUsado, decMontoNotaCredito, blnNotaCredUsado, oMatrixUsado, strMonedaConfiguradaNC, blnUsaDistincionSocioNegocioReciboUsado)
                                                Call GenerarDocumentoParaVehiculosUsados(strFactura, strCardCodeClienteFacturar, strIDVehiculoUsado, strNumeroContratoVenta, strDocCurrency, strNoNotaCreditoUsado, m_strComentarioUsadoFactura, strCodUnidadUsado, decMontoNotaCredito, blnNotaCredUsado, oMatrixUsado, TipoDocumentoVehiculoUsado.NotaCredito, strMonedaConfiguradaNC, blnUsaDistincionSocioNegocioReciboUsado)
                                            Else
                                                'Genero la factura de proveedor para vehiculos usados
                                                strNumeroFacturaProveedorVU = String.Empty
                                                strNumeroAsientoAdicionalVU = String.Empty

                                                Dim strCodigoUnidad As String = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", i).Trim()
                                                Dim strCardCodeProveedor As String = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Prov", i).Trim()
                                                Call GenerarDocumentoParaVehiculosUsados(strFactura, strCardCodeClienteFacturar, strIDVehiculoUsado, strNumeroContratoVenta, strDocCurrency, strNoNotaCreditoUsado, m_strComentarioUsadoFactura, strCodigoUnidad, decMontoNotaCredito, blnNotaCredUsado, oMatrixUsado, TipoDocumentoVehiculoUsado.FacturaProveedor, strMonedaConfiguradaNC, blnUsaDistincionSocioNegocioReciboUsado)
                                                Call GeneraAsientoAdicionalFacturaProveedorVU(strCardCodeClienteFacturar, strCardCodeProveedor, "", strDocCurrency, strNumeroContratoVenta, decMontoNotaCredito, strCodigoUnidad, False, dtFechaDocumento)

                                                If oMatrixUsado.RowCount = 1 Then
                                                    oForm.Items.Item("txtAsFPU").Specific.String = strNumeroAsientoAdicionalVU
                                                ElseIf oMatrixUsado.RowCount > 1 Then
                                                    oForm.Items.Item("txtAsFPU").Specific.String = "Multiples As. Veh. Usados"
                                                End If

                                                oListaDocumentosFacturaProveedorUsados.Add(New ListaDocumentosFacturaVehiculosUsados() With {.CodigoUnidad = strCodigoUnidad,
                                                                                                                                             .FacturaProveedor = strNumeroFacturaProveedorVU,
                                                                                                                                             .Asiento = strNumeroAsientoAdicionalVU,
                                                                                                                                             .Fila = i})
                                                blnActualizaMatrizVehiculosUsados = True
                                            End If

                                            If blnDeudaUsadoAsumida Then
                                                ''moneda configurada para Factura de Deuda del usado
                                                Dim strMonedaConfiguradaFP As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.FacturaDeudaUsado).Trim
                                                'esta parte esta en prueba, no descomentar
                                                '*******************************************************************************************************
                                                Dim strProveedor As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_Acre", 0).Trim
                                                Dim strMonedaDeudorUsado As String = Utilitarios.EjecutarConsulta("Select Currency from [OCRD] WITH (nolock) where CardCode='" & strProveedor & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                                                If Not String.IsNullOrEmpty(strMonedaConfiguradaFP) Then
                                                    If strMonedaDeudorUsado <> strMonedaConfiguradaFP Then
                                                        If strMonedaDeudorUsado <> "##" Then
                                                            If m_SBO_Application.MessageBox(String.Format(My.Resources.Resource.MensajeMonedaConfiguradaparaFacturaDeudaAsumida, strMonedaConfiguradaFP, strMonedaDeudorUsado), 1, "Si", "No") = 1 Then
                                                                strMonedaConfiguradaFP = strMonedaDeudorUsado
                                                            Else
                                                                Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                                                Exit Sub
                                                            End If
                                                        End If
                                                    End If
                                                End If

                                                '*********************************************************************************************************
                                                ''********Validacion de Moneda del socio de negocio con la moneda que se tienen configurada
                                                Dim TipoDocumentoFP As String = "" & My.Resources.Resource.DocumentoFacturaDeudaUsado
                                                If Not String.IsNullOrEmpty(strMonedaConfiguradaFP) Then
                                                    If Not RetornarMonedaSN(strMonedaSN, strMonedaConfiguradaFP, TipoDocumentoFP) Then
                                                        Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                                        Exit Sub
                                                    Else
                                                        If blnCambiarMonedaporContrato Then
                                                            strMonedaConfiguradaFP = strDocCurrency
                                                            blnCambiarMonedaporContrato = False
                                                        End If
                                                    End If
                                                End If
                                                '*******************************************************************************************
                                                Call GenerarFacturarProveedor(strFactura, strIDVehiculoUsado, strNumeroContratoVenta, strDocCurrency, strTipoVehiculo, strCardCodeClienteFacturar, oMatrixUsado, strComentarioDeudaUsadoFactura, strMonedaConfiguradaFP, intPeriodoPago) 'm_strComentarioUsadoFactura
                                            End If
                                            Call GenerarAsientoAjusteCoste(strUnidad, strUnidadUsado, strTipoVehiculo, g_strSeparadorMilesSAP, g_strSeparadorDecimalesSAP, strDocCurrency, intAsientoAjuste, decMontoAjusteCosto, oMatrixUsado)
                                        End If

                                        If Not String.IsNullOrEmpty(strMonedaConfiguradaNC) Then
                                            strMonedaFactVehRec = strMonedaConfiguradaNC
                                        Else
                                            strMonedaFactVehRec = strDocCurrency
                                        End If

                                        Dim blnInsertado As Boolean = False
                                        Dim blnModificado As Boolean = False

                                        ManejarVehículoUsado(UDOVehiculo, oForm, strEstadoDisponibilidadUsado, m_strComentarioUsadoFactura, strCodUnidadUsado, i, strNoNotaCreditoUsado, strMonedaFactVehRec, lsValidacionUsados, blnInsertado, blnModificado, strONNMIDVehiculo)
                                        strIDVehiculoUsado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ID_VehUs", 0).Trim()

                                        Dim strTipoUsado As String
                                        strTipoUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Tipo", i).Trim()
                                        strTipoUsado = Utilitarios.EjecutarConsulta(String.Format("Select Code from [@SCGD_TIPOVEHICULO] WITH (nolock) where Name = '{0}'", strTipoUsado), m_oCompany.CompanyDB, m_oCompany.Server)

                                        Dim TipoDocumento As TipoDocumentoVehiculoUsado

                                        If Not String.IsNullOrEmpty(strUsaFacturaProveedorVehiculoUsado) Then
                                            If strUsaFacturaProveedorVehiculoUsado.Trim = "Y" Then
                                                TipoDocumento = TipoDocumentoVehiculoUsado.FacturaProveedor
                                            Else
                                                TipoDocumento = TipoDocumentoVehiculoUsado.NotaCredito
                                            End If
                                        Else
                                            TipoDocumento = TipoDocumentoVehiculoUsado.NotaCredito
                                        End If

                                        udoEntrada = GenerarGoodReceiptUsado(strNoNotaCreditoUsado, intAsientoAjuste, decMontoNotaCredito, decMontoAjusteCosto, strCuentaCarroRecibe, strIDVehiculoUsado, strTipoUsado, strConectionString, i, m_intSerie, m_intDocEntry, dtFechaDocumento, strMonedaConfiguradaNC, TipoDocumento)
                                        If m_objGoodReceiptusado IsNot Nothing AndAlso Not String.IsNullOrEmpty(strIDVehiculoUsado) AndAlso udoEntrada IsNot Nothing Then
                                            udoEntrada.Insert()
                                            Dim entrada As String = Convert.ToString(udoEntrada.Encabezado.DocEntry)

                                            If oMatrixUsado.RowCount = 1 Then
                                                oForm.Items.Item("txtEntrada").Specific.String = entrada
                                            Else
                                                oForm.Items.Item("txtEntrada").Specific.String = My.Resources.Resource.VariosUsados
                                                oForm.Items.Item("lk_Entrada").Visible = False
                                            End If
                                            ListaEntradasParaCrearAsientos.Add(udoEntrada.Encabezado.DocEntry)
                                        End If
                                    End If
                                Next

                                If blnActualizaMatrizVehiculosUsados Then
                                    '**************agrega los documentos generado para la Factura de proveedor de Vehiculos usados***********************
                                    ActualizaLineaVehiculosUsados(oForm, strNumeroContratoVenta, oListaDocumentosFacturaProveedorUsados, oMatrixUsado)
                                    oListaDocumentosFacturaProveedorUsados.Clear()
                                    '********************************************************************************************************************
                                End If

                                blnActualizaMatrizVehiculosUsados = False
                                If Not String.IsNullOrEmpty(strCardCodeClienteVehiculo) Then
                                    For i As Integer = 0 To oMatriz.RowCount - 1
                                        strIDVehiculo = lsValidacionNuevos(i).IdVehiculo
                                        strTipoVehiculo = lsValidacionNuevos(i).TipoVenta
                                        strNumUnid = lsValidacionNuevos(i).NumUnid
                                        strFechaVenta = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0).Trim()

                                        If Not String.IsNullOrEmpty(strFechaVenta) Then
                                            dtFechaVenta = Date.ParseExact(strFechaVenta, "yyyyMMdd", Nothing)
                                            dtFechaVenta = New Date(dtFechaVenta.Year, dtFechaVenta.Month, dtFechaVenta.Day, 0, 0, 0)
                                        Else
                                            dtFechaVenta = Now.Date
                                        End If

                                        Call ActualizarVehículoUDO(strIDVehiculo, strCardCodeClienteVehiculo, strCardNameClienteVehiculo, strEstadoDisponibilidadNuevo, strTipoVendido, strNumeroContratoVenta, strFactura, mc_strSinCostear, strTipoVehiculo, dtFechaVenta, strFacturasVehiculo(i), strNumUnid)
                                        strIDVehs = strIDVehs + strIDVehiculo + ","
                                    Next i
                                    strIDVehs = strIDVehs.TrimEnd(",")
                                End If

                                If oMatriz.RowCount = 1 Then
                                    strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim()
                                    strTipo = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_TipIn", 0).Trim()
                                    strDescMarca = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Des_Marc", 0).Trim()
                                    strDescEstilo = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Des_Esti", 0).Trim()
                                    strDescModelo = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Des_Mode", 0).Trim()
                                    strDescColor = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Des_Col", 0).Trim()
                                    strAñoVehiculo = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Ano_Vehi", 0).Trim()
                                    strAñoVehiculo = String.Format("{0} {1}", My.Resources.Resource.Año, strAñoVehiculo)
                                    strCodUnidadNuevo = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim()
                                    strVIN = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Num_VIN", 0).Trim()
                                    strVIN = String.Format("{0} {1}", My.Resources.Resource.VIN, strVIN)
                                    strPlaca = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Num_Plac", 0).Trim()
                                    strDescEstilo = String.Format("{0} {1}", strDescEstilo, strDescModelo)
                                    strDescFactura = My.Resources.Resource.Vehiculo & strTipo & strDescMarca & strDescEstilo & strDescColor & strAñoVehiculo & strVIN
                                Else
                                    strDescFactura = My.Resources.Resource.DocUnidadesMultiples
                                End If

                                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                                'Crear asiento para la primer cuota del seguro
                                'Agregado 01/08/2017


                                'Verifica si el check de generar asientos para la primer cuota seguro esta activo
                                'Y = Generar asiento, N = no generar, Vacio = no generar
                                Dim strGeneraAsientoSeguro As String = String.Empty
                                strGeneraAsientoSeguro = oDataTableConfiguracionesDMS.GetValue("U_GenAsSeg", 0).ToString().Trim()

                                If strGeneraAsientoSeguro.ToUpper() = "Y" Then

                                    Dim decMontoCuotaSeguro As Decimal = 0
                                    Dim strMontoCuotaSeguro As String = String.Empty

                                    strMontoCuotaSeguro = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Val_PC", 0)
                                    strMontoCuotaSeguro = strMontoCuotaSeguro.Trim()
                                    If Not String.IsNullOrEmpty(strMontoCuotaSeguro) Then
                                        decMontoCuotaSeguro = Decimal.Parse(strMontoCuotaSeguro, n)
                                    End If

                                    'decMontoCuotaSeguro = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Val_PC", 0)

                                    'Solamente se procesa el asiento si el monto es mayor a cero
                                    If decMontoCuotaSeguro > 0 Then

                                        Dim strCuentaCuotaSeguro As String = String.Empty
                                        Dim strClienteCuotaSeguro As String = String.Empty
                                        Dim strMonedaAsientoSeguro As String = String.Empty
                                        Dim strTipoDocumentoAsientoSeguro As String = String.Empty
                                        Dim strMonedaClienteSeguro As String = String.Empty
                                        Dim strComentariosAsiento As String = String.Empty
                                        Dim strReferencia1 As String = String.Empty

                                        strClienteCuotaSeguro = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CliConCod", 0).Trim()
                                        strCuentaCuotaSeguro = oDataTableConfiguracionesDMS.GetValue("U_CtaCSHa", 0).ToString().Trim()

                                        strMonedaAsientoSeguro = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoPrimerCuotaSeguro).Trim
                                        strComentariosAsiento = My.Resources.Resource.ComentarioCuotaSeguro & " " & strNumeroContratoVenta
                                        strReferencia1 = My.Resources.Resource.Cont & strNumeroContratoVenta

                                        If Not String.IsNullOrEmpty(strClienteCuotaSeguro) Then
                                            strMonedaClienteSeguro = Utilitarios.EjecutarConsulta("Select Currency from OCRD WITH (nolock) where CardCode = '" & strClienteCuotaSeguro & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                        End If

                                        strTipoDocumentoAsientoSeguro = "" & My.Resources.Resource.DocumentoAsientoSeguro

                                        If Not String.IsNullOrEmpty(strMonedaAsientoSeguro) And Not String.IsNullOrEmpty(strMonedaClienteSeguro) Then
                                            If Not RetornarMonedaSN(strMonedaClienteSeguro, strMonedaAsientoSeguro, strTipoDocumentoAsientoSeguro) Then
                                                Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                                Exit Sub
                                            Else
                                                If blnCambiarMonedaporContrato Then
                                                    strMonedaAsientoSeguro = strDocCurrency
                                                    blnCambiarMonedaporContrato = False
                                                End If
                                            End If
                                        End If

                                        'Generamos el asiento contable
                                        GenerarAsientoCuotaSeguro(strClienteCuotaSeguro, strMonedaAsientoSeguro, strDocCurrency, decMontoCuotaSeguro, strUnidad, strNumeroContratoVenta, strReferencia1, strComentariosAsiento)

                                        'Mensajes de error en caso de datos faltantes
                                        If String.IsNullOrEmpty(strClienteCuotaSeguro) Then
                                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorClienteFaltaSeguro, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                        End If
                                        If String.IsNullOrEmpty(strCuentaCuotaSeguro) Then
                                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCuentaCuotaSeguro, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                        End If
                                    End If

                                End If
                                'Fin de crear asiento primer cuota del seguro
                                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

                                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                                'Crear asiento para la salida por costo proyectado - Solamente para cliente SAIS
                                'Agregado 16/11/2017

                                'Verifica si el check de generar asientos por salida costo proyectado esta activo
                                'Y = Generar asiento, N = no generar, Vacio = no generar
                                'Dim strGeneraAsientoSalidaCostoProyectado As String = String.Empty
                                'Dim strNumAsientoSalidaCostoProyectado As String = String.Empty
                                'Dim strNumAsientoProvisionVehiculo As String = String.Empty

                                'strGeneraAsientoSalidaCostoProyectado = oDataTableConfiguracionesDMS.GetValue("U_GenAsSCPV", 0).ToString().Trim()

                                'If strGeneraAsientoSalidaCostoProyectado.ToUpper() = "Y" Then

                                '    If Not EsConsignado(strUnidad) Then

                                '        If ValidarCostoProyectado(strUnidad) Then
                                '            strNumAsientoSalidaCostoProyectado = GenerarAsientoSalidaVehiculoCostoProyectado(strNumeroContratoVenta, strUnidad, strDocCurrency)
                                '        Else
                                '            'Mensaje de error, el vehículo no tiene costo proyectado
                                '            Dim errorCostoProyectado = My.Resources.Resource.ErrorCostoProyectado
                                '            errorCostoProyectado = String.Format(errorCostoProyectado, strUnidad)
                                '            m_SBO_Application.StatusBar.SetText(errorCostoProyectado, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                '        End If


                                '        If String.IsNullOrEmpty(strNumAsientoSalidaCostoProyectado) Then
                                '            'Si no se generó el asiento de salida, se procede a realizar un rollback de todos los documentos creados
                                '            Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                '            Exit Sub
                                '        End If

                                '    End If

                                'End If

                                ''Si se generó el asiento de costo proyectado, se procede a validar si se debe crear el asiento de provision
                                ''para vehículos que no tengan facturas de costeo ligadas
                                'If Not String.IsNullOrEmpty(strNumAsientoSalidaCostoProyectado) Then
                                '    If Not ValidarFacturasCosteo(strUnidad) Then
                                '        'No existen facturas de costeo para la unidad, por lo tanto se genera un asiento de provisión
                                '        strNumAsientoProvisionVehiculo = GenerarAsientoProvisionVehiculos(strNumeroContratoVenta, strUnidad, strDocCurrency)

                                '        If String.IsNullOrEmpty(strNumAsientoProvisionVehiculo) Then
                                '            'Si no se generó el asiento de provisión vehículos, se procede a reversar todos los documentos
                                '            Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                '            Exit Sub
                                '        End If

                                '    End If

                                'End If

                                'Fin de crear asiento salida costo proyectado
                                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

                                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                                'Crear factura comisión vehículo consignado y asiento contable de regularización
                                'Agregado 08/08/2017
                                Dim strGeneraFacturaConsignado As String = String.Empty
                                Dim strChkSinComision As String = String.Empty
                                Dim strClientePropietario As String = String.Empty
                                Dim strDocEntryFacturaConsignado As String = String.Empty
                                Dim strDocEntryAsientoConsignado As String = String.Empty
                                Dim decMontoNetoFacturar As Decimal = 0

                                'Verifica si el check de generar factura y asiento de regularización vehículos consignados esta activo
                                'Y = Generar factura y asiento, N = No generar nada, Vacio = No generar nada
                                strGeneraFacturaConsignado = oDataTableConfiguracionesDMS.GetValue("U_GenFacCns", 0).ToString().Trim()

                                If strGeneraFacturaConsignado.ToUpper() = "Y" Then
                                    strChkSinComision = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SinCom", 0)

                                    If strChkSinComision.ToUpper() <> "Y" Then
                                        decMontoNetoFacturar = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MNetoFC", 0), n)

                                        If decMontoNetoFacturar > 0 Then
                                            strClientePropietario = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CodClCon", 0).ToString().Trim()
                                            'Genera la factura por el vehículo consignado
                                            'strDocEntryFacturaConsignado = GenerarFacturaConsignado(strCardCodeClienteFacturar, strUnidad, strNumeroContratoVenta, strDocCurrency, intPeriodoPago)
                                            strDocEntryFacturaConsignado = GenerarFacturaConsignado(strClientePropietario, strUnidad, strNumeroContratoVenta, strDocCurrency, intPeriodoPago)
                                            oForm.Items.Item("txtFcCs").Specific.String = strDocEntryFacturaConsignado
                                            'Genera el asiento de regularización contable para el vehículo consignado
                                            strDocEntryAsientoConsignado = GenerarAsientoRegularizacionConsignados(strClientePropietario, strDocCurrency, strUnidad, strNumeroContratoVenta)
                                            oForm.Items.Item("txtAsReg").Specific.String = strDocEntryAsientoConsignado

                                            If String.IsNullOrEmpty(strDocEntryFacturaConsignado) Or String.IsNullOrEmpty(strDocEntryAsientoConsignado) Then
                                                Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                                Exit Sub
                                            End If
                                        End If

                                    End If

                                    HabilitarDeshabilitarCtrlsConsignado(oForm, False)
                                End If

                                'Fin de crear factura comisión vehículo consignado y asiento contable de regularización
                                '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                                Call ManejarDesgloseCobro(CInt(strNumeroContratoVenta), strFactura, strDocCurrency, strDescFactura, strCardCodeClienteFacturar, oForm, intPeriodoPago)
                                Call GenerarCierreOportunidadVenta(oForm, strFacturaDocNum)
                                intEstado = m_intEstadoSuperior
                                'Call HistorialUsuarios(intEstado, oForm)
                                ActualizaContratoVentas()
                                m_blnPreguntaGuardaCambios = False

                                '*************************************************************************
                                'Agregado 11/12/2012: Actualizacion de datos de trazabilidad de los vehiculos

                                If Not String.IsNullOrEmpty(strCardCodeClienteVehiculo) AndAlso Not String.IsNullOrEmpty(strIDVehs) Then
                                    Dim strTotalVeh As String
                                    Dim decTotalVeh As Decimal
                                    Dim strVehiculos() As String
                                    Dim strFactTraza As String
                                    Dim strFechaCont As String
                                    Dim dtFechaCont As Date
                                    Dim strFechaEntrega As String
                                    Dim dtFechaEntrega As Date
                                    Dim strKmIngreso As String

                                    dataTableMonedaVehFact = oForm.DataSources.DataTables.Item("MonVehFac")
                                    dataTableMonedaVehFact.Rows.Clear()
                                    dataTableMonedaVehFact.ExecuteQuery("Select U_Moneda From [@SCGD_VEHICULO] WITH (nolock) Where Code In(" & strIDVehs & ")")

                                    If Not String.IsNullOrEmpty(strMonedaConfiguradaFV) Then
                                        strMonedaFactVeh = strMonedaConfiguradaFV
                                    Else
                                        strMonedaFactVeh = strDocCurrency
                                    End If

                                    strVehiculos = Split(strIDVehs, ",")

                                    Dim i As Integer = 0
                                    Dim strIDVehTra As String = ""

                                    strFechaCont = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0)
                                    strFechaCont = strFechaCont.Trim()

                                    If Not String.IsNullOrEmpty(strFechaCont) Then
                                        dtFechaCont = Date.ParseExact(strFechaCont, "yyyyMMdd", Nothing)
                                        dtFechaCont = New Date(dtFechaCont.Year, dtFechaCont.Month, dtFechaCont.Day, 0, 0, 0)
                                    Else
                                        dtFechaCont = Now.Date
                                    End If

                                    strFechaEntrega = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Fec_Ent", 0)
                                    strFechaEntrega = strFechaEntrega.Trim

                                    If Not String.IsNullOrEmpty(strFechaEntrega) Then
                                        dtFechaEntrega = Date.ParseExact(strFechaEntrega, "yyyyMMdd", Nothing)
                                        dtFechaEntrega = New Date(dtFechaEntrega.Year, dtFechaEntrega.Month, dtFechaEntrega.Day, 0, 0, 0)
                                    End If

                                    For i = 0 To strVehiculos.Length - 1
                                        strIDVehTra = strVehiculos(i)
                                        strMonedaVeh = dataTableMonedaVehFact.GetValue("U_Moneda", i)
                                        strTotalVeh = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Pre_Tot", i).Trim()
                                        strKmVenta = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Km_Venta", i).Trim()
                                        decKmVenta = Double.Parse(strKmVenta, n)

                                        If Not String.IsNullOrEmpty(strTotalVeh) Then
                                            decTotalVeh = Decimal.Parse(strTotalVeh, n)
                                            If Not String.IsNullOrEmpty(strMonedaVeh) Then
                                                decTotalVeh = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaVeh, decTotalVeh, strMonedaFactVeh, 1, dtFechaDocumento)
                                            End If
                                        End If

                                        If Not String.IsNullOrEmpty(strFactura) Then
                                            strFactTraza = strFactura
                                        ElseIf Not String.IsNullOrEmpty(strFacturasVehiculo(i)) Then
                                            strFactTraza = strFacturasVehiculo(i)
                                        End If

                                        Call ActualizarDatosTrazabilidad(strIDVehTra, strNumeroContratoVenta, dtFechaCont, strFactTraza, dtFechaDocumento, strNombreVendedor, decTotalVeh, strMonedaVeh, strMonedaFactVeh, -1, decKmVenta, dtFechaEntrega)
                                    Next
                                End If

                                '*************************************************************************
                                '14/03/2011: Creación del UDO de Financiamiento

                                Dim strFinancPropio As String
                                strFinancPropio = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Fin_Prop", 0)
                                strFinancPropio = strFinancPropio.Trim()
                                Dim strGenerarAsiento As String = ""

                                If strFinancPropio = "Y" Then
                                    Dim strPrestamo As String = ""
                                    Call CrearUDOPrestamo(oForm, strPrestamo)
                                    strGenerarAsiento = Utilitarios.EjecutarConsulta("Select U_Gen_As from [@SCGD_CONF_FINANC] WITH (nolock) where Code = '1'", m_oCompany.CompanyDB, m_oCompany.Server)
                                    If strGenerarAsiento = "Y" Then
                                        Call CrearAsientoPrestamo(oForm, strPrestamo)
                                    End If
                                End If

                                '******************************************************************
                                'creo el registro contable del vehiculo

                                If blnTieneVehiculoUsado Then
                                    Dim query As String = String.Empty
                                    Dim strCodeVehiculo As String = String.Empty
                                    Dim strUnidadUsado As String = String.Empty
                                    Dim strEntrada As String = String.Empty
                                    Dim strTipoUsadoAsEnt As String = String.Empty
                                    Dim intCountUsados As Integer = 0
                                    Dim blnEntradaMultipleUsa As Boolean = False
                                    Dim strCosteoLocal As String = oDataTableConfiguracionesDMS.GetValue("U_CosteoLocal", 0)

                                    oMatrixUsado = DirectCast(oForm.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)
                                    intCountUsados = oMatrixUsado.RowCount

                                    If intCountUsados > 1 Then
                                        blnEntradaMultipleUsa = True
                                    End If

                                    For i As Integer = 0 To oMatrixUsado.RowCount - 1
                                        strUnidadUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", i).Trim
                                        query = String.Format("SELECT Code FROM [@SCGD_VEHICULO] with (nolock) where U_Cod_Unid = '{0}'", strUnidadUsado)
                                        dataTableMonedaVehFact.Clear()
                                        dataTableMonedaVehFact.ExecuteQuery(query)
                                        strCodeVehiculo = dataTableMonedaVehFact.GetValue("Code", 0)
                                        strEntrada = ListaEntradasParaCrearAsientos.Item(i)

                                        If Not String.IsNullOrEmpty(strEntrada) Then
                                            strTipoUsadoAsEnt = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Tipo", i).Trim
                                            strTipoUsadoAsEnt = Utilitarios.EjecutarConsulta(String.Format("Select Code from [@SCGD_TIPOVEHICULO] WITH (nolock) where Name = '{0}'", strTipoUsadoAsEnt), m_oCompany.CompanyDB, m_oCompany.Server)
                                            objConfiguracionGeneral = Nothing
                                            Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, m_strConectionString)
                                            If m_cn_Coneccion.State = ConnectionState.Open Then
                                                m_cn_Coneccion.Close()
                                            End If
                                            m_cn_Coneccion.ConnectionString = m_strConectionString
                                            objConfiguracionGeneral = New SCGDataAccess.ConfiguracionesGeneralesAddon(m_cn_Coneccion)

                                            Dim m_oGoodReceive As New GoodReceiveCls(m_SBO_Application, m_oCompany, objConfiguracionGeneral)

                                            intNumeroEntradaVehiculoUsado = Integer.Parse(strEntrada)
                                            m_oGoodReceive.CrearAsientoParaNumeroEntradaEspecifico(intNumeroEntradaVehiculoUsado, strTipoUsadoAsEnt, dtFechaDocumento, strUnidadUsado, strCosteoLocal, blnEntradaMultipleUsa, blnAsientoAjusteCosto, , Nothing, strDocCurrency, blnUsaCompensacionAsientoEntradaVehiculo, strCodeVehiculo, m_cnConeccionTransaccion, False, m_tnTransaccion, True)
                                        End If
                                    Next
                                End If

                                '******************************************************************
                                'se genera la salida del vehiculo que se vende

                                If strGeneraSalida = "Y" Then
                                    Dim blnUtilizaCosteoAccesorios As String = Utilitarios.EjecutarConsulta("Select U_UsaAxC from dbo.[@SCGD_ADMIN] WITH (nolock)", m_oCompany.CompanyDB, m_oCompany.Server)
                                    Dim strFechaContabilizacion As String = String.Empty
                                    Dim strFechaContaBD As String = String.Empty
                                    Dim dateFechaSBO As Date = Nothing

                                    Dim strNoContrato As String = String.Empty
                                    strNoContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0).ToString.Trim()
                                    '12/08/2010 Revisa si tiene costeos pendientes para hacer la salida
                                    For i As Integer = 0 To oMatriz.RowCount - 1

                                        strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i)
                                        strUnidad = strUnidad.Trim()
                                        strIDVehiculo = Utilitarios.EjecutarConsulta("Select Code from [@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                        m_strMonedaSistema = m_objBLSBO.RetornarMonedaSistema()
                                        m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()

                                        'Obtiene Fecha Contabilizacion
                                        strFechaContabilizacion = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0)
                                        dateFechaSBO = Date.ParseExact(strFechaContabilizacion, "yyyyMMdd", Nothing)
                                        If dateFechaSBO <> Nothing Then
                                            strFechaContaBD = Utilitarios.RetornaFechaFormatoDB(dateFechaSBO, m_oCompany.Server)
                                        End If
                                        If Utilitarios.ConsultaCosteos(strUnidad, m_oCompany.CompanyDB, m_oCompany.Server, m_strMonedaSistema, m_strMonedaLocal, blnUtilizaCosteoAccesorios) Then
                                            If m_SBO_Application.MessageBox(Text:="La Unidad " & strUnidad & My.Resources.Resource.PreguntaSalida, DefaultBtn:=2, Btn1Caption:=My.Resources.Resource.Si, Btn2Caption:="No") = 1 Then
                                                Call GenerarSalidaAutomatica(strUnidad, strIDVehiculo, m_strMonedaLocal, m_strMonedaSistema, strFechaContaBD, dateFechaSBO, strNoContrato, m_cnConeccionTransaccion, False, m_tnTransaccion)
                                            End If
                                        Else
                                            Call GenerarSalidaAutomatica(strUnidad, strIDVehiculo, m_strMonedaLocal, m_strMonedaSistema, strFechaContaBD, dateFechaSBO, strNoContrato, m_cnConeccionTransaccion, False, m_tnTransaccion)
                                        End If
                                    Next i
                                End If
                                '******************************************************************

                                'Agregado 02/11/2010: Manejo de salida de accesorios
                                Dim oMatrizAccesorios As SAPbouiCOM.Matrix
                                oMatrizAccesorios = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

                                If oMatrizAccesorios.RowCount > 0 Then
                                    Dim strAccesoriosInventariables As String = oDataTableConfiguracionesDMS.GetValue("U_SCGD_AccInv", 0)
                                    If (strAccesoriosInventariables = "Y" AndAlso Not strDetalleAccs = "Y") Then
                                        Call GenerarSalidaAccesorios(oForm, oMatrizAccesorios, strBodegaTipoVeh)
                                    End If
                                End If

                                m_blnPreguntaGuardaCambios = True
                                Dim strListaUsuarios As New List(Of String)
                                strListaUsuarios = GeneraListaUsuariosMensajes(strCSucu, m_intEstadoSuperior, String.Empty)

                                If m_oCompany.InTransaction() Then
                                    m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_Commit)
                                    If m_tnTransaccion IsNot Nothing AndAlso m_tnTransaccion.Connection IsNot Nothing Then
                                        m_tnTransaccion.Commit()
                                        If m_cnConeccionTransaccion.State = ConnectionState.Open Then
                                            m_cnConeccionTransaccion.Close()
                                            Call ManejarEstados(oForm)
                                            ''''''''''''''''''''''''''''''''Agrega Historial'''''''''''''''''''''''''''''''''''''
                                            AgregaLineaHistorial(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0), intEstado - 1, intEstado)
                                            ''''''''''''''''''''''''''''''''Agrega Historial'''''''''''''''''''''''''''''''''''''
                                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.txtCVFac, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Success)
                                            Call EnviarMensajesAprobacion(m_intEstadoSuperior, True, strNumeroContratoVenta, strCardNameClienteFacturar, strVendedor, strNombreVendedor, strListaUsuarios)
                                        End If
                                    End If
                                    oForm.Refresh()
                                Else
                                    If m_cnConeccionTransaccion.State = ConnectionState.Open Then
                                        m_cnConeccionTransaccion.Close()
                                    End If
                                    If m_oCompany.InTransaction() Then
                                        m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)

                                    End If
                                    oForm.Refresh()
                                End If
                            End If
                        Else
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ClienteFacturaVehiculos, SAPbouiCOM.BoMessageTime.bmt_Medium)
                            If m_oCompany.InTransaction() Then
                                m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                            End If
                            If m_cnConeccionTransaccion.State = ConnectionState.Open Then
                                m_tnTransaccion.Rollback()
                                m_cnConeccionTransaccion.Close()
                            End If
                            'Limpia DataSet de Vehiculos al facturar, para inserción de vehiculo usado
                            m_dtsVehiculo.SCG_VEHICULO.Clear()
                            oForm.Refresh()
                        End If
                    Else
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.VehiculoFacturar, SAPbouiCOM.BoMessageTime.bmt_Medium)
                        If m_oCompany.InTransaction() Then
                            m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                        End If
                        If m_cnConeccionTransaccion.State = ConnectionState.Open Then
                            m_tnTransaccion.Rollback()
                            m_cnConeccionTransaccion.Close()
                        End If
                        'Limpia DataSet de Vehiculos al facturar, para inserción de vehiculo usado
                        m_dtsVehiculo.SCG_VEHICULO.Clear()
                    End If
                    oForm.Refresh()
                Else
                    m_SBO_Application.MessageBox(My.Resources.Resource.TipoCambioNoActualizado)
                End If
            Else
                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ContratoNoFacturable, SAPbouiCOM.BoMessageTime.bmt_Medium)
                If m_oCompany.InTransaction() Then
                    m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                End If
                If m_cnConeccionTransaccion.State = ConnectionState.Open Then
                    m_tnTransaccion.Rollback()
                    m_cnConeccionTransaccion.Close()
                End If
                'Limpia DataSet de Vehiculos al facturar, para inserción de vehiculo usado
                m_dtsVehiculo.SCG_VEHICULO.Clear()
                oForm.Refresh()
            End If
        Catch ex As Exception
            Dim d As DataRow() = m_dtsVehiculo.SCG_VEHICULO.GetErrors()
            If m_oCompany.InTransaction() Then
                m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
            End If
            If m_cnConeccionTransaccion.State <> ConnectionState.Closed Then
                If m_tnTransaccion IsNot Nothing AndAlso m_tnTransaccion.Connection IsNot Nothing Then
                    m_tnTransaccion.Rollback()
                End If
                If m_cnConeccionTransaccion.State <> ConnectionState.Closed Then
                    m_cnConeccionTransaccion.Close()
                End If
            End If
            oForm.Refresh()
            oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE
            g_blnEventoCerrarAfecta = False
            oForm.Close()
            blnResultado = False
            g_blnEventoCerrarAfecta = True

            'Limpia DataSet de Vehiculos al facturar, para inserción de vehiculo usado
            m_dtsVehiculo.SCG_VEHICULO.Clear()

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Private Function ObtieneComentarioPorTipoBono(ByVal p_strTipoBono As String, ByVal p_strUnidad As String) As String
        Dim dtConfigComentarios As System.Data.DataTable
        Dim strComentarioMarca As String
        Dim strComentarioEnteFin As String
        Dim strComentarioRetorno As String
        Dim strConfigCm As String

        Try
            dtConfigComentarios = Utilitarios.EjecutarConsultaDataTable(
                String.Format("select U_CmMar, U_CmEnF from [@SCGD_TIPOBONO] WITH (nolock) where Code = '{0}'", p_strTipoBono),
                m_oCompany.CompanyDB,
                m_oCompany.Server)
            If Not dtConfigComentarios.Rows.Count = 0 Then strConfigCm = dtConfigComentarios.Rows(0).Item("U_CmMar").ToString()

            If strConfigCm = "Y" Then
                strComentarioRetorno = Utilitarios.EjecutarConsulta(
                    String.Format("select U_Des_Marc from [@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '{0}'", p_strUnidad),
                    m_oCompany.CompanyDB,
                    m_oCompany.Server)
                strComentarioRetorno = strComentarioRetorno.Trim()
                strComentarioRetorno = String.Format("{0} {1}", My.Resources.Resource.DescMarca, strComentarioRetorno)
                Return strComentarioRetorno
            End If

            If Not dtConfigComentarios.Rows.Count = 0 Then strConfigCm = dtConfigComentarios.Rows(0).Item("U_CmEnF").ToString()

            If strConfigCm = "Y" Then
                strComentarioRetorno = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Ent_Fin", 0)
                strComentarioRetorno = strComentarioRetorno.Trim()
                strComentarioRetorno = String.Format("{0} {1}", My.Resources.Resource.DescFinanciera, strComentarioRetorno)
                Return strComentarioRetorno
            End If
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Private Function ObtieneCuentaPorTipoBono(ByVal p_strTipoBono As String, ByVal p_ctaDebe As Boolean) As String
        Try
            If p_ctaDebe Then
                Return Utilitarios.EjecutarConsulta(
                    String.Format("select U_Debe from [@SCGD_TIPOBONO] WITH (nolock) where Code = '{0}'", p_strTipoBono),
                    m_oCompany.CompanyDB,
                    m_oCompany.Server)
            Else
                Return Utilitarios.EjecutarConsulta(
                    String.Format("select U_Haber from [@SCGD_TIPOBONO] WITH (nolock) where Code = '{0}'", p_strTipoBono),
                    m_oCompany.CompanyDB,
                    m_oCompany.Server)
            End If
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Private Function ExisteBonoEnLista(ByVal p_strUnidad As String, ByVal p_strTipoBono As String, ByRef p_oListaLab As List(Of LineaAsientoBono), ByVal p_dcMontoDebe As Decimal, ByVal p_dcMontoHaber As Decimal) As Boolean
        Dim blRetorno
        Dim oLineaAsientoBono As LineaAsientoBono
        Try
            blRetorno = False
            For i As Integer = 0 To p_oListaLab.Count - 1
                If p_oListaLab(i).Unidad = p_strUnidad And
                    p_oListaLab(i).TipoBono = p_strTipoBono Then
                    oLineaAsientoBono = p_oListaLab(i)
                    oLineaAsientoBono.MontoDebe = p_oListaLab(i).MontoDebe + p_dcMontoDebe
                    oLineaAsientoBono.MontoHaber = p_oListaLab(i).MontoHaber + p_dcMontoHaber
                    p_oListaLab(i) = oLineaAsientoBono
                    Return True
                End If
            Next
            Return blRetorno
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Private Sub GenerarAsientoBonos(ByVal p_strMonedaConfiguradaAsientoBonos As String, ByVal p_strDocCurrency As String,
                                    ByVal p_strContrato As String, ByVal p_oLista_LAB As List(Of LineaAsientoBono),
                                    ByVal p_strUnidad As String, Optional p_blnUsaCompensacionAsEnt As Boolean = False, Optional p_strFechaContrato As String = "")

        Dim oJournalEntry As SAPbobsCOM.JournalEntries
        Dim intError As Integer
        Dim strMensajeError As String = ""
        Dim strMoneda As String
        Dim strAsiento As String
        Dim blnAgregarDimensiones As Boolean = False
        Dim strFechaCont As String
        Dim dtFechaCont As Date

        If p_blnUsaCompensacionAsEnt Then
            strFechaCont = p_strFechaContrato.Trim()
            If Not String.IsNullOrEmpty(strFechaCont) Then
                dtFechaCont = Date.ParseExact(strFechaCont, "yyyyMMdd", Nothing)
                dtFechaCont = New Date(dtFechaCont.Year, dtFechaCont.Month, dtFechaCont.Day, 0, 0, 0)
            Else
                dtFechaCont = Date.Now
            End If
        End If

        Try
            If Not String.IsNullOrEmpty(p_strMonedaConfiguradaAsientoBonos) Then
                strMoneda = p_strMonedaConfiguradaAsientoBonos
            Else
                strMoneda = p_strDocCurrency
            End If

            oJournalEntry = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oJournalEntries)
            oJournalEntry.ReferenceDate = dtFechaDocumento
            oJournalEntry.Reference = p_strUnidad
            oJournalEntry.Reference2 = p_strContrato
            oJournalEntry.Memo = String.Format("{0} {1}", My.Resources.Resource.ComentarioBonos, p_strContrato)

            If blnUsaDimensiones Then
                Dim strAsientoBonos As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoBonos
                Dim strValorDimension As String = ListaConfiguracion.Item(strAsientoBonos)
                ClsLineasDocumentosDimension = New AgregarDimensionLineasDocumentosCls(m_oCompany, m_SBO_Application)
                If Not String.IsNullOrEmpty(strValorDimension) Then
                    If strValorDimension = "Y" Then
                        blnAgregarDimensiones = True
                    End If
                End If
            End If

            For Each oLineaAsientoBonos As LineaAsientoBono In p_oLista_LAB
                With oLineaAsientoBonos
                    oJournalEntry.Lines.AccountCode = .CtaDebe
                    If strMoneda = m_strMonedaLocal Then
                        oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, .MontoDebe, strMoneda, 1, dtFechaDocumento)
                    Else
                        'para valores no compensados en ME
                        If p_blnUsaCompensacionAsEnt Then
                            oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, .MontoDebe, strMoneda, 1, dtFechaCont)
                        End If
                        oJournalEntry.Lines.FCDebit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, .MontoDebe, strMoneda, 1, dtFechaDocumento)
                        oJournalEntry.Lines.FCCurrency = strMoneda
                    End If
                    oJournalEntry.Lines.Reference1 = .Comentarios
                    oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

                    If blnAgregarDimensiones Then
                        Dim strCodigounidad As String = oLineaAsientoBonos.Unidad
                        Dim strTipoInventario As String = Utilitarios.EjecutarConsulta("Select U_TipIn From dbo.[@SCGD_VEHIXCONT] WITH (nolock) Where U_Cod_Unid = '" & strCodigounidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from dbo.[@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & strCodigounidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipoInventario, strCodigoMarca, oDataTableDimensionesContablesDMS))
                        ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)
                    End If

                    oJournalEntry.Lines.Add()
                    oJournalEntry.Lines.AccountCode = .CtaHaber

                    If strMoneda = m_strMonedaLocal Then
                        oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, .MontoHaber, strMoneda, 1, dtFechaDocumento)
                    Else
                        'para valores no compensados en ME
                        If p_blnUsaCompensacionAsEnt Then
                            oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, .MontoHaber, strMoneda, 1, dtFechaCont)
                        End If
                        oJournalEntry.Lines.FCCredit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, .MontoHaber, strMoneda, 1, dtFechaDocumento)
                        oJournalEntry.Lines.FCCurrency = strMoneda
                    End If
                    oJournalEntry.Lines.Reference1 = .Comentarios
                    oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

                    If blnAgregarDimensiones Then
                        ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)
                    End If

                    oJournalEntry.Lines.Add()
                End With

            Next

            If oJournalEntry.Add <> 0 Then
                m_oCompany.GetLastError(intError, strMensajeError)
                If m_oCompany.InTransaction() Then
                    m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                End If

                Throw New Exception(String.Format("{0} Error: {1} {2}", My.Resources.Resource.DocumentoAsientoBonos, intError, strMensajeError))
            Else
                m_oCompany.GetNewObjectCode(strAsiento)
                oForm.Items.Item("txtAsBon").Specific.String = strAsiento
            End If

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    Private Sub GenerarAsientoComisiones(ByVal p_strDocCurrency As String, ByVal p_strContrato As String,
                                         ByVal decMoNAseguradora As Decimal, ByVal decMoNFinanciera As Decimal,
                                         ByVal p_strUnidad As String, Optional p_blnUsaCompensacionAsEnt As Boolean = False, Optional p_strFechaContrato As String = "")

        Dim oJournalEntry As SAPbobsCOM.JournalEntries

        Dim intError As Integer
        Dim strMensajeError As String = ""
        Dim strMoneda As String
        Dim strAsiento As String
        Dim strCuentaDebeFinanciera As String = oDataTableConfiguracionesDMS.GetValue("U_CtaFiDe", 0).ToString().Trim()
        Dim strCuentaHaberFinanciera As String = oDataTableConfiguracionesDMS.GetValue("U_CtaFiHa", 0).ToString().Trim()
        Dim strCuentaDebeAseguradora As String = oDataTableConfiguracionesDMS.GetValue("U_CtaAsDe", 0).ToString().Trim()
        Dim strCuentaHaberAseguradora As String = oDataTableConfiguracionesDMS.GetValue("U_CtaAsHa", 0).ToString().Trim()

        Dim strFechaCont As String
        Dim dtFechaCont As Date

        Dim strValorDimension As String = String.Empty
        Dim blnAgregarDimension As Boolean = False
        Dim ClsLineasDocumentosDimension As AgregarDimensionLineasDocumentosCls

        If p_blnUsaCompensacionAsEnt Then
            strFechaCont = p_strFechaContrato.Trim()

            If Not String.IsNullOrEmpty(strFechaCont) Then
                dtFechaCont = Date.ParseExact(strFechaCont, "yyyyMMdd", Nothing)
                dtFechaCont = New Date(dtFechaCont.Year, dtFechaCont.Month, dtFechaCont.Day, 0, 0, 0)
            End If

        End If

        If blnUsaDimensiones Then

            Dim oMatriz As SAPbouiCOM.Matrix
            oMatriz = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

            If oMatriz.RowCount = 1 Then
                Dim strAsientoComisiones As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoComisiones
                strValorDimension = ListaConfiguracion.Item(strAsientoComisiones)
                ClsLineasDocumentosDimension = New AgregarDimensionLineasDocumentosCls(m_oCompany, m_SBO_Application)
                If Not String.IsNullOrEmpty(strValorDimension) Then
                    If strValorDimension = "Y" Then
                        Dim strTipoVeh As String = Utilitarios.EjecutarConsulta("Select U_Tipo from dbo.[@SCGD_Vehiculo] WITH (nolock) where U_Cod_Unid = '" & p_strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from dbo.[@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & p_strUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                        oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipoVeh, strCodigoMarca, oDataTableDimensionesContablesDMS))

                        If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then
                            blnAgregarDimension = True
                        Else
                            blnAgregarDimension = False
                        End If

                    Else
                        blnAgregarDimension = False
                    End If
                End If

            End If

        End If


        Try
            strMoneda = p_strDocCurrency

            oJournalEntry = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oJournalEntries)

            oJournalEntry.ReferenceDate = dtFechaDocumento

            oJournalEntry.Reference = p_strUnidad
            oJournalEntry.Reference2 = p_strContrato

            oJournalEntry.Memo = String.Format("{0} {1}", My.Resources.Resource.ComentarioComisiones, p_strContrato)

            oJournalEntry.Lines.AccountCode = strCuentaDebeFinanciera

            If strMoneda = m_strMonedaLocal Then
                oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMoNFinanciera, strMoneda, 1, dtFechaDocumento)
            Else
                'para valores no compensados en ME
                If p_blnUsaCompensacionAsEnt Then
                    oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, decMoNFinanciera, strMoneda, 1, dtFechaCont)
                End If

                oJournalEntry.Lines.FCDebit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMoNFinanciera, strMoneda, 1, dtFechaDocumento)
                oJournalEntry.Lines.FCCurrency = strMoneda
            End If
            oJournalEntry.Lines.Reference1 = String.Format("{0} {1} {2} {3}", My.Resources.Resource.ComentarioComisionesFinanciera,
                                                           oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Ent_Fin", 0).ToString().Trim(),
                                                            My.Resources.Resource.DescNumContrato,
                                                           p_strContrato)

            oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

            '******************************************************************************************
            If blnAgregarDimension Then
                'Agrego dimensiones contables en las lineas del asiento 
                ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)

            End If
            '******************************************************************************************

            oJournalEntry.Lines.Add()

            oJournalEntry.Lines.AccountCode = strCuentaHaberFinanciera
            If strMoneda = m_strMonedaLocal Then
                oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMoNFinanciera, strMoneda, 1, dtFechaDocumento)
            Else
                'para valores no compensados en ME
                If p_blnUsaCompensacionAsEnt Then
                    oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, decMoNFinanciera, strMoneda, 1, dtFechaCont)
                End If

                oJournalEntry.Lines.FCCredit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMoNFinanciera, strMoneda, 1, dtFechaDocumento)
                oJournalEntry.Lines.FCCurrency = strMoneda
            End If
            oJournalEntry.Lines.Reference1 = String.Format("{0} {1} {2} {3}", My.Resources.Resource.ComentarioComisionesFinanciera,
                                                           oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Ent_Fin", 0).ToString().Trim(),
                                                            My.Resources.Resource.DescNumContrato,
                                                           p_strContrato)

            oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

            '******************************************************************************************
            If blnAgregarDimension Then
                'Agrego dimensiones contables en las lineas del asiento 
                ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)

            End If
            '******************************************************************************************

            oJournalEntry.Lines.Add()

            oJournalEntry.Lines.AccountCode = strCuentaDebeAseguradora
            If strMoneda = m_strMonedaLocal Then
                oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMoNAseguradora, strMoneda, 1, dtFechaDocumento)
            Else
                'para valores no compensados en ME
                If p_blnUsaCompensacionAsEnt Then
                    oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, decMoNAseguradora, strMoneda, 1, dtFechaCont)
                End If

                oJournalEntry.Lines.FCDebit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMoNAseguradora, strMoneda, 1, dtFechaDocumento)
                oJournalEntry.Lines.FCCurrency = strMoneda
            End If
            oJournalEntry.Lines.Reference1 = String.Format("{0} {1} {2} {3}", My.Resources.Resource.ComentarioComisionesAseguradora,
                                                           oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ComAse", 0).ToString().Trim(),
                                                           My.Resources.Resource.DescNumContrato,
                                                           p_strContrato)

            oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

            '******************************************************************************************
            If blnAgregarDimension Then
                'Agrego dimensiones contables en las lineas del asiento 
                ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)

            End If
            '******************************************************************************************

            oJournalEntry.Lines.Add()

            oJournalEntry.Lines.AccountCode = strCuentaHaberAseguradora
            If strMoneda = m_strMonedaLocal Then
                oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMoNAseguradora, strMoneda, 1, dtFechaDocumento)
            Else
                'para valores no compensados en ME
                If p_blnUsaCompensacionAsEnt Then
                    oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, decMoNAseguradora, strMoneda, 1, dtFechaCont)
                End If

                oJournalEntry.Lines.FCCredit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMoNAseguradora, strMoneda, 1, dtFechaDocumento)
                oJournalEntry.Lines.FCCurrency = strMoneda
            End If
            oJournalEntry.Lines.Reference1 = String.Format("{0} {1} {2} {3}", My.Resources.Resource.ComentarioComisionesAseguradora,
                                                           oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ComAse", 0).ToString().Trim(),
                                                           My.Resources.Resource.DescNumContrato,
                                                           p_strContrato)

            oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

            '******************************************************************************************
            If blnAgregarDimension Then
                'Agrego dimensiones contables en las lineas del asiento 
                ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)

            End If
            '******************************************************************************************

            oJournalEntry.Lines.Add()

            If oJournalEntry.Add <> 0 Then
                m_oCompany.GetLastError(intError, strMensajeError)
                m_SBO_Application.SetStatusBarMessage(String.Format("{0} Error: {1} {2}", My.Resources.Resource.ComentarioComisiones, intError, strMensajeError))
                If m_oCompany.InTransaction() Then
                    m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                End If
                Throw New Exception(String.Format("{0} Error: {1} {2}", My.Resources.Resource.ComentarioComisiones, intError, strMensajeError))
            Else
                m_oCompany.GetNewObjectCode(strAsiento)
                oForm.Items.Item("txtAsCom").Specific.String = strAsiento
            End If

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    Public Function GeneraListaUsuariosMensajes(ByVal CodSucu As String, ByVal intEstado As Integer,
                                                ByVal strVendedor As String) As List(Of String)

        Dim strCodigoNivel As String = String.Empty
        Dim strPEmp As String = String.Empty
        Dim strUsuario As String = String.Empty
        'Dim strCodSucu As String = ""
        Dim strLista As New List(Of String)
        Dim dtConsulta As System.Data.DataTable

        Try

            dtConsulta = Utilitarios.EjecutarConsultaDataTable(String.Format("SELECT isnull(U_PEmp,'N') AS U_PEmp, U_Codigo FROM [@SCGD_ADMIN9] WITH (nolock) WHERE U_Prio = '{0}'", intEstado), m_oCompany.CompanyDB, m_oCompany.Server)
            'strPEmp = Utilitarios.EjecutarConsulta(String.Format("SELECT U_PEmp FROM [@SCGD_ADMIN9] WITH (nolock) WHERE U_Prio = '{0}'", intEstado), _
            '                                         m_oCompany.CompanyDB, m_oCompany.Server)
            If dtConsulta.Rows.Count = 0 Then Exit Function

            If dtConsulta.Rows.Item(0).Item("U_PEmp") = "N" Then

                'strCodigoNivel = Utilitarios.EjecutarConsulta(String.Format("SELECT U_Codigo FROM [@SCGD_ADMIN9] WITH (nolock) WHERE U_Prio = '{0}'", intEstado), _
                '                                     m_oCompany.CompanyDB, m_oCompany.Server)

                'se obtienen los usuarios de la mensajeria 
                dtMensajeria = oForm.DataSources.DataTables.Item("dtMen")
                dtMensajeria.ExecuteQuery("SELECT DISTINCT U_Usua FROM [@SCGD_MSJS1] WITH (nolock) WHERE U_CNAp = '" & dtConsulta.Rows.Item(0).Item("U_Codigo") & "' AND U_CSucu = '" & CodSucu & "' and U_RMsj = 'Y'")

                Dim strUsua As String = String.Empty
                For posicion As Integer = 0 To dtMensajeria.Rows.Count - 1

                    strUsua = dtMensajeria.GetValue("U_Usua", posicion)

                    If Not String.IsNullOrEmpty(strUsua) Then
                        strLista.Add(strUsua)
                    End If

                Next

            ElseIf strPEmp = "Y" Then
                strUsuario = Utilitarios.EjecutarConsulta(
                    String.Format("select ou.USER_CODE from OHEM oh WITH (nolock) inner join OUSR ou WITH (nolock) on oh.userId = ou.USERID where salesPrson = '{0}'", strVendedor),
                                                          m_oCompany.CompanyDB, m_oCompany.Server)

                strLista.Add(strUsuario)
            End If

            Return strLista
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    'Agregado 16/08/2012 - Diego Herrera: Método para Agregar Accesorios y Gastos Locales a las Facturas de los Vehículos

    Private Sub ManejaAccesoriosFactura(ByVal oMatrixAcc As SAPbouiCOM.Matrix, ByVal strManejoDescuentoFact As String, ByVal strDetalleAccs As String, ByVal strMonedaConfiguradaFV As String, _
                                        ByVal strDocCurrency As String, ByVal strBodegaAccGeneral As String, ByVal strBodegaTipoVeh As String, ByVal decAccesorios As Decimal, _
                                        ByVal decGastosLocales As Decimal, ByVal strItemCodeLocales As String, ByVal strImpGasLoc As String, ByRef oFactura As SAPbobsCOM.Documents, _
                                        Optional p_blnAgregarDimension As Boolean = False, Optional p_strTipoInventarioVehiculo As String = "", Optional p_strUnidad As String = "")

        Dim strAccesorio As String
        Dim decTotalAccs As Decimal = 0
        Dim blnGastoAgregado As Boolean = False
        Dim strFacturacionMultiple As String = String.Empty
        Dim blnFacturacionMultiple As Boolean = False


        Try
            '******************************************************************************************
            'lleno el datatable de dimensiones para el tipo de inventario y la marca del vehiculo
            If p_blnAgregarDimension Then
                If blnUsaDimensiones Then

                    Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from dbo.[@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & p_strUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                    oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, p_strTipoInventarioVehiculo, strCodigoMarca, oDataTableDimensionesContablesDMS))

                End If
            End If

            '*******************

            Dim strRevenuesAc As String = String.Empty

            strAccesorio = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Acc", 0)
            strAccesorio = strAccesorio.Trim()


            If Not String.IsNullOrEmpty(strAccesorio) Then

                Dim impuestos As Dictionary(Of String, Decimal) = New Dictionary(Of String, Decimal)()
                Dim impuesto As String = String.Empty
                Dim monto As Decimal = 0

                Dim descuentos As Dictionary(Of String, Decimal) = New Dictionary(Of String, Decimal)()
                Dim decDescuentoCalc As Decimal = 0

                Dim strPrecioAcc As String
                Dim strCantAcc As String
                Dim intCantAcc As Integer
                Dim decPrecioAcc As Decimal
                Dim strDescuento As String
                Dim decDescuento As Decimal = 0


                For i As Integer = 0 To oMatrixAcc.RowCount - 1

                    strAccesorio = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Acc", i)
                    strAccesorio = strAccesorio.Trim()
                    strPrecioAcc = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_SCGD_AccPrecio", i)
                    strPrecioAcc = strPrecioAcc.Trim()
                    strCantAcc = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Cant_Acc", i)
                    strCantAcc = strCantAcc.Trim()
                    strDescuento = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Desc_Acc", i)
                    strDescuento = strDescuento.Trim()

                    If String.IsNullOrEmpty(strCantAcc) Then
                        intCantAcc = 0
                    Else
                        intCantAcc = Integer.Parse(strCantAcc)
                    End If

                    If String.IsNullOrEmpty(strPrecioAcc) Then
                        decPrecioAcc = 0
                    Else
                        decPrecioAcc = Decimal.Parse(strPrecioAcc, n)
                    End If

                    If strManejoDescuentoFact = "Y" Then
                        If String.IsNullOrEmpty(strDescuento) Then
                            decDescuento = 0
                        Else
                            decDescuento = Decimal.Parse(strDescuento, n)
                        End If
                    End If

                    impuesto = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Imp_Acc", i)
                    impuesto = impuesto.Trim()

                    If strDetalleAccs = "Y" AndAlso intCantAcc > 0 Then

                        oFactura.Lines.ItemCode = strAccesorio
                        oFactura.Lines.Quantity = intCantAcc
                        oFactura.Lines.UnitPrice = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfiguradaFV, decPrecioAcc, strDocCurrency, 1, dtFechaDocumento)
                        oFactura.Lines.TaxCode = impuesto
                        oFactura.Lines.VatGroup = impuesto
                        If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                            oFactura.Lines.WarehouseCode = strBodegaTipoVeh
                            strRevenuesAc = Utilitarios.EjecutarConsulta("SELECT RevenuesAc FROM OWHS WITH (nolock) WHERE WhsCode = '" & strBodegaTipoVeh & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                            If Not String.IsNullOrEmpty(strRevenuesAc) Then
                                oFactura.Lines.AccountCode = strRevenuesAc.Trim()
                            End If
                        ElseIf Not String.IsNullOrEmpty(strBodegaAccGeneral) Then
                            oFactura.Lines.WarehouseCode = strBodegaAccGeneral
                        End If
                        If Not decDescuento = 0 Then
                            oFactura.Lines.DiscountPercent = decDescuento
                        End If

                        '*****************************************************************************
                        ''Agrego dimensiones contables en las lineas de la facturas
                        If p_blnAgregarDimension AndAlso blnUsaDimensiones Then
                            If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then
                                ClsLineasDocumentosDimension.AgregarDimensionesLineasDocumentos(oFactura.Lines, oDataTableDimensionesContablesDMS)
                            End If
                        End If

                        '*****************************************************************************
                        oFactura.Lines.Add()
                    Else
                        monto = intCantAcc * decPrecioAcc
                        If Not (impuestos.ContainsKey(impuesto)) Then impuestos.Add(impuesto, 0)
                        impuestos.Item(impuesto) += monto

                        If Not decDescuento = 0 Then
                            decDescuentoCalc = monto * (decDescuento / 100)
                            If Not (descuentos.ContainsKey(impuesto)) Then descuentos.Add(impuesto, 0)
                            descuentos.Item(impuesto) += decDescuentoCalc
                        End If
                    End If
                Next

                If Not strDetalleAccs = "Y" Then
                    If decAccesorios > 0 AndAlso decGastosLocales <= 0 Then

                        For Each impuestoSumado As KeyValuePair(Of String, Decimal) In impuestos
                            If strItemCodeLocales <> "" AndAlso impuestoSumado.Value > 0 Then
                                oFactura.Lines.ItemCode = strItemCodeLocales

                                Dim MontoAConvertir As Decimal = impuestoSumado.Value
                                Dim ValorReal As Decimal = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfiguradaFV, MontoAConvertir, strDocCurrency, 1, dtFechaDocumento)
                                oFactura.Lines.UnitPrice = ValorReal
                                oFactura.Lines.TaxCode = impuestoSumado.Key
                                oFactura.Lines.VatGroup = impuestoSumado.Key
                                If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                                    oFactura.Lines.WarehouseCode = strBodegaTipoVeh
                                    strRevenuesAc = Utilitarios.EjecutarConsulta("SELECT RevenuesAc FROM OWHS WITH (nolock) WHERE WhsCode = '" & strBodegaTipoVeh & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                    If Not String.IsNullOrEmpty(strRevenuesAc) Then
                                        oFactura.Lines.AccountCode = strRevenuesAc.Trim()
                                    End If
                                ElseIf Not String.IsNullOrEmpty(strBodegaAccGeneral) Then
                                    oFactura.Lines.WarehouseCode = strBodegaAccGeneral
                                End If
                                For Each impuestoDescuento As KeyValuePair(Of String, Decimal) In descuentos
                                    If impuestoSumado.Key = impuestoDescuento.Key AndAlso Not impuestoDescuento.Value = 0 Then
                                        decDescuento = (impuestoDescuento.Value / impuestoSumado.Value) * 100
                                        oFactura.Lines.DiscountPercent = decDescuento
                                    End If
                                Next
                                '*****************************************************************************
                                ''Agrego dimensiones contables en las lineas de la facturas
                                If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then
                                    ClsLineasDocumentosDimension.AgregarDimensionesLineasDocumentos(oFactura.Lines, oDataTableDimensionesContablesDMS)
                                End If
                                '*****************************************************************************

                                oFactura.Lines.Add()
                            End If
                        Next
                    ElseIf decAccesorios <= 0 AndAlso decGastosLocales > 0 Then

                        If strItemCodeLocales <> "" Then

                            oFactura.Lines.ItemCode = strItemCodeLocales
                            oFactura.Lines.UnitPrice = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfiguradaFV, decGastosLocales, strDocCurrency, 1, dtFechaDocumento)
                            oFactura.Lines.TaxCode = strImpGasLoc
                            oFactura.Lines.VatGroup = strImpGasLoc
                            If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                                oFactura.Lines.WarehouseCode = strBodegaTipoVeh
                                strRevenuesAc = Utilitarios.EjecutarConsulta("SELECT RevenuesAc FROM OWHS WITH (nolock) WHERE WhsCode = '" & strBodegaTipoVeh & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                If Not String.IsNullOrEmpty(strRevenuesAc) Then
                                    oFactura.Lines.AccountCode = strRevenuesAc.Trim()
                                End If
                            ElseIf Not String.IsNullOrEmpty(strBodegaAccGeneral) Then
                                oFactura.Lines.WarehouseCode = strBodegaAccGeneral
                            End If

                            '*****************************************************************************
                            ''Agrego dimensiones contables en las lineas de la facturas
                            If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then
                                ClsLineasDocumentosDimension.AgregarDimensionesLineasDocumentos(oFactura.Lines, oDataTableDimensionesContablesDMS)
                            End If
                            '*****************************************************************************

                            oFactura.Lines.Add()
                        End If
                    ElseIf decAccesorios > 0 AndAlso decGastosLocales > 0 Then

                        For Each impuestoSumado As KeyValuePair(Of String, Decimal) In impuestos

                            If impuestoSumado.Key = strImpGasLoc Then
                                decTotalAccs = impuestoSumado.Value + decGastosLocales
                                blnGastoAgregado = True
                            Else
                                decTotalAccs = impuestoSumado.Value
                            End If

                            If strItemCodeLocales <> "" AndAlso decTotalAccs > 0 Then

                                oFactura.Lines.ItemCode = strItemCodeLocales
                                oFactura.Lines.UnitPrice = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfiguradaFV, decTotalAccs, strDocCurrency, 1, dtFechaDocumento)
                                oFactura.Lines.TaxCode = impuestoSumado.Key
                                oFactura.Lines.VatGroup = impuestoSumado.Key
                                If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                                    oFactura.Lines.WarehouseCode = strBodegaTipoVeh
                                    strRevenuesAc = Utilitarios.EjecutarConsulta("SELECT RevenuesAc FROM OWHS WITH (nolock) WHERE WhsCode = '" & strBodegaTipoVeh & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                    If Not String.IsNullOrEmpty(strRevenuesAc) Then
                                        oFactura.Lines.AccountCode = strRevenuesAc.Trim()
                                    End If
                                ElseIf Not String.IsNullOrEmpty(strBodegaAccGeneral) Then
                                    oFactura.Lines.WarehouseCode = strBodegaAccGeneral
                                End If

                                For Each impuestoDescuento As KeyValuePair(Of String, Decimal) In descuentos
                                    If impuestoSumado.Key = impuestoDescuento.Key AndAlso Not impuestoDescuento.Value = 0 Then
                                        decDescuento = (impuestoDescuento.Value / decTotalAccs) * 100
                                        oFactura.Lines.DiscountPercent = decDescuento
                                    End If
                                Next
                                oFactura.Lines.Add()
                            End If
                        Next
                        If blnGastoAgregado = False Then

                            oFactura.Lines.ItemCode = strItemCodeLocales
                            oFactura.Lines.UnitPrice = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfiguradaFV, decGastosLocales, strDocCurrency, 1, dtFechaDocumento)
                            oFactura.Lines.TaxCode = strImpGasLoc
                            oFactura.Lines.VatGroup = strImpGasLoc
                            If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                                oFactura.Lines.WarehouseCode = strBodegaTipoVeh
                                strRevenuesAc = Utilitarios.EjecutarConsulta("SELECT RevenuesAc FROM OWHS WITH (nolock) WHERE WhsCode = '" & strBodegaTipoVeh & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                If Not String.IsNullOrEmpty(strRevenuesAc) Then
                                    oFactura.Lines.AccountCode = strRevenuesAc.Trim()
                                End If
                            ElseIf Not String.IsNullOrEmpty(strBodegaAccGeneral) Then
                                oFactura.Lines.WarehouseCode = strBodegaAccGeneral
                            End If

                            oFactura.Lines.Add()

                        End If

                    End If

                ElseIf strDetalleAccs = "Y" AndAlso decGastosLocales > 0 Then

                    oFactura.Lines.ItemCode = strItemCodeLocales
                    oFactura.Lines.UnitPrice = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfiguradaFV, decGastosLocales, strDocCurrency, 1, dtFechaDocumento)
                    oFactura.Lines.TaxCode = strImpGasLoc
                    oFactura.Lines.VatGroup = strImpGasLoc
                    If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                        oFactura.Lines.WarehouseCode = strBodegaTipoVeh
                        strRevenuesAc = Utilitarios.EjecutarConsulta("SELECT RevenuesAc FROM OWHS WITH (nolock) WHERE WhsCode = '" & strBodegaTipoVeh & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        If Not String.IsNullOrEmpty(strRevenuesAc) Then
                            oFactura.Lines.AccountCode = strRevenuesAc.Trim()
                        End If
                    ElseIf Not String.IsNullOrEmpty(strBodegaAccGeneral) Then
                        oFactura.Lines.WarehouseCode = strBodegaAccGeneral
                    End If


                    '*****************************************************************************
                    ''Agrego dimensiones contables en las lineas de la facturas
                    If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then
                        ClsLineasDocumentosDimension.AgregarDimensionesLineasDocumentos(oFactura.Lines, oDataTableDimensionesContablesDMS)
                    End If
                    '*****************************************************************************

                    oFactura.Lines.Add()

                End If

            ElseIf decGastosLocales > 0 Then

                oFactura.Lines.ItemCode = strItemCodeLocales
                oFactura.Lines.UnitPrice = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfiguradaFV, decGastosLocales, strDocCurrency, 1, dtFechaDocumento)
                oFactura.Lines.TaxCode = strImpGasLoc
                oFactura.Lines.VatGroup = strImpGasLoc
                If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                    oFactura.Lines.WarehouseCode = strBodegaTipoVeh
                    strRevenuesAc = Utilitarios.EjecutarConsulta("SELECT RevenuesAc FROM OWHS WITH (nolock) WHERE WhsCode = '" & strBodegaTipoVeh & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                    If Not String.IsNullOrEmpty(strRevenuesAc) Then
                        oFactura.Lines.AccountCode = strRevenuesAc.Trim()
                    End If
                ElseIf Not String.IsNullOrEmpty(strBodegaAccGeneral) Then
                    oFactura.Lines.WarehouseCode = strBodegaAccGeneral
                End If

                '*****************************************************************************
                ''Agrego dimensiones contables en las lineas de la facturas
                If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then
                    ClsLineasDocumentosDimension.AgregarDimensionesLineasDocumentos(oFactura.Lines, oDataTableDimensionesContablesDMS)
                End If
                '*****************************************************************************

                oFactura.Lines.Add()
            End If
        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Private Function ValidarCuentaAlmacenAccesorio(ByVal p_strAlmacenAccesorio As String) As Boolean
        Dim oWareHouses As SAPbobsCOM.Warehouses
        oWareHouses = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oWarehouses), SAPbobsCOM.Warehouses)

        If oWareHouses.GetByKey(p_strAlmacenAccesorio) Then
            If Not oWareHouses.RevenuesAccount Is Nothing Then
                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.CuentaIngresoAccesoriosVacia & " " & p_strAlmacenAccesorio, SAPbouiCOM.BoMessageTime.bmt_Short, BoStatusBarMessageType.smt_Warning)
                Return True
            Else
                Return False
            End If
        End If
    End Function

    Private Sub GenerarFacturaAccesorios(ByVal strCliente As String, ByVal strComentarios As String, ByVal strMoneda As String, ByVal intPeriodoPago As Integer, ByVal strVendedor As String, _
                                         ByVal strConfDetAccs As String, ByVal strItemCodeLocal As String, ByVal strDocCurrency As String, ByVal strBodegaAccGeneral As String, ByVal strManejoDescuentoFact As String, _
                                         ByVal strBodegaTipoVeh As String, ByVal strTipoVeh As String, ByVal strCodigoMarca As String)
        Dim n As NumberFormatInfo

        Dim oFactura As SAPbobsCOM.Documents
        Dim oMatrixAcc As SAPbouiCOM.Matrix
        Dim oMatrizVehiculosVenta As SAPbouiCOM.Matrix

        Dim strAccesorio As String
        Dim strCantidad As String
        Dim intCantidad As Integer
        Dim strPrecio As String
        Dim decPrecio As Decimal
        Dim strImpuesto As String
        Dim impuestos As Dictionary(Of String, Decimal) = New Dictionary(Of String, Decimal)()
        Dim monto As Decimal = 0
        Dim intError As Integer
        Dim strMensajeError As String = String.Empty
        Dim strFacturaAccesorios As String = String.Empty
        Dim strDescuento As String
        Dim decDescuento As Decimal = 0
        Dim strDescuentoLinea As String
        Dim decDescuentoLinea As Decimal = 0
        Dim descuentos As Dictionary(Of String, Decimal) = New Dictionary(Of String, Decimal)()
        Dim decDescuentoCalc As Decimal = 0
        Dim strIndicador As String

        Dim strRevenuesAc As String = String.Empty
        Dim intSerieAccesorios As Integer
        Dim strValorDimension As String = String.Empty
        Dim blnAplicaDimension As Boolean = False


        intSerieAccesorios = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaAccesorios)

        n = DIHelper.GetNumberFormatInfo(m_oCompany)

        oMatrixAcc = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)
        oMatrizVehiculosVenta = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

        oFactura = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oInvoices), SAPbobsCOM.Documents)
        oFactura.DocumentSubType = BoDocumentSubType.bod_None

        oFactura.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Items
        oFactura.CardCode = strCliente
        oFactura.Comments = strComentarios
        If Not String.IsNullOrEmpty(strMoneda) Then
            oFactura.DocCurrency = strMoneda
        Else
            oFactura.DocCurrency = strDocCurrency
        End If
        oFactura.PaymentGroupCode = intPeriodoPago
        oFactura.DocDate = dtFechaDocumento
        If Not String.IsNullOrEmpty(strVendedor) Then
            oFactura.SalesPersonCode = strVendedor
        End If
        strIndicador = Utilitarios.DevuelveCodIndicadores(m_SBO_Application, "10")
        If Not String.IsNullOrEmpty(strIndicador) Then
            oFactura.Indicator = strIndicador
        End If

        If strManejoDescuentoFact = "Y" Then
            strDescuento = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_AcDescPo", 0)
            strDescuento = strDescuento.Trim()
            If Not String.IsNullOrEmpty(strDescuento) Then
                decDescuento = Decimal.Parse(strDescuento, n)
            End If
            oFactura.DiscountPercent = decDescuento
        End If

        ' Usa Tipo Cambio Contrato 
        If strUsaTCContrato = "Y" And m_decTipoCambio > 0 Then
            If Not String.IsNullOrEmpty(strMoneda) And strDocCurrency = strMoneda Then
                oFactura.DocRate = m_decTipoCambio
            ElseIf String.IsNullOrEmpty(strMoneda) Then
                oFactura.DocRate = m_decTipoCambio
            End If
        End If
        TipoFactura(oFactura, intSerieAccesorios)
        If intSerieAccesorios <> -1 Then
            oFactura.Series = intSerieAccesorios
        End If

        If blnUsaDimensiones Then
            If Not oMatrizVehiculosVenta.RowCount > 1 Then

                Dim strConfigFacturaAccesorios As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.FacturaAccesorios
                strValorDimension = ListaConfiguracion.Item(strConfigFacturaAccesorios)

                If Not String.IsNullOrEmpty(strValorDimension) Then

                    If strValorDimension = "Y" Then
                        'lleno el datatable de dimensiones para el tipo de inventario y la marca del vehiculo
                        oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipoVeh, strCodigoMarca, oDataTableDimensionesContablesDMS))

                        blnAplicaDimension = True

                    End If
                End If

            End If
        End If


        If Not oMatrizVehiculosVenta.RowCount > 1 Then
            oFactura.UserFields.Fields.Item("U_SCGD_Cod_Unidad").Value = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim
            oFactura.UserFields.Fields.Item("U_SCGD_NoContrato").Value = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("DocNum", 0).Trim
        Else
            oFactura.UserFields.Fields.Item("U_SCGD_NoContrato").Value = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("DocNum", 0).Trim
        End If


        For i As Integer = 0 To oMatrixAcc.RowCount - 1

            strAccesorio = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Acc", i).Trim
            strCantidad = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Cant_Acc", i).Trim
            If Not String.IsNullOrEmpty(strCantidad) Then
                intCantidad = Integer.Parse(strCantidad)
            Else
                intCantidad = 0
            End If

            strPrecio = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_SCGD_AccPrecio", i).Trim
            If Not String.IsNullOrEmpty(strPrecio) Then
                decPrecio = Decimal.Parse(strPrecio, n)
                decPrecio = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decPrecio, strDocCurrency, 1, dtFechaDocumento)
            Else
                decPrecio = 0
            End If

            strImpuesto = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Imp_Acc", i).Trim
            If strManejoDescuentoFact = "Y" Then
                strDescuentoLinea = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Desc_Acc", i).Trim
                If Not String.IsNullOrEmpty(strDescuentoLinea) Then
                    decDescuentoLinea = Decimal.Parse(strDescuentoLinea, n)
                End If
            End If

            If strConfDetAccs = "Y" AndAlso intCantidad > 0 Then

                oFactura.Lines.ItemCode = strAccesorio
                oFactura.Lines.Quantity = intCantidad
                oFactura.Lines.UnitPrice = decPrecio
                oFactura.Lines.TaxCode = strImpuesto
                oFactura.Lines.VatGroup = strImpuesto
                If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                    oFactura.Lines.WarehouseCode = strBodegaTipoVeh
                    strRevenuesAc = Utilitarios.EjecutarConsulta("SELECT RevenuesAc FROM OWHS WITH (nolock) WHERE WhsCode = '" & strBodegaTipoVeh & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                    If Not String.IsNullOrEmpty(strRevenuesAc) Then
                        oFactura.Lines.AccountCode = strRevenuesAc.Trim()
                    End If


                ElseIf Not String.IsNullOrEmpty(strBodegaAccGeneral) Then
                    oFactura.Lines.WarehouseCode = strBodegaAccGeneral
                End If
                If Not decDescuentoLinea = 0 Then
                    oFactura.Lines.DiscountPercent = decDescuentoLinea
                End If

                '******************************************************************************************
                If blnAplicaDimension Then
                    '*****************************************************************************
                    'Agrego dimensiones contables en las lineas de la facturas
                    If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                        ClsLineasDocumentosDimension.AgregarDimensionesLineasDocumentos(oFactura.Lines, oDataTableDimensionesContablesDMS)

                    End If
                    '*****************************************************************************
                End If
                '******************************************************************************************

                oFactura.Lines.Add()

            Else

                monto = intCantidad * decPrecio
                If Not (impuestos.ContainsKey(strImpuesto)) Then impuestos.Add(strImpuesto, 0)
                impuestos.Item(strImpuesto) += monto

                If Not decDescuentoLinea = 0 Then

                    decDescuentoCalc = monto * (decDescuentoLinea / 100)
                    If Not (descuentos.ContainsKey(strImpuesto)) Then descuentos.Add(strImpuesto, 0)
                    descuentos.Item(strImpuesto) += decDescuentoCalc

                End If

            End If

        Next

        If Not strConfDetAccs = "Y" Then

            For Each impuestoSumado As KeyValuePair(Of String, Decimal) In impuestos

                If strItemCodeLocal <> "" AndAlso impuestoSumado.Value > 0 Then

                    oFactura.Lines.ItemCode = strItemCodeLocal
                    oFactura.Lines.UnitPrice = impuestoSumado.Value
                    oFactura.Lines.TaxCode = impuestoSumado.Key
                    oFactura.Lines.VatGroup = impuestoSumado.Key
                    If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                        oFactura.Lines.WarehouseCode = strBodegaTipoVeh
                        strRevenuesAc = Utilitarios.EjecutarConsulta("SELECT RevenuesAc FROM OWHS WITH (nolock) WHERE WhsCode = '" & strBodegaTipoVeh & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        If Not String.IsNullOrEmpty(strRevenuesAc) Then
                            oFactura.Lines.AccountCode = strRevenuesAc.Trim()
                        End If
                    ElseIf Not String.IsNullOrEmpty(strBodegaAccGeneral) Then
                        oFactura.Lines.WarehouseCode = strBodegaAccGeneral

                    End If

                    For Each impuestoDescuento As KeyValuePair(Of String, Decimal) In descuentos
                        If impuestoSumado.Key = impuestoDescuento.Key AndAlso Not impuestoDescuento.Value = 0 Then
                            decDescuento = (impuestoDescuento.Value / impuestoSumado.Value) * 100
                            oFactura.Lines.DiscountPercent = decDescuento
                        End If
                    Next

                    '******************************************************************************************
                    If blnAplicaDimension Then
                        '*****************************************************************************
                        'Agrego dimensiones contables en las lineas de la facturas
                        If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                            ClsLineasDocumentosDimension.AgregarDimensionesLineasDocumentos(oFactura.Lines, oDataTableDimensionesContablesDMS)

                        End If
                        '*****************************************************************************
                    End If
                    '******************************************************************************************

                    oFactura.Lines.Add()

                End If

            Next

        End If

        intError = oFactura.Add()
        If intError <> 0 Then
            m_oCompany.GetLastError(intError, strMensajeError)
            Throw New ExceptionsSBO(intError, strMensajeError)
        Else
            m_oCompany.GetNewObjectCode(strFacturaAccesorios)
            oForm.Items.Item("txtFactAcc").Specific.String = strFacturaAccesorios
        End If

    End Sub

    Private Sub GenerarFacturaGastos(ByVal strCliente As String, ByVal strComentarios As String, ByVal strMoneda As String, ByVal intPeriodoPago As Integer, ByVal strVendedor As String, ByVal strDocCurrency As String)

        Dim n As NumberFormatInfo

        Dim oFactura As SAPbobsCOM.Documents
        Dim oMatrixGastos As SAPbouiCOM.Matrix

        Dim intError As Integer
        Dim strMensajeError As String = ""
        Dim strFacturaGastos As String = ""
        Dim strIndicador As String
        Dim strMontoGasto As String
        Dim decMontoGasto As Decimal
        Dim strConsulta As String
        Dim strCodGasto As String
        Dim strTipoConfGasto As String
        Dim intSerieDocumento As Integer = -1
        Dim oCABYS As CABYS = New CABYS()
        n = DIHelper.GetNumberFormatInfo(m_oCompany)

        oMatrixGastos = DirectCast(oForm.Items.Item("mtx_1").Specific, SAPbouiCOM.Matrix)

        oFactura = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oInvoices), SAPbobsCOM.Documents)

        intSerieDocumento = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaGastos)

        If intSerieDocumento <> -1 Then
            oFactura.Series = intSerieDocumento
        End If

        oFactura.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Items
        oFactura.CardCode = strCliente
        oFactura.Comments = strComentarios
        If Not String.IsNullOrEmpty(strMoneda) Then
            oFactura.DocCurrency = strMoneda
        Else
            oFactura.DocCurrency = strDocCurrency
        End If
        oFactura.PaymentGroupCode = intPeriodoPago
        oFactura.DocDate = dtFechaDocumento
        If Not String.IsNullOrEmpty(strVendedor) Then
            oFactura.SalesPersonCode = strVendedor
        End If
        strIndicador = Utilitarios.DevuelveCodIndicadores(m_SBO_Application, "12")
        If Not String.IsNullOrEmpty(strIndicador) Then
            oFactura.Indicator = strIndicador
        End If
        '******************INICIO | CABYS **************
        If DMS_Connector.Configuracion.ParamGenAddon.U_CABYS_CR = "Y" Then
            oCABYS.CardCode = strCliente
            ObtieneValoresExoneracionSN(oCABYS)
            If Not String.IsNullOrEmpty(oCABYS.OrigenTributario) Then oFactura.UserFields.Fields.Item("U_SCG_IVA2_LugarCons").Value = oCABYS.OrigenTributario
            If Not String.IsNullOrEmpty(oCABYS.TipoExoneracion) Then oFactura.UserFields.Fields.Item("U_SCG_IVA2_TipoExo").Value = oCABYS.TipoExoneracion
        End If
        '******************FIN | CABYS ******************
        ' Usa Tipo Cambio Contrato 
        If strUsaTCContrato = "Y" And m_decTipoCambio > 0 Then
            If Not String.IsNullOrEmpty(strMoneda) And strDocCurrency = strMoneda Then
                oFactura.DocRate = m_decTipoCambio
            ElseIf String.IsNullOrEmpty(strMoneda) Then
                oFactura.DocRate = m_decTipoCambio
            End If
        End If

        For i As Integer = 0 To oMatrixGastos.RowCount - 1

            strMontoGasto = oForm.DataSources.DBDataSources.Item("@SCGD_LINEASSUM").GetValue("U_Monto", i)
            strMontoGasto = strMontoGasto.Trim()
            If Not String.IsNullOrEmpty(strMontoGasto) Then
                decMontoGasto = Decimal.Parse(strMontoGasto, n)
            Else
                decMontoGasto = 0
            End If

            If decMontoGasto > 0 Then

                strCodGasto = oForm.DataSources.DBDataSources.Item("@SCGD_LINEASSUM").GetValue("U_Cod_Item", i)
                strCodGasto = strCodGasto.Trim()

                oDataTableConfGastos.Rows.Clear()
                oDataTableConfGastos = oForm.DataSources.DataTables.Item("ConfGast")

                strConsulta = "Select Code, U_Tipo, U_Cod_Item, U_Cod_GA, U_Impuesto From [@SCGD_CONFLINEASSUM] WITH (nolock) Where Code = '" & strCodGasto & "'"

                oDataTableConfGastos.ExecuteQuery(strConsulta)

                If Not String.IsNullOrEmpty(oDataTableConfGastos.GetValue("Code", 0)) Then

                    strTipoConfGasto = oDataTableConfGastos.GetValue("U_Tipo", 0)

                    If strTipoConfGasto = "1" AndAlso Not String.IsNullOrEmpty(oDataTableConfGastos.GetValue("U_Cod_Item", 0)) Then

                        oFactura.Lines.ItemCode = oDataTableConfGastos.GetValue("U_Cod_Item", 0)
                        If Not String.IsNullOrEmpty(oDataTableConfGastos.GetValue("U_Impuesto", 0)) Then
                            oFactura.Lines.TaxCode = oDataTableConfGastos.GetValue("U_Impuesto", 0)
                            oFactura.Lines.VatGroup = oDataTableConfGastos.GetValue("U_Impuesto", 0)
                        End If
                        oFactura.Lines.UnitPrice = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMontoGasto, strDocCurrency, 1, dtFechaDocumento)
                        '******************INICIO | CABYS **************
                        If DMS_Connector.Configuracion.ParamGenAddon.U_CABYS_CR = "Y" Then
                            oCABYS.CodigoArticulo = oDataTableConfGastos.GetValue("U_Cod_Item", 0)
                            oCABYS.IndicadorIVA = oDataTableConfGastos.GetValue("U_Impuesto", 0)
                            ManejaCABYS(oCABYS)
                            If Not String.IsNullOrEmpty(oCABYS.CABYS_AE) Then oFactura.Lines.UserFields.Fields.Item("U_SCG_IVA2_Act_Econ").Value = oCABYS.CABYS_AE
                            If Not String.IsNullOrEmpty(oCABYS.CABYS_TI) Then oFactura.Lines.UserFields.Fields.Item("U_SCG_IVA2_TipoItem").Value = oCABYS.CABYS_TI
                            If Not String.IsNullOrEmpty(oCABYS.CABYS_CH) Then oFactura.Lines.UserFields.Fields.Item("U_SCG_IVA2_CodItem").Value = oCABYS.CABYS_CH
                        End If
                        '******************FIN | CABYS ******************
                        oFactura.Lines.Add()

                    ElseIf strTipoConfGasto = "2" AndAlso Not String.IsNullOrEmpty(oDataTableConfGastos.GetValue("U_Cod_GA", 0)) Then

                        oFactura.Expenses.ExpenseCode = oDataTableConfGastos.GetValue("U_Cod_GA", 0)
                        If Not String.IsNullOrEmpty(oDataTableConfGastos.GetValue("U_Impuesto", 0)) Then
                            oFactura.Expenses.TaxCode = oDataTableConfGastos.GetValue("U_Impuesto", 0)
                            oFactura.Expenses.VatGroup = oDataTableConfGastos.GetValue("U_Impuesto", 0)
                        End If
                        oFactura.Expenses.LineTotal = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMontoGasto, strDocCurrency, 1, dtFechaDocumento)
                        oFactura.Expenses.Add()

                    End If

                End If

            End If

        Next

        intError = oFactura.Add()
        If intError <> 0 Then
            m_oCompany.GetLastError(intError, strMensajeError)
            Throw New ExceptionsSBO(intError, strMensajeError)
        Else
            m_oCompany.GetNewObjectCode(strFacturaGastos)
            oForm.Items.Item("txtFactGA").Specific.String = strFacturaGastos
        End If

    End Sub

    ''' <summary>
    ''' Genera un asiento contable de regularización para un vehículo consignado
    ''' </summary>
    ''' <param name="p_strCardCode">CardCode del propietario del vehículo consignado</param>
    ''' <param name="p_strMonedaContrato">Moneda del contrato de ventas</param>
    ''' <param name="p_strNumeroUnidad">Número de vehículo/unidad</param>
    ''' <param name="p_strNumContrato">Número de contrato de ventas</param>
    ''' <returns>DocEntry del asiento contable creado</returns>
    ''' <remarks></remarks>
    Private Function GenerarAsientoRegularizacionConsignados(ByVal p_strCardCode As String, ByVal p_strMonedaContrato As String, _
                                              ByVal p_strNumeroUnidad As String, ByVal p_strNumContrato As String) As String
        Dim strCuentaComisionConsignados As String = String.Empty
        Dim oJournalEntryReg As SAPbobsCOM.JournalEntries
        Dim oJournalEntryFactura As SAPbobsCOM.JournalEntries
        Dim oJournalEntryFacturaLines As SAPbobsCOM.JournalEntries_Lines
        Dim intError As Integer
        Dim strMensajeError As String = String.Empty
        Dim strMonedaAsiento As String = String.Empty
        Dim strNumAsiento As String = String.Empty
        Dim decMontoSinImpuesto As Decimal = 0
        Dim boolAgregarDimension As Boolean = False
        Dim oFacturaCliente As SAPbobsCOM.Documents
        Dim montoFactura As Double = 0
        Dim montoFacturaImpuesto As Double = 0
        Dim strDocEntryFactura As String = String.Empty
        Dim strCuentaIngresos As String = String.Empty
        Dim strTipoVehiculo As String = String.Empty
        Dim decPrecioVenta As Decimal = 0
        Dim strAsientoFactura As String = String.Empty
        Dim strFechaReversion As String = String.Empty
        Dim dtFechaFechaReversion As Date


        Try
            'El CardCode del cliento propietario del vehículo no puede estar en blanco
            If Not String.IsNullOrEmpty(p_strCardCode) Then

                'Inicializa los objetos
                oJournalEntryReg = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oJournalEntries)
                oJournalEntryFactura = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oJournalEntries)

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                'Encabezado del asiento contable
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                oJournalEntryReg.ReferenceDate = dtFechaDocumento
                oJournalEntryReg.Reference = p_strNumeroUnidad.Trim()
                oJournalEntryReg.Reference2 = p_strNumContrato.Trim()
                oJournalEntryReg.Memo = My.Resources.Resource.MensajeAsientoConsignado & " " & p_strNumContrato

                'Obtenemos el número de la factura creada y que vamos a reversar para generar la regularización contable
                strDocEntryFactura = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_No_Fac", 0).Trim()  'txtNofac

                oFacturaCliente = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oInvoices), SAPbobsCOM.Documents)
                If Not String.IsNullOrEmpty(strDocEntryFactura) Then
                    oFacturaCliente.GetByKey(strDocEntryFactura)
                    'Número del asiento contable perteneciente a la factura
                    strAsientoFactura = oFacturaCliente.TransNum
                End If


                'Llama al asiento que queremos regularizar
                oJournalEntryFactura.GetByKey(strAsientoFactura)
                oJournalEntryFacturaLines = oJournalEntryFactura.Lines

                'Recorre todas las líneas del asiento y las reversa con excepción de la línea del código del cliente
                'la cual se cambia por el cliente propietario para generar el asiento de regularización.
                For i As Integer = 0 To oJournalEntryFacturaLines.Count - 1
                    oJournalEntryFacturaLines.SetCurrentLine(i)

                    With oJournalEntryFacturaLines

                        'La cuenta del cliente de la factura se debe cambiar por la del propietario del vehículo
                        If .Debit > .Credit And .ShortName = oFacturaCliente.CardCode Then
                            oJournalEntryReg.Lines.ShortName = p_strCardCode
                        Else
                            oJournalEntryReg.Lines.ShortName = .ShortName
                            oJournalEntryReg.Lines.AccountCode = .AccountCode
                        End If

                        oJournalEntryReg.Lines.Debit = .Credit
                        oJournalEntryReg.Lines.FCDebit = .FCCredit
                        oJournalEntryReg.Lines.Credit = .Debit
                        oJournalEntryReg.Lines.FCCredit = .FCDebit
                        If Not String.IsNullOrEmpty(.FCCurrency) Then
                            oJournalEntryReg.Lines.FCCurrency = .FCCurrency
                        End If
                        oJournalEntryReg.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO
                        oJournalEntryReg.Lines.Reference1 = My.Resources.Resource.ReferenciaCV & ": " & p_strNumContrato

                        'Utiliza las mismas dimensiones que el asiento de la factura
                        oJournalEntryReg.Lines.CostingCode = .CostingCode
                        oJournalEntryReg.Lines.CostingCode2 = .CostingCode2
                        oJournalEntryReg.Lines.CostingCode3 = .CostingCode3
                        oJournalEntryReg.Lines.CostingCode4 = .CostingCode4
                        oJournalEntryReg.Lines.CostingCode5 = .CostingCode5

                        'Agrega una línea
                        oJournalEntryReg.Lines.Add()
                    End With

                Next

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                'Creación del asiento y manejo de errores
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                If oJournalEntryReg.Add <> 0 Then
                    m_oCompany.GetLastError(intError, strMensajeError)
                    If m_oCompany.InTransaction() Then
                        m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                    End If
                    Throw New Exception(String.Format("{0} Error: {1} {2}", My.Resources.Resource.AsientoRegConsignado, intError, strMensajeError))
                Else
                    m_oCompany.GetNewObjectCode(strNumAsiento)
                    'oForm.Items.Item("txtAsCS").Specific.String = strNumAsiento
                End If

            Else
                'Mensaje de error campo U_CodClCon Cliente de propietario consignado no puede estar en blanco
                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorClienteConsignadoBlanco, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
            End If

            Return strNumAsiento

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
            If m_oCompany.InTransaction() Then
                m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
            End If
        End Try

    End Function

    ''' <summary>
    ''' Genera un asiento contable de regularización para un vehículo consignado
    ''' </summary>
    ''' <param name="p_strCardCode">CardCode del propietario del vehículo consignado</param>
    ''' <param name="p_strMonedaContrato">Moneda del contrato de ventas</param>
    ''' <param name="p_strNumeroUnidad">Número de vehículo/unidad</param>
    ''' <param name="p_strNumContrato">Número de contrato de ventas</param>
    ''' <returns>DocEntry del asiento contable creado</returns>
    ''' <remarks></remarks>
    Private Function GenerarAsientoConsignado(ByVal p_strCardCode As String, ByVal p_strMonedaContrato As String, _
                                              ByVal p_strNumeroUnidad As String, ByVal p_strNumContrato As String) As String
        Dim strCuentaComisionConsignados As String = String.Empty
        Dim oJournalEntry As SAPbobsCOM.JournalEntries
        Dim intError As Integer
        Dim strMensajeError As String = String.Empty
        Dim strMonedaAsiento As String = String.Empty
        Dim strNumAsiento As String = String.Empty
        Dim decMontoSinImpuesto As Decimal = 0
        Dim boolAgregarDimension As Boolean = False
        Dim oFacturaCliente As SAPbobsCOM.Documents
        Dim montoFactura As Double = 0
        Dim montoFacturaImpuesto As Double = 0
        Dim strDocEntryFactura As String = String.Empty
        Dim strCuentaIngresos As String = String.Empty
        Dim strTipoVehiculo As String = String.Empty
        Dim decPrecioVenta As Decimal = 0

        Try

            Dim strCodigoUnidad As String = p_strNumeroUnidad
            Dim strTipoInventario As String = Utilitarios.EjecutarConsulta("Select U_TipIn From dbo.[@SCGD_VEHIXCONT] WITH (nolock) Where U_Cod_Unid = '" & strCodigoUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
            Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from [@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & strCodigoUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            strDocEntryFactura = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_No_Fac", 0).Trim()  'txtNofac

            'Trae el precio de venta desde la pestaña datos de venta
            Dim strPrecioVenta As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0)

            strPrecioVenta = strPrecioVenta.Trim()

            If Not String.IsNullOrEmpty(strPrecioVenta) Then
                decPrecioVenta = Decimal.Parse(strPrecioVenta, n)
            End If


            strCuentaIngresos = objConfiguracionGeneral.CuentaIngreso(strTipoInventario)

            If String.IsNullOrEmpty(strCuentaIngresos) Then
                oFacturaCliente = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oInvoices), SAPbobsCOM.Documents)
                If Not String.IsNullOrEmpty(strNFactura) Then
                    oFacturaCliente.GetByKey(strDocEntryFactura)
                    'montoFactura = oFacturaCliente.DocTotal - oFacturaCliente.VatSum
                    'TransNum = TransId
                    'AcctCode()
                    strCuentaIngresos = oFacturaCliente.Lines.AccountCode
                End If
            End If


            decMontoSinImpuesto = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MNetoFC", 0), n)

            'El monto debe ser mayor a cero y debe tener una cuenta parametrizada, de lo contrario no se genera el asiento contable 
            If Not String.IsNullOrEmpty(p_strCardCode) AndAlso decMontoSinImpuesto > 0 Then
                'Inicializa el objeto
                oJournalEntry = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oJournalEntries)
                'Llama la cuenta configurada en las parametrizaciones generales para utilizar al crear asiento para la primer cuota de seguro
                strCuentaComisionConsignados = oDataTableConfiguracionesDMS.GetValue("U_CtaComCns", 0).ToString().Trim()

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                'Encabezado del asiento contable
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                oJournalEntry.ReferenceDate = dtFechaDocumento
                oJournalEntry.Reference = p_strNumeroUnidad.Trim()
                oJournalEntry.Reference2 = p_strNumContrato.Trim()
                oJournalEntry.Memo = My.Resources.Resource.MensajeAsientoConsignado & " " & p_strNumContrato

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                'Lineas del asiento contable
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''

                'Manejo del tipo de cambio y monedas

                'Utiliza la misma moneda del contrato de ventas
                strMonedaAsiento = p_strMonedaContrato

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                'Manejo de las dimensiones contables para las lineas
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                If blnUsaDimensiones Then

                    Dim strAsientoComisionConsignado As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoComisionConsignado
                    Dim strValorDimension As String = ListaConfiguracion.Item(strAsientoComisionConsignado)

                    ClsLineasDocumentosDimension = New AgregarDimensionLineasDocumentosCls(m_oCompany, m_SBO_Application)

                    If Not String.IsNullOrEmpty(strValorDimension) Then
                        If strValorDimension.ToUpper() = "Y" Then


                            oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipoInventario, strCodigoMarca, oDataTableDimensionesContablesDMS))

                            'Si hay dimensiones contables definidas para el tipo de inventario y marca
                            'se procede a agregarlas para todas las líneas del asiento por igual
                            If oDataTableDimensionesContablesDMS.Rows.Count > 0 Then
                                boolAgregarDimension = True
                            End If
                        End If
                    End If

                End If

                'Cuenta del cliente
                oJournalEntry.Lines.ShortName = p_strCardCode
                If strMonedaAsiento = m_strMonedaLocal Then
                    oJournalEntry.Lines.Credit = decPrecioVenta
                Else
                    oJournalEntry.Lines.FCCredit = decPrecioVenta
                    oJournalEntry.Lines.FCCurrency = strMonedaAsiento
                End If
                'If strMonedaAsiento = m_strMonedaLocal Then
                '    oJournalEntry.Lines.Credit = decMontoSinImpuesto
                'Else
                '    oJournalEntry.Lines.FCCredit = decMontoSinImpuesto
                '    oJournalEntry.Lines.FCCurrency = strMonedaAsiento
                'End If
                'oJournalEntry.Lines.Credit = montoFactura
                oJournalEntry.Lines.Reference1 = p_strNumeroUnidad.Trim()
                oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

                If boolAgregarDimension = True Then
                    ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)
                End If

                oJournalEntry.Lines.Add()

                'Cuenta de comisiones por vehículo consignado
                'oJournalEntry.Lines.AccountCode = strCuentaComisionConsignados
                oJournalEntry.Lines.AccountCode = strCuentaIngresos
                If strMonedaAsiento = m_strMonedaLocal Then
                    oJournalEntry.Lines.Debit = decPrecioVenta
                Else
                    oJournalEntry.Lines.FCDebit = decPrecioVenta
                    oJournalEntry.Lines.FCCurrency = strMonedaAsiento
                End If
                'If strMonedaAsiento = m_strMonedaLocal Then
                '    oJournalEntry.Lines.Debit = decMontoSinImpuesto
                'Else
                '    oJournalEntry.Lines.FCDebit = decMontoSinImpuesto
                '    oJournalEntry.Lines.FCCurrency = strMonedaAsiento
                'End If
                'oJournalEntry.Lines.Debit = montoFactura
                oJournalEntry.Lines.Reference1 = p_strNumeroUnidad.Trim()
                oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

                If boolAgregarDimension = True Then
                    ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)
                End If

                oJournalEntry.Lines.Add()

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                'Creación del asiento y manejo de errores
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                If oJournalEntry.Add <> 0 Then
                    m_oCompany.GetLastError(intError, strMensajeError)
                    If m_oCompany.InTransaction() Then
                        m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                    End If
                    Throw New Exception(String.Format("{0} Error: {1} {2}", My.Resources.Resource.AsientoRegConsignado, intError, strMensajeError))
                Else
                    m_oCompany.GetNewObjectCode(strNumAsiento)
                    'oForm.Items.Item("txtAsCS").Specific.String = strNumAsiento
                End If
            Else
                'Mensaje de error campo U_CodClCon Cliente de propietario consignado no puede estar en blanco
                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorClienteConsignadoBlanco, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
            End If

            Return strNumAsiento

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function



    ''' <summary>
    ''' Genera un asiento contable para la primer cuota del seguro
    ''' </summary>
    ''' <param name="p_strCliente">Código del cliente en formato texto, campo "U_CliConCod" de la tabla "@SCGD_CVENTA".</param>
    ''' <param name="p_strMonedaContrato">Monto total de la primer cuota, campo "U_Val_PC"de la tabla "@SCGD_CVENTA".</param>
    ''' <param name="p_MontoSeguro">Monto total de la primer cuota del seguro</param>
    ''' <param name="p_strUnidad">Número de vehículo/unidad sobre el cual aplica el seguro</param>
    ''' <param name="p_strNumContrato">Número del contrato de ventas</param>
    ''' <param name="p_strRef1">Referencia 1 para el asiento contable, generalmente se utiliza el número de unidad.</param>
    ''' <param name="p_strMemo">Comentarios para el asiento contable</param>
    ''' <returns>Devuelve número de asiento contable creado</returns>
    ''' <remarks></remarks>
    Private Function GenerarAsientoCuotaSeguro(ByVal p_strCliente As String, ByVal p_strMonedaConfiguracion As String, ByVal p_strMonedaContrato As String,
                                               ByVal p_MontoSeguro As Decimal, ByVal p_strUnidad As String, ByVal p_strNumContrato As String,
                                               ByVal p_strRef1 As String, ByVal p_strMemo As String) As String
        Dim strCuentaCuotaSeguro As String = String.Empty
        Dim oJournalEntry As SAPbobsCOM.JournalEntries
        Dim intError As Integer
        Dim strMensajeError As String = String.Empty
        Dim strMonedaAsiento As String = String.Empty
        Dim strNumAsiento As String = String.Empty
        Dim strFechaDocumento As String = String.Empty
        Dim decMontoSeguro As Decimal = 0
        Dim boolAgregarDimension As Boolean = False

        Try
            'El monto debe ser mayor a cero y debe tener una cuenta parametrizada, de lo contrario no se genera el asiento contable 
            If Not String.IsNullOrEmpty(p_strCliente) AndAlso p_MontoSeguro > 0 Then
                'Inicializa el objeto
                oJournalEntry = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oJournalEntries)
                'Llama la cuenta configurada en las parametrizaciones generales para utilizar al crear asiento para la primer cuota de seguro
                strCuentaCuotaSeguro = oDataTableConfiguracionesDMS.GetValue("U_CtaCSHa", 0).ToString().Trim()

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                'Encabezado del asiento contable
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''

                strFechaDocumento = dtFechaDocumento
                oJournalEntry.ReferenceDate = strFechaDocumento
                oJournalEntry.Reference = p_strUnidad
                oJournalEntry.Reference2 = p_strNumContrato
                oJournalEntry.Memo = p_strMemo

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                'Lineas del asiento contable
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''

                'Manejo del tipo de cambio y monedas

                'Utiliza la misma moneda del contrato de ventas
                strMonedaAsiento = p_strMonedaContrato

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                'Manejo de las dimensiones contables para las lineas
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                If blnUsaDimensiones Then

                    Dim strAsientoPrimerCuotaSeguro As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoPrimerCuotaSeguro
                    Dim strValorDimension As String = ListaConfiguracion.Item(strAsientoPrimerCuotaSeguro)

                    ClsLineasDocumentosDimension = New AgregarDimensionLineasDocumentosCls(m_oCompany, m_SBO_Application)

                    If Not String.IsNullOrEmpty(strValorDimension) Then
                        If strValorDimension.ToUpper() = "Y" Then

                            Dim strCodigoUnidad As String = p_strUnidad
                            Dim strTipoInventario As String = Utilitarios.EjecutarConsulta("Select U_TipIn From dbo.[@SCGD_VEHIXCONT] WITH (nolock) Where U_Cod_Unid = '" & strCodigoUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                            Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from [@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & strCodigoUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                            oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipoInventario, strCodigoMarca, oDataTableDimensionesContablesDMS))

                            'Si hay dimensiones contables definidas para el tipo de inventario y marca
                            'se procede a agregarlas para todas las líneas del asiento por igual
                            If oDataTableDimensionesContablesDMS.Rows.Count > 0 Then
                                boolAgregarDimension = True
                            End If
                        End If
                    End If

                End If


                decMontoSeguro = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, p_strMonedaConfiguracion, p_MontoSeguro, p_strMonedaContrato, 1, strFechaDocumento)

                'Cuenta del cliente
                oJournalEntry.Lines.ShortName = p_strCliente
                If strMonedaAsiento = m_strMonedaLocal Then
                    oJournalEntry.Lines.Debit = decMontoSeguro
                Else
                    oJournalEntry.Lines.FCDebit = decMontoSeguro
                    oJournalEntry.Lines.FCCurrency = strMonedaAsiento
                End If
                oJournalEntry.Lines.Reference1 = p_strRef1
                oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

                If boolAgregarDimension = True Then
                    ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)
                End If

                oJournalEntry.Lines.Add()

                'Cuenta de seguro por pagar clientes
                oJournalEntry.Lines.AccountCode = strCuentaCuotaSeguro
                If strMonedaAsiento = m_strMonedaLocal Then
                    oJournalEntry.Lines.Credit = decMontoSeguro
                Else
                    oJournalEntry.Lines.FCCredit = decMontoSeguro
                    oJournalEntry.Lines.FCCurrency = strMonedaAsiento
                End If
                oJournalEntry.Lines.Reference1 = p_strRef1
                oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

                If boolAgregarDimension = True Then
                    ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)
                End If

                oJournalEntry.Lines.Add()

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                'Creación del asiento y manejo de errores
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                If oJournalEntry.Add <> 0 Then
                    m_oCompany.GetLastError(intError, strMensajeError)
                    If m_oCompany.InTransaction() Then
                        m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                    End If
                    Throw New Exception(String.Format("{0} Error: {1} {2}", My.Resources.Resource.DocumentoAsientoSeguro, intError, strMensajeError))
                Else
                    m_oCompany.GetNewObjectCode(strNumAsiento)
                    oForm.Items.Item("txtAsCS").Specific.String = strNumAsiento
                End If

                'Si no hay errores se informa de la creación del asiento contable
                'm_SBO_Application.StatusBar.SetText("Generando asiento primer cuota seguro", SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
            End If

            Return strNumAsiento

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Private Sub GenerarAsiento(ByVal strMemo As String, ByVal strMonedaConfig As String, ByVal strDocCurrency As String, ByVal decMonto As Decimal, ByVal strRef1 As String, _
                               ByVal strCliente As String, ByVal strCuenta As String, ByRef strAsiento As String,
                               ByVal p_strUnidad As String, ByRef p_strContrato As String)

        Dim oJournalEntry As SAPbobsCOM.JournalEntries

        Dim intError As Integer
        Dim strMensajeError As String = ""

        Dim strMoneda As String
        Dim decMontoAsiento As Decimal
        Dim blnAgregarDimensiones As Boolean = False

        If Not String.IsNullOrEmpty(strMonedaConfig) Then
            strMoneda = strMonedaConfig
        Else
            strMoneda = strDocCurrency
        End If

        decMontoAsiento = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfig, decMonto, strDocCurrency, 1, dtFechaDocumento)

        oJournalEntry = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oJournalEntries)

        oJournalEntry.ReferenceDate = dtFechaDocumento

        oJournalEntry.Reference = p_strUnidad
        oJournalEntry.Reference2 = p_strContrato

        oJournalEntry.Memo = strMemo

        If blnUsaDimensiones Then

            Dim strAsientoFinancExterno As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoFinancExterno
            Dim strValorDimension As String = ListaConfiguracion.Item(strAsientoFinancExterno)

            ClsLineasDocumentosDimension = New AgregarDimensionLineasDocumentosCls(m_oCompany, m_SBO_Application)

            If Not String.IsNullOrEmpty(strValorDimension) Then
                If strValorDimension = "Y" Then

                    Dim strCodigounidad As String = p_strUnidad
                    Dim strTipoInventario As String = Utilitarios.EjecutarConsulta("Select U_TipIn From dbo.[@SCGD_VEHIXCONT] WITH (nolock) Where U_Cod_Unid = '" & strCodigounidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                    Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from dbo.[@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & strCodigounidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                    oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipoInventario, strCodigoMarca, oDataTableDimensionesContablesDMS))

                    If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then
                        blnAgregarDimensiones = True
                    Else
                        blnAgregarDimensiones = False
                    End If

                End If
            End If

        End If

        oJournalEntry.Lines.AccountCode = strCuenta
        If strMoneda = m_strMonedaLocal Then
            oJournalEntry.Lines.Debit = decMontoAsiento
        Else
            oJournalEntry.Lines.FCDebit = decMontoAsiento
            oJournalEntry.Lines.FCCurrency = strMoneda
        End If
        oJournalEntry.Lines.Reference1 = strRef1
        oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

        If blnAgregarDimensiones Then

            ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)

        End If

        oJournalEntry.Lines.Add()

        oJournalEntry.Lines.ShortName = strCliente
        If strMoneda = m_strMonedaLocal Then
            oJournalEntry.Lines.Credit = decMontoAsiento
        Else
            oJournalEntry.Lines.FCCredit = decMontoAsiento
            oJournalEntry.Lines.FCCurrency = strMoneda
        End If
        oJournalEntry.Lines.Reference1 = strRef1
        oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

        If blnAgregarDimensiones Then

            ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)

        End If

        oJournalEntry.Lines.Add()

        If oJournalEntry.Add <> 0 Then
            m_oCompany.GetLastError(intError, strMensajeError)
            If m_oCompany.InTransaction() Then
                m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
            End If
            Throw New Exception(String.Format("{0} {1} Error: {2} {3}", strMemo, p_strContrato, intError, strMensajeError))
        Else
            m_oCompany.GetNewObjectCode(strAsiento)
        End If

    End Sub

    Private Sub GenerarAsientoTramites_NUEVO(ByVal strMonedaConfig As String, ByVal strDocCurrency As String, ByVal decMonto As Decimal, ByVal strCliente As String, _
                                      ByVal strContrato As String, ByVal oForm As SAPbouiCOM.Form, ByVal p_strUnidad As String, _
                                      Optional ByVal p_blnUsaCompensacionAsEnt As Boolean = False, Optional ByVal p_strFechaContrato As String = "", _
                                      Optional p_blnUsaTramitesFacturables As Boolean = False)

        Dim oJournalEntry As SAPbobsCOM.JournalEntries

        Dim intError As Integer
        Dim strMensajeError As String = String.Empty
        Dim strAsiento As String = String.Empty

        Dim strMoneda As String
        Dim strUnidad As String
        Dim strTipoVeh As String
        Dim strBodegaTipoVeh As String
        Dim strBodegaTramGen As String
        Dim strCuenta As String = String.Empty
        Dim oMatrixTram As SAPbouiCOM.Matrix
        Dim strPrecioTram As String
        Dim decPrecioTram As Decimal = 0
        Dim strTramite As String
        Dim strMetodoCuentas As String
        Dim strGrupoTram As String
        Dim oMatrizVehiculosVenta As SAPbouiCOM.Matrix
        Dim strValorDimension As String = String.Empty
        Dim blnAplicaDimension As Boolean = False
        Dim strFechaCont As String
        Dim dtFechaCont As Date
        Dim blnHayTramitesNoFacturables As Boolean = False

        If Not String.IsNullOrEmpty(strMonedaConfig) Then
            strMoneda = strMonedaConfig
        Else
            strMoneda = strDocCurrency
        End If

        If p_blnUsaCompensacionAsEnt Then

            strFechaCont = p_strFechaContrato.Trim()
            If Not String.IsNullOrEmpty(strFechaCont) Then
                dtFechaCont = Date.ParseExact(strFechaCont, "yyyyMMdd", Nothing)
                dtFechaCont = New Date(dtFechaCont.Year, dtFechaCont.Month, dtFechaCont.Day, 0, 0, 0)
            Else
                dtFechaCont = Date.Now
            End If
        End If

        If decMonto <= 0 Then
            Exit Sub

        End If

        oMatrizVehiculosVenta = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

        strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0)
        strUnidad = strUnidad.Trim()
        strTipoVeh = Utilitarios.EjecutarConsulta("Select U_Tipo from dbo.[@SCGD_Vehiculo] WITH (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)
        strBodegaTipoVeh = Utilitarios.EjecutarConsulta("Select U_Bod_Tram from dbo.[@SCGD_ADMIN4] WITH (nolock) where U_Tipo = '" & strTipoVeh & "' and Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)
        oMatrixTram = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

        oJournalEntry = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oJournalEntries)

        If blnUsaDimensiones Then
            If Not oMatrizVehiculosVenta.RowCount > 1 Then
                Dim strAsientoTramite As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoTramites
                strValorDimension = ListaConfiguracion.Item(strAsientoTramite)
                If Not String.IsNullOrEmpty(strValorDimension) Then
                    If strValorDimension = "Y" Then
                        Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from dbo.[@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & strUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        '******************************************************************************************
                        'lleno el datatable de dimensiones para el tipo de inventario y la marca del vehiculo
                        oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipoVeh, strCodigoMarca, oDataTableDimensionesContablesDMS))
                        blnAplicaDimension = True
                    End If
                End If
            End If
        End If

        oJournalEntry.ReferenceDate = dtFechaDocumento
        oJournalEntry.Reference = p_strUnidad
        oJournalEntry.Reference2 = strContrato
        oJournalEntry.Memo = My.Resources.Resource.ComentarioTramite & strContrato & " - " & strCliente
        oJournalEntry.Lines.ShortName = strCliente


        If strMoneda = m_strMonedaLocal Then
            oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMonto, strDocCurrency, 1, dtFechaDocumento)
        Else

            'para valores no compensados en ME
            If p_blnUsaCompensacionAsEnt Then
                oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, decMonto, strDocCurrency, 1, dtFechaCont)
            End If

            oJournalEntry.Lines.FCDebit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMonto, strDocCurrency, 1, dtFechaDocumento)
            oJournalEntry.Lines.FCCurrency = strMoneda
        End If
        oJournalEntry.Lines.Reference1 = My.Resources.Resource.Cont & strContrato & " - " & strCliente
        oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

        '******************************************************************************************
        If blnAplicaDimension Then
            'Agrego dimensiones contables en las lineas del asiento 
            If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)

            End If
        End If
        '******************************************************************************************

        oJournalEntry.Lines.Add()


        '*********** Contra Cuentas ***************************
        Dim strUsaAlmacenTramites As String = String.Empty
        strUsaAlmacenTramites = oDataTableConfiguracionesDMS.GetValue("U_UsaWHTramites", 0)
        If String.IsNullOrEmpty(strUsaAlmacenTramites) Then
            strUsaAlmacenTramites = "N"
        End If

        If Not String.IsNullOrEmpty(strBodegaTipoVeh) And strUsaAlmacenTramites = "Y" Then

            strCuenta = Utilitarios.EjecutarConsulta("Select SaleCostAc from [OWHS] WITH (nolock) where WhsCode = '" & strBodegaTipoVeh & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            oJournalEntry.Lines.AccountCode = strCuenta
            If strMoneda = m_strMonedaLocal Then
                oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMonto, strDocCurrency, 1, dtFechaDocumento)
            Else
                'para valores no compensados en ME
                If p_blnUsaCompensacionAsEnt Then
                    oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, decMonto, strDocCurrency, 1, dtFechaCont)
                End If

                oJournalEntry.Lines.FCCredit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMonto, strDocCurrency, 1, dtFechaDocumento)
                oJournalEntry.Lines.FCCurrency = strMoneda
            End If
            oJournalEntry.Lines.Reference1 = My.Resources.Resource.Cont & strContrato & " - " & strCliente
            oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

            '******************************************************************************************
            If blnAplicaDimension Then
                'Agrego dimensiones contables en las lineas del asiento 
                If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                    ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)

                End If
            End If
            '******************************************************************************************
            blnHayTramitesNoFacturables = True
            oJournalEntry.Lines.Add()

        Else
            Dim oListaLineasAsiento As New List(Of ListaLineaAsientoContable)()
            Dim oListaAsiento As New List(Of ListaLineaAsientoContable)()
            Dim strCampoAUtilizar As String


            If p_blnUsaTramitesFacturables Then
                strCampoAUtilizar = "U_Pre_Uni"
            Else
                strCampoAUtilizar = "U_Pre_Tot"
            End If

            strBodegaTramGen = oDataTableConfiguracionesDMS.GetValue("U_AlmGeTra", 0)

            For i As Integer = 0 To oMatrixTram.RowCount - 1

                If p_blnUsaTramitesFacturables Then

                    If oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_SCGD_Fct", i).Trim() = "N" Then

                        strPrecioTram = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue(strCampoAUtilizar, i)
                        strPrecioTram = strPrecioTram.Trim()
                        If Not String.IsNullOrEmpty(strPrecioTram) Then
                            decPrecioTram = Decimal.Parse(strPrecioTram, n)
                        End If
                        If decPrecioTram > 0 Then
                            strTramite = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Cod_Tram", i)
                            strTramite = strTramite.Trim()

                            strCuenta = ObtenerCuentaItem(strTramite, strBodegaTramGen, NombreCuentas.SaleCostAc.ToString())
                            If Not String.IsNullOrEmpty(strCuenta) Then
                                oListaLineasAsiento.Add(New ListaLineaAsientoContable() With {.Account = strCuenta.Trim(), .Credit = decPrecioTram, .Aplicado = False})
                            End If
                        End If
                        blnHayTramitesNoFacturables = True
                    End If


                Else
                    blnHayTramitesNoFacturables = True

                    strPrecioTram = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue(strCampoAUtilizar, i)
                    strPrecioTram = strPrecioTram.Trim()
                    If Not String.IsNullOrEmpty(strPrecioTram) Then
                        decPrecioTram = Decimal.Parse(strPrecioTram, n)
                    End If
                    If decPrecioTram > 0 Then
                        strTramite = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Cod_Tram", i)
                        strTramite = strTramite.Trim()
                        strCuenta = ObtenerCuentaItem(strTramite, strBodegaTramGen, NombreCuentas.SaleCostAc.ToString())
                        If Not String.IsNullOrEmpty(strCuenta) Then
                            oListaLineasAsiento.Add(New ListaLineaAsientoContable() With {.Account = strCuenta.Trim(), .Credit = decPrecioTram, .Aplicado = False})
                        End If
                    End If

                End If

            Next

            Dim blnAgregar As Boolean = False
            Dim decMontoTemp As Decimal = 0

            For Each C1 As ListaLineaAsientoContable In oListaLineasAsiento
                decMontoTemp = 0
                For Each C2 As ListaLineaAsientoContable In oListaLineasAsiento
                    If C1.Account = C2.Account And C2.Aplicado = False Then
                        decMontoTemp += C2.Credit
                        C2.Aplicado = True
                    End If
                Next
                If decMontoTemp > 0 Then
                    oListaAsiento.Add(New ListaLineaAsientoContable() With {.Account = C1.Account, .Credit = decMontoTemp})
                End If
            Next

            For Each row As ListaLineaAsientoContable In oListaAsiento
                oJournalEntry.Lines.AccountCode = row.Account
                If strMoneda = m_strMonedaLocal Then
                    oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, row.Credit, strDocCurrency, 1, dtFechaDocumento)
                Else
                    'para valores no compensados en ME
                    If p_blnUsaCompensacionAsEnt Then
                        oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, row.Credit, strDocCurrency, 1, dtFechaCont)
                    End If
                    oJournalEntry.Lines.FCCredit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, row.Credit, strDocCurrency, 1, dtFechaDocumento)
                    oJournalEntry.Lines.FCCurrency = strMoneda
                End If
                oJournalEntry.Lines.Reference1 = My.Resources.Resource.Cont & strContrato & " - " & strCliente
                oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

                '******************************************************************************************
                If blnAplicaDimension Then
                    'Agrego dimensiones contables en las lineas del asiento
                    If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                        ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)
                    End If
                End If
                '******************************************************************************************
                oJournalEntry.Lines.Add()
            Next

        End If

        If blnHayTramitesNoFacturables Then

            If oJournalEntry.Add <> 0 Then
                m_oCompany.GetLastError(intError, strMensajeError)
                If m_oCompany.InTransaction() Then
                    m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                End If
                Throw New Exception(String.Format("{0} Error: {1} {2}", My.Resources.Resource.AsientoTramite, intError, strMensajeError))
            Else
                m_oCompany.GetNewObjectCode(strAsiento)
                oForm.Items.Item("txtAsTram").Specific.String = strAsiento
            End If
        Else
            Utilitarios.DestruirObjeto(oJournalEntry)
        End If

    End Sub

    Private Sub GenerarAsientoTramitesFacturables(ByVal strMonedaConfig As String, ByVal strDocCurrency As String, ByVal decMonto As Decimal, ByVal strCliente As String, _
                                     ByVal strContrato As String, ByVal oForm As SAPbouiCOM.Form, ByVal p_strUnidad As String, _
                                     Optional ByVal p_blnUsaCompensacionAsEnt As Boolean = False, Optional ByVal p_strFechaContrato As String = "", _
                                     Optional p_blnUsaTramitesFacturables As Boolean = False)

        Dim oJournalEntry As SAPbobsCOM.JournalEntries

        Dim intError As Integer
        Dim strMensajeError As String = ""
        Dim strAsiento As String = ""

        Dim strMoneda As String
        Dim strUnidad As String
        Dim strTipoVeh As String
        Dim strBodegaTipoVeh As String
        Dim strBodegaTramGen As String
        Dim strCuenta As String = ""
        Dim oMatrixTram As SAPbouiCOM.Matrix
        Dim strPrecioTram As String
        Dim decPrecioTram As Decimal = 0
        Dim strTramite As String
        Dim strMetodoCuentas As String
        Dim strGrupoTram As String
        Dim oMatrizVehiculosVenta As SAPbouiCOM.Matrix
        Dim strValorDimension As String = String.Empty
        Dim blnAplicaDimension As Boolean = False
        Dim strFechaCont As String
        Dim dtFechaCont As Date
        Dim strCuentaGastos As String = ""

        If Not String.IsNullOrEmpty(strMonedaConfig) Then
            strMoneda = strMonedaConfig
        Else
            strMoneda = strDocCurrency
        End If

        If p_blnUsaCompensacionAsEnt Then

            strFechaCont = p_strFechaContrato.Trim()
            If Not String.IsNullOrEmpty(strFechaCont) Then
                dtFechaCont = Date.ParseExact(strFechaCont, "yyyyMMdd", Nothing)
                dtFechaCont = New Date(dtFechaCont.Year, dtFechaCont.Month, dtFechaCont.Day, 0, 0, 0)
            End If
        End If

        oMatrizVehiculosVenta = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

        strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0)
        strUnidad = strUnidad.Trim()
        strTipoVeh = Utilitarios.EjecutarConsulta("Select U_Tipo from dbo.[@SCGD_Vehiculo] WITH (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)
        strBodegaTipoVeh = Utilitarios.EjecutarConsulta("Select U_Bod_Tram from dbo.[@SCGD_ADMIN4] WITH (nolock) where U_Tipo = '" & strTipoVeh & "' and Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)
        oMatrixTram = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)
        oJournalEntry = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oJournalEntries)

        If blnUsaDimensiones Then
            If Not oMatrizVehiculosVenta.RowCount > 1 Then
                Dim strAsientoTramite As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoTramites
                strValorDimension = ListaConfiguracion.Item(strAsientoTramite)
                If Not String.IsNullOrEmpty(strValorDimension) Then
                    If strValorDimension = "Y" Then
                        Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from dbo.[@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & strUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        '******************************************************************************************
                        'lleno el datatable de dimensiones para el tipo de inventario y la marca del vehiculo
                        oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipoVeh, strCodigoMarca, oDataTableDimensionesContablesDMS))
                        blnAplicaDimension = True
                    End If
                End If
            End If
        End If

        oJournalEntry.ReferenceDate = dtFechaDocumento

        oJournalEntry.Reference = p_strUnidad
        oJournalEntry.Reference2 = strContrato
        oJournalEntry.Memo = My.Resources.Resource.ComentarioTramite & strContrato & " - " & strCliente

        oJournalEntry.UserFields.Fields.Item("U_SCGD_CtrAs").Value = strContrato

        '******************************************************
        '*********** Contra Cuentas ***************************
        '******************************************************
        Dim strUsaAlmacenTramites As String = String.Empty
        strUsaAlmacenTramites = oDataTableConfiguracionesDMS.GetValue("U_UsaWHTramites", 0)
        If String.IsNullOrEmpty(strUsaAlmacenTramites) Then
            strUsaAlmacenTramites = "N"
        End If

        If Not String.IsNullOrEmpty(strBodegaTipoVeh) And strUsaAlmacenTramites = "Y" Then

            oJournalEntry.Lines.ShortName = strCliente

            If strMoneda = m_strMonedaLocal Then
                oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMonto, strDocCurrency, 1, dtFechaDocumento)
            Else

                'para valores no compensados en ME
                If p_blnUsaCompensacionAsEnt Then
                    oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, decMonto, strDocCurrency, 1, dtFechaCont)
                End If

                oJournalEntry.Lines.FCDebit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMonto, strDocCurrency, 1, dtFechaDocumento)
                oJournalEntry.Lines.FCCurrency = strMoneda
            End If
            oJournalEntry.Lines.Reference1 = My.Resources.Resource.Cont & strContrato & " - " & strCliente
            oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

            '******************************************************************************************
            If blnAplicaDimension Then
                'Agrego dimensiones contables en las lineas del asiento 
                If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                    ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)

                End If
            End If
            ''******************************************************************************************
            oJournalEntry.Lines.Add()

            'strCuenta = Utilitarios.EjecutarConsulta("Select ExpensesAc from [OWHS] WITH (nolock) where WhsCode = '" & strBodegaTipoVeh & "'", m_oCompany.CompanyDB, m_oCompany.Server)
            strCuenta = Utilitarios.EjecutarConsulta(String.Format("Select {0} from [OWHS] WITH (nolock) where WhsCode = '{1}'", NombreCuentas.SaleCostAc.ToString(), strBodegaTipoVeh), m_oCompany.CompanyDB, m_oCompany.Server)

            oJournalEntry.Lines.AccountCode = strCuenta
            '//////////////////////////////////////////////////////////////////////////////

            If strMoneda = m_strMonedaLocal Then
                oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMonto, strDocCurrency, 1, dtFechaDocumento)
            Else
                'para valores no compensados en ME
                If p_blnUsaCompensacionAsEnt Then
                    oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, decMonto, strDocCurrency, 1, dtFechaCont)
                End If

                oJournalEntry.Lines.FCCredit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMonto, strDocCurrency, 1, dtFechaDocumento)
                oJournalEntry.Lines.FCCurrency = strMoneda
            End If
            oJournalEntry.Lines.Reference1 = My.Resources.Resource.Cont & strContrato & " - " & strCliente
            oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

            '******************************************************************************************
            If blnAplicaDimension Then
                'Agrego dimensiones contables en las lineas del asiento 
                If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                    ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)

                End If
            End If
            '******************************************************************************************

            oJournalEntry.Lines.Add()

        Else
            Dim oListaLineasAsiento As New List(Of ListaLineaAsientoContable)()
            Dim oListaAsiento As New List(Of ListaLineaAsientoContable)()
            Dim strCampoAUtilizar As String


            If p_blnUsaTramitesFacturables Then
                strCampoAUtilizar = "U_Costo"
            Else
                strCampoAUtilizar = "U_Pre_Tot"
            End If

            strBodegaTramGen = oDataTableConfiguracionesDMS.GetValue("U_AlmGeTra", 0)

            For i As Integer = 0 To oMatrixTram.RowCount - 1

                If oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_SCGD_Fct", i).Trim() = "Y" Then
                    strPrecioTram = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue(strCampoAUtilizar, i)
                    strPrecioTram = strPrecioTram.Trim()
                    If Not String.IsNullOrEmpty(strPrecioTram) Then
                        decPrecioTram = Decimal.Parse(strPrecioTram, n)
                    End If
                    If decPrecioTram > 0 Then
                        strTramite = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Cod_Tram", i)
                        strTramite = strTramite.Trim()
                        strCuentaGastos = ObtenerCuentaItem(strTramite, strBodegaTramGen, NombreCuentas.ExpensesAc.ToString())
                        strCuenta = ObtenerCuentaItem(strTramite, strBodegaTramGen, NombreCuentas.SaleCostAc.ToString())
                        If Not String.IsNullOrEmpty(strCuenta) Then
                            oListaLineasAsiento.Add(New ListaLineaAsientoContable() With {.Account = strCuenta.Trim(), .Credit = decPrecioTram, .AccountExpenses = strCuentaGastos, .Debit = decPrecioTram, .Aplicado = False})
                        End If
                    End If
                End If

            Next

            Dim blnAgregar As Boolean = False
            Dim decMontoTemp As Decimal = 0


            For Each row As ListaLineaAsientoContable In oListaLineasAsiento

                '////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                oJournalEntry.Lines.AccountCode = row.AccountExpenses
                If strMoneda = m_strMonedaLocal Then
                    oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, row.Debit, strDocCurrency, 1, dtFechaDocumento)
                Else
                    'para valores no compensados en ME
                    If p_blnUsaCompensacionAsEnt Then
                        oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, row.Debit, strDocCurrency, 1, dtFechaCont)
                    End If

                    oJournalEntry.Lines.FCDebit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, row.Debit, strDocCurrency, 1, dtFechaDocumento)
                    oJournalEntry.Lines.FCCurrency = strMoneda
                End If
                oJournalEntry.Lines.Reference1 = My.Resources.Resource.Cont & strContrato & " - " & strCliente
                oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

                '******************************************************************************************
                If blnAplicaDimension Then
                    'Agrego dimensiones contables en las lineas del asiento 
                    If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                        ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)

                    End If
                End If
                '******************************************************************************************

                oJournalEntry.Lines.Add()

                '////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                oJournalEntry.Lines.AccountCode = row.Account
                If strMoneda = m_strMonedaLocal Then
                    oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, row.Credit, strDocCurrency, 1, dtFechaDocumento)
                Else
                    'para valores no compensados en ME
                    If p_blnUsaCompensacionAsEnt Then
                        oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, row.Credit, strDocCurrency, 1, dtFechaCont)
                    End If
                    oJournalEntry.Lines.FCCredit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, row.Credit, strDocCurrency, 1, dtFechaDocumento)
                    oJournalEntry.Lines.FCCurrency = strMoneda
                End If
                oJournalEntry.Lines.Reference1 = My.Resources.Resource.Cont & strContrato & " - " & strCliente
                'oJournalEntry.Lines.Reference2 = My.Resources.Resource.Tram & strTramite
                oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

                '******************************************************************************************
                If blnAplicaDimension Then
                    '*****************************************************************************
                    'Agrego dimensiones contables en las lineas del asiento
                    If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                        ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)

                    End If
                    '*****************************************************************************
                End If
                '******************************************************************************************
                oJournalEntry.Lines.Add()
            Next
        End If

        If oJournalEntry.Add <> 0 Then
            m_oCompany.GetLastError(intError, strMensajeError)
            If m_oCompany.InTransaction() Then
                m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
            End If

            Throw New Exception(String.Format("{0} Error: {1} {2}", My.Resources.Resource.AsientoTramite, intError, strMensajeError))
        Else
            m_oCompany.GetNewObjectCode(strAsiento)
            oForm.Items.Item("txtAsTrFc").Specific.String = strAsiento
        End If

    End Sub

    Private Sub GenerarFacturaClienteTramites(ByVal strMonedaConfig As String, ByVal strDocCurrency As String, ByVal strCliente As String, _
                                      ByVal strContrato As String, ByVal oForm As SAPbouiCOM.Form, _
                                      ByVal intPeriodoPago As Integer, _
                                      Optional ByVal p_strFechaContrato As String = "")

        Dim objFacturaCliente As SAPbobsCOM.Documents
        Dim objFacturaClientesLineas As SAPbobsCOM.Document_Lines
        'Dim ClsLineasDocumentosDimension As AgregarDimensionLineasDocumentosCls
        Dim oMatrixTram As SAPbouiCOM.Matrix
        Dim oMatrizVehiculosVenta As SAPbouiCOM.Matrix
        Dim strValorDimension As String = String.Empty
        Dim blnAplicaDimension As Boolean = False
        Dim strUnidad As String
        Dim strTipoVeh As String
        Dim strBodegaTipoVeh As String
        Dim strMoneda As String
        Dim strPrecioTram As String

        Dim intError As Integer
        Dim strMensajeError As String = ""
        Dim strDocEntryFactTramites As String = ""
        Dim intSerieFactura As Integer
        Dim blnAgregoLineaValida As Boolean = False
        Dim blnAgregarDimension As Boolean = False


        blnCreoDocumentosTramitesFacturables = False

        n = DIHelper.GetNumberFormatInfo(m_oCompany)


        'objFacturaCliente = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oInvoices)

        If Not String.IsNullOrEmpty(strMonedaConfig) Then
            strMoneda = strMonedaConfig
        Else
            strMoneda = strDocCurrency
        End If

        'objFacturaCliente.DocumentSubType = SAPbobsCOM.BoDocumentSubType.bod_InvoiceExempt

        strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0)
        strUnidad = strUnidad.Trim()
        strTipoVeh = Utilitarios.EjecutarConsulta("Select U_Tipo from dbo.[@SCGD_Vehiculo] WITH (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)
        strBodegaTipoVeh = Utilitarios.EjecutarConsulta("Select U_Bod_Tram from dbo.[@SCGD_ADMIN4] WITH (nolock) where U_Tipo = '" & strTipoVeh & "' and Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)
        oMatrixTram = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)
        oMatrizVehiculosVenta = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

        If blnUsaDimensiones Then
            If Not oMatrizVehiculosVenta.RowCount > 1 Then

                strValorDimension = "Y"
                If Not String.IsNullOrEmpty(strValorDimension) Then
                    If strValorDimension = "Y" Then

                        'ClsLineasDocumentosDimension = New AgregarDimensionLineasDocumentosCls(m_oCompany, m_SBO_Application)

                        Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from dbo.[@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & strUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        '******************************************************************************************
                        'lleno el datatable de dimensiones para el tipo de inventario y la marca del vehiculo

                        oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipoVeh, strCodigoMarca, oDataTableDimensionesContablesDMS))

                        If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                            blnAgregarDimension = True
                        Else
                            blnAgregarDimension = False

                        End If

                    End If
                End If
            End If
        End If

        oMatrizVehiculosVenta = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

        objFacturaCliente = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oInvoices), SAPbobsCOM.Documents)

        objFacturaCliente.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Items
        objFacturaCliente.CardCode = strCliente
        objFacturaCliente.Comments = My.Resources.Resource.ComentarioTramite & strContrato & " - " & strCliente

        objFacturaCliente.Reference2 = strContrato

        objFacturaCliente.DocumentSubType = SAPbobsCOM.BoDocumentSubType.bod_InvoiceExempt

        If Not String.IsNullOrEmpty(g_strSerieTramite) Then

            objFacturaCliente.Series = g_strSerieTramite.Trim
        Else

            If oMatrizVehiculosVenta.RowCount = 1 Then
                Dim blnBEvento As Boolean
                objConfiguracionGeneral = Nothing
                objConfiguracionGeneral = New SCGDataAccess.ConfiguracionesGeneralesAddon(strTipoVeh, m_cn_Coneccion, blnBEvento)

                intSerieFactura = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.TramitesFacturables)

                If intSerieFactura <> -1 Then
                    objFacturaCliente.Series = intSerieFactura
                End If

            End If
        End If

        If Not String.IsNullOrEmpty(strMoneda) Then
            objFacturaCliente.DocCurrency = strMoneda
        Else
            objFacturaCliente.DocCurrency = strDocCurrency
        End If
        objFacturaCliente.PaymentGroupCode = intPeriodoPago
        objFacturaCliente.DocDate = dtFechaDocumento
        'If Not String.IsNullOrEmpty(strVendedor) Then
        '    objFacturaCliente.SalesPersonCode = strVendedor
        'End If

        ' Usa Tipo Cambio Contrato 
        If strUsaTCContrato = "Y" And m_decTipoCambio > 0 Then
            If Not String.IsNullOrEmpty(strMoneda) And strDocCurrency = strMoneda Then
                objFacturaCliente.DocRate = m_decTipoCambio
            ElseIf String.IsNullOrEmpty(strMoneda) Then
                objFacturaCliente.DocRate = m_decTipoCambio
            End If
        End If
        Dim decPrecioTram As Decimal


        For i As Integer = 0 To oMatrixTram.RowCount - 1

            decPrecioTram = 0

            If oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_SCGD_Fct", i).Trim <> String.Empty Then

                If oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_SCGD_Fct", i).Trim() = "Y" Then

                    blnCreoDocumentosTramitesFacturables = True

                    strPrecioTram = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Pre_Uni", i)
                    strPrecioTram = strPrecioTram.Trim()
                    If Not String.IsNullOrEmpty(strPrecioTram) Then
                        decPrecioTram = Decimal.Parse(strPrecioTram, n)
                    End If

                    If decPrecioTram <> 0 Then
                        With objFacturaCliente.Lines

                            .ItemCode = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Cod_Tram", i).Trim()
                            .ItemDescription = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Des_Tram", i).Trim()
                            .Price = decPrecioTram
                            .Quantity = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Cant", i)
                            .TaxCode = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Imp_Vent", i).Trim
                        End With
                        blnAgregoLineaValida = True

                        If blnAgregarDimension Then

                            ClsLineasDocumentosDimension.AgregarDimensionesLineasDocumentos(objFacturaCliente.Lines, oDataTableDimensionesContablesDMS)

                        End If

                        objFacturaCliente.Lines.Add()
                    End If

                End If
            End If

        Next

        If blnCreoDocumentosTramitesFacturables Then

            Dim intCantidadLineas As Integer = objFacturaCliente.Lines.Count

            If blnAgregoLineaValida Then
                If objFacturaCliente.Add <> 0 Then
                    m_oCompany.GetLastError(intError, strMensajeError)
                    If m_oCompany.InTransaction() Then
                        m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                    End If
                    Throw New ExceptionsSBO(intError, strMensajeError)
                Else
                    m_oCompany.GetNewObjectCode(strDocEntryFactTramites)
                    oForm.Items.Item("txtFaTram").Specific.String = strDocEntryFactTramites
                End If
            Else
                Utilitarios.DestruirObjeto(objFacturaCliente)
            End If

        Else
            Utilitarios.DestruirObjeto(objFacturaCliente)
        End If
    End Sub

    Private Sub GenerarAsientoOtrosCostos(ByVal strMonedaConfig As String, ByVal strDocCurrency As String, _
                                          ByVal strContrato As String, ByVal oForm As SAPbouiCOM.Form, _
                                          ByVal p_dtUnidadesOtrosCostos As DataTable, Optional p_blnUsaCompensacionAsEnt As Boolean = False, Optional p_strFechaContrato As String = "")

        Dim oJournalEntry As SAPbobsCOM.JournalEntries

        Dim intError As Integer
        Dim strMensajeError As String = ""
        Dim strAsiento As String = ""

        Dim strMoneda As String
        Dim strTipoVeh As String
        Dim strCuentaDebe As String = String.Empty
        Dim strCuentaHaber As String = String.Empty
        Dim strOtrosCostos As String
        Dim decOtrosCostosTotal As Decimal = 0

        Dim strUnidadBonos As String
        Dim strUnidadMatriz As String

        Dim strValorDimension As String = String.Empty
        Dim blnAgregarDimension As Boolean = False
        Dim ClsLineasDocumentosDimension As AgregarDimensionLineasDocumentosCls

        Dim m_dtBodegasCostos As DataTable

        Dim blnCrear As Boolean = False

        Dim strFechaCont As String
        Dim dtFechaCont As Date

        If p_blnUsaCompensacionAsEnt Then
            strFechaCont = p_strFechaContrato.Trim()

            If Not String.IsNullOrEmpty(strFechaCont) Then
                dtFechaCont = Date.ParseExact(strFechaCont, "yyyyMMdd", Nothing)
                dtFechaCont = New Date(dtFechaCont.Year, dtFechaCont.Month, dtFechaCont.Day, 0, 0, 0)
            Else
                dtFechaCont = Date.Now
            End If

        End If


        If Not String.IsNullOrEmpty(strMonedaConfig) Then
            strMoneda = strMonedaConfig
        Else
            strMoneda = strDocCurrency
        End If

        oJournalEntry = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oJournalEntries)

        oJournalEntry.ReferenceDate = dtFechaDocumento
        oJournalEntry.Reference2 = strContrato

        oJournalEntry.Memo = My.Resources.Resource.ComentarioOtrosCostos & strContrato

        If blnUsaDimensiones Then

            Dim strAsientoOtrosCostos As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoOtrosCostos
            strValorDimension = ListaConfiguracion.Item(strAsientoOtrosCostos)
            ClsLineasDocumentosDimension = New AgregarDimensionLineasDocumentosCls(m_oCompany, m_SBO_Application)

        End If

        For i As Integer = 0 To p_dtUnidadesOtrosCostos.Rows.Count - 1
            For ii As Integer = 0 To oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size - 1

                strUnidadBonos = p_dtUnidadesOtrosCostos.GetValue("Unidad", i).ToString().Trim()
                strUnidadMatriz = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", ii).ToString().Trim()

                If strUnidadBonos = strUnidadMatriz Then

                    strTipoVeh = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_TipIn", ii)
                    strTipoVeh = strTipoVeh.Trim()

                    decOtrosCostosTotal = 0
                    strOtrosCostos = p_dtUnidadesOtrosCostos.GetValue("OtrosCostos", i).ToString.Trim()
                    If Not String.IsNullOrEmpty(strOtrosCostos) Then decOtrosCostosTotal = Decimal.Parse(strOtrosCostos, n)

                    m_dtBodegasCostos = oForm.DataSources.DataTables.Item("dtBodegasCostos")
                    m_dtBodegasCostos.ExecuteQuery(
                        String.Format("select SaleCostAc, ARCMAct from OWHS whs with (nolock) inner join [@SCGD_ADMIN4] adm4 with (nolock) " & _
                                                 " on whs.WhsCode = adm4.U_Bod_Log where adm4.U_Tipo = '{0}' and adm4.Code = 'DMS'", strTipoVeh))

                    strCuentaDebe = m_dtBodegasCostos.GetValue("SaleCostAc", 0).ToString().Trim()
                    strCuentaHaber = m_dtBodegasCostos.GetValue("ARCMAct", 0).ToString().Trim()

                    If String.IsNullOrEmpty(strCuentaDebe) Or String.IsNullOrEmpty(strCuentaHaber) Then
                        m_dtBodegasCostos.ExecuteQuery(" select SaleCostAc, ARCMAct from OWHS whs with (nolock) inner join [@SCGD_ADMIN] adm with (nolock) " & _
                                                     " on whs.WhsCode = adm.U_AlGenOC where adm.Code = 'DMS'")

                        strCuentaDebe = m_dtBodegasCostos.GetValue("SaleCostAc", 0).ToString().Trim()
                        strCuentaHaber = m_dtBodegasCostos.GetValue("ARCMAct", 0).ToString().Trim()
                    End If

                    If Not String.IsNullOrEmpty(strCuentaDebe) And Not String.IsNullOrEmpty(strCuentaHaber) Then

                        If blnUsaDimensiones Then
                            If Not String.IsNullOrEmpty(strValorDimension) Then
                                If strValorDimension = "Y" Then
                                    Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from dbo.[@SCGD_VEHICULO] with (nolock) where U_Cod_Unid = '" & strUnidadMatriz.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                    oDataTableDimensiones = (ClsLineasDocumentosDimension.DatatableDimensionesContablesDMS(strTipoVeh, strCodigoMarca))
                                End If
                            End If
                            '******************************************************************************************
                            If oDataTableDimensiones.Rows.Count <> 0 Then

                                blnAgregarDimension = True
                            Else
                                blnAgregarDimension = False

                            End If
                        End If

                        blnCrear = True
                        oJournalEntry.Lines.AccountCode = strCuentaDebe
                        If strMoneda = m_strMonedaLocal Then
                            oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decOtrosCostosTotal, strDocCurrency, 1, dtFechaDocumento)
                        Else
                            'para valores no compensados en ME
                            If p_blnUsaCompensacionAsEnt Then

                                oJournalEntry.Lines.Debit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, decOtrosCostosTotal, strDocCurrency, 1, dtFechaCont)
                            End If

                            oJournalEntry.Lines.FCDebit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decOtrosCostosTotal, strDocCurrency, 1, dtFechaDocumento)
                            oJournalEntry.Lines.FCCurrency = strMoneda

                        End If
                        oJournalEntry.Lines.Reference1 = String.Format("{0} {1}, {2} {3}", My.Resources.Resource.Cont, strContrato, My.Resources.Resource.Unidad, p_dtUnidadesOtrosCostos.GetValue("Unidad", i).ToString.Trim())
                        oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

                        If blnAgregarDimension Then
                            ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, oDataTableDimensiones, Nothing)
                        End If

                        oJournalEntry.Lines.Add()

                        oJournalEntry.Lines.AccountCode = strCuentaHaber
                        If strMoneda = m_strMonedaLocal Then
                            oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decOtrosCostosTotal, strDocCurrency, 1, dtFechaDocumento)
                        Else
                            'para valores no compensados en ME
                            If p_blnUsaCompensacionAsEnt Then
                                oJournalEntry.Lines.Credit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, m_strMonedaLocal, decOtrosCostosTotal, strDocCurrency, 1, dtFechaCont)
                            End If

                            oJournalEntry.Lines.FCCredit = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decOtrosCostosTotal, strDocCurrency, 1, dtFechaDocumento)
                            oJournalEntry.Lines.FCCurrency = strMoneda
                        End If
                        oJournalEntry.Lines.Reference1 = String.Format("{0} {1}, {2} {3}", My.Resources.Resource.Cont, strContrato, My.Resources.Resource.Unidad, p_dtUnidadesOtrosCostos.GetValue("Unidad", i).ToString.Trim())
                        oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO


                        If blnAgregarDimension Then
                            ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, oDataTableDimensiones, Nothing)
                        End If
                        oJournalEntry.Lines.Add()
                    End If

                End If
            Next

        Next
        If blnCrear Then
            If oJournalEntry.Add <> 0 Then
                m_oCompany.GetLastError(intError, strMensajeError)
                If m_oCompany.InTransaction() Then
                    m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                End If
                Throw New Exception(String.Format("{0} Error: {1} {2}", My.Resources.Resource.ComentarioOtrosCostos, intError, strMensajeError))
            Else
                m_oCompany.GetNewObjectCode(strAsiento)
                oForm.Items.Item("txtAsOCos").Specific.String = strAsiento
            End If
        End If


    End Sub

    Private Sub ValidarDatosFinanciamiento(ByVal oForm As SAPbouiCOM.Form, ByRef blnDatosCompletos As Boolean, Optional ByVal blnPlanPagos As Boolean = False)


        Try

            Dim n As NumberFormatInfo

            m_objBLSBO.Set_Compania(m_oCompany)
            m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            Dim strCliente As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0)
            strCliente = strCliente.Trim()
            Dim strEmpleado As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_OwrCode", 0)
            strEmpleado = strEmpleado.Trim()
            Dim strMoneda As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0)
            strMoneda = strMoneda.Trim()
            Dim strPrecioVenta As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocTotal", 0)
            strPrecioVenta = strPrecioVenta.Trim()
            Dim decPrecioVenta As Decimal
            If Not String.IsNullOrEmpty(strPrecioVenta) Then
                decPrecioVenta = Decimal.Parse(strPrecioVenta, n)
            Else
                decPrecioVenta = 0
            End If
            Dim strEnteFinanc As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Ent_Fin", 0)
            strEnteFinanc = strEnteFinanc.Trim()
            Dim strMontoFinanc As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Financia", 0)
            strMontoFinanc = strMontoFinanc.Trim()
            Dim decMontoFin As Decimal
            If Not String.IsNullOrEmpty(strMontoFinanc) Then
                decMontoFin = Decimal.Parse(strMontoFinanc, n)
            Else
                decMontoFin = 0
            End If
            Dim strIntNormal As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tas_Anu", 0)
            strIntNormal = strIntNormal.Trim()
            'Dim decIntNormal As Decimal
            'If Not String.IsNullOrEmpty(strIntNormal) Then
            '    decIntNormal = Decimal.Parse(strIntNormal, n)
            'Else
            '    decIntNormal = 0
            'End If
            Dim strPlazo As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Plazo", 0)
            strPlazo = strPlazo.Trim()
            Dim strFechaInicio As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Fec_1Ab", 0)
            strFechaInicio = strFechaInicio.Trim()
            Dim strDiaPago As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DiaPago", 0)
            strDiaPago = strDiaPago.Trim()
            Dim strIntMora As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Int_Mor", 0)
            strIntMora = strIntMora.Trim()
            'Dim decIntMora As Decimal
            'If Not String.IsNullOrEmpty(strIntMora) Then
            '    decIntMora = Decimal.Parse(strIntMora, n)
            'Else
            '    decIntMora = 0
            'End If
            Dim strTipoCuota As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tipo_Cuo", 0)
            strTipoCuota = strTipoCuota.Trim()

            If blnPlanPagos = True Then

                If String.IsNullOrEmpty(strEnteFinanc) Or decMontoFin <= 0 Or String.IsNullOrEmpty(strIntNormal) Or String.IsNullOrEmpty(strPlazo) Or String.IsNullOrEmpty(strFechaInicio) Or String.IsNullOrEmpty(strDiaPago) Or String.IsNullOrEmpty(strTipoCuota) _
                    Or String.IsNullOrEmpty(strCliente) Or String.IsNullOrEmpty(strMoneda) Then

                    blnDatosCompletos = False

                End If

            Else

                If String.IsNullOrEmpty(strEnteFinanc) Or decMontoFin <= 0 Or String.IsNullOrEmpty(strIntNormal) Or String.IsNullOrEmpty(strPlazo) Or String.IsNullOrEmpty(strFechaInicio) Or String.IsNullOrEmpty(strDiaPago) Or String.IsNullOrEmpty(strIntMora) Or _
                String.IsNullOrEmpty(strTipoCuota) Or String.IsNullOrEmpty(strCliente) Or String.IsNullOrEmpty(strEmpleado) Or String.IsNullOrEmpty(strMoneda) Or _
                decPrecioVenta <= 0 Then

                    blnDatosCompletos = False

                End If

            End If

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Private Sub CrearAsientoPrestamo(ByVal oForm As SAPbouiCOM.Form, ByVal strPrestamo As String)

        Dim strFecha As String
        Dim dtFecha As Date
        Dim strMoneda As String
        Dim strMontoFinanciar As String
        Dim decMontoFinanciar As Decimal = 0
        Dim strContrato As String
        Dim strCuentaDebito As String = ""
        Dim strCliente As String
        Dim strMemo As String
        Dim strRef1 As String
        Dim strRef2 As String

        Dim n As NumberFormatInfo

        Try

            m_oPrestamo = New PrestamoFormulario(m_SBO_Application, m_oCompany)

            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
            m_strMonedaSistema = m_objBLSBO.RetornarMonedaSistema()
            strMoneda = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0)
            strMoneda = strMoneda.Trim()

            strContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0)
            strContrato = strContrato.Trim()

            strFecha = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Fec_1Ab", 0)
            strFecha = strFecha.Trim()
            dtFecha = Date.ParseExact(strFecha, "yyyyMMdd", Nothing)
            dtFecha = New Date(dtFecha.Year, dtFecha.Month, dtFecha.Day, 0, 0, 0)

            strMontoFinanciar = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Financia", 0)
            strMontoFinanciar = strMontoFinanciar.Trim()
            If Not String.IsNullOrEmpty(strMontoFinanciar) Then
                decMontoFinanciar = Decimal.Parse(strMontoFinanciar, n)
            End If

            If strMoneda = m_strMonedaLocal Then

                strCuentaDebito = Utilitarios.EjecutarConsulta("Select U_Fin_Loc from dbo.[@SCGD_CONF_FINANC] WITH (nolock) where Code = 1", m_oCompany.CompanyDB, m_oCompany.Server)

            ElseIf strMoneda = m_strMonedaSistema Then

                strCuentaDebito = Utilitarios.EjecutarConsulta("Select U_Fin_Sis from dbo.[@SCGD_CONF_FINANC] WITH (nolock) where Code = 1", m_oCompany.CompanyDB, m_oCompany.Server)

            End If

            strCuentaDebito = Utilitarios.EjecutarConsulta("Select AcctCode from dbo.[OACT] WITH (nolock) where FormatCode = '" & strCuentaDebito & "' AND Postable = 'Y'", m_oCompany.CompanyDB, m_oCompany.Server)

            strCliente = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0)
            strCliente = strCliente.Trim()

            strMemo = My.Resources.Resource.Prestamo & strPrestamo
            strRef1 = My.Resources.Resource.Prest & strPrestamo
            strRef2 = My.Resources.Resource.Cont & strContrato

            Call m_oPrestamo.CrearAsientoPrestamo(dtFecha, strMoneda, strContrato, decMontoFinanciar, strPrestamo, strMemo, strRef1, strRef2, m_strMonedaLocal, strCuentaDebito, strCliente)

        Catch ex As Exception

            If m_oCompany.InTransaction() Then
                m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
            End If

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Private Sub CrearUDOPrestamo(ByVal oForm As SAPbouiCOM.Form, ByRef strPrestamo As String)

        Dim udoPrestamo As UDOPrestamo
        Dim encabezadoPrestamo As EncabezadoUDOPrestamo
        Dim planTeorico As PlanTeoricoUDOPrestamo
        Dim planReal As PlanRealUDOPrestamo

        Dim strContrato As String
        Dim strCodCliente As String
        Dim strDesCliente As String
        Dim strCodEmp As String
        Dim strDesEmp As String
        Dim strMoneda As String
        Dim decPrecioVenta As Decimal
        Dim strEnteFin As String
        Dim decMontoFin As Decimal
        Dim decIntNormal As Decimal
        Dim intPlazo As Integer
        Dim strFechaPrest As String
        Dim dtFechaPrest As Date
        Dim intDiaPago As Integer
        Dim decIntMora As Decimal
        Dim strTipoCuota As String
        Dim strEstado As Decimal
        Dim strDesMoneda As String
        Dim strDesEstado As String
        Dim strDesTipo As String
        Dim strPrima As String
        Dim strPrecioContrato As String
        Dim strMontoFin As String
        Dim strIntNormal As String
        Dim strIntMora As String
        Dim decPrima As Decimal

        Dim oMatrix As SAPbouiCOM.Matrix
        Dim strUnidad As String = ""

        Dim oCompanyService As SAPbobsCOM.CompanyService
        Dim oGeneralService As SAPbobsCOM.GeneralService
        Dim oGeneralData As SAPbobsCOM.GeneralData
        Dim oGeneralParams As SAPbobsCOM.GeneralDataParams

        Try

            udoPrestamo = New UDOPrestamo(m_oCompany, "SCGD_Prestamo")
            encabezadoPrestamo = New EncabezadoUDOPrestamo
            udoPrestamo.ListaPlanTeorico = New ListaPlanTeoricoUDOPrestamo()
            udoPrestamo.ListaPlanTeorico.LineasUDO = New List(Of ILineaUDO)()
            udoPrestamo.ListaPlanReal = New ListaPlanRealUDOPrestamo()
            udoPrestamo.ListaPlanReal.LineasUDO = New List(Of ILineaUDO)()

            m_formPlanPlagos = New PlanPagosFormulario(m_SBO_Application, m_oCompany, m_oCompany.DbUserName, CatchingEvents.DBPassword, My.Resources.Resource.XMLPlanPagos)

            oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, Matrix)

            strContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0)
            strContrato = strContrato.Trim()

            If oMatrix.RowCount = 1 Then

                strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0)
                strUnidad = strUnidad.Trim()

            ElseIf oMatrix.RowCount > 1 Then

                strUnidad = My.Resources.Resource.Multiples

            End If

            strCodCliente = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0)
            strCodCliente = strCodCliente.Trim()
            strDesCliente = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardName", 0)
            strDesCliente = strDesCliente.Trim()
            strCodEmp = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_OwrCode", 0)
            strCodEmp = strCodEmp.Trim()
            strDesEmp = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_OwrName", 0)
            strDesEmp = strDesEmp.Trim()
            strMoneda = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0)
            strMoneda = strMoneda.Trim()
            strPrecioContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocTotal", 0)
            strPrecioContrato = strPrecioContrato.Trim()
            decPrecioVenta = Decimal.Parse(strPrecioContrato, n)
            strEnteFin = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Ent_Fin", 0)
            strEnteFin = strEnteFin.Trim()
            strMontoFin = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Financia", 0)
            strMontoFin = strMontoFin.Trim()
            decMontoFin = Decimal.Parse(strMontoFin, n)
            strIntNormal = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tas_Anu", 0)
            strIntNormal = strIntNormal.Trim()
            decIntNormal = Decimal.Parse(strIntNormal, n)
            intPlazo = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Plazo", 0)
            strFechaPrest = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Fec_1Ab", 0)
            strFechaPrest = strFechaPrest.Trim()
            dtFechaPrest = Date.ParseExact(strFechaPrest, "yyyyMMdd", Nothing)
            dtFechaPrest = New Date(dtFechaPrest.Year, dtFechaPrest.Month, dtFechaPrest.Day, 0, 0, 0)
            intDiaPago = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DiaPago", 0)
            strIntMora = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Int_Mor", 0)
            strIntMora = strIntMora.Trim()
            decIntMora = Decimal.Parse(strIntMora, n)
            strTipoCuota = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tipo_Cuo", 0)
            strTipoCuota = strTipoCuota.Trim()
            strEstado = "1"
            strDesMoneda = Utilitarios.EjecutarConsulta("Select CurrName from [OCRN] with (nolock) where CurrCode = '" & strMoneda & "'", m_oCompany.CompanyDB, m_oCompany.Server)
            strDesEstado = Utilitarios.EjecutarConsulta("Select Name from [@SCGD_EST_PREST] with (nolock) where Code = '" & strEstado & "'", m_oCompany.CompanyDB, m_oCompany.Server)
            strDesTipo = Utilitarios.EjecutarConsulta("Select Name from [@SCGD_TIPO_CUOTA] with (nolock) where Code = '" & strTipoCuota & "'", m_oCompany.CompanyDB, m_oCompany.Server)
            strPrima = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deposito", 0)
            strPrima = strPrima.Trim()
            If String.IsNullOrEmpty(strPrima) Then
                strPrima = "0"
            End If
            decPrima = Decimal.Parse(strPrima, n)

            encabezadoPrestamo.CodigoContrato = strContrato
            encabezadoPrestamo.CodigoCliente = strCodCliente
            encabezadoPrestamo.DescripcionCliente = strDesCliente
            encabezadoPrestamo.CodigoEmpleado = strCodEmp
            encabezadoPrestamo.DescripcionEmpleado = strDesEmp
            encabezadoPrestamo.Moneda = strMoneda
            encabezadoPrestamo.PrecioVenta = decPrecioVenta
            encabezadoPrestamo.EnteFinanciero = strEnteFin
            encabezadoPrestamo.MontoFinanciar = decMontoFin
            encabezadoPrestamo.Interes = decIntNormal
            encabezadoPrestamo.Plazo = intPlazo
            encabezadoPrestamo.FechaPrestamo = dtFechaPrest
            encabezadoPrestamo.DiaPago = intDiaPago
            encabezadoPrestamo.InteresMoratorio = decIntMora
            encabezadoPrestamo.TipoCuota = strTipoCuota
            encabezadoPrestamo.Estado = strEstado
            encabezadoPrestamo.DescMoneda = strDesMoneda
            encabezadoPrestamo.DescEstado = strDesEstado
            encabezadoPrestamo.DescTipo = strDesTipo
            encabezadoPrestamo.Unidad = strUnidad
            encabezadoPrestamo.Prima = decPrima

            udoPrestamo.Encabezado = encabezadoPrestamo

            decIntNormal = decIntNormal / 100

            If strTipoCuota = "1" OrElse strTipoCuota = "2" Then

                Call m_formPlanPlagos.CalculoNivelada(intPlazo, decMontoFin, decIntNormal, dtFechaPrest, intDiaPago, False, "N")

            ElseIf strTipoCuota = "4" Then

                Call m_formPlanPlagos.CalculoDecreciente(intPlazo, decMontoFin, decIntNormal, dtFechaPrest, intDiaPago, "N")

            ElseIf strTipoCuota = "3" Then

                Call m_formPlanPlagos.CalculoGlobal(intPlazo, decMontoFin, decIntNormal, dtFechaPrest, intDiaPago)

            End If

            For i As Integer = 0 To intPlazo - 1

                planTeorico = New PlanTeoricoUDOPrestamo()

                planTeorico.NumeroPago = m_formPlanPlagos.g_intNumero(i)
                planTeorico.FechaPago = m_formPlanPlagos.g_dtFechaPago(i)
                planTeorico.SaldoInicial = m_formPlanPlagos.g_decSaldoInicial(i)
                planTeorico.Cuota = m_formPlanPlagos.g_decCuota(i)
                planTeorico.Capital = m_formPlanPlagos.g_decCapital(i)
                planTeorico.Interes = m_formPlanPlagos.g_decInteres(i)
                planTeorico.SaldoFinal = m_formPlanPlagos.g_decSaldoFinal(i)

                udoPrestamo.ListaPlanTeorico.LineasUDO.Add(planTeorico)

                planReal = New PlanRealUDOPrestamo()

                planReal.NumeroPago = m_formPlanPlagos.g_intNumero(i)
                planReal.FechaPago = m_formPlanPlagos.g_dtFechaPago(i)
                planReal.SaldoInicial = m_formPlanPlagos.g_decSaldoInicial(i)
                planReal.Cuota = m_formPlanPlagos.g_decCuota(i)
                planReal.Capital = m_formPlanPlagos.g_decCapital(i)
                planReal.Interes = m_formPlanPlagos.g_decInteres(i)
                planReal.Moratorio = m_formPlanPlagos.g_decMoratorios(i)
                planReal.SaldoFinal = m_formPlanPlagos.g_decSaldoFinal(i)
                planReal.Pagado = m_formPlanPlagos.g_strPagado(i)
                planReal.CapPend = m_formPlanPlagos.g_decCapPend(i)
                planReal.IntPend = m_formPlanPlagos.g_decIntPend(i)
                planReal.MoraPend = m_formPlanPlagos.g_decMoraPend(i)
                planReal.DiasInt = m_formPlanPlagos.g_intDiasInt(i)
                planReal.DiasMora = m_formPlanPlagos.g_intDiasMora(i)

                udoPrestamo.ListaPlanReal.LineasUDO.Add(planReal)

            Next

            udoPrestamo.Insert()

            If udoPrestamo.LastErrorCode <> 0 Then
                If m_oCompany.InTransaction() Then
                    m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                End If
            Else

                strPrestamo = udoPrestamo.Encabezado.DocEntry

                oForm.Items.Item("txtPrestam").Specific.string = strPrestamo

                oCompanyService = m_oCompany.GetCompanyService()
                oGeneralService = oCompanyService.GetGeneralService(NombreUDO)
                oGeneralParams = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
                oGeneralParams.SetProperty("DocEntry", strContrato)
                oGeneralData = oGeneralService.GetByParams(oGeneralParams)
                oGeneralData.SetProperty("U_Prestamo", strPrestamo)
                oGeneralService.Update(oGeneralData)

                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.PrestamoCreado, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Success)

            End If

        Catch ex As Exception

            If m_oCompany.InTransaction() Then
                m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
            End If

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Private Sub GenerarPagoPrima(ByVal strCliente As String, ByVal decMontoPago As Decimal, ByVal strDocCurrency As String, ByVal strMonedaConfigurada As String, ByVal p_strIDVehiculo As String)

        Dim intError As Integer
        Dim strMensajeError As String = String.Empty

        Dim oPagoRecibido As SAPbobsCOM.Payments

        Dim strPagoPrima As String = String.Empty
        Dim strCuenta As String

        Dim strTipo As String = String.Empty
        Dim strMarcas As String = String.Empty
        Dim strEstilo As String = String.Empty
        Dim strColor As String = String.Empty
        Dim strAño As String = String.Empty
        Dim strUnidad As String = String.Empty
        Dim strSerie As String = String.Empty
        Dim strPlaca As String = String.Empty
        Dim strMensajeSuma As String = String.Empty

        Call Utilitarios.ObtieneDatosVehiculos(p_strIDVehiculo, strTipo, strMarcas, strEstilo, strColor, strAño, strUnidad, strSerie, strPlaca, m_oCompany.Server, m_oCompany.CompanyDB)

        oPagoRecibido = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oIncomingPayments)

        oPagoRecibido.CardCode = strCliente
        oPagoRecibido.DocType = BoRcptTypes.rCustomer
        oPagoRecibido.DocDate = dtFechaDocumento
        strCuenta = objConfiguracionGeneral.CuentasAdicionales(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.PrimaVenta)
        oPagoRecibido.CashAccount = strCuenta
        oPagoRecibido.CashSum = decMontoPago
        If Not String.IsNullOrEmpty(strMonedaConfigurada) Then
            oPagoRecibido.DocCurrency = strMonedaConfigurada
        Else
            oPagoRecibido.DocCurrency = strDocCurrency
        End If

        ' Usa Tipo Cambio Contrato 
        If strUsaTCContrato = "Y" And m_decTipoCambio > 0 Then
            If Not String.IsNullOrEmpty(strMonedaConfigurada) And strDocCurrency = strMonedaConfigurada Then
                oPagoRecibido.DocRate = m_decTipoCambio
            ElseIf String.IsNullOrEmpty(strMonedaConfigurada) Then
                oPagoRecibido.DocRate = m_decTipoCambio
            End If
        End If

        strMensajeSuma = My.Resources.Resource.LaSumade & strDocCurrency & " " & String.Format("{0,10:N}", decMontoPago)
        If Not String.IsNullOrEmpty(p_strIDVehiculo) Then
            oPagoRecibido.Remarks = My.Resources.Resource.PrimaPorCompraVehiculo & strTipo & strMarcas & strEstilo & strColor & strAño & strUnidad & strPlaca & strMensajeSuma
        Else
            oPagoRecibido.Remarks = My.Resources.Resource.PagoUnidadesMultiples
        End If

        intError = oPagoRecibido.Add()
        If intError <> 0 Then

            m_oCompany.GetLastError(intError, strMensajeError)
            Throw New ExceptionsSBO(intError, strMensajeError)

        Else

            m_oCompany.GetNewObjectCode(strPagoPrima)
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_NC_Prima", 0, strPagoPrima)

        End If

    End Sub

    Private Sub CancelarOperacionesContratoVenta(ByVal p_form As SAPbouiCOM.Form, ByVal p_oCompany As SAPbobsCOM.Company, _
                                                ByVal p_sqlConexion As SqlClient.SqlConnection, ByVal p_Transaccion As SqlClient.SqlTransaction)


        If p_oCompany.InTransaction() Then
            p_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
        End If
        If p_sqlConexion.State <> ConnectionState.Closed Then
            If p_Transaccion IsNot Nothing AndAlso p_Transaccion.Connection IsNot Nothing Then
                p_Transaccion.Rollback()
            End If
            If p_sqlConexion.State <> ConnectionState.Closed Then
                p_sqlConexion.Close()
            End If
        End If
        oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE
        g_blnEventoCerrarAfecta = False
        oForm.Close()
        g_blnEventoCerrarAfecta = True
        m_dtsVehiculo.SCG_VEHICULO.Clear()
        m_SBO_Application.SetStatusBarMessage(My.Resources.Resource.MensajeNoEsPosibleFacturarContrato, BoMessageTime.bmt_Short)
    End Sub
    'Agregado 02/11/2010: Realiza salida de accesorios

    Public Sub GenerarSalidaAccesorios(ByVal oForm As SAPbouiCOM.Form, ByVal oMatriz As SAPbouiCOM.Matrix, ByVal strBodegaTipoVeh As String)

        Dim oEditText As SAPbouiCOM.EditText
        Dim strCodigoAccesorio As String
        Dim strAccInventario As String
        Dim strNombreAccesorio As String
        Dim intCantidadAcc As Integer
        Dim strBodegaAcc As String
        Dim strMetodoCuentas As String
        Dim strCuentaAcc As String = ""
        Dim strGrupoAccesorio As String

        Dim strNumeroSalida As String
        Dim strComentario As String
        Dim strNumeroCV As String

        '********costeo de accesorios*******************
        Dim oMatrixVeh As SAPbouiCOM.Matrix

        '***********************************************

        Dim oSalidaMercancia As SAPbobsCOM.Documents

        Dim blAccInventariable As Boolean = False

        Dim intError As Integer
        Dim strError As String = ""

        Dim strCodigoDraft As String

        Dim oCompanyService As SAPbobsCOM.CompanyService
        Dim oGeneralService As SAPbobsCOM.GeneralService
        Dim oGeneralData As SAPbobsCOM.GeneralData
        Dim oGeneralParams As SAPbobsCOM.GeneralDataParams

        Try
            oMatrixVeh = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

            oSalidaMercancia = m_oCompany.GetBusinessObject(BoObjectTypes.oDrafts)
            oSalidaMercancia.DocObjectCode = BoObjectTypes.oInventoryGenExit

            oSalidaMercancia.DocDate = dtFechaDocumento

            If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                strBodegaAcc = strBodegaTipoVeh
            Else
                strBodegaAcc = oDataTableConfiguracionesDMS.GetValue("U_SCGD_BodAcc", 0)
            End If

            For i As Integer = 0 To oMatriz.RowCount - 1

                oEditText = DirectCast(oMatriz.Columns.Item("col_0").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                strCodigoAccesorio = oEditText.Value

                strAccInventario = Utilitarios.EjecutarConsulta("Select InvntItem from [OITM] WITH (nolock) where ItemCode = '" & strCodigoAccesorio & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                If strAccInventario = "Y" Then

                    strNombreAccesorio = Utilitarios.EjecutarConsulta("Select ItemName from [OITM] WITH (nolock) where ItemCode = '" & strCodigoAccesorio & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                    intCantidadAcc = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Cant_Acc", i)

                    strMetodoCuentas = Utilitarios.EjecutarConsulta("Select GLMethod from [OITM] WITH (nolock) where ItemCode = '" & strCodigoAccesorio & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                    If strMetodoCuentas = "L" Then

                        strCuentaAcc = Utilitarios.EjecutarConsulta("Select DecreasAc from [OITW] WITH (nolock) where ItemCode = '" & strCodigoAccesorio & "' and WhsCode = '" & strBodegaAcc & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                    ElseIf strMetodoCuentas = "C" Then

                        strGrupoAccesorio = Utilitarios.EjecutarConsulta("Select ItmsGrpCod from [OITM] WITH (nolock) where ItemCode = '" & strCodigoAccesorio & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        strCuentaAcc = Utilitarios.EjecutarConsulta("Select DecreasAc from [OITB] WITH (nolock) where ItmsGrpCod = '" & strGrupoAccesorio & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                    ElseIf strMetodoCuentas = "W" Then

                        strCuentaAcc = Utilitarios.EjecutarConsulta("Select DecreasAc from [OWHS] WITH (nolock) where WhsCode = '" & strBodegaAcc & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                    End If


                    oSalidaMercancia.Lines.ItemCode = strCodigoAccesorio
                    oSalidaMercancia.Lines.ItemDescription = strNombreAccesorio

                    If blnUtilizaCosteoAccesorios = "Y" Then
                        oSalidaMercancia.Lines.Quantity = intCantidadAcc * oMatrixVeh.RowCount
                    Else
                        oSalidaMercancia.Lines.Quantity = intCantidadAcc
                    End If
                    'oSalidaMercancia.Lines.Quantity = intCantidadAcc
                    oSalidaMercancia.Lines.AccountCode = strCuentaAcc
                    oSalidaMercancia.Lines.WarehouseCode = strBodegaAcc

                    oSalidaMercancia.Lines.Add()

                    blAccInventariable = True

                End If

            Next i

            If blAccInventariable Then

                strNumeroSalida = Utilitarios.EjecutarConsulta("Select AutoKey from [ONNM] WITH (nolock) where ObjectCode = '60'", m_oCompany.CompanyDB, m_oCompany.Server)
                strNumeroCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0)
                'strNumeroUnidad = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_Unid", 0)
                strComentario = My.Resources.Resource.ReferenciaCV + strNumeroCV

                oSalidaMercancia.DocNum = strNumeroSalida
                oSalidaMercancia.DocDate = Now.Date
                oSalidaMercancia.TaxDate = Now.Date
                oSalidaMercancia.Comments = strComentario
                oSalidaMercancia.UserFields.Fields.Item("U_SCGD_NoContrato").Value = strNumeroCV.Trim()

                intError = oSalidaMercancia.Add()

                strCodigoDraft = m_oCompany.GetNewObjectKey

                If intError <> 0 Then
                    m_oCompany.GetLastError(intError, strError)
                    Throw New ExceptionsSBO(intError, strError)
                End If

                Utilitarios.m_strDocumentoMensaje = m_oCompany.GetNewObjectKey

                Call Utilitarios.EnviarMensajeMovimientoAccs(m_oCompany, m_SBO_Application, oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Sucu", 0).ToString())

                oCompanyService = m_oCompany.GetCompanyService()
                oGeneralService = oCompanyService.GetGeneralService("SCGD_CVT")
                oGeneralParams = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
                oGeneralParams.SetProperty("DocEntry", strNumeroCV)
                oGeneralData = oGeneralService.GetByParams(oGeneralParams)
                oGeneralData.SetProperty("U_SCGD_DocPreliminar", strCodigoDraft)
                oGeneralService.Update(oGeneralData)

            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    Private Function GenerarGoodReceiptUsado(ByVal strIDDocumento As String, ByVal intAsientoAjuste As Integer, ByVal decMontoUsado As Decimal, _
                                             ByVal decMontoAjusteCosto As Decimal, ByVal strCuentaUsado As String, ByVal strIDVehiculo As String, _
                                             ByVal strTipo As String, ByVal strConectionString As String, ByVal intPosicion As Integer, _
                                             ByVal p_intSerie As Integer, ByVal p_intDocEntry As Integer, _
                                                Optional ByVal p_fechaDocumento As Date = Nothing, _
                                                Optional ByVal strMonedaConfigurada As String = "", Optional p_TipoDocumento As TipoDocumentoVehiculoUsado = Nothing) As UDOEntradaVehiculo

        'Dim oNotaCredito As SAPbobsCOM.Documents
        'Dim strAsientoNotaCredito As String
        Dim oDocumento As SAPbobsCOM.Documents
        Dim strAsientoDocumento As String

        'Dim dtrVehiculousado As VehiculosAddonDataset.SCG_VEHICULORow
        Dim strUnidad As String
        Dim strMarca As String
        Dim strEstilo As String = String.Empty
        Dim strModelo As String = String.Empty
        Dim strVIN As String = String.Empty
        Dim strContrato As String
        Dim strConceptoDescripcion As String

        If p_TipoDocumento <> Nothing Then

            If p_TipoDocumento = TipoDocumentoVehiculoUsado.FacturaProveedor Then
                oDocumento = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oPurchaseInvoices)
                oDocumento.GetByKey(strIDDocumento)
                strAsientoDocumento = oDocumento.TransNum

                strConceptoDescripcion = My.Resources.Resource.MensajeFacturaProveedorIngresoInventario

            ElseIf p_TipoDocumento = TipoDocumentoVehiculoUsado.NotaCredito Then
                oDocumento = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oCreditNotes)
                oDocumento.GetByKey(strIDDocumento)
                strAsientoDocumento = oDocumento.TransNum

                strConceptoDescripcion = My.Resources.Resource.MensajeNotaCreditoIngresoInventario
            End If
        Else

            oDocumento = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oCreditNotes)
            oDocumento.GetByKey(strIDDocumento)
            strAsientoDocumento = oDocumento.TransNum

            strConceptoDescripcion = My.Resources.Resource.MensajeNotaCreditoIngresoInventario

        End If

        Dim strMonedaContrato As String
        Dim UsaTCContrato As String = String.Empty

        UsaTCContrato = oDataTableConfiguracionesDMS.GetValue("U_TCCont", 0)

        strMonedaContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim()

        strContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0).Trim()
        strContrato = strContrato.Trim()

        m_strMonedaSistema = m_objBLSBO.RetornarMonedaSistema()

        If UsaTCContrato = "Y" And blnUsaCompensacionAsientoEntradaVehiculo Then

            m_decTipoCambio = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0), n)

        Else

            m_decTipoCambio = m_objBLSBO.RetornarTipoCambioMoneda(m_strMonedaSistema, p_fechaDocumento, m_strConectionString, False)

        End If

        'm_decTipoCambio = m_objBLSBO.RetornarTipoCambioMoneda(m_strMonedaSistema, p_fechaDocumento, m_strConectionString, False)

        m_objGoodReceiptusado = New ObjetoGoodReceiptCls(m_cnConeccionTransaccion, m_tnTransaccion, m_strMonedaLocal, "", m_decTipoCambio, m_SBO_Application)

        strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", intPosicion)
        strUnidad = strUnidad.Trim()
        strMarca = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Marca", intPosicion)
        strMarca = strMarca.Trim()
        strEstilo = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Estilo", intPosicion)
        strEstilo = strEstilo.Trim()
        strVIN = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_VIN", intPosicion)
        strVIN = strVIN.Trim()

        Dim udoEntrada As UDOEntradaVehiculo = New UDOEntradaVehiculo(m_oCompany)

        Dim blnLineaAgregada As Boolean = False

        m_objGoodReceiptusado.EncabezadoUDO(m_oCompany, strUnidad, strMarca, strEstilo, strModelo, strVIN, strIDVehiculo, strTipo, strContrato,
                                            udoEntrada, p_intSerie, p_intDocEntry + intPosicion, dtFechaDocumento)

        decMontoUsado = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Val_Rec", intPosicion), n)

        'se realiza conversion de acuerdo a la mondena definida en BD
        decMontoUsado = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfigurada, decMontoUsado, strMonedaContrato, 1, dtFechaDocumento)


        m_objGoodReceiptusado.AgregarLineaUDO(strConceptoDescripcion, decMontoUsado, strMonedaConfigurada, strAsientoDocumento, strCuentaUsado, ObjetoGoodReceiptCls.enumTipoCargo.CIF, udoEntrada, blnLineaAgregada)

        decMontoAjusteCosto = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Aj_Cos", intPosicion), n)
        decMontoAjusteCosto = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfigurada, decMontoAjusteCosto, strMonedaContrato, 1, dtFechaDocumento)

        blnAsientoAjusteCosto = False
        If decMontoAjusteCosto <> 0 Then
            m_objGoodReceiptusado.AgregarLineaUDO(My.Resources.Resource.MensajeTraspasoCosto, decMontoAjusteCosto * -1, strMonedaConfigurada, intAsientoAjuste, strCuentaUsado, ObjetoGoodReceiptCls.enumTipoCargo.Otros, udoEntrada, blnLineaAgregada)
            blnAsientoAjusteCosto = True
        End If
        m_objGoodReceiptusado.AsigarValoresSumaUDO(udoEntrada)

        Return udoEntrada

    End Function

    Private Sub GenerarCierreOportunidadVenta(ByVal Oform As SAPbouiCOM.Form, ByVal p_strDocNumFactura As String)

        Dim strIdOportunidadVenta As String
        Dim intIdOportunidadVenta As Integer
        Dim intCantidadLineas As Integer
        Dim oOportunidadVenta As SAPbobsCOM.SalesOpportunities
        Dim oFactura As SAPbobsCOM.Documents = Nothing
        Dim strEstadoFinal As String
        Dim intError As Integer = -1
        Dim strError As String = String.Empty

        Dim strEstadoOportunidad As String

        Dim strPrecioVenta As String
        Dim decPrecioVenta As Decimal

        strIdOportunidadVenta = Oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_OV", 0)
        strIdOportunidadVenta = strIdOportunidadVenta.Trim()

        strEstadoOportunidad = Utilitarios.EjecutarConsulta("Select Status from [OOPR] with (nolock) where OpprId = '" & strIdOportunidadVenta & "'", m_oCompany.CompanyDB, m_oCompany.Server)

        If Not String.IsNullOrEmpty(strIdOportunidadVenta) AndAlso strEstadoOportunidad = "O" Then

            strEstadoFinal = objConfiguracionGeneral.EtapaFinalCRM

            If Not String.IsNullOrEmpty(strEstadoFinal) Then

                intIdOportunidadVenta = CInt(strIdOportunidadVenta)

                oOportunidadVenta = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oSalesOpportunities)

                If Not String.IsNullOrEmpty(p_strDocNumFactura) Then

                    oFactura = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oInvoices), SAPbobsCOM.Documents)

                    intError = oFactura.GetByKey(p_strDocNumFactura)

                End If

                If intError = -1 Then
                    intError = oOportunidadVenta.GetByKey(intIdOportunidadVenta)
                    If intError = -1 Then
                        '                        If oOportunidadVenta.CurrentStageNo <> strEstadoFinal Then
                        intCantidadLineas = oOportunidadVenta.Lines.Count
                        If intCantidadLineas >= 1 Then
                            oOportunidadVenta.Lines.Add()
                        End If

                        oOportunidadVenta.Lines.StageKey = strEstadoFinal
                        oOportunidadVenta.Lines.DocumentType = SAPbobsCOM.BoAPARDocumentTypes.bodt_Invoice

                        If Not String.IsNullOrEmpty(p_strDocNumFactura) Then

                            oOportunidadVenta.Lines.DocumentNumber = oFactura.DocEntry

                            oOportunidadVenta.Lines.MaxLocalTotal = oFactura.DocTotal

                        Else

                            strPrecioVenta = Oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocTotal", 0)
                            strPrecioVenta = strPrecioVenta.Trim()
                            If Not String.IsNullOrEmpty(strPrecioVenta) Then
                                decPrecioVenta = Decimal.Parse(strPrecioVenta, n)
                                oOportunidadVenta.Lines.MaxLocalTotal = decPrecioVenta
                            End If

                        End If

                        oOportunidadVenta.PredictedClosingDate = Date.Now
                        oOportunidadVenta.Lines.StartDate = Date.Now
                        oOportunidadVenta.Lines.ClosingDate = Date.Now
                        oOportunidadVenta.Status = SAPbobsCOM.BoSoOsStatus.sos_Sold
                        intError = oOportunidadVenta.Update()
                        If intError <> 0 Then
                            m_oCompany.GetLastError(intError, strError)
                            Throw New ExceptionsSBO(intError, strError)
                        End If
                        '                     End If  de CurrentStageNo
                    Else
                        m_oCompany.GetLastError(intError, strError)
                        Throw New ExceptionsSBO(intError, strError)
                    End If
                Else
                    m_oCompany.GetLastError(intError, strError)
                    Throw New ExceptionsSBO(intError, strError)
                End If

            End If

        End If

    End Sub

    Private Sub GenerarCambioProspectoACliente(ByVal oForm As SAPbouiCOM.Form)

        Dim oCliente As SAPbobsCOM.BusinessPartners
        Dim strCardCode As String

        strCardCode = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0).Trim
        'strCardCode = strCardCode.Trim()
        If Not String.IsNullOrEmpty(strCardCode) Then
            oCliente = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oBusinessPartners)

            If oCliente.GetByKey(strCardCode) = -1 Then

                If oCliente.CardType = SAPbobsCOM.BoCardTypes.cLid Then

                    oCliente.CardType = SAPbobsCOM.BoCardTypes.cCustomer
                    oCliente.Update()

                End If

            End If
        End If

        Utilitarios.DestruirObjeto(oCliente)

    End Sub

    Private Sub GenerarAsientoAjusteCoste(ByVal p_strNoUnidadNuevo As String, _
                                          ByVal p_strNoUnidadUsado As String, _
                                          ByVal p_strTipoCarroVende As String,
                                          ByVal p_strSeparadorMilesSAP As String, _
                                          ByVal p_strSeparadorDecimalesSAP As String, _
                                          ByVal p_strMoneda As String, _
                                          ByRef intAsientoAjuste As Integer, _
                                          ByRef decMontoAsientoAjuste As Decimal, ByVal oMatrixUsado As SAPbouiCOM.Matrix)

        Dim decMontoAsiento As Decimal
        Dim strCuentaCarroVende As String
        Dim strTransaccionLineas As String
        Dim strComentarios As String
        Dim strTransaccion As String
        Dim intAsiento As Integer
        Dim decAjusteCosto As Decimal

        For i As Integer = 0 To oMatrixUsado.RowCount - 1
            decAjusteCosto = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Aj_Cos", i), n)
            decMontoAsiento += decAjusteCosto
        Next

        If decMontoAsiento > 0 Then
            strComentarios = My.Resources.Resource.TransferenciaCosto & p_strNoUnidadUsado & My.Resources.Resource.A & p_strNoUnidadNuevo

            strTransaccion = objConfiguracionGeneral.TransaccionAsientoAjuste()
            strTransaccionLineas = objConfiguracionGeneral.TransaccionCostoAjuste()

            strCuentaCarroVende = objConfiguracionGeneral.CuentaInventarioTransito(p_strTipoCarroVende)

            decMontoAsientoAjuste = decMontoAsiento

            Dim strMoneda As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoAjusteCosto).Trim

            decMontoAsiento = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, decMontoAsiento, p_strMoneda, 1, dtFechaDocumento)

            If Not String.IsNullOrEmpty(strMoneda) Then
                p_strMoneda = strMoneda
            End If

            If blnUsaDimensiones Then

                Dim strAsientoAjuste As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoAjusteCosto
                Dim strValorDimension As String = ListaConfiguracion.Item(strAsientoAjuste)

                ClsLineasDocumentosDimension = New AgregarDimensionLineasDocumentosCls(m_oCompany, m_SBO_Application)

                If Not String.IsNullOrEmpty(strValorDimension) Then
                    If strValorDimension = "Y" Then
                        intAsiento = Utilitarios.CrearAsientoAjuste(m_oCompany, strCuentaCarroVende, strTransaccion, strComentarios, decMontoAsiento, Date.Now, p_strNoUnidadNuevo, p_strNoUnidadUsado, False, p_strMoneda, strTransaccionLineas, oForm, oMatrixUsado, dtFechaDocumento, objConfiguracionGeneral, _
                                                                    "", "", "", blnUsaDimensiones, oDataTableDimensionesContablesDMS, ClsLineasDocumentosDimension)
                    End If
                End If
            Else

                intAsiento = Utilitarios.CrearAsientoAjuste(m_oCompany, strCuentaCarroVende, strTransaccion, strComentarios, decMontoAsiento, Date.Now, p_strNoUnidadNuevo, p_strNoUnidadUsado, False, p_strMoneda, strTransaccionLineas, oForm, oMatrixUsado, dtFechaDocumento, objConfiguracionGeneral)

            End If

            intAsientoAjuste = intAsiento
            oForm.Items.Item("txtAjus_Co").Specific.string = CStr(intAsiento)
        End If
    End Sub

    Private Sub GenerarNotaCreditoDescuento(ByVal p_strNoFactura As String, _
                                            ByVal p_strCliente As String, _
                                            ByVal p_strIDVehiculo As String, _
                                            ByVal p_strNumeroContratoVenta As String, _
                                            ByVal p_strDocCurrency As String, _
                                            ByVal p_strTipoVehiculo As String, Optional ByVal strMonedaConfiguradaNCDescuento As String = "")

        Dim decNotasCredito As Decimal

        Dim intError As Integer
        Dim strMensajeError As String = String.Empty

        Dim oNotaCredito As SAPbobsCOM.Documents
        Dim strNotaCredito As String = String.Empty

        Dim intSerieNotaCredito As Integer

        Dim strTipo As String = String.Empty
        Dim strMarcas As String = String.Empty
        Dim strEstilo As String = String.Empty
        Dim strColor As String = String.Empty
        Dim strAño As String = String.Empty
        Dim strUnidad As String = String.Empty
        Dim strSerie As String = String.Empty
        Dim strPlaca As String = String.Empty
        Dim strMensajeSuma As String = String.Empty
        Dim strImpuesto As String
        Dim strCuentaNotaCredito As String

        Call Utilitarios.ObtieneDatosVehiculos(p_strIDVehiculo, strTipo, strMarcas, strEstilo, strColor, strAño, strUnidad, strSerie, strPlaca, m_oCompany.Server, m_oCompany.CompanyDB)

        'decNotasCredito = CDec(Utilitarios.CambiarValoresACultureActual(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Cre", 0), strSeparadorMilesSAP, strSeparadorDecimalesSAP))
        decNotasCredito = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Cre", 0), n)

        If decNotasCredito > 0 Then

            oNotaCredito = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oCreditNotes),  _
                                                                            SAPbobsCOM.Documents)

            '---------------------------------------Manejo de indicadores: 09/05/2012------------------------------------------------
            'Obtiene el indicador por default para el tipo de documento: Nota de Crédito Descuento
            'Nota de Crédito Descuento [Cliente] [Tipo 3]
            Dim strIndicador As String = Utilitarios.DevuelveCodIndicadores(m_SBO_Application, "3")

            If Not String.IsNullOrEmpty(strIndicador) Then

                oNotaCredito.Indicator = strIndicador

            End If

            intSerieNotaCredito = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.NotasCreditoDescuentos)
            strImpuesto = objConfiguracionGeneral.Impuesto(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.NotasCreditoDescuentos)
            strCuentaNotaCredito = objConfiguracionGeneral.CuentasAdicionales(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.NotasCreditoDescuentos)

            If intSerieNotaCredito <> -1 Then
                oNotaCredito.Series = intSerieNotaCredito
            End If

            oNotaCredito.CardCode = p_strCliente
            strMensajeSuma = My.Resources.Resource.LaSumade & p_strDocCurrency & " " & String.Format("{0,10:N}", decNotasCredito)
            If Not String.IsNullOrEmpty(p_strIDVehiculo) Then
                oNotaCredito.Comments = My.Resources.Resource.DescuentoPorCompraDeVehículo & strTipo & strMarcas & strEstilo & strColor & strAño & strUnidad & strPlaca & strMensajeSuma
            Else
                oNotaCredito.Comments = My.Resources.Resource.DocUnidadesMultiples
            End If
            If Not String.IsNullOrEmpty(p_strNoFactura) Then
                oNotaCredito.NumAtCard = p_strNoFactura
            End If

            If Not String.IsNullOrEmpty(strMonedaConfiguradaNCDescuento) Then
                oNotaCredito.DocCurrency = strMonedaConfiguradaNCDescuento
            Else
                oNotaCredito.DocCurrency = p_strDocCurrency
            End If


            ' Usa Tipo Cambio Contrato 
            If strUsaTCContrato = "Y" And m_decTipoCambio > 0 Then
                If Not String.IsNullOrEmpty(strMonedaConfiguradaNCDescuento) And p_strDocCurrency = strMonedaConfiguradaNCDescuento Then
                    oNotaCredito.DocRate = m_decTipoCambio
                ElseIf String.IsNullOrEmpty(strMonedaConfiguradaNCDescuento) Then
                    oNotaCredito.DocRate = m_decTipoCambio
                End If
            End If


            ''agrego el tipo de cambio que se digita en el campo del contrato
            'm_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
            'If m_strMonedaLocal <> Trim(p_strDocCurrency) Then
            '    oNotaCredito.DocRate = m_decTipoCambio
            'End If

            oNotaCredito.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Service
            'agrego la fecha para el documento
            ' If Not String.IsNullOrEmpty(strFechaDocumento) Then
            oNotaCredito.DocDate = dtFechaDocumento
            'End If

            Dim dectotal As Decimal = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfiguradaNCDescuento, decNotasCredito, p_strDocCurrency, 1, dtFechaDocumento)
            oNotaCredito.Lines.UnitPrice = dectotal

            If strImpuesto <> "" Then
                oNotaCredito.Lines.TaxCode = strImpuesto
                oNotaCredito.Lines.VatGroup = strImpuesto
            End If
            If Not String.IsNullOrEmpty(strCuentaNotaCredito) Then oNotaCredito.Lines.AccountCode = strCuentaNotaCredito

            intError = oNotaCredito.Add()
            If intError <> 0 Then

                m_oCompany.GetLastError(intError, strMensajeError)
                Throw New ExceptionsSBO(intError, strMensajeError)

            Else

                m_oCompany.GetNewObjectCode(strNotaCredito)
                oForm.Items.Item("txtNot_cre").Specific.String = strNotaCredito

            End If

        End If

    End Sub

    Private Sub ManejarLineasFactura(ByRef oFactura As SAPbobsCOM.Documents, _
                                     ByVal p_intNoContrato As Integer, _
                                     ByVal blnGastosAdicionalesAgregados As Boolean, _
                                     ByVal p_strTipo As String, _
                                     ByVal p_strImpuesto As String)

        Dim drdResultadoConsulta As SqlClient.SqlDataReader
        Dim cmdEjecutarConsulta As New SqlClient.SqlCommand
        Dim strConectionString As String = ""
        Dim cn_Coneccion As New SqlClient.SqlConnection

        Dim objNumerosLineas As New Generic.SortedList(Of Integer, Integer())
        Dim intTipo As ConfiguracionLineasAdicionalesFacturaCls.enumTiposLineas
        Dim oCABYS As CABYS
        Try
            oCABYS = New CABYS()
            Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, strConectionString)
            cn_Coneccion.ConnectionString = strConectionString
            cn_Coneccion.Open()

            cmdEjecutarConsulta.Connection = cn_Coneccion

            cmdEjecutarConsulta.CommandType = CommandType.Text
            cmdEjecutarConsulta.CommandText = "Select Lineas.DocEntry, U_Monto, U_Descuent, Isnull(CXT.U_ItemCode,Conf.U_Cod_Item) U_Cod_Item, Isnull(U_Cod_GAS,U_Cod_GA) U_Cod_GA, Conf.Name, Conf .U_Tipo, U_Impuesto " & _
                                              "from [@" & TablaLineasSuma & "] Lineas with (nolock) inner join [@SCGD_CONFLINEASSUM] Conf with (nolock) " & _
                                              "on Conf.Code = Lineas.U_Cod_Item " & _
                                              "left outer join dbo.[@SCGD_COBROXTIPO] CXT with (nolock) on Conf.Code = CXT.Code " & _
                                              "and CXT.U_Tipo = '" & p_strTipo & "' where Lineas.DocEntry = " & CStr(p_intNoContrato)

            drdResultadoConsulta = cmdEjecutarConsulta.ExecuteReader()
            Do While drdResultadoConsulta.Read

                If CDec(drdResultadoConsulta.Item("U_Monto")) <> 0 Then
                    intTipo = CInt(drdResultadoConsulta.Item("U_Tipo"))
                    Select Case intTipo
                        Case ConfiguracionLineasAdicionalesFacturaCls.enumTiposLineas.scgGastosAdicionales

                            If blnGastosAdicionalesAgregados Then
                                oFactura.Expenses.Add()
                            Else
                                blnGastosAdicionalesAgregados = True
                            End If
                            oFactura.Expenses.ExpenseCode = drdResultadoConsulta.Item("U_Cod_GA")
                            oFactura.Expenses.LineTotal = CDec(drdResultadoConsulta.Item("U_Monto"))
                            If Not drdResultadoConsulta.IsDBNull(7) Then
                                oFactura.Expenses.TaxCode = drdResultadoConsulta.Item("U_Impuesto")
                                oFactura.Expenses.VatGroup = drdResultadoConsulta.Item("U_Impuesto")
                            Else
                                oFactura.Expenses.TaxCode = p_strImpuesto
                                oFactura.Expenses.VatGroup = p_strImpuesto
                            End If


                        Case ConfiguracionLineasAdicionalesFacturaCls.enumTiposLineas.scgLineaFactura

                            oFactura.Lines.ItemCode = drdResultadoConsulta.Item("U_Cod_Item")
                            If Not drdResultadoConsulta.IsDBNull(7) Then
                                oFactura.Lines.TaxCode = drdResultadoConsulta.Item("U_Impuesto")
                                oFactura.Lines.VatGroup = drdResultadoConsulta.Item("U_Impuesto")
                            Else
                                oFactura.Lines.TaxCode = p_strImpuesto
                                oFactura.Lines.VatGroup = p_strImpuesto
                            End If

                            oFactura.Lines.UnitPrice = CDec(drdResultadoConsulta.Item("U_Monto"))
                            oFactura.Lines.DiscountPercent = CDbl(drdResultadoConsulta.Item("U_Descuent"))
                            '******************INICIO | CABYS **************
                            If DMS_Connector.Configuracion.ParamGenAddon.U_CABYS_CR = "Y" Then
                                oCABYS.CodigoArticulo = drdResultadoConsulta.Item("U_Cod_Item")
                                oCABYS.IndicadorIVA = drdResultadoConsulta.Item("U_Impuesto")
                                ManejaCABYS(oCABYS)
                                If Not String.IsNullOrEmpty(oCABYS.CABYS_AE) Then oFactura.Lines.UserFields.Fields.Item("U_SCG_IVA2_Act_Econ").Value = oCABYS.CABYS_AE
                                If Not String.IsNullOrEmpty(oCABYS.CABYS_TI) Then oFactura.Lines.UserFields.Fields.Item("U_SCG_IVA2_TipoItem").Value = oCABYS.CABYS_TI
                                If Not String.IsNullOrEmpty(oCABYS.CABYS_CH) Then oFactura.Lines.UserFields.Fields.Item("U_SCG_IVA2_CodItem").Value = oCABYS.CABYS_CH
                            End If
                            '******************FIN | CABYS ******************
                            oFactura.Lines.Add()

                    End Select
                End If

            Loop

            drdResultadoConsulta.Close()
            cmdEjecutarConsulta.Connection.Close()
        Catch ex As Exception
            DMS_Connector.Helpers.ManejoErrores(ex)
        End Try
    End Sub

    Private Sub ManejarDesgloseCobro(ByVal p_intNoContrato As Integer, _
                                     ByVal p_strNoFactura As String, _
                                     ByVal p_strDocCurrency As String, _
                                     ByVal p_strDescripcionVehiculo As String, _
                                     ByVal p_strCliente As String, _
                                     ByRef oForm As SAPbouiCOM.Form, _
                                     ByVal p_intPeriodoPago As Integer)

        Dim oMatriz As SAPbouiCOM.Matrix
        Dim drdResultadoConsulta As SqlClient.SqlDataReader
        Dim cmdEjecutarConsulta As New SqlClient.SqlCommand
        Dim strConectionString As String = ""
        Dim cn_Coneccion As New SqlClient.SqlConnection
        Dim strValorItem As String = ""
        Dim intCantidadFilas As Integer
        Dim intDetalleDocumentoLinea(0 To 1) As Integer
        Dim strDocEntryDocumentoGenerado As String
        Dim intLineID As Integer
        Dim intNumerolinea As Integer

        Dim objNumerosLineas As New Generic.SortedList(Of Integer, Integer())
        Dim intTipo As ConfiguracionLineasDesgloceCobroCls.enumTiposDocumentos

        Dim oConditions As SAPbouiCOM.Conditions
        Dim oCondition As SAPbouiCOM.Condition
        oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

        oCondition = oConditions.Add

        oCondition.Alias = "Docentry"
        oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
        oCondition.CondVal = CStr(p_intNoContrato)

        Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, strConectionString)
        cn_Coneccion.ConnectionString = strConectionString
        cn_Coneccion.Open()

        cmdEjecutarConsulta.Connection = cn_Coneccion

        cmdEjecutarConsulta.CommandType = CommandType.Text
        cmdEjecutarConsulta.CommandText = "Select LineID, U_Monto, U_Descuent, U_Nom_Item, U_Tipo, U_T_Doc, Isnull(U_Impuesto,'') U_Impuesto, Isnull(U_Cod_Ser,'') U_Cod_Ser, U_AcctCode " & _
                                          "from [@" & TablaLineasResta & "] Lineas with (nolock) inner join [@SCGD_CONFLINEASRES] Conf with (nolock) on Conf.Code = Lineas.U_Cod_Item " & _
                                          "where U_T_Doc <> 0 And Lineas.DocEntry = " & CStr(p_intNoContrato) & " order by LineID"

        drdResultadoConsulta = cmdEjecutarConsulta.ExecuteReader()
        intCantidadFilas = 1
        Do While drdResultadoConsulta.Read
            strDocEntryDocumentoGenerado = ""
            intTipo = CInt(drdResultadoConsulta.Item("U_Tipo"))
            Select Case intTipo
                Case ConfiguracionLineasDesgloceCobroCls.enumTiposDocumentos.scgNotaCredito

                    strDocEntryDocumentoGenerado = GenerarNotaCreditoDesgloceCobro(drdResultadoConsulta.Item("U_Nom_Item"), p_strCliente, _
                                                        p_strDescripcionVehiculo, drdResultadoConsulta.Item("U_Cod_Ser"), _
                                                        CDec(drdResultadoConsulta.Item("U_Monto")), drdResultadoConsulta.Item("U_Impuesto"), _
                                                        p_strNoFactura, p_strDocCurrency, drdResultadoConsulta.Item("U_AcctCode"), _
                                                        CDbl(drdResultadoConsulta.Item("U_Descuent")))

                Case ConfiguracionLineasDesgloceCobroCls.enumTiposDocumentos.scgNotaDebito

                    strDocEntryDocumentoGenerado = GenerarNotaDebitoDesgloseCobro(drdResultadoConsulta.Item("U_Nom_Item"), p_strCliente, _
                                                                           p_strDescripcionVehiculo, drdResultadoConsulta.Item("U_Cod_Ser"), _
                                                                            CDec(drdResultadoConsulta.Item("U_Monto")), drdResultadoConsulta.Item("U_Impuesto"), _
                                                                            p_strNoFactura, p_strDocCurrency, drdResultadoConsulta.Item("U_AcctCode"), _
                                                                           CDbl(drdResultadoConsulta.Item("U_Descuent")), p_intPeriodoPago)
            End Select
            intDetalleDocumentoLinea = Array.CreateInstance(GetType(Integer), 2)
            intDetalleDocumentoLinea(0) = intTipo
            If Not String.IsNullOrEmpty(strDocEntryDocumentoGenerado) Then
                intDetalleDocumentoLinea(1) = CInt(strDocEntryDocumentoGenerado)
            Else
                intDetalleDocumentoLinea(1) = -1
            End If

            objNumerosLineas.Add(CInt(drdResultadoConsulta.Item("LineID")), intDetalleDocumentoLinea)

        Loop

        drdResultadoConsulta.Close()
        cmdEjecutarConsulta.Connection.Close()

        If objNumerosLineas.Count > 0 Then
            oMatriz = oForm.Items.Item("mtx_2").Specific
            oForm.DataSources.DBDataSources.Item("@" & TablaLineasResta).Query(oConditions)
            oMatriz.LoadFromDataSource()
            intCantidadFilas = oForm.DataSources.DBDataSources.Item("@" & TablaLineasResta).Size
            For intNumerolinea = 0 To intCantidadFilas - 1
                intLineID = intNumerolinea + 1
                If objNumerosLineas.ContainsKey(intLineID) Then
                    intDetalleDocumentoLinea = Nothing
                    intDetalleDocumentoLinea = objNumerosLineas.Item(intLineID)
                    intTipo = intDetalleDocumentoLinea(0)
                    Select Case intTipo
                        Case ConfiguracionLineasDesgloceCobroCls.enumTiposDocumentos.scgNotaCredito
                            oMatriz.Columns.Item(5).Cells.Item(intLineID).Specific.String = CStr(intDetalleDocumentoLinea(1))
                        Case ConfiguracionLineasDesgloceCobroCls.enumTiposDocumentos.scgNotaDebito
                            oMatriz.Columns.Item(6).Cells.Item(intLineID).Specific.String = CStr(intDetalleDocumentoLinea(1))
                    End Select

                End If

            Next
            oMatriz.FlushToDataSource()
        End If

    End Sub

    Private Function GenerarNotaDebitoDesgloseCobro(ByVal p_strDescripcionServicio As String, _
                                                ByVal p_strCliente As String, _
                                                ByVal p_strDescripcionVehiculo As String, _
                                                ByVal p_strSerie As String, _
                                                ByVal p_decMonto As Decimal, _
                                                ByVal p_strImpuesto As String, _
                                                ByVal p_strNoFactura As String, _
                                                ByVal p_strDocCurrency As String, _
                                                ByVal p_strCuenta As String, _
                                                ByVal p_dblDescuento As Double, _
                                                ByVal p_intCondicionesPago As Integer) As String

        Dim intError As Integer
        Dim strMensajeError As String = String.Empty

        Dim oNotaDebito As SAPbobsCOM.Documents
        Dim strNotaDebito As String = String.Empty

        If p_decMonto > 0 Then

            oNotaDebito = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oInvoices),  _
                                                                            SAPbobsCOM.Documents)

            If p_strSerie <> "" Then
                oNotaDebito.Series = p_strSerie
            End If

            oNotaDebito.DocumentSubType = m_intTipoDocumentoCargoAdicional
            oNotaDebito.CardCode = p_strCliente
            oNotaDebito.Comments = My.Resources.Resource.NotaDébitoGeneradaCompra & p_strDescripcionVehiculo
            oNotaDebito.NumAtCard = p_strNoFactura
            oNotaDebito.DocCurrency = p_strDocCurrency

            If strUsaTCContrato = "Y" And m_decTipoCambio > 0 Then
                oNotaDebito.DocRate = m_decTipoCambio
            End If


            'agrego fecha para el documento
            'If Not String.IsNullOrEmpty(strFechaDocumento) Then
            oNotaDebito.DocDate = dtFechaDocumento
            'End If


            oNotaDebito.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Service
            oNotaDebito.PaymentGroupCode = p_intCondicionesPago

            oNotaDebito.Lines.UnitPrice = p_decMonto
            oNotaDebito.Lines.ItemDescription = p_strDescripcionServicio
            oNotaDebito.Lines.DiscountPercent = p_dblDescuento
            If p_strImpuesto <> "" Then
                oNotaDebito.Lines.TaxCode = p_strImpuesto
                oNotaDebito.Lines.VatGroup = p_strImpuesto
            End If
            oNotaDebito.Lines.AccountCode = p_strCuenta

            intError = oNotaDebito.Add()
            If intError <> 0 Then
                '                If intError = -10 Then
                '                    Throw New ExceptionsSBO(intError, strMensajeError)
                '                Else
                m_oCompany.GetLastError(intError, strMensajeError)
                Throw New ExceptionsSBO(intError, strMensajeError)
                '                End If
            Else

                m_oCompany.GetNewObjectCode(strNotaDebito)

            End If

        End If

        Return strNotaDebito

    End Function

    Private Function GenerarNotaCreditoDesgloceCobro(ByVal p_strDescripcionServicio As String, _
                                                     ByVal p_strCliente As String, _
                                                     ByVal p_strDescripcionVehiculo As String, _
                                                     ByVal p_strSerie As String, _
                                                     ByVal p_decMonto As Decimal, _
                                                     ByVal p_strImpuesto As String, _
                                                     ByVal p_strNoFactura As String, _
                                                     ByVal p_strDocCurrency As String, _
                                                     ByVal p_strCuenta As String, _
                                                     ByVal p_dblDescuento As Double) As String

        Dim intError As Integer
        Dim strMensajeError As String = String.Empty

        Dim oNotaCredito As SAPbobsCOM.Documents
        Dim strNotaCredito As String = String.Empty

        If p_decMonto > 0 Then

            oNotaCredito = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oCreditNotes),  _
                                                                            SAPbobsCOM.Documents)
            If p_strSerie <> "" Then
                oNotaCredito.Series = p_strSerie
            End If

            oNotaCredito.CardCode = p_strCliente
            oNotaCredito.Comments = My.Resources.Resource.NotaCreditoAplicableCompraVehículo & p_strDescripcionVehiculo
            If Not String.IsNullOrEmpty(p_strNoFactura) Then
                oNotaCredito.NumAtCard = p_strNoFactura
            End If

            ''Se agrega para validacion de la moneda
            Dim strMoneda As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.NotaCreditoDesglosedeCobro).Trim

            If Not String.IsNullOrEmpty(strMoneda) Then

                oNotaCredito.DocCurrency = strMoneda
            Else
                oNotaCredito.DocCurrency = p_strDocCurrency
            End If

            ' Usa Tipo Cambio Contrato 
            If strUsaTCContrato = "Y" And m_decTipoCambio > 0 Then
                If Not String.IsNullOrEmpty(strMoneda) And p_strDocCurrency = strMoneda Then
                    oNotaCredito.DocRate = m_decTipoCambio
                ElseIf String.IsNullOrEmpty(strMoneda) Then
                    oNotaCredito.DocRate = m_decTipoCambio
                End If
            End If


            'agrego fecha para el documento
            'If Not String.IsNullOrEmpty(strFechaDocumento) Then
            oNotaCredito.DocDate = dtFechaDocumento
            'End If

            oNotaCredito.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Service
            '  oNotaCredito.UserFields.Fields.Item(mc_strUDFNoUnidad).Value = p_strNoUnidad.Trim()

            p_decMonto = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMoneda, p_decMonto, p_strDocCurrency, 1, dtFechaDocumento)

            oNotaCredito.Lines.UnitPrice = p_decMonto
            If p_strImpuesto <> "" Then
                oNotaCredito.Lines.TaxCode = p_strImpuesto
                oNotaCredito.Lines.VatGroup = p_strImpuesto
                oNotaCredito.Lines.ItemDescription = p_strDescripcionServicio
                '  oNotaCredito.Lines.DiscountPercent = p_dblDescuento
            End If
            oNotaCredito.Lines.AccountCode = p_strCuenta

            intError = oNotaCredito.Add()
            If intError <> 0 Then
                m_oCompany.GetLastError(intError, strMensajeError)
                '                If intError = -10 Then
                Throw New ExceptionsSBO(intError, strMensajeError)
                '                Else
                '                    Throw New Exception(My.Resources.Resource.ErrorCode & CStr(intError) & strMensajeError)
                '                End If
            Else

                m_oCompany.GetNewObjectCode(strNotaCredito)

            End If

        End If

        Return strNotaCredito

    End Function

    Private Sub GenerarNotaCreditoUsado(ByVal p_strNoFactura As String, _
                                                ByVal p_strCliente As String, _
                                                ByVal p_strIDVehiculo As String, _
                                                ByVal p_strNumeroContratoVenta As String, _
                                                ByVal p_strDocCurrency As String, _
                                                ByRef p_strNoNotaCreditoUsado As String, _
                                                ByRef p_strComentarioUsado As String, _
                                                ByRef p_strCodUnidad As String, _
                                                ByRef decMontoNotaCredito As Decimal, _
                                                ByRef blnNotaCredUsado As Boolean, ByVal oMatrixUsado As SAPbouiCOM.Matrix, Optional ByVal strMonedaConfigurada As String = "", Optional blnUsaDistincionSN_ReciboUsado As Boolean = False)

        Dim decNotasCredito As Decimal
        Dim strComentarioParaLinea As String

        Dim intError As Integer
        Dim strMensajeError As String = String.Empty
        Dim decMontoReal As Decimal

        Dim oNotaCredito As SAPbobsCOM.Documents
        Dim strNotaCredito As String = String.Empty

        Dim intSerieNotaCredito As Integer

        Dim strMensajeSuma As String
        Dim strImpuesto As String
        Dim strCuentaNotaCredito As String

        Dim decMontoUsado As Decimal
        Dim strDescMarca As String
        Dim strDescEstilo As String
        Dim strAñoVehiculo As String
        Dim strDescColor As String
        Dim strCodUnidad As String
        Dim strVIN As String
        Dim strPlaca As String
        Dim strTipo As String
        Dim strValorDimension As String = String.Empty

        decNotasCredito = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Mon_Usa", 0), n)

        'cambia el monto a moneda local
        decMontoReal = decNotasCredito
        decNotasCredito = decNotasCredito
        decMontoNotaCredito = decNotasCredito

        If decMontoReal > 0 Then

            oNotaCredito = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oCreditNotes),  _
                                                                            SAPbobsCOM.Documents)

            '---------------------------------------Manejo de indicadores: 09/05/2012------------------------------------------------
            'Obtiene el indicador por default para el tipo de documento: Nota de Credito Usado
            'Nota de Credito Usado [Cliente] [Tipo 4]
            Dim strIndicador As String = Utilitarios.DevuelveCodIndicadores(m_SBO_Application, "4")

            If Not String.IsNullOrEmpty(strIndicador) Then

                oNotaCredito.Indicator = strIndicador

            End If

            intSerieNotaCredito = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.NotasCreditoUsados)

            If intSerieNotaCredito <> -1 Then
                oNotaCredito.Series = intSerieNotaCredito
            End If

            p_strCodUnidad = p_strCodUnidad
            oNotaCredito.CardCode = p_strCliente

            'agrego fecha para el documento
            oNotaCredito.DocDate = dtFechaDocumento


            If Not String.IsNullOrEmpty(strMonedaConfigurada) Then
                oNotaCredito.DocCurrency = strMonedaConfigurada
            Else
                oNotaCredito.DocCurrency = p_strDocCurrency
            End If

            ' Usa Tipo Cambio Contrato 
            If strUsaTCContrato = "Y" And m_decTipoCambio > 0 Then
                If Not String.IsNullOrEmpty(strMonedaConfigurada) And p_strDocCurrency = strMonedaConfigurada Then
                    oNotaCredito.DocRate = m_decTipoCambio
                ElseIf String.IsNullOrEmpty(strMonedaConfigurada) Then
                    oNotaCredito.DocRate = m_decTipoCambio
                End If
            End If

            'Le pongo descuento 0 a la Nota de Credito
            oNotaCredito.DiscountPercent = 0


            If p_strDocCurrency = m_strMonedaLocal Then
                strMensajeSuma = My.Resources.Resource.EnUnValorDe & p_strDocCurrency & " " & String.Format("{0,10:N}", decNotasCredito)
            Else

                decNotasCredito = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfigurada, decNotasCredito, p_strDocCurrency, 1, dtFechaDocumento)

                'para los comentarios en las facturas y notas de credito
                If decMontoReal = decNotasCredito Then

                    Dim DecNotasCreditoComentario As Decimal = decNotasCredito * m_decTipoCambio
                    Dim valor As Decimal = FormatNumber(DecNotasCreditoComentario, n.NumberDecimalDigits)

                    strMensajeSuma = My.Resources.Resource.EnUnValorDe & p_strDocCurrency & String.Format("{0,10:N}", decMontoReal) & " (" & m_strMonedaLocal & " " & String.Format("{0,10:N}", valor) & " " & My.Resources.Resource.TipoCambio & ": " & m_decTipoCambio.ToString("n2") & ")" 'String.Format("{0,10:N}", m_decTipoCambio) & ")"
                Else
                    strMensajeSuma = My.Resources.Resource.EnUnValorDe & p_strDocCurrency & String.Format("{0,10:N}", decMontoReal) & " (" & m_strMonedaLocal & " " & String.Format("{0,10:N}", decNotasCredito) & " " & My.Resources.Resource.TipoCambio & ": " & m_decTipoCambio.ToString("n2") & ")" '& String.Format("{0,10:N}", m_decTipoCambio) & ")"
                End If


            End If

            If oMatrixUsado.RowCount > 1 Then

                p_strComentarioUsado = p_strComentarioUsado & strMensajeSuma & " " & My.Resources.Resource.ReferenciaCV & ": " & p_strNumeroContratoVenta

            Else

                p_strComentarioUsado = My.Resources.Resource.RecibimosVehículo & p_strComentarioUsado & strMensajeSuma & " " & My.Resources.Resource.ReferenciaCV & ": " & p_strNumeroContratoVenta

            End If

            oNotaCredito.Comments = p_strComentarioUsado
            If Not String.IsNullOrEmpty(p_strNoFactura) Then
                oNotaCredito.NumAtCard = p_strNoFactura
            End If

            oNotaCredito.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Service
            oNotaCredito.UserFields.Fields.Item("U_SCGD_Cod_Unidad").Value = p_strCodUnidad.Trim()


            If blnUsaDimensiones Then
                Dim strNotaCreditoUsado As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.NotasCreditoUsados
                strValorDimension = ListaConfiguracion.Item(strNotaCreditoUsado)
            End If

            Dim strQueryInd As String = String.Empty
            For i As Integer = 0 To oMatrixUsado.RowCount - 1
                strQueryInd += String.Format(" Name = '{0}' OR", oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Tipo", i).TrimEnd(" "))
            Next
            strQueryInd = strQueryInd.TrimEnd("OR")
            strQueryInd = String.Format(" SELECT Name, U_Tipo, U_Cod_Imp FROM [@SCGD_ADMIN3] with (nolock) INNER JOIN [@SCGD_TIPOVEHICULO] AS TV with (nolock) ON U_Tipo = TV.Code WHERE ({0}) AND U_Cod_Item = {1} ",
                                        strQueryInd.Substring(0, strQueryInd.Length - 3), CInt(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.NotasCreditoUsados))

            Dim dtIndUsados As System.Data.DataTable = Utilitarios.EjecutarConsultaDataTable(strQueryInd, m_oCompany.CompanyDB, m_oCompany.Server)

            For i As Integer = 0 To oMatrixUsado.RowCount - 1

                'decMontoUsado = CDec(Utilitarios.CambiarValoresACultureActual(oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Val_Rec", i), strSeparadorMilesSAP, strSeparadorDecimalesSAP))
                decMontoUsado = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Val_Rec", i), n)

                'CDec(Utilitarios.CambiarValoresACultureActual(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Mon_Usa", 0), strSeparadorMilesSAP, strSeparadorDecimalesSAP))
                strDescMarca = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Marca", i)
                strDescMarca = strDescMarca.Trim()
                strDescEstilo = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Estilo", i)
                strDescEstilo = strDescEstilo.Trim()
                strAñoVehiculo = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Anio", i)
                strAñoVehiculo = strAñoVehiculo.Trim()
                strDescColor = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Color", i)
                strDescColor = strDescColor.Trim()
                strCodUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", i)
                strCodUnidad = strCodUnidad.Trim()
                strVIN = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_VIN", i)
                strVIN = strVIN.Trim()
                strPlaca = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Placa", i)
                strPlaca = strPlaca.Trim()

                Dim drIndUsado() As System.Data.DataRow = dtIndUsados.Select(String.Format(" Name = '{0}'", oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Tipo", i).TrimEnd(" ")))
                strTipo = drIndUsado(0).Item("U_Tipo")
                strImpuesto = drIndUsado(0).Item("U_Cod_Imp")

                strCuentaNotaCredito = objConfiguracionGeneral.CuentaInventarioTransito(strTipo)

                'se realiza conversion de acuerdo a la mondena definida en BD
                Dim MontoAConvertir As Decimal = decMontoUsado
                Dim ValorReal As Decimal = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfigurada, MontoAConvertir, p_strDocCurrency, 1, dtFechaDocumento)
                oNotaCredito.Lines.UnitPrice = ValorReal

                oNotaCredito.Lines.UserFields.Fields.Item("U_SCGD_Cod_Prov").Value = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Prov", i).ToString().Trim()
                oNotaCredito.Lines.UserFields.Fields.Item("U_SCGD_Nom_Prov").Value = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Nom_Prov", i).ToString().Trim()

                decMontoReal = ValorReal
                decNotasCredito = ValorReal '* m_decTipoCambio
                decMontoNotaCredito = ValorReal

                'oNotaCredito.Lines.UnitPrice = decMontoUsado
                If strImpuesto <> "" Then
                    oNotaCredito.Lines.TaxCode = strImpuesto
                    oNotaCredito.Lines.VatGroup = strImpuesto
                End If

                strComentarioParaLinea = strDescMarca & " " & strDescEstilo & " " & strAñoVehiculo & " " & strDescColor & " " & strCodUnidad & " " & strVIN & " " & strPlaca
                strComentarioParaLinea = My.Resources.Resource.RecibimosVehículo & strComentarioParaLinea

                If strComentarioParaLinea.Length <= 100 Then
                    oNotaCredito.Lines.ItemDescription = strComentarioParaLinea
                Else
                    oNotaCredito.Lines.ItemDescription = strComentarioParaLinea.Substring(0, 100)
                End If
                oNotaCredito.Lines.AccountCode = strCuentaNotaCredito

                If blnUsaDimensiones Then
                    '******************************************************************************************
                    'lleno el datatable de dimensiones para el tipo de inventario y la marca del vehiculo
                    If Not String.IsNullOrEmpty(strValorDimension) Then
                        If strValorDimension = "Y" Then
                            Dim strCodigoMarca As String = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Marca_Us", i).TrimEnd(" ")
                            oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipo, strCodigoMarca, oDataTableDimensionesContablesDMS))
                        End If
                    End If
                    '******************************************************************************************

                    If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                        ClsLineasDocumentosDimension.AgregarDimensionesLineasDocumentos(oNotaCredito.Lines, oDataTableDimensionesContablesDMS)

                    End If
                End If

                oNotaCredito.Lines.Add()

            Next

            intError = oNotaCredito.Add()
            If intError <> 0 Then
                '                If intError = -10 Then
                '                    Throw New Exception(My.Resources.Resource.TipoCambioNoActualizado)
                '                Else
                m_oCompany.GetLastError(intError, strMensajeError)
                Throw New ExceptionsSBO(intError, strMensajeError)
                '                End If
            Else

                m_oCompany.GetNewObjectCode(strNotaCredito)
                oForm.Items.Item("txtNot_us").Specific.String = strNotaCredito
                p_strNoNotaCreditoUsado = strNotaCredito

                blnNotaCredUsado = True

            End If

        End If

    End Sub

    'Agregado 31/01/2011: Genera Nota de Credito negativa para versión en inglés
    Private Sub GenerarNotaCreditoNegativa(ByVal p_strNoFactura As String, _
                                  ByVal p_strCliente As String, _
                                  ByVal p_strIDVehiculo As String, _
                                  ByVal p_strNumeroContratoVenta As String, _
                                  ByVal p_strDocCurrency As String, _
                                  ByVal p_strTipoVehiculo As String, _
                                  ByVal p_intCondicionesPago As Integer)

        Dim decNotasCredito As Decimal

        Dim intError As Integer
        Dim strMensajeError As String = String.Empty

        Dim oNotaCredito As SAPbobsCOM.Documents
        Dim strNotaCredito As String = String.Empty

        Dim intSerieNotaCredito As Integer

        Dim strTipo As String = String.Empty
        Dim strMarcas As String = String.Empty
        Dim strEstilo As String = String.Empty
        Dim strColor As String = String.Empty
        Dim strAño As String = String.Empty
        Dim strUnidad As String = String.Empty
        Dim strSerie As String = String.Empty
        Dim strPlaca As String = String.Empty
        Dim strMensajeSuma As String
        Dim strImpuesto As String
        Dim strCuentaNotaCredito As String

        Call Utilitarios.ObtieneDatosVehiculos(p_strIDVehiculo, strTipo, strMarcas, strEstilo, strColor, strAño, strUnidad, strSerie, strPlaca, m_oCompany.Server, m_oCompany.CompanyDB)

        'decNotasCredito = CDec(Utilitarios.CambiarValoresACultureActual(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Deb", 0), strSeparadorMilesSAP, strSeparadorDecimalesSAP))
        decNotasCredito = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Deb", 0), n)

        If decNotasCredito > 0 Then

            oNotaCredito = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oCreditNotes),  _
                                                                            SAPbobsCOM.Documents)
            'strSerie = Utilitarios.LeerValoresConfiguracion(m_oCompany.CompanyDB, "SerieNotasDebito", m_strDireccionConfiguracion)
            'strImpuesto = Utilitarios.LeerValoresConfiguracion(m_oCompany.CompanyDB, "ImpuestoNotasDebito", m_strDireccionConfiguracion)
            'strCuentaNotaCredito = Utilitarios.LeerValoresConfiguracion(m_oCompany.CompanyDB, "CuentaNotasDebito" & p_strTipoVehiculo, m_strDireccionConfiguracion)

            intSerieNotaCredito = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.DocumentosDeuda)
            strImpuesto = objConfiguracionGeneral.Impuesto(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.DocumentosDeuda)
            strCuentaNotaCredito = objConfiguracionGeneral.CuentasAdicionales(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.DocumentosDeuda)

            If intSerieNotaCredito <> -1 Then
                oNotaCredito.Series = intSerieNotaCredito
            End If
            'oNotaDebito.DocumentSubType = SAPbobsCOM.BoDocumentSubType.bod_Bill
            'oNotaCredito.DocumentSubType = m_intTipoDocumentoCargoAdicional
            oNotaCredito.CardCode = p_strCliente
            strMensajeSuma = My.Resources.Resource.PorLaSumaDe & p_strDocCurrency & " " & String.Format("{0,10:N}", decNotasCredito)
            If Not String.IsNullOrEmpty(p_strIDVehiculo) Then
                oNotaCredito.Comments = My.Resources.Resource.AjusteVentaVehículo & strTipo & strMarcas & strEstilo & strColor & strAño & strUnidad & strPlaca & strMensajeSuma
            Else
                oNotaCredito.Comments = My.Resources.Resource.DocUnidadesMultiples
            End If

            If Not String.IsNullOrEmpty(p_strNoFactura) Then
                oNotaCredito.NumAtCard = p_strNoFactura
            End If
            oNotaCredito.DocCurrency = p_strDocCurrency
            oNotaCredito.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Service

            'agrego fecha para el documento
            'If Not String.IsNullOrEmpty(strFechaDocumento) Then
            oNotaCredito.TaxDate = dtFechaDocumento
            'End If

            ''agrego el tipo de cambio que se digita en el campo del contrato
            'm_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
            'If m_strMonedaLocal <> Trim(p_strDocCurrency) Then
            '    oNotaCredito.DocRate = m_decTipoCambio
            'End If

            oNotaCredito.PaymentGroupCode = p_intCondicionesPago

            oNotaCredito.Lines.UnitPrice = decNotasCredito * -1
            If strImpuesto <> "" Then
                oNotaCredito.Lines.TaxCode = strImpuesto
                oNotaCredito.Lines.VatGroup = strImpuesto
            End If
            oNotaCredito.Lines.AccountCode = strCuentaNotaCredito

            intError = oNotaCredito.Add()
            If intError <> 0 Then
                '                If intError = -10 Then
                '                    Throw New Exception(My.Resources.Resource.TipoCambioNoActualizado)
                '                Else
                m_oCompany.GetLastError(intError, strMensajeError)
                Throw New ExceptionsSBO(intError, strMensajeError)
                '                End If
            Else

                m_oCompany.GetNewObjectCode(strNotaCredito)
                oForm.Items.Item("txtNota_De").Specific.String = strNotaCredito

                Dim oLink As SAPbouiCOM.LinkedButton
                oLink = DirectCast(oForm.Items.Item("lkNota_De").Specific, SAPbouiCOM.LinkedButton)

                oLink.LinkedObjectType = 14

            End If

        End If

    End Sub

    Private Sub GenerarNotaDebito(ByVal p_strNoFactura As String, _
                                  ByVal p_strCliente As String, _
                                  ByVal p_strIDVehiculo As String, _
                                  ByVal p_strNumeroContratoVenta As String, _
                                  ByVal p_strDocCurrency As String, _
                                  ByVal p_strTipoVehiculo As String, _
                                  ByVal p_intCondicionesPago As Integer, Optional ByVal strMonedaConfiguradaNDebito As String = "")

        Dim decNotasDebito As Decimal

        Dim intError As Integer
        Dim strMensajeError As String = String.Empty

        Dim oNotaDebito As SAPbobsCOM.Documents
        Dim strNotaDebito As String = String.Empty

        Dim intSerieNotaCredito As Integer

        Dim strTipo As String = String.Empty
        Dim strMarcas As String = String.Empty
        Dim strEstilo As String = String.Empty
        Dim strColor As String = String.Empty
        Dim strAño As String = String.Empty
        Dim strUnidad As String = String.Empty
        Dim strSerie As String = String.Empty
        Dim strPlaca As String = String.Empty
        Dim strMensajeSuma As String
        Dim strImpuesto As String
        Dim strCuentaNotaCredito As String
        Dim strLocalizacion As String = String.Empty

        Call Utilitarios.ObtieneDatosVehiculos(p_strIDVehiculo, strTipo, strMarcas, strEstilo, strColor, strAño, strUnidad, strSerie, strPlaca, m_oCompany.Server, m_oCompany.CompanyDB)

        'decNotasDebito = CDec(Utilitarios.CambiarValoresACultureActual(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Deb", 0), strSeparadorMilesSAP, strSeparadorDecimalesSAP))
        decNotasDebito = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Deb", 0), n)

        If decNotasDebito > 0 Then

            oNotaDebito = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oInvoices),  _
                                                                            SAPbobsCOM.Documents)
            'strSerie = Utilitarios.LeerValoresConfiguracion(m_oCompany.CompanyDB, "SerieNotasDebito", m_strDireccionConfiguracion)
            'strImpuesto = Utilitarios.LeerValoresConfiguracion(m_oCompany.CompanyDB, "ImpuestoNotasDebito", m_strDireccionConfiguracion)
            'strCuentaNotaCredito = Utilitarios.LeerValoresConfiguracion(m_oCompany.CompanyDB, "CuentaNotasDebito" & p_strTipoVehiculo, m_strDireccionConfiguracion)

            '---------------------------------------Manejo de indicadores: 09/05/2012------------------------------------------------
            'Obtiene el indicador por default para el tipo de documento: Nota de Débito Descuento
            'Nota de Débito [Cliente] [Tipo 2]
            Dim strIndicador As String = Utilitarios.DevuelveCodIndicadores(m_SBO_Application, "2")

            If Not String.IsNullOrEmpty(strIndicador) Then

                oNotaDebito.Indicator = strIndicador

            End If

            intSerieNotaCredito = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.DocumentosDeuda)
            strImpuesto = objConfiguracionGeneral.Impuesto(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.DocumentosDeuda)
            strCuentaNotaCredito = objConfiguracionGeneral.CuentasAdicionales(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.DocumentosDeuda)

            If intSerieNotaCredito <> -1 Then
                oNotaDebito.Series = intSerieNotaCredito
            End If

            strLocalizacion = DMS_Connector.Company.ApplicationSBO.Company.Localization
            If Not strLocalizacion = "CR" Then
                'oNotaDebito.DocumentSubType = SAPbobsCOM.BoDocumentSubType.bod_Bill
                oNotaDebito.DocumentSubType = m_intTipoDocumentoCargoAdicional
            End If
            oNotaDebito.CardCode = p_strCliente

            'agrego fecha para el documento
            'If Not String.IsNullOrEmpty(strFechaDocumento) Then
            oNotaDebito.DocDate = dtFechaDocumento
            'End If

            strMensajeSuma = My.Resources.Resource.PorLaSumaDe & p_strDocCurrency & " " & String.Format("{0,10:N}", decNotasDebito)
            If Not String.IsNullOrEmpty(p_strIDVehiculo) Then
                oNotaDebito.Comments = My.Resources.Resource.AjusteVentaVehículo & strTipo & strMarcas & strEstilo & strColor & strAño & strUnidad & strPlaca & strMensajeSuma
            Else
                oNotaDebito.Comments = My.Resources.Resource.DocUnidadesMultiples
            End If
            'oNotaDebito.Comments = My.Resources.Resource.AjusteVentaVehículo & strTipo & strMarcas & strEstilo & strColor & strAño & strUnidad & strSerie & strPlaca & strMensajeSuma
            If Not String.IsNullOrEmpty(p_strNoFactura) Then
                oNotaDebito.NumAtCard = p_strNoFactura
            End If

            If Not String.IsNullOrEmpty(strMonedaConfiguradaNDebito) Then
                oNotaDebito.DocCurrency = strMonedaConfiguradaNDebito
            Else
                oNotaDebito.DocCurrency = p_strDocCurrency
            End If

            ' Usa Tipo Cambio Contrato 
            If strUsaTCContrato = "Y" And m_decTipoCambio > 0 Then
                If Not String.IsNullOrEmpty(strMonedaConfiguradaNDebito) And p_strDocCurrency = strMonedaConfiguradaNDebito Then
                    oNotaDebito.DocRate = m_decTipoCambio
                ElseIf String.IsNullOrEmpty(strMonedaConfiguradaNDebito) Then
                    oNotaDebito.DocRate = m_decTipoCambio
                End If
            End If


            ''agrego el tipo de cambio que se digita en el campo del contrato
            'm_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
            'If m_strMonedaLocal <> Trim(p_strDocCurrency) Then
            '    oNotaDebito.DocRate = m_decTipoCambio
            'End If

            'oNotaDebito.DocCurrency = p_strDocCurrency
            oNotaDebito.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Service
            oNotaDebito.PaymentGroupCode = p_intCondicionesPago

            ' oNotaDebito.Lines.UnitPrice = decNotasDebito
            oNotaDebito.Lines.UnitPrice = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfiguradaNDebito, decNotasDebito, p_strDocCurrency, 1, dtFechaDocumento)
            If strImpuesto <> "" Then
                oNotaDebito.Lines.TaxCode = strImpuesto
                oNotaDebito.Lines.VatGroup = strImpuesto
            End If
            oNotaDebito.Lines.AccountCode = strCuentaNotaCredito

            intError = oNotaDebito.Add()
            If intError <> 0 Then
                '                If intError = -10 Then
                '                    Throw New Exception(My.Resources.Resource.TipoCambioNoActualizado)
                '                Else
                m_oCompany.GetLastError(intError, strMensajeError)
                Throw New ExceptionsSBO(intError, strMensajeError)
                '                End If
            Else

                m_oCompany.GetNewObjectCode(strNotaDebito)
                oForm.Items.Item("txtNota_De").Specific.String = strNotaDebito

                Dim oLink As SAPbouiCOM.LinkedButton
                oLink = DirectCast(oForm.Items.Item("lkNota_De").Specific, SAPbouiCOM.LinkedButton)

                oLink.LinkedObjectType = 13

            End If

        End If

    End Sub

    ''' <summary>
    ''' Genera una factura cliente de tipo servicio para el monto correspondiente a un vehículo consignado
    ''' </summary>
    ''' <param name="p_strClienteFacturar">Código del cliente al que se le vende el vehículo</param>
    ''' <param name="p_strNumeroUnidad">Número de vehículo/unidad</param>
    ''' <param name="p_strNumeroContratoVenta">Número de contrato de ventas</param>
    ''' <param name="p_strMonedaContratoVenta">Moneda del contrato de venta</param>
    ''' <returns>DocEntry de la factura cliente creada</returns>
    ''' <remarks></remarks>
    Private Function GenerarFacturaConsignado(ByVal p_strClienteFacturar As String, ByVal p_strNumeroUnidad As String, _
                                              ByVal p_strNumeroContratoVenta As String, ByVal p_strMonedaContratoVenta As String, ByVal p_intPeriodoPago As Integer) As String
        Dim strDocEntry As String = String.Empty
        Dim oFacturaConsignado As SAPbobsCOM.Documents

        Dim decMontoSinImpuesto As Decimal = 0
        Dim strIndicadorImpuesto As String = String.Empty
        Dim strFactoringIndicator As String = String.Empty
        Dim intSerie As Integer
        Dim strCuentaComisionConsignados As String = String.Empty
        Dim boolAgregarDimension As Boolean = False
        'Manejo de errores
        Dim intError As Integer = 0
        Dim strMensajeError As String = String.Empty
        Dim strDescripcionServicio As String = "COMISIÓN CONSIGNADO, N°Patente: {0},  N° de Contrato: {1}"
        Dim strNumeroPlaca = String.Empty

        Try
            If oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size > 0 Then
                'Inicializa el documento
                oFacturaConsignado = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oInvoices)
                oFacturaConsignado.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Service

                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                'Encabezado de la factura
                '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                Dim strCodigoUnidad As String = p_strNumeroUnidad
                Dim strTipoInventario As String = Utilitarios.EjecutarConsulta("Select U_TipIn From dbo.[@SCGD_VEHIXCONT] WITH (nolock) Where U_Cod_Unid = '" & strCodigoUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from [@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & strCodigoUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                'intSerie = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaVentas)
                'intSerie = objConfiguracionGeneral.Serie(ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaExentaConsignados)
                'intSerie = objConfiguracionGeneral.SerieExenta(ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaExentaConsignados)
                intSerie = DMS_Connector.Helpers.GetSerie(strTipoInventario, DMS_Connector.Data_Access.GeneralEnums.scgTipoSeries.FacturaComisionConsignados, True)

                If intSerie <> -1 Then
                    oFacturaConsignado.Series = intSerie
                    oFacturaConsignado.CardCode = p_strClienteFacturar
                    oFacturaConsignado.DocDate = dtFechaDocumento
                    oFacturaConsignado.Comments = My.Resources.Resource.MensajeFacturaConsignado & ". " & My.Resources.Resource.ReferenciaCV & ": " & p_strNumeroContratoVenta & My.Resources.Resource.Unidad & ": " & p_strNumeroUnidad
                    oFacturaConsignado.NumAtCard = p_strNumeroContratoVenta.Trim()
                    oFacturaConsignado.DiscountPercent = 0
                    oFacturaConsignado.DocCurrency = p_strMonedaContratoVenta
                    oFacturaConsignado.PaymentGroupCode = p_intPeriodoPago

                    'Usa Tipo Cambio Contrato 
                    If strUsaTCContrato.ToUpper() = "Y" And m_decTipoCambio > 0 Then
                        oFacturaConsignado.DocRate = m_decTipoCambio
                    End If

                    strFactoringIndicator = Utilitarios.DevuelveCodIndicadores(m_SBO_Application, "1")

                    If Not String.IsNullOrEmpty(strFactoringIndicator) Then
                        oFacturaConsignado.Indicator = strFactoringIndicator
                    End If

                    'Campos definidos por el usuario
                    oFacturaConsignado.UserFields.Fields.Item("U_SCGD_Cod_Unidad").Value = p_strNumeroUnidad
                    'oFacturaConsignado.UserFields.Fields.Item("U_SCGD_NoContrato").Value = p_strNumeroContratoVenta

                    '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                    'Lineas de la factura
                    '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                    '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                    'Manejo de las dimensiones contables para las lineas
                    '''''''''''''''''''''''''''''''''''''''''''''''''''''''
                    If blnUsaDimensiones Then

                        Dim strFacturaComisionConsignado As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.FacturaComisionConsignado
                        Dim strValorDimension As String = ListaConfiguracion.Item(strFacturaComisionConsignado)

                        ClsLineasDocumentosDimension = New AgregarDimensionLineasDocumentosCls(m_oCompany, m_SBO_Application)

                        If Not String.IsNullOrEmpty(strValorDimension) Then
                            If strValorDimension.ToUpper() = "Y" Then


                                oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipoInventario, strCodigoMarca, oDataTableDimensionesContablesDMS))

                                'Si hay dimensiones contables definidas para el tipo de inventario y marca
                                'se procede a agregarlas para todas las líneas del asiento por igual
                                If oDataTableDimensionesContablesDMS.Rows.Count > 0 Then
                                    boolAgregarDimension = True
                                End If
                            End If
                        End If

                    End If

                    strNumeroPlaca = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Num_Plac", 0).Trim()
                    'strIndicadorImpuesto = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Impuesto", 0).Trim
                    strIndicadorImpuesto = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ImpCmsCns", 0).ToString.Trim()
                    decMontoSinImpuesto = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MNetoFC", 0), n)
                    strCuentaComisionConsignados = oDataTableConfiguracionesDMS.GetValue("U_CtaComCns", 0).ToString().Trim()

                    oFacturaConsignado.Lines.ItemDescription = String.Format(strDescripcionServicio, strNumeroPlaca.Trim(), p_strNumeroContratoVenta.Trim())
                    oFacturaConsignado.Lines.AccountCode = strCuentaComisionConsignados
                    oFacturaConsignado.Lines.UnitPrice = decMontoSinImpuesto

                    If Not String.IsNullOrEmpty(strIndicadorImpuesto) Then
                        oFacturaConsignado.Lines.TaxCode = strIndicadorImpuesto
                        oFacturaConsignado.Lines.VatGroup = strIndicadorImpuesto
                    End If

                    If boolAgregarDimension = True Then
                        ClsLineasDocumentosDimension.AgregarDimensionesLineasDocumentos(oFacturaConsignado.Lines, oDataTableDimensionesContablesDMS)
                    End If

                    intError = oFacturaConsignado.Add()
                    If intError <> 0 Then
                        m_oCompany.GetLastError(intError, strMensajeError)
                        If m_oCompany.InTransaction() Then
                            m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                        End If
                        Throw New ExceptionsSBO(intError, strMensajeError)
                    Else
                        m_oCompany.GetNewObjectCode(strDocEntry)
                    End If
                Else
                    If m_oCompany.InTransaction() Then
                        m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
                    End If

                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorSerieNumCmsConsignados, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)

                End If

            End If

            Return strDocEntry

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Private Sub GenerarFacturarProveedor(ByVal p_strNoFactura As String, _
                                         ByVal p_strIDVehiculo As String, _
                                         ByVal p_strNumeroContratoVenta As String, _
                                         ByVal p_strDocCurrency As String, _
                                         ByVal p_strTipoVehiculo As String, _
                                         ByVal p_strCardCodeFacturar As String, ByVal oMatrizUsado As SAPbouiCOM.Matrix, ByVal strComentarioUsado As String, Optional ByVal strMonedaConfiguracionFP As String = "", _
                                         Optional ByVal p_intPeriodopago As Integer = 0)

        Dim decNotasDebito As Decimal

        Dim intError As Integer
        Dim strMensajeError As String = String.Empty

        Dim oFacturaProveedor As SAPbobsCOM.Documents
        Dim strNotaDebito As String = String.Empty

        Dim intSerieNotaCredito As Integer

        Dim strProveedor As String
        Dim strUnidad As String = String.Empty
        Dim strMensajeSuma As String
        Dim strImpuesto As String
        Dim strCuentaFacturaProveedor As String
        Dim intAsientoDeuda As Integer

        strProveedor = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_Acre", 0).Trim

        decNotasDebito = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deu_Usa", 0), n)

        If decNotasDebito > 0 Then
            If strProveedor <> "" Then
                oFacturaProveedor = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oPurchaseInvoices),  _
                                                                                SAPbobsCOM.Documents)

                Dim strIndicador As String = Utilitarios.DevuelveCodIndicadores(m_SBO_Application, "5")

                If Not String.IsNullOrEmpty(strIndicador) Then
                    oFacturaProveedor.Indicator = strIndicador
                End If

                intSerieNotaCredito = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaProveedor)
                strImpuesto = objConfiguracionGeneral.Impuesto(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaProveedor)
                strCuentaFacturaProveedor = objConfiguracionGeneral.CuentasAdicionales(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaProveedor)

                If intSerieNotaCredito <> -1 Then
                    oFacturaProveedor.Series = intSerieNotaCredito
                End If

                oFacturaProveedor.CardCode = strProveedor
                strMensajeSuma = My.Resources.Resource.PorLaSumaDe & p_strDocCurrency & " " & String.Format("{0,10:N}", decNotasDebito)

                If oMatrizUsado.RowCount = 1 Then
                    oFacturaProveedor.Comments = My.Resources.Resource.PagoDeudaAsumidaVehículo & strComentarioUsado & My.Resources.Resource.ReferenciaCV & ": " & strComentarioNumeroContratoVenta & ", " & strMensajeSuma
                Else
                    oFacturaProveedor.Comments = My.Resources.Resource.MultiplesUsados
                End If

                If Not String.IsNullOrEmpty(p_strNoFactura) Then
                    oFacturaProveedor.NumAtCard = p_strNoFactura
                End If

                If Not String.IsNullOrEmpty(strMonedaConfiguracionFP) Then
                    oFacturaProveedor.DocCurrency = strMonedaConfiguracionFP
                Else
                    oFacturaProveedor.DocCurrency = p_strDocCurrency
                End If

                ' Usa Tipo Cambio Contrato 
                If strUsaTCContrato = "Y" And m_decTipoCambio > 0 Then
                    If Not String.IsNullOrEmpty(strMonedaConfiguracionFP) And p_strDocCurrency = strMonedaConfiguracionFP Then
                        oFacturaProveedor.DocRate = m_decTipoCambio
                    ElseIf String.IsNullOrEmpty(strMonedaConfiguracionFP) Then
                        oFacturaProveedor.DocRate = m_decTipoCambio
                    End If
                End If

                oFacturaProveedor.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Service
                oFacturaProveedor.DocDate = dtFechaDocumento
                oFacturaProveedor.PaymentGroupCode = p_intPeriodopago
                oFacturaProveedor.Lines.UnitPrice = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfiguracionFP, decNotasDebito, p_strDocCurrency, 1, dtFechaDocumento)

                If strImpuesto <> "" Then
                    oFacturaProveedor.Lines.TaxCode = strImpuesto
                    oFacturaProveedor.Lines.VatGroup = strImpuesto
                End If

                oFacturaProveedor.Lines.AccountCode = strCuentaFacturaProveedor

                intError = oFacturaProveedor.Add()

                If intError <> 0 Then
                    m_oCompany.GetLastError(intError, strMensajeError)
                    Throw New ExceptionsSBO(intError, strMensajeError)
                Else

                    m_oCompany.GetNewObjectCode(strNotaDebito)
                    oForm.Items.Item("txtFac_Acr").Specific.String = strNotaDebito

                    Dim strCreaNCparaVehiculoUsado As String = oDataTableConfiguracionesDMS.GetValue("U_NCSalNeg", 0)
                    Dim strNegativeAmount As String = Utilitarios.EjecutarConsulta("Select NegAmount from OADM with(nolock) ", m_oCompany.CompanyDB, m_oCompany.Server)

                    If strCreaNCparaVehiculoUsado = "Y" Then

                        If strNegativeAmount = "Y" Then
                            intAsientoDeuda = GenerarNotaCreditoNegAsignacionDeuda(p_strCardCodeFacturar, strCuentaFacturaProveedor, decNotasDebito, p_strDocCurrency, strUnidad, strCuentaFacturaProveedor, strNotaDebito, strImpuesto)
                        Else
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.NotaCredNegat)
                        End If

                    Else

                        ''moneda configurada para Nota de Debito Asignacion de Deuda
                        Dim strMonedaNDAsigDeuda As String = MonedaParaDocumento(ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.NotaDebitoDeudaUsado).Trim

                        ''********Validacion de Moneda del socio de negocio con la moneda que se tienen configurada
                        Dim TipoDocumentoNDAsigDeuda As String = "" & My.Resources.Resource.DocumentoNotaDebitoDeudaUsado
                        If Not String.IsNullOrEmpty(strMonedaNDAsigDeuda) Then
                            If Not RetornarMonedaSN(strMonedaSN, strMonedaNDAsigDeuda, TipoDocumentoNDAsigDeuda) Then
                                Call CancelarOperacionesContratoVenta(oForm, m_oCompany, m_cnConeccionTransaccion, m_tnTransaccion)
                                Exit Sub
                            Else
                                If blnCambiarMonedaporContrato Then
                                    strMonedaNDAsigDeuda = p_strDocCurrency
                                    blnCambiarMonedaporContrato = False
                                End If
                            End If
                        End If
                        intAsientoDeuda = GenerarNotaDebitoAsignacionDeuda(p_strCardCodeFacturar, strCuentaFacturaProveedor, decNotasDebito, p_strDocCurrency, strUnidad, strCuentaFacturaProveedor, strNotaDebito, strImpuesto, strMonedaNDAsigDeuda, p_intPeriodopago)

                    End If

                    oForm.Items.Item("txtAs_CPC").Specific.String = CStr(intAsientoDeuda)

                End If
            Else
                Throw New Exception(My.Resources.Resource.DeudaSinProveedor)
            End If
        End If

    End Sub

    Private Function GenerarNotaCreditoNegAsignacionDeuda(ByVal p_strCodigoCliente As String, _
                                                      ByVal p_strCodigoContraCuenta As String, _
                                                      ByVal p_decMontoDeuda As Decimal, _
                                                      ByVal p_strMoneda As String, _
                                                      ByVal p_strNoUnidad As String, _
                                                      ByVal p_strCuentaAsociada As String, _
                                                      ByVal p_strNoFactura As String, _
                                                      ByVal p_strImpuesto As String) As Integer

        Dim intNumeroNota As Integer
        Dim oNotaCredito As SAPbobsCOM.Documents

        Dim intSerie As Integer
        Dim strMensajeSuma As String
        Dim intError As Integer
        Dim strMensajeError As String = String.Empty

        oNotaCredito = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oCreditNotes),  _
                                                                                   SAPbobsCOM.Documents)
        intSerie = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.DocumentosDeuda)

        If intSerie <> -1 Then
            oNotaCredito.Series = intSerie
        End If

        oNotaCredito.CardCode = p_strCodigoCliente
        strMensajeSuma = My.Resources.Resource.PorLaSumaDe & p_strMoneda & " " & String.Format("{0,10:N}", p_decMontoDeuda)
        oNotaCredito.Comments = My.Resources.Resource.CargaDeudaAsumidaEmpresa & strMensajeSuma
        oNotaCredito.NumAtCard = p_strNoFactura
        oNotaCredito.DocCurrency = p_strMoneda
        oNotaCredito.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Service

        ' Usa Tipo Cambio Contrato 
        If strUsaTCContrato = "Y" And m_decTipoCambio > 0 Then
            oNotaCredito.DocRate = m_decTipoCambio
        End If

        oNotaCredito.Lines.UnitPrice = p_decMontoDeuda * -1
        If p_strImpuesto <> "" Then
            oNotaCredito.Lines.TaxCode = p_strImpuesto
            oNotaCredito.Lines.VatGroup = p_strImpuesto
        End If
        oNotaCredito.Lines.AccountCode = p_strCodigoContraCuenta

        intError = oNotaCredito.Add()

        If intError <> 0 Then
            m_oCompany.GetLastError(intError, strMensajeError)
            Throw New ExceptionsSBO(intError, strMensajeError)
        Else

            m_oCompany.GetNewObjectCode(intNumeroNota)

            Dim oLink As SAPbouiCOM.LinkedButton
            oLink = DirectCast(oForm.Items.Item("223").Specific, SAPbouiCOM.LinkedButton)

            oLink.LinkedObjectType = 14

        End If

        Return intNumeroNota

    End Function

    Private Function GenerarNotaDebitoAsignacionDeuda(ByVal p_strCodigoCliente As String, _
                                                      ByVal p_strCodigoContraCuenta As String, _
                                                      ByVal p_decMontoDeuda As Decimal, _
                                                      ByVal p_strMoneda As String, _
                                                      ByVal p_strNoUnidad As String, _
                                                      ByVal p_strCuentaAsociada As String, _
                                                      ByVal p_strNoFactura As String, _
                                                      ByVal p_strImpuesto As String, Optional ByVal strMonedaConfigurada As String = "", Optional ByVal p_intPeriodoPago As Integer = 0) As Integer

        Dim intNumeroNota As Integer
        Dim oNotaDebito As SAPbobsCOM.Documents

        Dim intSerie As Integer
        Dim strMensajeSuma As String
        Dim intError As Integer
        Dim strMensajeError As String = String.Empty
        Dim strLocalization As String = String.Empty

        oNotaDebito = CType(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oInvoices),  _
                                                                                   SAPbobsCOM.Documents)
        intSerie = objConfiguracionGeneral.Serie(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.DocumentosDeuda)

        If intSerie <> -1 Then
            oNotaDebito.Series = intSerie
        End If

        strLocalization = DMS_Connector.Company.ApplicationSBO.Company.Localization
        If Not strLocalization = "CR" Then
            oNotaDebito.DocumentSubType = m_intTipoDocumentoCargoAdicional
        End If
        oNotaDebito.CardCode = p_strCodigoCliente
        strMensajeSuma = My.Resources.Resource.PorLaSumaDe & p_strMoneda & " " & String.Format("{0,10:N}", p_decMontoDeuda)
        oNotaDebito.Comments = My.Resources.Resource.CargaDeudaAsumidaEmpresa & strMensajeSuma

        oNotaDebito.DocType = BoDocumentTypes.dDocument_Service
        oNotaDebito.NumAtCard = p_strNoFactura
        'oNotaDebito.DocCurrency = p_strMoneda

        ''Se agrega para validacion de la moneda
        If Not String.IsNullOrEmpty(strMonedaConfigurada) Then
            oNotaDebito.DocCurrency = strMonedaConfigurada
        Else
            oNotaDebito.DocCurrency = p_strMoneda
        End If

        ' Usa Tipo Cambio Contrato 
        If strUsaTCContrato = "Y" And m_decTipoCambio > 0 Then
            If Not String.IsNullOrEmpty(strMonedaConfigurada) And p_strMoneda = strMonedaConfigurada Then
                oNotaDebito.DocRate = m_decTipoCambio
            ElseIf String.IsNullOrEmpty(strMonedaConfigurada) Then
                oNotaDebito.DocRate = m_decTipoCambio
            End If
        End If



        oNotaDebito.PaymentGroupCode = p_intPeriodoPago
        'agrego fecha para el documento
        'If Not String.IsNullOrEmpty(strFechaDocumento) Then
        oNotaDebito.DocDate = dtFechaDocumento
        ' End If
        p_decMontoDeuda = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaConfigurada, p_decMontoDeuda, p_strMoneda, 1, dtFechaDocumento)
        '***************************************************

        oNotaDebito.Lines.ItemDescription = My.Resources.Resource.bod_DebitMemo
        oNotaDebito.Lines.UnitPrice = p_decMontoDeuda
        If p_strImpuesto <> "" Then
            oNotaDebito.Lines.TaxCode = p_strImpuesto
            oNotaDebito.Lines.VatGroup = p_strImpuesto
        End If
        oNotaDebito.Lines.AccountCode = p_strCodigoContraCuenta

        intError = oNotaDebito.Add()

        If intError <> 0 Then
            m_oCompany.GetLastError(intError, strMensajeError)
            Throw New ExceptionsSBO(intError, strMensajeError)
        Else

            m_oCompany.GetNewObjectCode(intNumeroNota)

            Dim oLink As SAPbouiCOM.LinkedButton
            oLink = DirectCast(oForm.Items.Item("223").Specific, SAPbouiCOM.LinkedButton)

            oLink.LinkedObjectType = 13

        End If

        Return intNumeroNota

    End Function

    Private Sub HistorialUsuarios(ByVal p_intEstado As Integer, ByRef oForm As SAPbouiCOM.Form)

        Dim strFecha As String = String.Empty

        Dim strDia As String = String.Empty
        Dim strMes As String = String.Empty
        Dim strAño As String = String.Empty

        Try
            'Datos para formar fecha
            strDia = System.DateTime.Today.Day
            strMes = System.DateTime.Today.Month
            strAño = System.DateTime.Today.Year

            If strDia.Length = 1 Then
                strDia = "0" + strDia
            End If
            If strMes.Length = 1 Then
                strMes = "0" + strMes
            End If

            strFecha = strDia
            strFecha += strMes
            strFecha += strAño
            Select Case p_intEstado
                Case m_intEstadoSuperior
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Usu_Fac", 0, m_SBO_Application.Company.UserName)
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Fec_Fac", 0, strFecha)
                    oForm.Items.Item("txtUs_Fac").Specific.string = m_SBO_Application.Company.UserName
                    oForm.Items.Item("txtFec_Fac").Specific.string = strFecha
                Case m_intEstadoInferior
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Usu_Can", 0, m_SBO_Application.Company.UserName)
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Fec_Can", 0, strFecha)
                    oForm.Items.Item("txtUs_Can").Specific.string = m_SBO_Application.Company.UserName
                    oForm.Items.Item("txtFec_Can").Specific.string = strFecha
                Case Else
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Usu_Tra", 0, m_SBO_Application.Company.UserName)
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Fec_Tra", 0, strFecha)
                    oForm.Items.Item("txtUs_Tra").Specific.string = m_SBO_Application.Company.UserName
                    oForm.Items.Item("txtFec_Tra").Specific.string = strFecha
            End Select
        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Private Sub AsignarValoresIniciales()

        Dim strCodigoVendedor As String
        Dim strNombreVendedor As String

        Dim strGastosLocales As String
        Dim decGastosLocales As Decimal
        Dim strIndicadorImpuestoConsignados As String = String.Empty
        Dim strGeneraFacturaConsignado As String = String.Empty

        Try

            strGastosLocales = objConfiguracionGeneral.MontoGastosLocales.ToString(n)
            decGastosLocales = Utilitarios.ConvierteDecimal(strGastosLocales, n)

            'Asignación de los valores
            oForm.Items.Item("txtFecha").Specific.String = "a"
            oForm.Items.Item("txtFecha").Click()

            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Gas_Loc", 0, decGastosLocales.ToString(n))

            If oForm.Items.Item("mtx_1").Visible Then
                Call ManejoControlesOtrosL(oForm.UniqueID)
            End If

            If oForm.Items.Item("mtx_2").Visible Then
                Call ManejoControlesOtrosC(oForm.UniqueID)
            End If

            If oForm.Items.Item("mtx_OtrCos").Visible Then
                Call ManejoControlesOtrosCostos(oForm.UniqueID)
            End If

            strCodigoVendedor = Utilitarios.ObtieneSlpCode(m_SBO_Application)
            If IsNumeric(strCodigoVendedor) Then
                strNombreVendedor = Utilitarios.ObtieneSlpName(strCodigoVendedor, m_SBO_Application)

                AsignaValoresEditTextUIVendedor(strCodigoVendedor, strNombreVendedor, oForm)
                AsignaValoresEditTextUIPropietario(strCodigoVendedor, strNombreVendedor, oForm)
            End If

            strGeneraFacturaConsignado = oDataTableConfiguracionesDMS.GetValue("U_GenFacCns", 0).ToString().Trim()

            If strGeneraFacturaConsignado.ToUpper() = "Y" Then
                strIndicadorImpuestoConsignados = oDataTableConfiguracionesDMS.GetValue("U_IVACmsCns", 0).ToString().Trim()
                If Not String.IsNullOrEmpty(strIndicadorImpuestoConsignados) Then
                    'Por defecto las facturas por comisión llevan el valor IVA
                    oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").SetValue("U_ImpCmsCns", 0, strIndicadorImpuestoConsignados)
                End If

            End If


        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try
    End Sub

    Protected Friend Sub AddMenuItems()

        Dim strEtiquetaMenu As String = String.Empty
        Dim sPath As String = String.Empty

        sPath = System.Windows.Forms.Application.StartupPath
        strEtiquetaMenu = Utilitarios.PermisosMenu("SCGD_CTT", m_SBO_Application.Language)

        GestorMenu.MenusManager.AddMenuEntry(New MenuEntry("SCGD_CTT", SAPbouiCOM.BoMenuType.mt_POPUP, strEtiquetaMenu, 15, False, True, sPath & "\cont.bmp", "43520"))

        If Utilitarios.MostrarMenu("SCGD_CRC", m_SBO_Application.Company.UserName) Then

            strEtiquetaMenu = Utilitarios.PermisosMenu("SCGD_CRC", m_SBO_Application.Language)

            GestorMenu.MenusManager.AddMenuEntry(New MenuEntry("SCGD_CRC", SAPbouiCOM.BoMenuType.mt_STRING, strEtiquetaMenu, 5, False, True, "SCGD_CTT"))

        End If

        If Utilitarios.MostrarMenu("SCGD_CON", m_SBO_Application.Company.UserName) Then

            strEtiquetaMenu = Utilitarios.PermisosMenu("SCGD_CON", m_SBO_Application.Language)

            GestorMenu.MenusManager.AddMenuEntry(New MenuEntry("SCGD_CON", SAPbouiCOM.BoMenuType.mt_STRING, strEtiquetaMenu, 10, False, True, "SCGD_CTT"))

        End If

    End Sub

    Public Sub ManejadorEventoFormDataLoad(ByVal p_oForm As Form, ByRef BubbleEvent As Boolean)
        Try
            Dim strGeneraFacturaConsignado As String = String.Empty
            Dim oitem As SAPbouiCOM.Item
            If oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue(mc_strU_PorDes, 0).ToString().Trim() = "Y" Then
                oForm.Items.Item("txtPorDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("txtNota_Cr").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            ElseIf oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue(mc_strU_PorDes, 0).ToString().Trim() = "N" Or
                oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue(mc_strU_PorDes, 0).ToString().Trim() = String.Empty Then
                oForm.Items.Item("txtPorDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("txtNota_Cr").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            End If

            Dim strMoPreVta As String
            strMoPreVta = oDataTableConfiguracionesDMS.GetValue("U_MoPreVta", 0).ToString().Trim()

            If strMoPreVta = "Y" Then
                oForm.Items.Item("txtPrecioV").SetAutoManagedAttribute(BoAutoManagedAttr.ama_Editable, 11, BoModeVisualBehavior.mvb_True)
            Else
                oForm.Items.Item("txtPrecioV").SetAutoManagedAttribute(BoAutoManagedAttr.ama_Editable, 11, BoModeVisualBehavior.mvb_False)
            End If
            Call ValidaPermisoAprobacion(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CSucu", 0).ToString().Trim(), oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Estado", 0).ToString().Trim())

            oitem = oForm.Items.Item("btnHistApr")
            If (oForm.Mode = BoFormMode.fm_FIND_MODE Or oForm.Mode = BoFormMode.fm_ADD_MODE) Then
                oitem.Visible = False
            Else
                oitem.Visible = True
            End If

            Dim strValor As String = String.Empty
            strValor = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Seg_FPT", 0).Trim()
            If strValor = "2" Then
                oForm.Items.Item("cbFPNFin").Visible = True
            End If

            strValor = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SeFP_PC", 0).Trim()
            If strValor = "2" Then
                oForm.Items.Item("st_Banc").Visible = True
                oForm.Items.Item("txt_Banc").Visible = True
                oForm.Items.Item("stNumChk").Visible = True
                oForm.Items.Item("txtNumChk").Visible = True
            End If

            If Not IsNothing(ListaBonosEliminar) AndAlso ListaBonosEliminar.Count > 0 Then
                ListaBonosEliminar.Clear()
            End If

            strGeneraFacturaConsignado = oDataTableConfiguracionesDMS.GetValue("U_GenFacCns", 0).ToString().Trim()
            If strGeneraFacturaConsignado.ToUpper() = "Y" Then
                HabilitarDeshabilitarCtrlsConsignado(oForm, False)
            End If

            Call ManejoFinanciamientoExterno()
        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    Protected Friend Sub DibujarFormularioContratoVentas(ByVal strCardCode As String, ByVal CierraFormaDespuesAgegarVehiculo As Boolean, Optional ByVal DehabilitaBusqueda As Boolean = False, Optional ByVal SoloLectura As Boolean = False)
        Try
            Dim oitem As SAPbouiCOM.Item
            Dim oedit As SAPbouiCOM.EditText
            Dim oMatriz As SAPbouiCOM.Matrix
            Dim oMatrixPagos As SAPbouiCOM.Matrix
            Dim oCombo As SAPbouiCOM.ComboBox
            Dim oButton As SAPbouiCOM.Button

            Dim fcp As SAPbouiCOM.FormCreationParams
            Dim strGeneraFacturaConsignado As String = String.Empty
            Dim strMoneda As String
            Dim strFechaContrato As String
            Dim strFacturacionMultiple As String
            Dim strUsaFinanc As String
            Dim strPeriodo As String
            Dim strManejoDescuentoFact As String
            Dim strMultiplesFacts As String
            Dim strMonedaDefecto As String
            Dim strConsulta As String
            Dim strMoPreVta As String
            Dim strXMLACargar As String
            Dim strUsaTramitesFacturables As String
            Dim dtFechaContrato As Date

            Utilitarios.ObtenerSeparadoresNumerosSAP(g_strSeparadorMilesSAP, g_strSeparadorDecimalesSAP, m_oCompany.CompanyDB, m_oCompany.Server)

            m_blnDehabilitaBusqueda = DehabilitaBusqueda

            fcp = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_FormCreationParams)
            fcp.BorderStyle = SAPbouiCOM.BoFormBorderStyle.fbs_Sizable
            fcp.UniqueID = FormType
            fcp.FormType = FormType
            fcp.ObjectType = NombreUDO

            strXMLACargar = My.Resources.Resource.ContratoVenta
            fcp.XmlData = CargarDesdeXML(strXMLACargar)

            m_blnCierraForma = CierraFormaDespuesAgegarVehiculo

            oForm = m_SBO_Application.Forms.AddEx(fcp)

            oForm.Freeze(True)
            blnBtnMas = False

            If Not Utilitarios.MostrarMenu("SCGD_BAL", m_SBO_Application.Company.UserName) Then
                oForm.Items.Item("btnBalance").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            Else
                oForm.Items.Item("btnBalance").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            End If

            If Not Utilitarios.MostrarMenu("SCGD_OCV", m_SBO_Application.Company.UserName) Then
                oForm.Items.Item("btnComprar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            Else
                oForm.Items.Item("btnComprar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            End If

            oForm.Items.Item("Folder1").Specific.Select()

            If m_blnDehabilitaBusqueda Then
                Call oForm.EnableMenu("1281", False)
                Call oForm.EnableMenu("1282", False)
                Call oForm.EnableMenu("1291", False)
                Call oForm.EnableMenu("1288", False)
                Call oForm.EnableMenu("1289", False)
                Call oForm.EnableMenu("1290", False)
            End If

            If DMS_Connector.Configuracion.ParamGenAddon.U_UsaVATGroup.Trim().Equals("Y") Then
                'Impuestos de Venta Vehiculo
                DirectCast(oForm.Items.Item("txtImpVeh").Specific, SAPbouiCOM.EditText).ChooseFromListUID = DMS_Connector.Helpers.TipodeImpuesto("CFL_Imp").ToString.Trim

                'Seteo el impuesto a la matriz de Accesorios
                oMatriz = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)
                oMatriz.Columns.Item("col_ImpAcc").ChooseFromListUID = DMS_Connector.Helpers.TipodeImpuesto("CFL_ImpAcc").ToString.Trim
                oMatriz.Columns.Item("col_IC").ChooseFromListUID = DMS_Connector.Helpers.TipodeImpuesto("CFL_IC").ToString.Trim

                'Seteo el impuesto a la matriz de Tramites
                oMatriz = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)
                oMatriz.Columns.Item("col_ImpVta").ChooseFromListUID = DMS_Connector.Helpers.TipodeImpuesto("CFL_IVTra").ToString.Trim
                oMatriz.Columns.Item("col_ImpCom").ChooseFromListUID = DMS_Connector.Helpers.TipodeImpuesto("CFL_ICTra").ToString.Trim
            End If

            oForm.DataSources.DBDataSources.Add("OCRD")
            'unidades para manejo de carga de excel
            oForm.DataSources.DataTables.Add("Consultas")
            dtUnidadesBD = oForm.DataSources.DataTables.Add("UnidadesBD")
            dtImp = oForm.DataSources.DataTables.Add("Impuestos")
            dtAdmin1 = oForm.DataSources.DataTables.Add("Admin1")
            dtTransmision = oForm.DataSources.DataTables.Add("Transmision")
            dtUnidadesExcelSBO = oForm.DataSources.DataTables.Add("UnidadesExcel")
            dtUnidadesExcelSBO.Columns.Add("unidad", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesExcelSBO.Columns.Add("precio", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas = oForm.DataSources.DataTables.Add("UnidadesBDOrdenadas")
            dtUnidadesBDOrdenadas.Columns.Add("U_Cod_Unid", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_Des_Marc", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_Des_Esti", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_Des_Mode", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_Des_Col", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_Num_Mot", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_Num_VIN", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_Ano_Vehi", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_Num_Plac", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_Transmis", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_Precio", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_Tipo", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_Dispo", BoFieldsType.ft_AlphaNumeric, 100)
            dtUnidadesBDOrdenadas.Columns.Add("U_ArtVent", BoFieldsType.ft_AlphaNumeric, 100)
            'datatable de mensajeria
            dtMensajeria = oForm.DataSources.DataTables.Add("dtMen")

            dtMonedas = oForm.DataSources.DataTables.Add("dtMon")

            objConfiguracionGeneral = Nothing
            Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, m_strConectionString)
            If m_cn_Coneccion.State = ConnectionState.Open Then
                m_cn_Coneccion.Close()
            End If
            m_cn_Coneccion.ConnectionString = m_strConectionString
            objConfiguracionGeneral = New SCGDataAccess.ConfiguracionesGeneralesAddon(m_cn_Coneccion)

            Call CargarEstadoslímites()

            If strCardCode <> "" Then
                oedit = oForm.Items.Item(mc_strCliente).Specific
                oedit.String = strCardCode
            End If

            'pinta la sucursal al cv
            CargaSucursalAlContrato()

            oDataTableValidValues = oForm.DataSources.DataTables.Add("ValidValues")
            oDataTablePagosRecibidos = oForm.DataSources.DataTables.Add("PagosRec")

            Call CargarValidValuesDataTable(oForm, "Select Code As Codigo,Name As Nombre From [@SCGD_MARCA] WITH (nolock) Order by Name", mc_strMarcaUS)
            Call CargarValidValuesDataTable(oForm, "Select Code As Codigo,Name As Nombre From [@SCGD_TIPOVEHICULO] WITH (nolock) where U_Usado = 'Y' Order by Name", "cboTipo_Us")
            Call CargarValidValuesDataTable(oForm, "Select Code As Codigo,Name As Nombre From [@SCGD_COLOR] WITH (nolock) Order by Name", mc_strColorUs)
            Call CargarValidValuesDataTable(oForm, "Select GroupNum As Codigo, PymntGroup As Nombre from OCTG WITH (nolock) where OpenRcpt = 'N' Order By PymntGroup", mc_strPeriodoCobro)
            'Carga descripcion de los niveles de aprobacion
            Call CargarValidValuesDataTable(oForm, "SELECT A9.U_Prio as Codigo, A9.U_Estado as Nombre FROM [@SCGD_ADMIN9] AS A9 WITH (nolock) ", mc_strEstado)
            Call CargarValidValuesDataTable(oForm, "Select CurrCode As Codigo, CurrName As Nombre from OCRN WITH (nolock) ", mc_strMoneda)
            Call CargarValidValuesDataTable(oForm, "Select Code As Codigo,Name As Nombre From [@SCGD_COMBUSTIBLE] WITH (nolock) Order by Name", "cboComU")
            Call CargarValidValuesDataTable(oForm, "Select Code As Codigo,Name As Nombre From [@SCGD_TRANSMISION] WITH (nolock) Order by Name", "cboTraU")
            Call CargarValidValuesDataTable(oForm, "Select Code As Codigo,Name As Nombre From [@SCGD_TIPO_CUOTA] WITH (nolock) Order by Code", "cboTipCuEX")
            Call CargarValidValuesDataTable(oForm, "Select Code As Codigo,Name As Nombre From [@SCGD_TIPO_CUOTA] WITH (nolock) Order by Code", "cboTipoCuo")
            Call CargarValidValuesDataTable(oForm, "SELECT CODE As Codigo, [U_DESCRIPCION] As Nombre FROM [@SCGD_TIPO_FINAN] WITH (nolock) ", "cboTipoFin")
            Call CargarValidValuesDataTable(oForm, "SELECT Code as Codigo, U_Desc as Nombre FROM [@SCGD_CLASIFICACION] WITH (nolock) order by Code", "cboClasifU")
            Call CargarValidValuesDataTable(oForm, "SELECT Code as Codigo, Name as Nombre FROM [@SCGD_CATEGORIA_VEHI] WITH (nolock) ", "cboCatUs")
            Call CargarValidValuesDataTable(oForm, "SELECT Code as Codigo, Name as Nombre FROM [@SCGD_TIPOCONTRATO] WITH (nolock) ", "cboTipCo")
            oForm.Items.Item("txtNumCont").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)

            oitem = oForm.Items.Item("mtx_Usado")
            oMatriz = DirectCast(oitem.Specific, SAPbouiCOM.Matrix)
            'oCombo = DirectCast(oMatriz.Columns.Item("col_CatUs").ValidValues, SAPbouiCOM.ComboBox)
            Utilitarios.CargarValidValuesEnCombos(oMatriz.Columns.Item("col_CatUs").ValidValues, "SELECT Code as Codigo, Name as Nombre FROM [@SCGD_CATEGORIA_VEHI] WITH (nolock) ")

            If SoloLectura Then
                Utilitarios.FormularioSoloLectura(oForm, False)
            End If

            oitem = oForm.Items.Item(mc_strFolder1)
            oitem.AffectsFormMode = False
            oitem = oForm.Items.Item(mc_strFolder2)
            oitem.AffectsFormMode = False
            oitem = oForm.Items.Item(mc_strFolder3)
            oitem.AffectsFormMode = False
            oitem = oForm.Items.Item(mc_strFolder4)
            oitem.AffectsFormMode = False
            oitem = oForm.Items.Item(mc_strFolder5)
            oitem.AffectsFormMode = False
            oitem = oForm.Items.Item(mc_strFolder6)
            oitem.AffectsFormMode = False
            oitem = oForm.Items.Item(mc_strFolder7)
            oitem.AffectsFormMode = False
            oitem = oForm.Items.Item(mc_strFolder8)
            oitem.AffectsFormMode = False
            oitem = oForm.Items.Item(mc_strFolder10)
            oitem.AffectsFormMode = False

            oForm.EnableMenu("6915", True)

            oDataTableConfiguracionesDMS = oForm.DataSources.DataTables.Add("ConfigsDMS")

            strConsulta = "Select U_SCGD_ModPrecio, U_Usa_Fin, U_Periodo, U_Desc_Fac, U_Mul_Fac, U_Mon_Def, U_NCSalNeg, U_NivAprob, " & _
                           "U_SCGD_BodAcc, U_GeSalAut, U_SCGD_AccInv, U_Disp_Res, U_Disp_R, U_Disp_V, U_Perm_Fac, U_Niv_Usa, U_Niv_Fin, U_SCGD_EtapaCV, U_Usa_FiEx, U_Inven_V, U_AlmGeTra, U_Pag_Prim, " & _
                           "U_SCGD_VIN, ISNULL(U_SCGD_Pla,'N') AS U_SCGD_Pla, U_ModCDes, U_TCCont, U_MoPreVta, U_CtaFiDe, U_CtaFiHa, U_CtaAsDe, U_CtaAsHa, U_Ramv, U_Pagos_Rec, U_UsaDimC, U_CosteoLocal, U_ValongVIN, U_ConCUCV, " & _
                           "U_SCGD_AnoUs, U_ValCompAE, U_NewDMUCV, U_UsaWHTramites, U_ValLeaSN, U_CodLeaSN, U_UsaTrmFac, U_UsaFExVU, U_UsaDSNRU, U_SeTra, U_UsaFPVU, U_UsaSegPV, U_ValReVen, ISNULL(U_EditKmCV, 'N') U_EditKmCV, U_UsaAxC, U_Serie_U , IsNull(U_ImpUsados,'N') U_ImpUsados, U_CtaCSHa, ISNULL(U_GenAsSeg,'N') U_GenAsSeg, U_CtaComCns, ISNULL(U_GenFacCns,'N') U_GenFacCns, U_IVACmsCns, ISNULL(U_Blqtcc,'N') U_Blqtcc  From [@SCGD_ADMIN] WITH (nolock) where Code = 'DMS'"
            '"U_SCGD_AnoUs, U_ValCompAE, U_NewDMUCV, U_UsaWHTramites, U_ValLeaSN, U_CodLeaSN, U_UsaTrmFac, U_UsaFExVU, U_UsaDSNRU, U_SeTra, U_UsaFPVU, U_UsaSegPV, U_ValReVen, ISNULL(U_EditKmCV, 'N') U_EditKmCV, U_UsaAxC, U_Serie_U , IsNull(U_ImpUsados,'N') U_ImpUsados, U_CtaCSHa, ISNULL(U_GenAsSeg,'N') U_GenAsSeg, U_CtaComCns, ISNULL(U_GenFacCns,'N') U_GenFacCns, U_IVACmsCns, ISNULL(U_Blqtcc,'N') U_Blqtcc, ISNULL(U_GenAsSCPV,'N') U_GenAsSCPV  From [@SCGD_ADMIN] WITH (nolock) where Code = 'DMS'"


            oDataTableConfiguracionesDMS.ExecuteQuery(strConsulta)

            If Not SoloLectura Then
                Call AsignarValoresIniciales()
            End If

            Call obtieneConfAprobaciones()

            'validacion para manejo de columna de descripcion
            Dim strColDes As String = String.Empty
            strColDes = oDataTableConfiguracionesDMS.GetValue("U_ModCDes", 0)

            oMatriz = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)
            oMatriz.Columns.Item("col_0").Editable = False
            If strColDes = "Y" Then
                oMatriz.Columns.Item("col_1").Editable = True
            ElseIf strColDes = "N" Then
                oMatriz.Columns.Item("col_1").Editable = False
            End If

            oMatriz = DirectCast(oForm.Items.Item("mtx_1").Specific, SAPbouiCOM.Matrix)
            oMatriz.Columns.Item("V_3").Editable = False
            oMatriz.Columns.Item("col_1").Editable = False
            oMatriz.Columns.Item("col_2").Editable = True
            oMatriz.Columns.Item("col_3").Editable = True

            oMatriz = DirectCast(oForm.Items.Item("mtx_2").Specific, SAPbouiCOM.Matrix)
            oMatriz.Columns.Item("col_4").Editable = False
            oMatriz.Columns.Item("col_6").Editable = False
            oMatriz.Columns.Item("col_3").Editable = True
            oMatriz.Columns.Item("col_5").Editable = True

            oMatriz = DirectCast(oForm.Items.Item("224").Specific, SAPbouiCOM.Matrix)
            Call CargarMatrizReportes(oForm)

            'Agregado 30/09/2010: Conecta UDF de cotizacion con componente de interfaz
            oitem = oForm.Items.Item("txtCod_Cot")
            oedit = DirectCast(oitem.Specific, SAPbouiCOM.EditText)
            oedit.DataBind.SetBound(True, TablaContrato, "U_SCGD_CodCotiz")

            oitem = oForm.Items.Item("txtNameCot")
            oedit = DirectCast(oitem.Specific, SAPbouiCOM.EditText)
            oedit.DataBind.SetBound(True, TablaContrato, "U_SCGD_NameCotiz")

            oitem = oForm.Items.Item("mtx_0")
            oMatriz = DirectCast(oitem.Specific, SAPbouiCOM.Matrix)
            oMatriz.Columns.Item("col_P").DataBind.SetBound(True, "@SCGD_ACCXCONT", "U_SCGD_AccPrecio")

            m_objBLSBO.Set_Compania(m_oCompany)
            m_strMonedaSistema = m_objBLSBO.RetornarMonedaSistema()
            If oDataTableConfiguracionesDMS.GetValue("U_Blqtcc", 0).ToString().ToUpper = "Y" Then
                m_BloqueaTipoCambio = False
            Else
                m_BloqueaTipoCambio = True
            End If

            strMonedaDefecto = oDataTableConfiguracionesDMS.GetValue("U_Mon_Def", 0)

            If Not String.IsNullOrEmpty(strMonedaDefecto) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Moneda", 0, strMonedaDefecto)
            Else
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Moneda", 0, m_strMonedaSistema)
            End If

            'Agregado 20/10/2010: Conecta udf de tipo de cambio con componente de interfaz, manejo de tipo de cambio cargado en CV
            oitem = oForm.Items.Item("txtTipoCam")
            oedit = DirectCast(oitem.Specific, SAPbouiCOM.EditText)
            oedit.DataBind.SetBound(True, TablaContrato, "U_SCGD_TipoCambio")

            strMoneda = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim
            strFechaContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0).Trim

            If Not String.IsNullOrEmpty(strFechaContrato) Then
                dtFechaContrato = Date.ParseExact(strFechaContrato, "yyyyMMdd", Nothing)
            Else
                dtFechaContrato = Now.Date
            End If

            m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
            Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, m_strConectionString)
            If m_strMonedaLocal <> Trim(strMoneda) Then
                m_decTipoCambio = m_objBLSBO.RetornarTipoCambioMoneda(strMoneda, dtFechaContrato, m_strConectionString, False)
                oitem.Visible = True
                oitem.Enabled = m_BloqueaTipoCambio
            Else
                m_decTipoCambio = 1
                oitem.Visible = False
            End If

            If m_decTipoCambio = -1 Then
                m_SBO_Application.MessageBox(My.Resources.Resource.TipoCambioNoActualizado)
            Else
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_TipoCambio", oForm.DataSources.DBDataSources.Item(TablaContrato).Offset, m_decTipoCambio.ToString(n))
            End If

            strMonedaOrigen = String.Empty
            strTipoCambioMoneda = String.Empty

            'Agregado 04/11/2010: Conecta UDF de salida de mercancia con componente de interfaz
            oitem = oForm.Items.Item("txtSalida")
            oedit = DirectCast(oitem.Specific, SAPbouiCOM.EditText)
            oedit.DataBind.SetBound(True, TablaContrato, "U_SCGD_NoSalida")


            'Agregado 20/12/2010: Formatea precios base para tipo de cambio
            Call FormateaPreciosBase(oForm)

            'Agregado 06/01/2010: dataTable para manejo de numero de cotizacion
            dataTable = oForm.DataSources.DataTables.Add("COT")
            dataTable.Columns.Add(UID:="NumCot", ColFieldType:=BoFieldsType.ft_AlphaNumeric)
            dataTable.Rows.Add(1)

            strFacturacionMultiple = oDataTableConfiguracionesDMS.GetValue("U_SCGD_ModPrecio", 0)

            If strFacturacionMultiple = "N" Then
                oForm.Items.Item("txtPre_Ven").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            ElseIf strFacturacionMultiple = "Y" Then
                oForm.Items.Item("txtPre_Ven").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            End If

            g_blnEventoActualizarAfecta = True

            strUsaFinanc = oDataTableConfiguracionesDMS.GetValue("U_Usa_Fin", 0)

            If strUsaFinanc = "Y" Then
                oForm.Items.Item("ckbFinProp").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            Else
                oForm.Items.Item("ckbFinProp").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            End If

            If String.IsNullOrEmpty(oDataTableConfiguracionesDMS.GetValue("U_Usa_FiEx", 0)) Then
                oDataTableConfiguracionesDMS.SetValue("U_Usa_FiEx", 0, "N")
            End If
            If String.IsNullOrEmpty(oDataTableConfiguracionesDMS.GetValue("U_ValLeaSN", 0)) Then
                oDataTableConfiguracionesDMS.SetValue("U_ValLeaSN", 0, "N")
            End If


            strPeriodo = oDataTableConfiguracionesDMS.GetValue("U_Periodo", 0)

            If Not String.IsNullOrEmpty(strPeriodo) Then
                oitem = oForm.Items.Item(mc_strPeriodoCobro)
                oCombo = DirectCast(oitem.Specific, SAPbouiCOM.ComboBox)
                oCombo.Select(strPeriodo, BoSearchKey.psk_ByValue)
            End If

            oDataTablePagosUni = oForm.DataSources.DataTables.Add("PagosUni")

            oDataTablePagosRealizados = oForm.DataSources.DataTables.Add("Pagos")
            oDataTablePagosRealizados.Columns.Add("doc", BoFieldsType.ft_Integer, 100)
            oDataTablePagosRealizados.Columns.Add("monto", BoFieldsType.ft_Float, 100)
            oDataTablePagosRealizados.Columns.Add("fecha", BoFieldsType.ft_Date, 100)
            oDataTablePagosRealizados.Columns.Add("unidad", BoFieldsType.ft_AlphaNumeric, 100)

            oMatrixPagos = DirectCast(oForm.Items.Item("mtx_Pagos").Specific, SAPbouiCOM.Matrix)
            oMatrixPagos.Columns.Item("col_Doc").DataBind.Bind("Pagos", "doc")
            oMatrixPagos.Columns.Item("col_Mon").DataBind.Bind("Pagos", "monto")
            oMatrixPagos.Columns.Item("col_Fecha").DataBind.Bind("Pagos", "fecha")
            oMatrixPagos.Columns.Item("col_Unidad").DataBind.Bind("Pagos", "unidad")

            strManejoDescuentoFact = oDataTableConfiguracionesDMS.GetValue("U_Desc_Fac", 0)

            If strManejoDescuentoFact = "Y" Then
                oForm.Items.Item("txtPorTemp").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("txtPorDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("txtPoDeAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("txtMonDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oitem = oForm.Items.Item("mtx_0")
                oMatriz = DirectCast(oitem.Specific, SAPbouiCOM.Matrix)
                oMatriz.Columns.Item("col_Desc").Editable = True
            Else
                oForm.Items.Item("txtPorTemp").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("txtPorDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("txtPoDeAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("txtMonDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oitem = oForm.Items.Item("mtx_0")
                oMatriz = DirectCast(oitem.Specific, SAPbouiCOM.Matrix)
                oMatriz.Columns.Item("col_Desc").Editable = False
            End If

            Dim strGeneraFactAcc As String

            strGeneraFactAcc = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GenFaAcc", 0)
            strGeneraFactAcc = strGeneraFactAcc.Trim()

            If strGeneraFactAcc = "Y" Then
                oForm.Items.Item("txtPoDeAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("txtMonDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            Else
                oForm.Items.Item("txtPoDeAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("txtMonDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            End If

            'Agregado 29/05/2012 - Diego Herrera: Carga de imagen de botón de cotización
            oitem = oForm.Items.Item("btpCot")
            oButton = DirectCast(oitem.Specific, SAPbouiCOM.Button)
            oButton.Image = System.Windows.Forms.Application.StartupPath.ToString & "\CFL.bmp"

            'Agregado 31/05/2012 - Diego Herrera: Carga de imagen de botón de facturas
            oitem = oForm.Items.Item("btnFacts")
            oButton = DirectCast(oitem.Specific, SAPbouiCOM.Button)
            oButton.Image = System.Windows.Forms.Application.StartupPath.ToString & "\CFL.bmp"

            strMultiplesFacts = oDataTableConfiguracionesDMS.GetValue("U_Mul_Fac", 0)

            If strMultiplesFacts = "Y" Then
                oForm.Items.Item("txtGLTemp").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnOtrosVh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            ElseIf Not strMultiplesFacts = "Y" Then
                oForm.Items.Item("txtGLTemp").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnOtrosVh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            End If

            'Agregado 07/06/2012 - Diego Herrera: DataTable para carga de gastos de las unidades del Contrato de Ventas
            oDataTableGastosUnidad = oForm.DataSources.DataTables.Add("Gastos")
            oDataTableGastosUnidad.Columns.Add("codItem", BoFieldsType.ft_AlphaNumeric, 100)
            oDataTableGastosUnidad.Columns.Add("desItem", BoFieldsType.ft_AlphaNumeric, 100)
            oDataTableGastosUnidad.Columns.Add("monto", BoFieldsType.ft_Float, 100)
            oDataTableGastosUnidad.Columns.Add("cont", BoFieldsType.ft_AlphaNumeric, 100)
            oDataTableGastosUnidad.Columns.Add("unidad", BoFieldsType.ft_AlphaNumeric, 100)
            oDataTableGastosUnidad.Columns.Add("guarda", BoFieldsType.ft_AlphaNumeric, 100)
            oDataTableGastosUnidad.Columns.Add("depende", BoFieldsType.ft_AlphaNumeric, 100)
            oDataTableGastosUnidad.Columns.Add("moneda", BoFieldsType.ft_AlphaNumeric, 100)

            oDataTableConsultaGastos = oForm.DataSources.DataTables.Add("ConsGast")
            oDataTableConfGastos = oForm.DataSources.DataTables.Add("ConfGast")

            'Agregado 22/06/2012 - Diego Herrera: Data Tables para reversión de múltiples facturas

            oDataTableFacturas = oForm.DataSources.DataTables.Add("Facturas")
            oDataTableValidaFacturas = oForm.DataSources.DataTables.Add("ValFact")

            'Agregado 18/12/2012 - Johnny Vargas: DataTables Trazabilidad de Vehiculos
            dataTableMonedaVehFact = oForm.DataSources.DataTables.Add("MonVehFac")
            dataTableVehRecibido = oForm.DataSources.DataTables.Add("MonVehRec")

            CargarCombos(oForm)
            AgregaLineaMatrizBonos(oForm)

            dtBonosUnidad = oForm.DataSources.DataTables.Add("dtBonos")
            dtAccesoriosUnidad = oForm.DataSources.DataTables.Add("dtAccesorios")

            dtTotalesBonosXUnidad = oForm.DataSources.DataTables.Add("dtTotalesBonos")
            dtTotalesBonosXUnidad.Columns.Add("Unidad", BoFieldsType.ft_AlphaNumeric, 100)
            dtTotalesBonosXUnidad.Columns.Add("Total", BoFieldsType.ft_Float, 100)

            oForm.Items.Item("txtNota_Cr").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue(mc_strU_PorDes, 0, "Y")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_PorDesV", 0, "Y")
            dtBonosNoCobra = oForm.DataSources.DataTables.Add("dtNoCobBon")
            strMoPreVta = oDataTableConfiguracionesDMS.GetValue("U_MoPreVta", 0).ToString().Trim()

            If strMoPreVta = "Y" Then
                oForm.Items.Item("txtPrecioV").SetAutoManagedAttribute(BoAutoManagedAttr.ama_Editable, 11, BoModeVisualBehavior.mvb_True)
            Else
                oForm.Items.Item("txtPrecioV").SetAutoManagedAttribute(BoAutoManagedAttr.ama_Editable, 11, BoModeVisualBehavior.mvb_False)
            End If

            dtCostosUnidad = oForm.DataSources.DataTables.Add("dtCostosUnidades")
            oForm.DataSources.DataTables.Add("dtBodegasCostos")
            dtUnidTotalCos = oForm.DataSources.DataTables.Add("dtUnidTotalCos")
            dtUnidTotalCos.Columns.Add(UID:="Unidad", ColFieldType:=BoFieldsType.ft_AlphaNumeric)
            dtUnidTotalCos.Columns.Add(UID:="OtrosCostos", ColFieldType:=BoFieldsType.ft_AlphaNumeric)
            dtDisponibilidad = oForm.DataSources.DataTables.Add("dtDisponibilidad")
            dtInfoReversion = oForm.DataSources.DataTables.Add("dtInfoReversion")
            dataTableUsadosReversion = oForm.DataSources.DataTables.Add("UsadosReingreso")
            strUsaTramitesFacturables = oDataTableConfiguracionesDMS.GetValue("U_UsaTrmFac", 0).ToString().Trim()

            If strUsaTramitesFacturables = "N" Then
                oitem = oForm.Items.Item("mtx_Tram")
                oMatriz = DirectCast(oitem.Specific, SAPbouiCOM.Matrix)
                oMatriz.Columns.Item("col_ImpVta").Visible = False
                oMatriz.Columns.Item("col_TFact").Visible = False
            End If

            ValidarDataTable(oForm)
            'oDataTableDimensionesContablesDMS = oForm.DataSources.DataTables.Add(mc_strDataTableDimensiones)
            oForm.Items.Item("btnAprobar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            oForm.Items.Item("btnRechaza").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            oForm.Items.Item("btnFactura").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            oForm.Items.Item("btnReversa").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)

            strUsaFacturaProveedorVehiculoUsado = oDataTableConfiguracionesDMS.GetValue("U_UsaFPVU", 0)

            If Not String.IsNullOrEmpty(strUsaFacturaProveedorVehiculoUsado) Then
                If strUsaFacturaProveedorVehiculoUsado = "Y" Then
                    blnUsaFacturaProveedoresVehiculoUsado = True
                Else
                    blnUsaFacturaProveedoresVehiculoUsado = False
                End If
            End If
            Call ManejoFinanciamientoExterno()

            SeguroPV = False
            strUsaSegurosPostVenta = oDataTableConfiguracionesDMS.GetValue("U_UsaSegPV", 0)
            If (strUsaSegurosPostVenta <> "Y") Then
                oForm.Items.Item(mc_strFolder10).Visible = False
                oForm.Items.Item(mc_strFolder7).Width = 120
            Else
                oitem = oForm.Items.Item(mc_strFolder10)
                oitem.Visible = True
                Dim width As Integer
                width = oitem.Width
                oitem.Left = 302

                oitem = oForm.Items.Item(mc_strFolder5)
                oitem.Left = oitem.Left + width
                oitem = oForm.Items.Item(mc_strFolder6)
                oitem.Left = oitem.Left + width
                oitem = oForm.Items.Item(mc_strFolder7)
                oitem.Left = oitem.Left + width
                oitem = oForm.Items.Item(mc_strFolder8)
                oitem.Left = oitem.Left + width
                oitem = oForm.Items.Item(mc_strFolder8)
                oitem.Left = oitem.Left + width
            End If

            If Utilitarios.ValidaExisteDataTable(oForm, "dtConsulta") Then
                dtConsulta = oForm.DataSources.DataTables.Item("dtConsulta")
            Else
                dtConsulta = oForm.DataSources.DataTables.Add("dtConsulta")
            End If

            If oDataTableConfiguracionesDMS.Rows.Count > 0 Then
                EnableKmUni = oDataTableConfiguracionesDMS.GetValue("U_EditKmCV", 0).ToString().Trim() = "Y"
            End If

            If (oDataTableConfiguracionesDMS.GetValue("U_ImpUsados", 0).ToString().Trim() = "N" Or (String.IsNullOrEmpty(oDataTableConfiguracionesDMS.GetValue("U_ImpUsados", 0).ToString().Trim()))) Then
                oForm.Items.Item("lblImp_Usa").Visible = False
                oForm.Items.Item("lbltcImpu").Visible = False
                oForm.Items.Item("txtValImp").Visible = False
                oForm.Items.Item("txtValorTI").Visible = False
            Else
                oForm.Items.Item("lblImp_Usa").Visible = True
                oForm.Items.Item("lbltcImpu").Visible = True
                oForm.Items.Item("txtValImp").Visible = True
                oForm.Items.Item("txtValorTI").Visible = True
            End If

            strGeneraFacturaConsignado = oDataTableConfiguracionesDMS.GetValue("U_GenFacCns", 0).ToString().Trim()
            If strGeneraFacturaConsignado.ToUpper() <> "Y" Then
                oForm.Items.Item("Folder11").Visible = False
            End If

            oForm.Items.Item(mc_strFolder1).Click()
            oForm.Freeze(False)
            blnDibuja = True

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
            'm_SBO_Application.StatusBar.SetText(ex.Message, SAPbouiCOM.BoMessageTime.bmt_Medium, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
        End Try
    End Sub

    Private Sub ValidaPermisoAprobacion(ByVal p_strSucursal As String, p_strEstado As String)
        Dim blnPermiso As Boolean = False
        If String.IsNullOrEmpty(p_strEstado) Then
            p_strEstado = 1
        End If
        For index As Integer = 0 To oDataTablePermisosAprobaciones.Rows.Count - 1
            If oDataTablePermisosAprobaciones.GetValue("Sucu", index) = p_strSucursal And
                oDataTablePermisosAprobaciones.GetValue("NivA", index) = p_strEstado Then
                blnPermiso = True
                Exit For
            End If
        Next
        If blnPermiso Then
            oForm.Items.Item("btnAprobar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            oForm.Items.Item("btnRechaza").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
        Else
            oForm.Items.Item("btnAprobar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            oForm.Items.Item("btnRechaza").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
        End If
        Select Case p_strEstado
            Case oDataTableEstadosLimites.GetValue("Inferior", 0).ToString, oDataTableEstadosLimites.GetValue("Superior", 0).ToString
                oForm.Items.Item("btnAprobar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnRechaza").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            Case oDataTableEstadosLimites.GetValue("PreFact", 0).ToString
                oForm.Items.Item("btnAprobar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
        End Select
        If oForm.Mode = SAPbouiCOM.BoFormMode.fm_ADD_MODE Then
            oForm.Items.Item("btnAprobar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            oForm.Items.Item("btnRechaza").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
        End If

    End Sub


    Private Sub obtieneConfAprobaciones()
        oDataTablePermisosAprobaciones = oForm.DataSources.DataTables.Add(mc_strPermisosAprobaciones)

        Dim strConsulta As String = String.Format(" SELECT U_CSucu AS Sucu, adm.U_Prio AS NivA " &
                                                " FROM [@SCGD_MSJS1] AS Msj WITH (NoLock) " &
                                                " INNER JOIN [@SCGD_ADMIN9] AS Adm WITH (NoLock) " &
                                                " ON Msj.U_CNAp = Adm.U_Codigo " &
                                                " WHERE U_Usua = '{0}' and U_ManejaApro = 'Y' ", m_SBO_Application.Company.UserName)

        oDataTablePermisosAprobaciones.ExecuteQuery(strConsulta)
    End Sub

    Public Sub ValidaTipoCambio(ByRef BubbleEvent As Boolean)
        Try

            Dim strFecha As String
            Dim dtFecha As DateTime
            Dim dtSistema As System.Data.DataTable
            Dim strTipoCamb As String
            Dim strLocal As String
            Dim strSistema As String
            Dim strSQLMonedaSis As String = "select MainCurncy, SysCurrncy  from OADM WITH (nolock) "
            Dim strSQLTipoC As String = "select  AD.SysCurrncy, TT.Rate from OADM AD WITH (nolock) inner JOIN ORTT TT WITH (nolock) ON TT.Currency = AD.SysCurrncy"
            strSQLTipoC &= " where TT.RateDate = '{0}'"

            dtFecha = Today.Date

            dtSistema = Utilitarios.EjecutarConsultaDataTable(strSQLMonedaSis, m_oCompany.CompanyDB, m_oCompany.Server)

            strFecha = Utilitarios.RetornaFechaFormatoDB(dtFecha, m_oCompany.Server)
            strSQLTipoC = String.Format(strSQLTipoC, strFecha)

            strTipoCamb = Utilitarios.EjecutarConsulta(strSQLTipoC, m_oCompany.CompanyDB, m_oCompany.Server)


            strLocal = dtSistema.Rows(0).Item("MainCurncy").ToString
            strSistema = dtSistema.Rows(0).Item("SysCurrncy").ToString

            If Not strLocal.Equals(strSistema) Then

                If String.IsNullOrEmpty(strTipoCamb) Then
                    m_SBO_Application.MessageBox(My.Resources.Resource.TipoCambioNoActualizado, BoMessageTime.bmt_Short, My.Resources.Resource.btnOk)
                    BubbleEvent = False

                End If

            End If

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub


    Public Sub CargarCombos(ByRef p_oForm As SAPbouiCOM.Form)
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim oCombo As SAPbouiCOM.ComboBox

        Try

            oMatrix = DirectCast(p_oForm.Items.Item(g_str_mtxBonos).Specific, SAPbouiCOM.Matrix)

            Call Utilitarios.CargarValidValuesEnCombos(oMatrix.Columns.Item(g_str_ColBono).ValidValues,
                                                       "Select Code,Name From [@SCGD_TIPOBONO] Order by Code")
            oMatrix = DirectCast(p_oForm.Items.Item(g_str_mtxOtrosCostos).Specific, SAPbouiCOM.Matrix)

            Call Utilitarios.CargarValidValuesEnCombos(oMatrix.Columns.Item(g_str_ColCodCos).ValidValues,
                                                       "Select Code,Name From [@SCGD_OTROSCOSTOS] Order by Code ")

            oCombo = DirectCast(oForm.Items.Item("cboComAse").Specific, SAPbouiCOM.ComboBox)
            Call Utilitarios.CargarValidValuesEnCombos(oCombo.ValidValues, " Select CardCode, CardName From [OCRD] where U_SCGD_CoSeg = 'Y' ", True)

            oCombo = DirectCast(oForm.Items.Item("cboCorrSe").Specific, SAPbouiCOM.ComboBox)
            Call Utilitarios.CargarValidValuesEnCombos(oCombo.ValidValues, "Select Code,Name From [@SCGD_CORREDSEGURO] Order by Code ", True)

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub


    Private Sub AgregaLineaMatrizBonos(ByRef p_oForm As Form)

        Dim m_intPosicion As Integer = 0
        Dim m_strBono As String = String.Empty
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim FormTemp As SAPbouiCOM.Form

        Try
            FormTemp = m_SBO_Application.Forms.ActiveForm

            If FormTemp.UniqueID <> "SCGD_frmContVent" Then Exit Sub

            oMatrix = DirectCast(p_oForm.Items.Item(g_str_mtxBonos).Specific, SAPbouiCOM.Matrix)
            oMatrix.FlushToDataSource()

            m_intPosicion = p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).Size

            If m_intPosicion = 1 Then
                m_strBono = p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).GetValue(g_strUBono, 0)
                m_strBono = m_strBono.Trim()
                If String.IsNullOrEmpty(m_strBono) Then
                    m_intPosicion = 0
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUUnidad, m_intPosicion, String.Empty)
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUBono, m_intPosicion, String.Empty)
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUMonto, m_intPosicion, 0)
                Else
                    m_intPosicion = 1
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).InsertRecord(m_intPosicion)
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUUnidad, m_intPosicion, String.Empty)
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUBono, m_intPosicion, String.Empty)
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUMonto, m_intPosicion, 0)
                End If
            Else
                m_strBono = p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).GetValue(g_strUBono, m_intPosicion - 1)
                m_strBono = m_strBono.Trim()
                If Not String.IsNullOrEmpty(m_strBono) Then
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).InsertRecord(m_intPosicion)

                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUUnidad, m_intPosicion, String.Empty)
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUBono, m_intPosicion, String.Empty)
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUMonto, m_intPosicion, 0)
                End If
            End If

            oMatrix.LoadFromDataSource()

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Private Sub EliminaLineasBlancoMatrix(ByVal p_Matriz As String, ByVal p_DataSource As String,
                                         ByVal p_UDF As String, ByVal p_UDFMonto As String, ByRef p_oForm As Form)

        Dim m_intTamano As Integer = 0
        Dim m_strValue As String = String.Empty
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim m_intMontoTotal As Decimal = 0
        Dim m_intMonto As Decimal = 0
        Dim m_strMonto As String = String.Empty

        Try
            oMatrix = DirectCast(p_oForm.Items.Item(p_Matriz).Specific, SAPbouiCOM.Matrix)
            oMatrix.FlushToDataSource()

            m_intTamano = p_oForm.DataSources.DBDataSources.Item(p_DataSource).Size

            For i As Integer = m_intTamano - 1 To 0 Step -1
                m_strMonto = p_oForm.DataSources.DBDataSources.Item(p_DataSource).GetValue(p_UDFMonto, i)

                If Not String.IsNullOrEmpty(m_strMonto) Then
                    m_intMonto = Decimal.Parse(m_strMonto, n)
                    m_intMontoTotal = m_intMontoTotal + m_intMonto

                    m_strValue = p_oForm.DataSources.DBDataSources.Item(p_DataSource).GetValue(p_UDF, i).Trim()
                    m_strValue = m_strValue.Trim()

                    If String.IsNullOrEmpty(m_strValue) Then
                        p_oForm.DataSources.DBDataSources.Item(p_DataSource).RemoveRecord(i)
                    End If
                End If
            Next

            oMatrix.LoadFromDataSource()

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Private Sub EliminarLíneasMatrizBonos(ByVal p_strFormID As String)
        Dim oform As SAPbouiCOM.Form
        Dim oMatriz As SAPbouiCOM.Matrix
        Dim oMatrizVeh As SAPbouiCOM.Matrix
        Dim intRegistoEliminar As Integer
        Dim blnLineasEliminadas As Boolean = False
        Dim strCodVehi As String
        Dim bonVehi As BonosVehiculo
        Dim strCodUnidad As String
        Dim totalBonos As Double

        oform = m_SBO_Application.Forms.Item(p_strFormID)
        oMatriz = DirectCast(oform.Items.Item(g_str_mtxBonos).Specific, SAPbouiCOM.Matrix)
        oMatrizVeh = DirectCast(oform.Items.Item(g_str_mtxVehi).Specific, SAPbouiCOM.Matrix)
        intRegistoEliminar = oMatriz.GetNextSelectedRow()
        Do While intRegistoEliminar > -1
            bonVehi = New BonosVehiculo()
            strCodUnidad = oform.DataSources.DBDataSources.Item(g_str_BONOXCONT).GetValue("U_Unidad", intRegistoEliminar - 1).Trim()

            strCodVehi = DMS_Connector.Helpers.EjecutarConsulta(String.Format(DMS_Connector.Queries.GetStrSpecificQuery("strCodeVehCodUnid"), strCodUnidad))

            bonVehi.strCodigoVehiculo = strCodVehi
            bonVehi.strCodigoBono = oform.DataSources.DBDataSources.Item(g_str_BONOXCONT).GetValue("U_Bono", intRegistoEliminar - 1).Trim()
            bonVehi.dblMonto = Double.Parse(oform.DataSources.DBDataSources.Item(g_str_BONOXCONT).GetValue("U_Monto", intRegistoEliminar - 1).Trim(), n)

            If IsNothing(ListaBonosEliminar) Then
                ListaBonosEliminar = New List(Of BonosVehiculo)()
            End If
            ListaBonosEliminar.Add(bonVehi)

            oform.DataSources.DBDataSources.Item(g_str_BONOXCONT).RemoveRecord(intRegistoEliminar - 1)

            For i As Integer = 0 To oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size - 1
                If oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).ToString.Trim() = strCodUnidad Then
                    totalBonos = Double.Parse(oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Bono", i).Trim(), n)
                    totalBonos = totalBonos - bonVehi.dblMonto
                    oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Bono", i, totalBonos.ToString(n))
                    Exit For
                End If
            Next

            blnLineasEliminadas = True
            intRegistoEliminar = oMatriz.GetNextSelectedRow(intRegistoEliminar)

        Loop
        If blnLineasEliminadas Then
            oMatriz.LoadFromDataSource()
            oMatrizVeh.LoadFromDataSource()
            oform.Mode = SAPbouiCOM.BoFormMode.fm_UPDATE_MODE
        End If

    End Sub

    ''' <summary>
    ''' 
    ''' </summary>
    ''' <param name="p_oForm"></param>
    ''' <param name="p_dbTipoCambioSistema"></param>
    ''' <param name="p_dtFecha"></param>
    ''' <param name="p_oVehiculo"></param>
    ''' <remarks></remarks>
    Private Sub EliminaBonosUnidad(ByVal p_strVehCode As String, ByVal p_strBonoCode As String, ByVal p_dblMonto As Double, ByRef BubbleEvent As Boolean)
        Dim oCompanyService As SAPbobsCOM.CompanyService
        Dim oChildBonoVeh As SAPbobsCOM.GeneralData
        Dim oGeneralParams As SAPbobsCOM.GeneralDataParams
        Dim oGeneralServiceVeh As SAPbobsCOM.GeneralService
        Dim oVehiculo As SAPbobsCOM.GeneralData
        Dim oChildrenBonosVeh As SAPbobsCOM.GeneralDataCollection
        Dim dblSumatoriaBonos As Double = 0

        Try
            oCompanyService = m_oCompany.GetCompanyService()
            oGeneralServiceVeh = oCompanyService.GetGeneralService("SCGD_VEH")
            oGeneralParams = oGeneralServiceVeh.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
            oGeneralParams.SetProperty("Code", p_strVehCode)
            oVehiculo = oGeneralServiceVeh.GetByParams(oGeneralParams)
            oChildrenBonosVeh = oVehiculo.Child("SCGD_BONOXVEH")

            For i As Integer = 0 To oChildrenBonosVeh.Count - 1
                oChildBonoVeh = oChildrenBonosVeh.Item(i)
                If oChildBonoVeh.GetProperty("U_Bono") = p_strBonoCode AndAlso p_dblMonto = CDbl(oChildBonoVeh.GetProperty("U_Monto")) Then
                    oChildrenBonosVeh.Remove(i)
                    Exit For
                End If
            Next

            For i As Integer = 0 To oChildrenBonosVeh.Count - 1
                oChildBonoVeh = oChildrenBonosVeh.Item(i)
                dblSumatoriaBonos += CDbl(oChildBonoVeh.GetProperty("U_Monto"))
            Next

            oVehiculo.SetProperty("U_Bono", dblSumatoriaBonos)

            oGeneralServiceVeh.Update(oVehiculo)
        Catch ex As Exception
            BubbleEvent = False
            m_SBO_Application.SetStatusBarMessage(ex.Message)
        End Try
    End Sub


    Public Sub AsignaValoresDeCliente(ByVal CardCode As String)
        Dim oEdit As SAPbouiCOM.EditText

        Try
            oEdit = oForm.Items.Item(mc_strCliente).Specific

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    <System.CLSCompliant(False)> _
    Protected Friend Sub DesabilitarCombos(ByRef oForm As SAPbouiCOM.Form, _
                                           ByVal strIDItem As String)
        Dim cboCombo As SAPbouiCOM.ComboBox
        Dim oItem As SAPbouiCOM.Item

        Try
            oItem = oForm.Items.Item(strIDItem)
            oItem.Enabled = False
            cboCombo = CType(oItem.Specific, SAPbouiCOM.ComboBox)

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
            Throw ex
        End Try

    End Sub

    <System.CLSCompliant(False)> _
    Protected Friend Sub HabilitarCombos(ByRef oForm As SAPbouiCOM.Form, _
                                          ByVal strIDItem As String)
        Dim cboCombo As SAPbouiCOM.ComboBox
        Dim oItem As SAPbouiCOM.Item

        Try
            oItem = oForm.Items.Item(strIDItem)
            oItem.Enabled = True
            cboCombo = CType(oItem.Specific, SAPbouiCOM.ComboBox)
        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
            Throw ex
        End Try

    End Sub

    Private Sub CargarValidValuesDataTable(ByVal oForm As SAPbouiCOM.Form, ByVal strConsulta As String, ByVal strIDItem As String)

        Dim cboCombo As SAPbouiCOM.ComboBox
        Dim oItem As SAPbouiCOM.Item
        Dim strCodigo As String
        Dim strNombre As String

        Try

            oItem = oForm.Items.Item(strIDItem)
            cboCombo = CType(oItem.Specific, SAPbouiCOM.ComboBox)

            'Borra los ValidValues

            If cboCombo.ValidValues.Count > 0 Then
                For intRecIndex As Integer = 0 To cboCombo.ValidValues.Count - 1
                    cboCombo.ValidValues.Remove(cboCombo.ValidValues.Item(0).Value, SAPbouiCOM.BoSearchKey.psk_ByValue)
                Next
            End If

            'Agrega los ValidValues

            oDataTableValidValues.Rows.Clear()
            oDataTableValidValues = oForm.DataSources.DataTables.Item("ValidValues")

            oDataTableValidValues.ExecuteQuery(strConsulta)

            For i As Integer = 0 To oDataTableValidValues.Rows.Count - 1

                strCodigo = oDataTableValidValues.GetValue("Codigo", i)
                strNombre = oDataTableValidValues.GetValue("Nombre", i)

                If Not String.IsNullOrEmpty(strCodigo) AndAlso Not String.IsNullOrEmpty(strNombre) AndAlso Not strNombre = "0" Then

                    cboCombo.ValidValues.Add(strCodigo, strNombre)

                End If

            Next

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
            Throw ex

        End Try

    End Sub

    <System.CLSCompliant(False)> _
    Protected Friend Sub CargarValidValuesEnCombos(ByRef oForm As SAPbouiCOM.Form, _
                                                            ByVal strQuery As String, _
                                                            ByRef strIDItem As String)

        Dim intRecIndex As Integer
        Dim cboCombo As SAPbouiCOM.ComboBox
        Dim oItem As SAPbouiCOM.Item

        Dim drdResultadoConsulta As SqlClient.SqlDataReader
        Dim cmdEjecutarConsulta As New SqlClient.SqlCommand
        Dim strConectionString As String
        Dim cn_Coneccion As New SqlClient.SqlConnection
        Try
            oItem = oForm.Items.Item(strIDItem)
            cboCombo = CType(oItem.Specific, SAPbouiCOM.ComboBox)

            Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, strConectionString)
            cn_Coneccion.ConnectionString = strConectionString

            cn_Coneccion.Open()
            cmdEjecutarConsulta.Connection = cn_Coneccion
            cmdEjecutarConsulta.CommandType = CommandType.Text
            cmdEjecutarConsulta.CommandText = strQuery
            drdResultadoConsulta = cmdEjecutarConsulta.ExecuteReader()

            'Borra los ValidValues
            If cboCombo.ValidValues.Count > 0 Then
                For intRecIndex = 0 To cboCombo.ValidValues.Count - 1
                    cboCombo.ValidValues.Remove(cboCombo.ValidValues.Item(0).Value, SAPbouiCOM.BoSearchKey.psk_ByValue)
                Next
            End If

            ''Agrega los ValidValues
            Do While drdResultadoConsulta.Read
                If Not drdResultadoConsulta.IsDBNull(0) AndAlso Not drdResultadoConsulta.IsDBNull(1) Then

                    cboCombo.ValidValues.Add(drdResultadoConsulta.Item(0).ToString.Trim, drdResultadoConsulta.Item(1).ToString.Trim)
                End If
            Loop

            drdResultadoConsulta.Close()
            cn_Coneccion.Close()

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
            Throw ex
        End Try

    End Sub

    <System.CLSCompliant(False)> _
    Protected Friend Sub VincularChooseFromList(ByRef pval As SAPbouiCOM.ItemEvent, _
                                                ByRef oTmpForm As SAPbouiCOM.Form, _
                                                ByRef FormUID As String)

        Try
            Dim oCFLEvento As SAPbouiCOM.IChooseFromListEvent
            oCFLEvento = CType(pval, SAPbouiCOM.IChooseFromListEvent)

            Dim sCFL_ID As String
            sCFL_ID = oCFLEvento.ChooseFromListUID

            Dim oCFL As SAPbouiCOM.ChooseFromList
            oCFL = oTmpForm.ChooseFromLists.Item(sCFL_ID)

            If Not oTmpForm Is Nothing Then
                If pval.ItemUID = mc_strCliente Then

                    If Not oCFLEvento.SelectedObjects Is Nothing Then

                        Dim oDataTable As SAPbouiCOM.DataTable
                        oDataTable = oCFLEvento.SelectedObjects
                        Dim val As String

                        If oDataTable.Rows.Count = 0 Then Exit Sub

                        val = CStr(oDataTable.GetValue("CardCode", 0))
                        oTmpForm.DataSources.UserDataSources.Item(mc_strNumBP).ValueEx = val
                        val = CStr(oDataTable.GetValue("CardName", 0))
                        oTmpForm.DataSources.UserDataSources.Item(mc_strNombreBP).ValueEx = val
                    End If

                End If
            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    Private Function CargarDesdeXML(ByRef strFileName As String) As String

        Dim oXMLDoc As Xml.XmlDataDocument
        Dim strPath As String

        strPath = System.Windows.Forms.Application.StartupPath & "\" & strFileName
        oXMLDoc = New Xml.XmlDataDocument

        If Not oXMLDoc Is Nothing Then
            oXMLDoc.Load(strPath)
        End If

        Return oXMLDoc.InnerXml

    End Function

    <System.CLSCompliant(False)> _
    Public Sub AsignaValoresVehiculo(ByRef udtVehiculo As CVentaUDT, _
                                          ByRef oDataTable As SAPbouiCOM.DataTable)

        Try
            udtVehiculo = New CVentaUDT

            With udtVehiculo
                .NumCliente = oDataTable.GetValue(mc_CardCode, 0)
                .DetCliente = oDataTable.GetValue(mc_CardName, 0)
            End With

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
            'm_SBO_Application.StatusBar.SetText(ex.Message, SAPbouiCOM.BoMessageTime.bmt_Medium, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
        End Try

    End Sub

    <System.CLSCompliant(False)> _
    Public Sub AsignaValoresEditTextUICliente(ByRef udtVehiculo As CVentaUDT, _
                                       ByRef oForm As SAPbouiCOM.Form, ByVal p_blnPrincipal As Boolean)

        Try
            If p_blnPrincipal Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CardCode", 0, udtVehiculo.NumCliente)
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CardName", 0, udtVehiculo.DetCliente)
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CCl_Veh", 0, udtVehiculo.NumCliente)
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_NCl_Veh", 0, udtVehiculo.DetCliente)
            Else
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CCl_Veh", 0, udtVehiculo.NumCliente)
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_NCl_Veh", 0, udtVehiculo.DetCliente)
            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    <System.CLSCompliant(False)> _
    Public Sub AsignaValoresEditTextUIVendedor(ByVal p_strCodeVendedor As String, _
                                               ByVal p_strNameVendedor As String, _
                                       ByRef oForm As SAPbouiCOM.Form)

        Try
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_FooVend", 0, p_strCodeVendedor)
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SlpCode", 0, p_strCodeVendedor)
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SlpName", 0, p_strNameVendedor)
        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    <System.CLSCompliant(False)> _
    Public Sub AsignaValoresEditTextUIPropietario(ByVal p_strCodeVendedor As String, _
                                           ByVal p_strNameVendedor As String, _
                                   ByRef oForm As SAPbouiCOM.Form)

        Try
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Foo", 0, p_strCodeVendedor)
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_OwrCode", 0, p_strCodeVendedor)
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_OwrName", 0, p_strNameVendedor)

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    <System.CLSCompliant(False)> _
    Public Sub AsignaValoresEditTextUIVehiculoNuevo(ByVal oDataTable As SAPbouiCOM.DataTable, _
                                                    ByRef oForm As SAPbouiCOM.Form)

        Dim strTransmision As String
        Dim strValorSeleccionado As String
        Dim decPrecioSeleccionado As Decimal = 0

        Dim decPrecio As Decimal
        Dim strFechaContrato As String
        Dim blFecha As Boolean = True
        Dim strCliente As String

        Dim decBonoFormateado As Decimal = 0
        Dim decBonoSinFormatear As Decimal

        Dim strTipoVehiculo As String

        Dim dtImpuesto As SAPbouiCOM.DataTable
        Dim strDependeDataTable As String
        Dim strGuardaDataTable As String

        Dim strImpuesto As String = String.Empty
        Dim strItemCodeVeh As String = String.Empty

        Dim n As NumberFormatInfo

        Try

            strCliente = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0).Trim

            Call LimpiarVehiculoTemporal(oForm)

            If Not String.IsNullOrEmpty(strCliente) Then

                Dim objGlobal As DMSOneFramework.BLSBO.GlobalFunctionsSBO
                Dim strMonedaVehiculo As String
                Dim strMonedaCV As String
                Dim strMonedaLocal As String
                Dim strMonedaSistema As String
                Dim strTipoCambioSistema As String
                Dim strTipoCambioCV As String
                Dim strFechaCV As String
                Dim strFecha As String
                Dim dcPrecio As Decimal
                Dim strCodUnidad As String = String.Empty
                Dim strCodeArtVenta As String = String.Empty

                objGlobal = New DMSOneFramework.BLSBO.GlobalFunctionsSBO

                n = DIHelper.GetNumberFormatInfo(m_oCompany)

                strValorSeleccionado = oDataTable.Columns.Item("U_Des_Marc").Cells.Item(0).Value
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Marc", 0, strValorSeleccionado)
                strValorSeleccionado = oDataTable.Columns.Item("U_Des_Esti").Cells.Item(0).Value
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Esti", 0, strValorSeleccionado)
                strValorSeleccionado = oDataTable.Columns.Item("U_Des_Mode").Cells.Item(0).Value
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Mode", 0, strValorSeleccionado)
                strValorSeleccionado = oDataTable.Columns.Item("U_Num_Mot").Cells.Item(0).Value
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Num_Mot", 0, strValorSeleccionado)
                strValorSeleccionado = oDataTable.Columns.Item("U_Num_VIN").Cells.Item(0).Value
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Num_VIN", 0, strValorSeleccionado)
                strValorSeleccionado = oDataTable.Columns.Item("U_Ano_Vehi").Cells.Item(0).Value
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Ano_Vehi", 0, strValorSeleccionado)
                strValorSeleccionado = oDataTable.Columns.Item("U_Num_Plac").Cells.Item(0).Value
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Num_Plac", 0, strValorSeleccionado)
                strValorSeleccionado = oDataTable.Columns.Item("U_Precio").Cells.Item(0).Value
                If Not String.IsNullOrEmpty(strValorSeleccionado) Then
                    decPrecioSeleccionado = Decimal.Parse(strValorSeleccionado)
                Else
                    decPrecioSeleccionado = 0
                End If
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_PreNet", 0, decPrecioSeleccionado.ToString(n))
                strValorSeleccionado = oDataTable.Columns.Item("U_Tipo").Cells.Item(0).Value
                strTipoVehiculo = strValorSeleccionado
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TipIn", 0, strValorSeleccionado)
                strValorSeleccionado = oDataTable.Columns.Item("U_Des_Col_Tap").Cells.Item(0).Value
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ColIn", 0, strValorSeleccionado)
                strValorSeleccionado = oDataTable.Columns.Item("U_Accesori").Cells.Item(0).Value
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Obser", 0, strValorSeleccionado)

                strValorSeleccionado = oDataTable.Columns.Item("U_Des_Col").Cells.Item(0).Value
                If strValorSeleccionado <> "" AndAlso strValorSeleccionado <> "DetenerSBO" Then
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Col", 0, strValorSeleccionado)
                End If

                strFechaCV = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)

                strMonedaVehiculo = oDataTable.Columns.Item("U_Moneda").Cells.Item(0).Value
                strFecha = Utilitarios.RetornaFechaFormatoRegional(strFechaCV)
                strMonedaCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim()
                strMonedaLocal = objGlobal.RetornarMonedaLocal
                strMonedaSistema = objGlobal.RetornarMonedaSistema

                If strMonedaVehiculo <> strMonedaSistema And strMonedaVehiculo <> strMonedaLocal Then
                    strTipoCambioCV = objGlobal.RetornarTipoCambioMonedaRS(strMonedaVehiculo, Date.Parse(strFecha))
                Else
                    strTipoCambioCV = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_SCGD_TipoCambio", 0)
                End If

                strTipoCambioSistema = objGlobal.RetornarTipoCambioMonedaRS(strMonedaSistema, Date.Parse(strFecha))

                strTipoCambioCV = strTipoCambioCV.Trim()

                dcPrecio = oDataTable.Columns.Item("U_Precio").Cells.Item(0).Value

                'Dim strPrecioxTipoMoneda As Decimal = Utilitarios.RetornaPrecioXTipoMoneda(dcPrecio, strMonedaVehiculo, strMonedaSistema, strMonedaLocal, strMonedaCV, strTipoCambioSistema, strTipoCambioCV, Date.Parse(strFecha), n)
                Dim strPrecioxTipoMoneda As Decimal = Utilitarios.ManejoMultimoneda(dcPrecio, strMonedaLocal, strMonedaSistema, strMonedaVehiculo, strMonedaCV, strTipoCambioCV, Date.Parse(strFecha), n, m_oCompany)

                If strPrecioxTipoMoneda < 0 Then
                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.TipoCambioNoActualizado, BoMessageTime.bmt_Short, BoStatusBarMessageType.smt_Error)
                    decPrecio = 0
                ElseIf strPrecioxTipoMoneda >= 0 Then
                    decPrecio = Decimal.Parse(strPrecioxTipoMoneda)
                End If

                strFechaContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0).Trim
                If String.IsNullOrEmpty(strFechaContrato) Then
                    m_SBO_Application.MessageBox(My.Resources.Resource.MensajeFecha)
                    blFecha = False
                End If

                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Vh", 0, decPrecio.ToString(n))

                Dim strPrecioNetoxTipoMoneda As Decimal = Utilitarios.ManejoMultimoneda(dcPrecio, strMonedaLocal, strMonedaSistema, strMonedaVehiculo, strMonedaCV, strTipoCambioCV, Date.Parse(strFecha), n, m_oCompany)
                Dim decPrecioNeto As Decimal

                If strPrecioNetoxTipoMoneda < 0 Then
                    decPrecioNeto = 0
                ElseIf strPrecioNetoxTipoMoneda >= 0 Then
                    decPrecioNeto = strPrecioNetoxTipoMoneda
                End If

                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_PreNet", 0, decPrecioNeto.ToString(n))

                strTransmision = oDataTable.Columns.Item("U_Transmis").Cells.Item(0).Value
                If strTransmision <> "" Then
                    strTransmision = Utilitarios.EjecutarConsulta("Select Name from [@SCGD_TRANSMISION] with (nolock) where Code = '" & strTransmision & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)
                End If
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Transmis", 0, strTransmision)
                strValorSeleccionado = oDataTable.Columns.Item("U_Cod_Unid").Cells.Item(0).Value
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Cod_Unid", 0, strValorSeleccionado)
                strCodUnidad = strValorSeleccionado
                If Utilitarios.ValidaExisteDataTable(oForm, "dtConsulta") Then
                    dtConsulta = oForm.DataSources.DataTables.Item("dtConsulta")
                Else
                    dtConsulta = oForm.DataSources.DataTables.Add("dtConsulta")
                End If

                dtConsulta.ExecuteQuery("Select U_Km_Unid from [@SCGD_Vehiculo] with (nolock) where U_Cod_Unid = '" & strValorSeleccionado & "' ")

                Dim strKmVenta As String
                If dtConsulta.Rows.Count > 0 Then
                    strKmVenta = dtConsulta.GetValue("U_Km_Unid", 0).ToString().Trim()
                End If

                If Not String.IsNullOrEmpty(strKmVenta) Then
                    Dim dblKM As Double = Convert.ToDouble(strKmVenta.ToString(n))
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Km_Venta", 0, dblKM.ToString())
                End If

                oForm.Items.Item("txtKmVenta").Enabled = EnableKmUni

                'manejo de impuestos para la unidad
                'If DMS_Connector.Configuracion.ParamGenAddon.U_LocCR = "Y" Then
                '    If Not String.IsNullOrEmpty(strCodUnidad) Then
                '        strCodeArtVenta = Utilitarios.EjecutarConsulta(String.Format(DMS_Connector.Queries.GetStrSpecificQuery("strMarcaComercialVehiculo"), strCodUnidad))
                '    End If
                '    strItemCodeVeh = GetItemCode(strCodeArtVenta, strTipoVehiculo)
                '    strImpuesto = DMS_Connector.Business_Logic.ImpuestoBL.ObtenerImpuesto(oForm, strCliente, strItemCodeVeh)
                '    If Not String.IsNullOrEmpty(strImpuesto) Then
                '        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Imp_Vh", 0, strImpuesto)
                '    Else
                '        dtImpuesto = CargarImpuesto(strCliente, "'" & strValorSeleccionado & "'")
                '        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Imp_Vh", 0, dtImpuesto.GetValue("U_Cod_Imp", 0))
                '    End If
                'Else
                '    dtImpuesto = CargarImpuesto(strCliente, "'" & strValorSeleccionado & "'")
                '    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Imp_Vh", 0, dtImpuesto.GetValue("U_Cod_Imp", 0))
                'End If
                dtImpuesto = CargarImpuesto(strCliente, "'" & strValorSeleccionado & "'")
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Imp_Vh", 0, dtImpuesto.GetValue("U_Cod_Imp", 0))

                decBonoSinFormatear = oDataTable.Columns.Item("U_Bono").Cells.Item(0).Value

                decBonoFormateado = Utilitarios.ManejoMultimoneda(decBonoSinFormatear, strMonedaLocal, strMonedaSistema, strMonedaVehiculo, strMonedaCV, strTipoCambioCV, Date.Parse(strFecha), n, m_oCompany)

                Dim strBonoFormateado As String = Utilitarios.ObtenerFormatoSAP(decBonoFormateado, g_strSeparadorMilesSAP, g_strSeparadorDecimalesSAP)

                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_BonoVV", 0, strBonoFormateado)
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_BonoDV", 0, decBonoFormateado)

                Call CargarPagosRealizados(oForm, False)

                Call FormateaPreciosBase(oForm)

                oForm.Items.Item("btnAgreVeh").Enabled = True
                oForm.Items.Item("btnCargM").Enabled = True
                oForm.Items.Item("btnActVeh").Enabled = False

                'Diego Herrera - 15/06/2012: Quitar de Data Table de gastos de unidad las lineas dependientes y no guardadas
                If oDataTableGastosUnidad.Rows.Count > 0 Then

                    For i As Integer = oDataTableGastosUnidad.Rows.Count - 1 To 0 Step -1

                        strDependeDataTable = oDataTableGastosUnidad.GetValue("depende", i)
                        strGuardaDataTable = oDataTableGastosUnidad.GetValue("guarda", i)

                        If strDependeDataTable = "Y" AndAlso Not strGuardaDataTable = "Y" Then

                            oDataTableGastosUnidad.Rows.Remove(i)

                        End If

                    Next

                End If

            Else
                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCliente, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    <System.CLSCompliant(False)> _
    Public Sub CargarVehiculo(ByRef oForm As SAPbouiCOM.Form, ByVal FormUID As String)

        Dim oMatrix As SAPbouiCOM.Matrix
        Dim intNuevoRegistro As Integer
        Dim strUnidad As String
        Dim strTipoUnidad As String
        Dim strValorSeleccionado As String
        Dim strCliente As String
        Dim blnUnidadCargada As Boolean = False
        Dim strVehCargado As String
        Dim strFacturacionMultiple As String
        Dim blnFactMultiple As Boolean = True
        Dim intUsaOtrosCosXVeh As Integer
        Dim m_decBonoTotal As Decimal = 0
        Dim strUnidadDataTable As String
        Dim strCodigoImpuesto As String = String.Empty
        Dim strUsaControlAccesorios As String = String.Empty

        Dim n As NumberFormatInfo
        Dim oCABYS As CABYS
        Dim strIndicadorImpuesto As String = String.Empty
        Try

            strCliente = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0).Trim

            If Not String.IsNullOrEmpty(strCliente) Then

                strUnidad = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_Unid", 0).Trim

                If Not String.IsNullOrEmpty(strUnidad) Then
                    oCABYS = New CABYS()
                    oCABYS.CodigoUnidad = strUnidad
                    oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                    strVehCargado = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim

                    strFacturacionMultiple = oDataTableConfiguracionesDMS.GetValue("U_SCGD_ModPrecio", 0)

                    If oMatrix.RowCount >= 1 AndAlso Not String.IsNullOrEmpty(strVehCargado) AndAlso strFacturacionMultiple = "N" Then

                        blnFactMultiple = False

                    End If

                    If blnFactMultiple = True Then

                        For i As Integer = 0 To oMatrix.RowCount - 1

                            strVehCargado = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).Trim

                            If strUnidad = strVehCargado Then

                                blnUnidadCargada = True
                                Exit For

                            End If

                        Next

                        If blnUnidadCargada = False Then

                            n = DIHelper.GetNumberFormatInfo(m_oCompany)

                            intNuevoRegistro = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size
                            If intNuevoRegistro = 1 Then
                                strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim
                                If Not String.IsNullOrEmpty(strUnidad) Then
                                    oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").InsertRecord(intNuevoRegistro)
                                    intNuevoRegistro += 1
                                Else
                                    intNuevoRegistro = 1
                                End If
                            Else
                                oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").InsertRecord(intNuevoRegistro)
                                intNuevoRegistro += 1
                            End If

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Des_Marc", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Des_Marc", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Des_Esti", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Des_Esti", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Des_Mode", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Des_Mode", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Num_Mot", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Num_Mot", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Num_VIN", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Num_VIN", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Ano_Vehi", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Ano_Vehi", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Num_Plac", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Num_Plac", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Des_Col", 0).Trim
                            If strValorSeleccionado <> "" AndAlso strValorSeleccionado <> "DetenerSBO" Then
                                oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Des_Col", intNuevoRegistro - 1, strValorSeleccionado)
                            End If

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vh", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pre_Vta", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Transmis", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Transmi", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Imp_Vh", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Impuesto", intNuevoRegistro - 1, strValorSeleccionado)
                            strIndicadorImpuesto = strValorSeleccionado

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Por_Temp", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Desc_Veh", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DescUni", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_MDesc", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pago_Vh", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pagos", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_Unid", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Cod_Unid", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GL_Temp", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Gas_Loc", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_OG_Temp", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Otro_Gas", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_BonoVV", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Bono", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_TipIn", 0).Trim
                            strTipoUnidad = strValorSeleccionado
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_TipIn", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ColIn", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_ColIn", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Obser", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Obser", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_PreNet", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_PreNet", intNuevoRegistro - 1, strValorSeleccionado)

                            strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Km_Venta", 0).Trim
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Km_Venta", intNuevoRegistro - 1, strValorSeleccionado)

                            strUnidad = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_Unid", 0).Trim

                            intUsaOtrosCosXVeh = Utilitarios.EjecutarConsulta(String.Format("select count(code) from [dbo].[@SCGD_OTROSCOSTOS] with(nolock)"),
                                                             m_oCompany.CompanyDB, m_oCompany.Server)

                            'Bandera para saber si usa OtrosCostosXVehiculo
                            If intUsaOtrosCosXVeh > 0 Then
                                CargarOtrosCostosPorUnidad(oForm, strUnidad, strTipoUnidad)
                            End If

                            CargarBonosPorUnidad(oForm, strUnidad, m_decBonoTotal)

                            strCodigoImpuesto = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Imp_Vh", 0).Trim

                            strUsaControlAccesorios = DMS_Connector.Configuracion.ParamGenAddon.U_CtrlAcc

                            If strUsaControlAccesorios.ToUpper() = "Y" Then
                                CargarAccesoriosPorUnidad(oForm, strUnidad, strCodigoImpuesto, strTipoUnidad)
                            End If

                            strValorSeleccionado = m_decBonoTotal.ToString(n)
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Bono", intNuevoRegistro - 1, strValorSeleccionado)

                            '*******************INICIO| Manejo CABYS****************
                            If DMS_Connector.Configuracion.ParamGenAddon.U_CABYS_CR = "Y" Then
                                oCABYS.CodigoArticulo = Utilitarios.EjecutarConsulta("SELECT ""@SCGD_CONF_ART_VENTA"".""U_ArtVent"" FROM ""@SCGD_VEHICULO"" INNER JOIN ""@SCGD_CONF_ART_VENTA"" ON ""@SCGD_VEHICULO"".""U_ArtVent"" = ""@SCGD_CONF_ART_VENTA"".""Code"" WHERE ""@SCGD_VEHICULO"".""U_Cod_Unid"" = '" & oCABYS.CodigoUnidad & "'")
                                oCABYS.TipoInventario = strTipoUnidad
                                oCABYS.IndicadorIVA = strIndicadorImpuesto
                                If String.IsNullOrEmpty(oCABYS.CodigoArticulo) Then
                                    If DMS_Connector.Configuracion.ParamGenAddon.Admin1.Any(Function(admin1) admin1.U_Tipo.Trim.Equals(oCABYS.TipoInventario)) Then
                                        oCABYS.CodigoArticulo = DMS_Connector.Configuracion.ParamGenAddon.Admin1.FirstOrDefault(Function(admin1) admin1.U_Tipo.Trim.Equals(oCABYS.TipoInventario)).U_ItemCode
                                    End If
                                End If
                                Call ManejaCABYS(oCABYS)
                                If Not String.IsNullOrEmpty(oCABYS.CABYS_AE) Then oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_CABYS_AE", intNuevoRegistro - 1, oCABYS.CABYS_AE)
                                If Not String.IsNullOrEmpty(oCABYS.CABYS_TI) Then oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_CABYS_TI", intNuevoRegistro - 1, oCABYS.CABYS_TI)
                                If Not String.IsNullOrEmpty(oCABYS.CABYS_CH) Then oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_CABYS_CH", intNuevoRegistro - 1, oCABYS.CABYS_CH)
                            End If
                            '*******************FINAL| Manejo CABYS****************

                            Call oMatrix.LoadFromDataSource()

                            Call CalculaPrecioVenta(oForm)

                            Call CargarPagosRealizados(oForm)

                            Call CalculaPrecioAccesorios(oForm)

                            Call CalcularCostos(FormUID)

                            Call FormateaPreciosBase(oForm)

                            If oDataTableGastosUnidad.Rows.Count > 0 Then

                                For i As Integer = 0 To oDataTableGastosUnidad.Rows.Count - 1

                                    strUnidadDataTable = oDataTableGastosUnidad.GetValue("unidad", i)

                                    If strUnidadDataTable = strUnidad Then

                                        oDataTableGastosUnidad.SetValue("guarda", i, "Y")

                                    End If
                                Next
                            End If

                        ElseIf blnUnidadCargada = True Then

                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorUnidadExiste, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)

                        End If

                    ElseIf blnFactMultiple = False Then

                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorFactMultiple, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)

                    End If

                    oForm.Items.Item("btnAgreVeh").Enabled = False
                    oForm.Items.Item("btnActVeh").Enabled = False

                    Call LimpiarVehiculoTemporal(oForm)

                Else

                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorFaltaNumUnidad, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)

                End If

            Else

                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCliente, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)

            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    ''' <summary>
    ''' Agrega los accesorios del vehículo al contrato de ventas
    ''' </summary>
    ''' <param name="p_oForm">Formulario desde el cual se llama a este método</param>
    ''' <param name="p_strUnidad">Código del vehículo/unidad campo U_Cod_Unid de la tabla [@SCGD_VEHICULO]</param>
    ''' <param name="p_strImpuestoVehiculo">Impuesto de ventas seleccionado</param>
    ''' <param name="p_strTipoVehiculo">Tipo de inventario del vehículo/unidad</param>
    ''' <remarks></remarks>
    Private Sub CargarAccesoriosPorUnidad(ByRef p_oForm As Form, ByVal p_strUnidad As String, ByVal p_strImpuestoVehiculo As String, ByVal p_strTipoVehiculo As String)

        'Monedas y tipos de cambio
        Dim strMonedaLocal As String
        Dim strMonedaSistema As String
        Dim strMonedaVehiculo As String
        Dim strMonedaCV As String
        Dim strTipoCambioSistema As String
        Dim strTipoCambioCV As String
        Dim strFechaCV As String
        Dim strFecha As String
        Dim dtFechaCV As Date
        Dim decTCDoc As Decimal

        'Componentes
        Dim strCodigoAccesorio As String = String.Empty
        Dim strDescripcionAccesorio As String = String.Empty
        Dim strBodegaAccesorios As String = String.Empty
        Dim intCantidad As Integer = 0
        Dim decPrecioLista As Decimal = 0
        Dim decTotalLinea As Decimal = 0
        Dim decCostoAccesorio As Decimal = 0
        Dim strGestionStockAlm As String = String.Empty

        'Objetos
        Dim objGlobal As DMSOneFramework.BLSBO.GlobalFunctionsSBO
        Dim oMatrix As SAPbouiCOM.Matrix

        'Queries
        Dim strQuery As String = String.Empty
        Dim strQueryMoneda As String = String.Empty
        Dim strQueryUsaStockAlm As String = String.Empty
        Dim strQueryCosto As String = String.Empty

        Dim intTamano As Integer = 0
        Dim strUsaControlAccesorios As String = String.Empty

        Try

            objGlobal = New DMSOneFramework.BLSBO.GlobalFunctionsSBO
            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            strUsaControlAccesorios = DMS_Connector.Configuracion.ParamGenAddon.U_CtrlAcc

            'Fechas de documento y del contrato de ventas
            strFechaCV = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)
            strFecha = Utilitarios.RetornaFechaFormatoRegional(strFechaCV)
            dtFechaCV = Date.Parse(strFechaCV)
            dtFechaCV = New Date(dtFechaCV.Year, dtFechaCV.Month, dtFechaCV.Day, 0, 0, 0)

            'Monedas
            strMonedaCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim()
            strMonedaLocal = objGlobal.RetornarMonedaLocal
            strMonedaSistema = objGlobal.RetornarMonedaSistema

            'Tipos de cambio
            strTipoCambioSistema = objGlobal.RetornarTipoCambioMonedaRS(strMonedaSistema, dtFechaCV)
            strTipoCambioCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0)
            decTCDoc = Decimal.Parse(strTipoCambioCV, n)

            oMatrix = DirectCast(p_oForm.Items.Item(g_str_mtxAccesorios).Specific, SAPbouiCOM.Matrix)
            oMatrix.FlushToDataSource()

            'Consulta la moneda del maestro del vehículo
            strQueryMoneda = String.Format("SELECT ""U_Moneda"" FROM ""@SCGD_VEHICULO"" where ""U_Cod_Unid"" = '{0}'", p_strUnidad)
            strMonedaVehiculo = Utilitarios.EjecutarConsulta(strQueryMoneda, m_oCompany.CompanyDB, m_oCompany.Server)
            'Consulta los accesorios del vehículo
            strQuery = String.Format("SELECT T0.""U_Acc"", T0.""U_N_Acc"", T0.""U_Cantidad"", T0.""U_Precio"", T0.""U_Total"" FROM ""@SCGD_ACCXVEH""  T0 INNER JOIN" &
                                     """@SCGD_VEHICULO"" T1 ON T0.""Code"" = T1.""Code"" WHERE  T1.""U_Cod_Unid "" = '{0}' ", p_strUnidad)
            dtAccesoriosUnidad.ExecuteQuery(strQuery)


            'Se procede a agregar cada uno de los accesorios del maestro del vehículo al contrato de ventas
            For i As Integer = 0 To dtAccesoriosUnidad.Rows.Count - 1
                strCodigoAccesorio = dtAccesoriosUnidad.GetValue("U_Acc", i)
                strDescripcionAccesorio = dtAccesoriosUnidad.GetValue("U_N_Acc", i)
                intCantidad = dtAccesoriosUnidad.GetValue("U_Cantidad", i)
                decPrecioLista = dtAccesoriosUnidad.GetValue("U_Precio", i)
                decTotalLinea = dtAccesoriosUnidad.GetValue("U_Total", i)
                decCostoAccesorio = 0

                If Not String.IsNullOrEmpty(strCodigoAccesorio) Then

                    intTamano = p_oForm.DataSources.DBDataSources.Item(g_str_ACCXCONT).Size

                    decPrecioLista = dtAccesoriosUnidad.GetValue("U_Precio", i)
                    decPrecioLista = Utilitarios.ManejoMultimoneda(decPrecioLista, strMonedaLocal, strMonedaSistema, strMonedaVehiculo, strMonedaCV,
                                                                       decTCDoc.ToString(), Date.Parse(strFecha), n, m_oCompany)

                    decTotalLinea = dtAccesoriosUnidad.GetValue("U_Total", i)
                    decTotalLinea = Utilitarios.ManejoMultimoneda(decTotalLinea, strMonedaLocal, strMonedaSistema, strMonedaVehiculo, strMonedaCV,
                                                                       decTCDoc.ToString(), Date.Parse(strFecha), n, m_oCompany)

                    'Obtenemos el costo del accesorio
                    strBodegaAccesorios = objConfiguracionGeneral.AccesoriosXAlmacen(p_strTipoVehiculo)
                    If String.IsNullOrEmpty(strBodegaAccesorios) Then
                        strBodegaAccesorios = oDataTableConfiguracionesDMS.GetValue("U_SCGD_BodAcc", 0)
                    End If

                    'Consulta si el artículo utiliza Gestión de Stocks por almacén
                    strQueryUsaStockAlm = String.Format("SELECT T0.""ByWh"" FROM ""OITM"" T0 WHERE T0.""ItemCode"" = '{0}' ", strCodigoAccesorio)
                    strGestionStockAlm = Utilitarios.EjecutarConsulta(strQueryUsaStockAlm, m_oCompany.CompanyDB, m_oCompany.Server)

                    If Not strGestionStockAlm = "Y" Then
                        strQueryCosto = String.Format("SELECT T0.""AvgPrice"" FROM ""OITM"" T0 WHERE T0.""ItemCode"" = '{0}' ", strCodigoAccesorio)
                    ElseIf strGestionStockAlm = "Y" Then
                        strQueryCosto = String.Format("SELECT T0.""AvgPrice"" FROM ""OITW"" T0 WHERE T0.""ItemCode"" = '{0}' AND T0.""WhsCode"" = '{1}' ", strCodigoAccesorio, strBodegaAccesorios)
                    End If

                    decCostoAccesorio = Utilitarios.EjecutarConsultaPrecios(strQueryCosto, m_oCompany.CompanyDB, m_oCompany.Server)

                    If decCostoAccesorio > 0 Then
                        decCostoAccesorio = Utilitarios.ManejoMultimoneda(decCostoAccesorio, strMonedaLocal, strMonedaSistema, strMonedaLocal, strMonedaCV,
                                                                       decTCDoc.ToString(), Date.Parse(strFecha), n, m_oCompany)
                    End If

                    'Verifica que la primera línea no sea una línea vacía
                    If intTamano = 1 Then
                        Dim strValidaAccesorio As String = String.Empty
                        strValidaAccesorio = p_oForm.DataSources.DBDataSources.Item(g_str_ACCXCONT).GetValue("U_Acc", 0)
                        strValidaAccesorio = strValidaAccesorio.Trim()
                        If String.IsNullOrEmpty(strValidaAccesorio) Then
                            intTamano = 0
                        End If
                    End If

                    If intTamano >= 1 Then
                        p_oForm.DataSources.DBDataSources.Item(g_str_ACCXCONT).InsertRecord(intTamano)
                    End If

                    'Cuando se utiliza el control de accesorios no se pueden eliminar mientras estén ligados a un vehículo
                    'este campo determina a cual vehículo/unidad esta ligado
                    If strUsaControlAccesorios.ToUpper() = "Y" Then
                        p_oForm.DataSources.DBDataSources.Item(g_str_ACCXCONT).SetValue(g_strCodUnid, intTamano, p_strUnidad)
                    End If

                    p_oForm.DataSources.DBDataSources.Item(g_str_ACCXCONT).SetValue("U_Acc", intTamano, strCodigoAccesorio)
                    p_oForm.DataSources.DBDataSources.Item(g_str_ACCXCONT).SetValue("U_N_Acc", intTamano, strDescripcionAccesorio)
                    p_oForm.DataSources.DBDataSources.Item(g_str_ACCXCONT).SetValue("U_Cant_Acc", intTamano, intCantidad)
                    p_oForm.DataSources.DBDataSources.Item(g_str_ACCXCONT).SetValue("U_SCGD_AccPrecio", intTamano, decPrecioLista.ToString(n))
                    p_oForm.DataSources.DBDataSources.Item(g_str_ACCXCONT).SetValue("U_AccPr_I", intTamano, decPrecioLista.ToString(n))
                    p_oForm.DataSources.DBDataSources.Item(g_str_ACCXCONT).SetValue("U_PrTo_Acc", intTamano, decTotalLinea.ToString(n))
                    p_oForm.DataSources.DBDataSources.Item(g_str_ACCXCONT).SetValue("U_Imp_Acc", intTamano, p_strImpuestoVehiculo)
                    p_oForm.DataSources.DBDataSources.Item(g_str_ACCXCONT).SetValue("U_Cost_Acc", intTamano, decCostoAccesorio.ToString(n))

                End If

            Next

            oMatrix.LoadFromDataSource()

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try


    End Sub

    Private Sub CargarBonosPorUnidad(ByRef p_oForm As Form, ByVal p_strUnidad As String, ByRef p_decBonoTotal As Decimal)

        Dim m_intPosicion As Integer = 0
        Dim m_strBono As String = String.Empty
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim decMontoSinFormato As Decimal
        Dim decMontoFormateado As Decimal
        Dim strNombreBono As String

        Dim strMonedaVehiculo As String
        Dim strMonedaCV As String
        Dim strMonedaLocal As String
        Dim strMonedaSistema As String
        Dim strTipoCambioSistema As String
        Dim strTipoCambioCV As String
        Dim strFechaCV As String
        Dim strFecha As String
        Dim decTCDoc As Decimal
        Dim objGlobal As DMSOneFramework.BLSBO.GlobalFunctionsSBO
        Dim dtFechaCV As Date
        Dim n As NumberFormatInfo

        Try

            objGlobal = New DMSOneFramework.BLSBO.GlobalFunctionsSBO
            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            strFechaCV = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)

            strMonedaVehiculo = Utilitarios.EjecutarConsulta(String.Format("select U_Moneda from [@SCGD_VEHICULO] with (nolock) " & _
                                                                           " where U_Cod_Unid = '{0}'", p_strUnidad),
                                                             m_oCompany.CompanyDB, m_oCompany.Server)

            strFecha = Utilitarios.RetornaFechaFormatoRegional(strFechaCV)
            strMonedaCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim()
            strMonedaLocal = objGlobal.RetornarMonedaLocal
            strMonedaSistema = objGlobal.RetornarMonedaSistema

            oMatrix = DirectCast(p_oForm.Items.Item(g_str_mtxBonos).Specific, SAPbouiCOM.Matrix)
            oMatrix.FlushToDataSource()

            dtBonosUnidad.ExecuteQuery(String.Format("select tbo.Code, bxv.U_Monto " &
                                       " from [@SCGD_BONOXVEH] as bxv with (nolock) " &
                                       " inner join [@SCGD_TIPOBONO] as tbo with (nolock) on bxv.U_Bono = tbo.Code " & _
                                       " inner join [@SCGD_VEHICULO] as veh with (nolock) on bxv.Code = veh.Code " & _
                                       " where veh.U_Cod_Unid = '{0}'", p_strUnidad))

            dtFechaCV = Date.Parse(strFechaCV)
            dtFechaCV = New Date(dtFechaCV.Year, dtFechaCV.Month, dtFechaCV.Day, 0, 0, 0)

            'strFechaCV = Utilitarios.RetornaFechaFormatoDB(dtFechaCV, m_oCompany.Server)
            strTipoCambioCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0)
            decTCDoc = Decimal.Parse(strTipoCambioCV, n)

            strTipoCambioSistema = objGlobal.RetornarTipoCambioMonedaRS(strMonedaSistema, dtFechaCV)

            For i As Integer = 0 To dtBonosUnidad.Rows.Count - 1

                strNombreBono = dtBonosUnidad.GetValue("Code", i)
                decMontoSinFormato = Decimal.Parse(dtBonosUnidad.GetValue("U_Monto", i), n)

                decMontoFormateado = Utilitarios.ManejoMultimoneda(decMontoSinFormato,
                                                                   strMonedaLocal,
                                                                   strMonedaSistema,
                                                                   strMonedaVehiculo,
                                                                   strMonedaCV,
                                                                   decTCDoc.ToString(),
                                                                   Date.Parse(strFecha),
                                                                   n,
                                                                   m_oCompany)

                p_decBonoTotal += decMontoFormateado

                m_intPosicion = p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).Size

                If m_intPosicion = 1 Then
                    m_strBono = p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).GetValue(g_strUBono, 0)
                    m_strBono = m_strBono.Trim()
                    If String.IsNullOrEmpty(m_strBono) Then
                        m_intPosicion = 0
                        p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUUnidad, m_intPosicion, p_strUnidad)
                        p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUBono, m_intPosicion, strNombreBono)
                        p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUMonto, m_intPosicion, decMontoFormateado.ToString(n))
                    Else
                        m_intPosicion = 1
                        p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).InsertRecord(m_intPosicion)
                        p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUUnidad, m_intPosicion, p_strUnidad)
                        p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUBono, m_intPosicion, strNombreBono)
                        p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUMonto, m_intPosicion, decMontoFormateado.ToString(n))
                    End If
                Else
                    'm_intPosicion = m_intPosicion - 1
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).InsertRecord(m_intPosicion)

                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUUnidad, m_intPosicion, p_strUnidad)
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUBono, m_intPosicion, strNombreBono)
                    p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue(g_strUMonto, m_intPosicion, decMontoFormateado.ToString(n))
                End If
            Next

            oMatrix.LoadFromDataSource()

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Private Sub CargarOtrosCostosPorUnidad(ByRef p_oForm As SAPbouiCOM.Form, ByVal p_strUnidad As String, ByVal p_strTipoVehiculo As String)

        Dim intPosicion As Integer = 0
        Dim strCodigoCosto As String = String.Empty
        Dim strPrimerCodigo As String = String.Empty
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim decMontoSinFormato As Decimal
        Dim decMontoFormateado As Decimal
        Dim strMontoFormateadoTotal As String
        Dim decMontoFormateadoTotal As Decimal

        Dim strMonedaCV As String
        Dim strMonedaLocal As String
        Dim strMonedaSistema As String
        Dim strTipoCambioSistema As String
        Dim strTipoCambioCV As String
        Dim strFechaCV As String
        Dim strFecha As String
        Dim decTCDoc As Decimal
        Dim objGlobal As DMSOneFramework.BLSBO.GlobalFunctionsSBO
        Dim dtFechaCV As Date
        Dim n As NumberFormatInfo

        Try

            objGlobal = New DMSOneFramework.BLSBO.GlobalFunctionsSBO
            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            strFechaCV = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)

            strFecha = Utilitarios.RetornaFechaFormatoRegional(strFechaCV)
            strMonedaCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim()
            strMonedaLocal = objGlobal.RetornarMonedaLocal
            strMonedaSistema = objGlobal.RetornarMonedaSistema

            oMatrix = DirectCast(p_oForm.Items.Item(g_str_mtxOtrosCostos).Specific, SAPbouiCOM.Matrix)
            oMatrix.FlushToDataSource()

            dtCostosUnidad = oForm.DataSources.DataTables.Item("dtCostosUnidades")

            dtCostosUnidad.ExecuteQuery(String.Format("select ocos.Code, ocos.U_Monto " & _
                                                        " from [@SCGD_OTROSCOSTOS] ocos with (nolock) " & _
                                                        " inner join [@SCGD_OTCOSXTIPVE] cosxtv with (nolock) " & _
                                                        " on ocos.Code = cosxtv.U_CodOtCos " & _
                                                        " where cosxtv.U_CodTipV = '{0}'", p_strTipoVehiculo))

            dtFechaCV = Date.Parse(strFechaCV)
            dtFechaCV = New Date(dtFechaCV.Year, dtFechaCV.Month, dtFechaCV.Day, 0, 0, 0)

            strTipoCambioCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0)
            decTCDoc = Decimal.Parse(strTipoCambioCV, n)

            strTipoCambioSistema = objGlobal.RetornarTipoCambioMonedaRS(strMonedaSistema, dtFechaCV)

            strMontoFormateadoTotal = p_oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_OtrCos", 0)
            decMontoFormateadoTotal = Utilitarios.ConvierteDecimal(strMontoFormateadoTotal, n)

            For i As Integer = 0 To dtCostosUnidad.Rows.Count - 1

                strCodigoCosto = dtCostosUnidad.GetValue("Code", i)
                decMontoSinFormato = Decimal.Parse(dtCostosUnidad.GetValue("U_Monto", i), n)

                If Not String.IsNullOrEmpty(p_strUnidad) AndAlso
                    Not String.IsNullOrEmpty(strCodigoCosto) Then

                    decMontoFormateado = Utilitarios.ManejoMultimoneda(decMontoSinFormato,
                                                                       strMonedaLocal,
                                                                       strMonedaSistema,
                                                                       strMonedaLocal,
                                                                       strMonedaCV,
                                                                       decTCDoc.ToString(),
                                                                       Date.Parse(strFecha),
                                                                       n,
                                                                       m_oCompany)
                    decMontoFormateadoTotal += decMontoFormateado

                    intPosicion = p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).Size

                    If intPosicion = 1 Then
                        strPrimerCodigo = p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).GetValue(g_strUCodCos, 0)
                        strPrimerCodigo = strPrimerCodigo.Trim()
                        If String.IsNullOrEmpty(strPrimerCodigo) Then
                            intPosicion = 0
                            p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).SetValue(g_strUUnidad, intPosicion, p_strUnidad)
                            p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).SetValue(g_strUCodCos, intPosicion, strCodigoCosto)
                            p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).SetValue(g_strUMonto, intPosicion, decMontoFormateado)
                        Else
                            intPosicion = 1
                            p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).InsertRecord(intPosicion)
                            p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).SetValue(g_strUUnidad, intPosicion, p_strUnidad)
                            p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).SetValue(g_strUCodCos, intPosicion, strCodigoCosto)
                            p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).SetValue(g_strUMonto, intPosicion, decMontoFormateado)
                        End If
                    Else
                        'intPosicion = intPosicion - 1
                        p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).InsertRecord(intPosicion)

                        p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).SetValue(g_strUUnidad, intPosicion, p_strUnidad)
                        p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).SetValue(g_strUCodCos, intPosicion, strCodigoCosto)
                        p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).SetValue(g_strUMonto, intPosicion, decMontoFormateado)
                    End If
                End If

            Next

            oMatrix.LoadFromDataSource()
            CalculaTotalOtrosCostos(p_oForm)

            FormateaPreciosBase(p_oForm)

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Private Function ValidarDispVehiculo(ByRef oForm As SAPbouiCOM.Form, ByVal FormUID As String, ByRef BubbleEvent As Boolean, ByVal p_strUnidad As String)
        Try

            Dim strEstadoNoDisponible As String
            Dim strInventarioTaller As String
            Dim strEstadoReservado As String

            Dim strDispVehi As String
            Dim strTipoVehi As String

            Dim strSQLDispVeh As String = "SELECT U_Dispo FROM [@SCGD_Vehiculo] with (nolock) WHERE U_Cod_Unid = '{0}'"
            Dim strSQLTipoVeh As String = "SELECT U_Tipo FROM [@SCGD_Vehiculo] with (nolock) WHERE U_Cod_Unid = '{0}'"

            strEstadoNoDisponible = objConfiguracionGeneral.DisponibilidadVehiculoVendido
            strInventarioTaller = objConfiguracionGeneral.InventarioVehiculoVendido
            strEstadoReservado = oDataTableConfiguracionesDMS.GetValue("U_Disp_Res", 0)


            If Not String.IsNullOrEmpty(p_strUnidad) Then
                strDispVehi = Utilitarios.EjecutarConsulta(String.Format(strSQLDispVeh, p_strUnidad), m_oCompany.CompanyDB, m_oCompany.Server)
                strTipoVehi = Utilitarios.EjecutarConsulta(String.Format(strSQLTipoVeh, p_strUnidad), m_oCompany.CompanyDB, m_oCompany.Server)

                If String.IsNullOrEmpty(strDispVehi) OrElse
                    strDispVehi = strEstadoNoDisponible OrElse
                    strDispVehi = strEstadoReservado Then


                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.LaUnidad + " " + p_strUnidad +
                                                                           My.Resources.Resource.DisponibilidadUnidad,
                                                                           SAPbouiCOM.BoMessageTime.bmt_Short,
                                                                           SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                    BubbleEvent = False

                ElseIf String.IsNullOrEmpty(strTipoVehi) OrElse strTipoVehi = strInventarioTaller Then


                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.LaUnidad + " " + p_strUnidad +
                                                                          My.Resources.Resource.UnidadenInvTaller,
                                                                          SAPbouiCOM.BoMessageTime.bmt_Short)
                    BubbleEvent = False

                End If

            End If
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Public Function ValidarPagosRecibidos(ByRef oForm As SAPbouiCOM.Form, ByVal FormUID As String, ByRef BubbleEvent As Boolean, ByVal p_strUnidad As String)

        Try

            Dim strValidaPagos As String

            strValidaPagos = oDataTableConfiguracionesDMS.GetValue("U_Pagos_Rec", 0)


            If strValidaPagos = "Y" And Not String.IsNullOrEmpty(strValidaPagos) Then
                Dim strConsulta As String

                strConsulta = "Select DocEntry, DocNum  ,U_SCGD_Cod_Unid,U_SCGD_Prestamo,U_SCGD_NumPago from ORCT with (nolock) where U_SCGD_Cod_Unid = '{0}'"
                strConsulta = String.Format(strConsulta, p_strUnidad)

                oDataTablePagosRecibidos.Rows.Clear()
                oDataTablePagosRecibidos = oForm.DataSources.DataTables.Item("PagosRec")

                oDataTablePagosRecibidos.ExecuteQuery(strConsulta)

                If oDataTablePagosRecibidos.GetValue("DocEntry", 0) = 0 Then

                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorContratoVehiculoSinPagos,
                                                        SAPbouiCOM.BoMessageTime.bmt_Short,
                                                        BoStatusBarMessageType.smt_Error)
                    BubbleEvent = False
                End If

            End If
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Private Function CargarImpuesto(ByVal strCliente As String, ByVal strUnidad As String) As SAPbouiCOM.DataTable

        Dim strImpCliente As String = ""

        Try

            dtImp.ExecuteQuery("SELECT V.U_Cod_Unid, V.U_Tipo, A.U_Cod_Imp , A.U_Cod_Item " & _
                                                          "FROM [@SCGD_VEHICULO] as V with (nolock) LEFT JOIN [@SCGD_ADMIN3] as A  with (nolock) " & _
                                                          "ON V.U_Tipo = A.U_Tipo  WHERE V.U_Cod_Unid in (" & _
                                                          strUnidad & ") AND (U_Cod_Item = '1' OR U_Cod_Item IS NULL)")

            strImpCliente = Utilitarios.EjecutarConsulta("Select C1.TaxCode FROM [CRD1] AS C1 with (nolock) INNER JOIN [OCRD] AS C with (nolock) ON  C1.[Address] = C.ShipToDef  WHERE C1.CardCode = '" & _
                                                         strCliente & "' AND C.CardCode = '" & strCliente & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            If dtImp IsNot Nothing Then
                'recorre data table para verificar unidades sin cod impuesto
                For i As Integer = 0 To dtImp.Rows.Count - 1
                    If String.IsNullOrEmpty(dtImp.GetValue("U_Cod_Imp", i)) Then
                        dtImp.SetValue("U_Cod_Imp", i, strImpCliente)
                    End If
                Next
                Return dtImp
            Else
                Return Nothing
            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Function

    <System.CLSCompliant(False)> _
    Public Sub AsignarConsecutivoAlTexto(ByRef oItem As SAPbouiCOM.Item)
        Dim oEdit As SAPbouiCOM.EditText
        Try

            oEdit = oItem.Specific
            oEdit.String = GenerarConsecutivoCode()
        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    Public Function GenerarConsecutivoCode() As String
        Dim strQuery As String
        Dim strConsecutivo As String = String.Empty

        Try

            strQuery = "Select Max(Cast(DocEntry as Int)) From [@" & TablaContrato & "]"
            strConsecutivo = Utilitarios.EjecutarConsulta(strQuery, m_oCompany.CompanyDB, m_oCompany.Server)

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

        Return strConsecutivo + 1

    End Function

    Private Sub CalcularPrecioModPrecioVenta(ByVal oForm As SAPbouiCOM.Form)

        Dim strVehCargado As String
        Dim strFacturacionMultiple As String
        Dim strPrecioVenta As String
        Dim strImpuesto As String
        Dim strRate As String
        Dim decRate As Decimal
        Dim decPrecioVenta As Decimal
        Dim decPrecioImp As Decimal
        Dim oMatrix As SAPbouiCOM.Matrix

        Dim strManejoDescuentoFact As String
        Dim strPrecioUnitario As String
        Dim decPrecioUnitario As Decimal = 0
        Dim decDescuento As Decimal
        Dim decPorcDesc As Decimal = 0

        Dim strGastosLocales As String
        Dim decGastosLocales As Decimal = 0
        Dim decPrecioVtaUnidad As Decimal = 0
        Dim strPorcDesc As String
        Dim strPrecioTotVeh As String
        Dim decPrecioTotVeh As Decimal = 0
        Dim dtFechaContrato As DateTime
        Try
            If Nothing <> oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0) Then
                dtFechaContrato = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0), "yyyyMMdd", Nothing)
            ElseIf Nothing <> oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0) Then
                dtFechaContrato = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)
            Else
                dtFechaContrato = DateTime.Now
            End If
            strVehCargado = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim

            strFacturacionMultiple = oDataTableConfiguracionesDMS.GetValue("U_SCGD_ModPrecio", 0)

            If Not String.IsNullOrEmpty(strVehCargado) AndAlso strFacturacionMultiple = "N" Then

                oForm.Freeze(True)

                strGastosLocales = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Loc", 0).Trim()
                If Not String.IsNullOrEmpty(strGastosLocales) Then
                    decGastosLocales = Decimal.Parse(strGastosLocales, n)
                Else
                    decGastosLocales = 0
                End If

                strPrecioVenta = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0).Trim()
                If Not String.IsNullOrEmpty(strPrecioVenta) Then
                    decPrecioVenta = Decimal.Parse(strPrecioVenta, n)
                Else
                    decPrecioVenta = 0
                End If

                strPrecioTotVeh = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Pre_Tot", 0).Trim()
                If Not String.IsNullOrEmpty(strPrecioTotVeh) Then
                    decPrecioTotVeh = Decimal.Parse(strPrecioTotVeh, n)
                End If

                strPrecioUnitario = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Pre_Vta", 0).Trim()
                If Not String.IsNullOrEmpty(strPrecioUnitario) Then
                    decPrecioUnitario = Decimal.Parse(strPrecioUnitario, n)
                End If

                strManejoDescuentoFact = oDataTableConfiguracionesDMS.GetValue("U_Desc_Fac", 0)

                If strManejoDescuentoFact = "Y" Then

                    strPorcDesc = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Desc_Veh", 0).Trim()
                    If Not String.IsNullOrEmpty(strPorcDesc) Then
                        decPorcDesc = Decimal.Parse(strPorcDesc, n)
                    End If

                    If Math.Abs(decPrecioVenta - decPrecioTotVeh) <= Math.Pow(10, -1 * 2) Then
                        decDescuento = decPrecioUnitario * (decPorcDesc / 100)
                        decPrecioVenta = decPrecioUnitario - (decGastosLocales + decDescuento)
                        oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pre_Tot", 0, decPrecioVenta.ToString(n))

                    Else

                        oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pre_Tot", 0, decPrecioVenta.ToString(n))

                        decPrecioUnitario = decPrecioUnitario - decGastosLocales

                        decDescuento = decPrecioUnitario * (decPorcDesc / 100)

                        If decPrecioUnitario > 0 Then
                            decPorcDesc = (decDescuento / decPrecioUnitario) * 100
                        End If

                        oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Desc_Veh", 0, decPorcDesc.ToString(n))

                    End If

                Else

                    If decPrecioVenta = decPrecioTotVeh Then

                        decPrecioVenta = decPrecioUnitario - decGastosLocales
                        oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pre_Tot", 0, decPrecioVenta.ToString(n))

                    Else

                        decPrecioVtaUnidad = decPrecioVenta - decGastosLocales
                        oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pre_Vta", 0, decPrecioVenta.ToString(n))
                        oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pre_Tot", 0, decPrecioVtaUnidad.ToString(n))

                    End If

                End If

                oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                oMatrix.LoadFromDataSource()
                strImpuesto = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Impuesto", 0).Trim()

                If Not String.IsNullOrEmpty(strImpuesto) Then
                    decRate = Utilitarios.RetornaImpuestoVenta(strImpuesto, dtFechaContrato) / 100
                Else
                    decRate = 0
                End If

                decPrecioImp = decPrecioVenta * decRate
                SumaImpAccesorios(decPrecioImp)
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Imp", 0, decPrecioImp.ToString(n))

                oForm.Freeze(False)

            End If

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Private Sub CalcularCostos(ByRef FormUID As String)

        Dim oForm As SAPbouiCOM.Form
        Dim decCalculo As Decimal = 0
        Dim decCalculoSinImpuestos As Decimal = 0

        Dim decPorDesc As Decimal
        Dim strManejoDescuentoFact As String
        Dim strGenFactAccesorios As String
        Dim strPrecioVenta As String
        Dim decPrecioVenta As Decimal
        Dim strPrecioOtrosCostos As String
        Dim decPrecioOtrosCostos As Decimal
        Dim strPrecioBonos As String
        Dim decPrecioBonos As Decimal
        Dim strSubTotalAccs As String
        Dim decSubTotalAccs As Decimal
        Dim decTotalCalc As Decimal
        Dim blnAcc As Boolean
        Dim decImpAccs As Decimal = 0
        Dim decImpVehs As Decimal = 0
        Dim decTotalAccs As Decimal

        Dim strMultiplesFact As String
        Dim oMatrizVeh As SAPbouiCOM.Matrix
        Dim strGastosLocales As String
        Dim decGastosLocales As Decimal = 0
        Dim decTotalGeneralAccs As Decimal = 0
        Dim decTotalfinanciamientoPropio As Decimal = 0
        Dim decTotalFinanciamientoExterno As Decimal = 0
        Dim strTotalFinanciamientoPropio As String = String.Empty
        Dim strTotalFinanciamientoExterno As String = String.Empty
        Dim decTotalFinalFinan As Decimal = 0

        Dim decTotalSinImp As Decimal
        Dim strPorcDesc As String
        Dim decPorDescContrato As Decimal

        Dim oMatrixAcc As SAPbouiCOM.Matrix
        Dim strPorcDescuentoLinea As String
        Dim decPorcDescuentoLinea As Decimal
        Dim decDescuentoLinea As Decimal
        Dim decTotalPrecioLinea As Decimal

        Dim strSubTotalAcc As String
        Dim decSubTotalAcc As Decimal

        Dim decTotalAccesoriosSinDescLineal As Decimal

        Dim strCantAccLinea As String
        Dim intCantidadAccLinea As Integer

        oForm = m_SBO_Application.Forms.Item(FormUID)
        If oForm IsNot Nothing Then

            oMatrizVeh = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

            strManejoDescuentoFact = oDataTableConfiguracionesDMS.GetValue("U_Desc_Fac", 0).Trim()
            strGenFactAccesorios = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GenFaAcc", 0).Trim()
            strMultiplesFact = oDataTableConfiguracionesDMS.GetValue("U_Mul_Fac", 0).Trim()
            strGastosLocales = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Loc", 0).Trim()

            If Not String.IsNullOrEmpty(strGastosLocales) Then
                decGastosLocales = Decimal.Parse(strGastosLocales, n)
            Else
                decGastosLocales = 0
            End If

            If Not strMultiplesFact = "Y" AndAlso decGastosLocales > 0 Then
                Call CalculaPrecioVenta(oForm)
            End If

            strPrecioVenta = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0).Trim()
            If Not String.IsNullOrEmpty(strPrecioVenta) Then
                decPrecioVenta = Decimal.Parse(strPrecioVenta, n)
            Else
                decPrecioVenta = 0
            End If

            strPrecioOtrosCostos = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_OtrCos", 0).Trim()
            If Not String.IsNullOrEmpty(strPrecioOtrosCostos) Then
                decPrecioOtrosCostos = Decimal.Parse(strPrecioOtrosCostos, n)
            Else
                decPrecioOtrosCostos = 0
            End If

            decPrecioVenta += decPrecioOtrosCostos

            strPrecioBonos = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_BonoDV", 0).Trim()
            If Not String.IsNullOrEmpty(strPrecioBonos) Then
                decPrecioBonos = Decimal.Parse(strPrecioBonos, n)
            Else
                decPrecioBonos = 0
            End If

            decPrecioVenta -= decPrecioBonos


            strPorcDesc = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Por_Desc", 0).Trim()

            If Not String.IsNullOrEmpty(strPorcDesc) Then
                decPorDescContrato = Decimal.Parse(strPorcDesc, n)
            ElseIf String.IsNullOrEmpty(strPorcDesc) Then
                decPorDescContrato = 0
            End If

            oMatrixAcc = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

            For i As Integer = 0 To oMatrixAcc.RowCount - 1

                strCantAccLinea = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Cant_Acc", i).Trim()
                If String.IsNullOrEmpty(strCantAccLinea) Then
                    intCantidadAccLinea = 0
                Else
                    intCantidadAccLinea = CInt(strCantAccLinea.Trim())
                End If

                strSubTotalAccs = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_SCGD_AccPrecio", i).Trim()
                If Not String.IsNullOrEmpty(strSubTotalAccs) Then
                    decTotalPrecioLinea = Decimal.Parse(strSubTotalAccs, n)
                End If

                decTotalPrecioLinea = decTotalPrecioLinea * intCantidadAccLinea

                strPorcDescuentoLinea = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Desc_Acc", i).Trim()
                If Not String.IsNullOrEmpty(strPorcDescuentoLinea) Then
                    decPorcDescuentoLinea = Decimal.Parse(strPorcDescuentoLinea, n)
                    decPorcDescuentoLinea = decPorcDescuentoLinea / 100
                Else
                    decPorcDescuentoLinea = 0
                End If

                decTotalAccesoriosSinDescLineal += decTotalPrecioLinea

                decDescuentoLinea = decTotalPrecioLinea * decPorcDescuentoLinea
                decTotalPrecioLinea -= decDescuentoLinea
                decSubTotalAccs += decTotalPrecioLinea
            Next

            If strGenFactAccesorios = "Y" Then

                decTotalCalc = decPrecioVenta
                blnAcc = False

            ElseIf Not strGenFactAccesorios = "Y" Then

                If strMultiplesFact = "Y" AndAlso oMatrizVeh.RowCount > 1 Then

                    decTotalCalc = decPrecioVenta + (decTotalAccesoriosSinDescLineal * oMatrizVeh.RowCount)
                    blnAcc = True

                ElseIf Not strMultiplesFact = "Y" OrElse (strMultiplesFact = "Y" AndAlso oMatrizVeh.RowCount = 1) Then

                    decTotalCalc = decPrecioVenta + decTotalAccesoriosSinDescLineal
                    blnAcc = True

                End If

            End If

            Call CalculaDescuentoGeneral("U_Por_Desc", decTotalCalc, "U_Nota_Cre", strManejoDescuentoFact, decPorDesc)

            Call CalcularImpuestoConDescuento(decPorDesc, True, blnAcc, decImpAccs, decImpVehs, strMultiplesFact, strGenFactAccesorios)

            SumaImpAccesorios(decImpVehs)

            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Imp", 0, decImpVehs.ToString(n))

            If Not strGenFactAccesorios = "Y" Then

                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Acc_Imp", 0, decImpAccs.ToString(n))

                strSubTotalAcc = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_AcSinDes", 0).Trim()
                If Not String.IsNullOrEmpty(strSubTotalAcc) Then
                    decSubTotalAcc = Decimal.Parse(strSubTotalAcc, n)
                Else
                    decSubTotalAcc = 0
                End If

                decTotalAccs = decSubTotalAcc + decImpAccs
                decTotalSinImp = decSubTotalAcc
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Ext_Adi", 0, decTotalAccs.ToString(n))

                If strMultiplesFact = "Y" AndAlso oMatrizVeh.RowCount > 1 Then

                    decTotalGeneralAccs = decTotalSinImp '* oMatrizVeh.RowCount

                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TotalAcc", 0, decTotalGeneralAccs.ToString(n))

                Else

                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TotalAcc", 0, decSubTotalAccs.ToString(n))

                End If

            End If

            decCalculo = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0), n)

            decCalculo += Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Imp", 0), n)

            If Not strGenFactAccesorios = "Y" Then

                decCalculo += Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_TotalAcc", 0), n)

            End If

            decCalculo += Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Ins", 0), n)

            decCalculo += Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Pre", 0), n)

            If Not strMultiplesFact = "Y" Then

                decCalculo += Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Otros_L", 0), n)

            End If

            If strManejoDescuentoFact = "Y" Then

                decCalculo -= Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Cre", 0), n)

            End If

            decCalculo -= Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_BonoDV", 0), n)

            decCalculo += Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_OtrCos", 0), n)

            decCalculoSinImpuestos = decCalculo - Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Imp", 0), n)

            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_AntImp", 0, decCalculoSinImpuestos.ToString(n))

            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_DocTotal", 0, decCalculo.ToString(n))

            If strGenFactAccesorios = "Y" Then

                decCalculo += Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_TotalAcc", 0), n)

            End If

            decCalculo -= Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deposito", 0), n)

            decCalculo -= Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Mon_Usa", 0), n)
            decCalculo -= Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ImpUsado", 0), n)
            decCalculo += Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deu_Usa", 0), n)

            If strMultiplesFact = "Y" Then

                decCalculo += Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Otros_L", 0), n)

            End If

            If Not strManejoDescuentoFact = "Y" Then

                decCalculo -= Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Cre", 0), n)

            End If

            decCalculo += Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Deb", 0), n)



            decCalculo -= Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Otros_C", 0), n)

            decCalculo -= Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pagos", 0), n)

            decCalculo += Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tot_Tram", 0), n)

            strTotalFinanciamientoExterno = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinanciaE", 0).ToString(n)
            decTotalFinanciamientoExterno = Utilitarios.ConvierteDecimal(strTotalFinanciamientoExterno, n)

            strTotalFinanciamientoPropio = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Financia", 0).ToString(n)
            decTotalfinanciamientoPropio += Utilitarios.ConvierteDecimal(strTotalFinanciamientoPropio, n)

            decCalculo -= decTotalfinanciamientoPropio
            decCalculo -= decTotalFinanciamientoExterno

            decTotalFinalFinan = decTotalfinanciamientoPropio + decTotalFinanciamientoExterno

            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_FinanciaT", 0, decTotalFinalFinan.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pag_ent", 0, decCalculo.ToString(n))

            RecalcularTotalesConsignado(oForm)

        End If

    End Sub

    Private Sub CalcularImpuestoConDescuento(ByVal decPorcDescuento As Decimal, ByVal blnVeh As Boolean, ByVal blnAcc As Boolean,
                                             Optional ByRef decImpTotalAcc As Decimal = 0, Optional ByRef decImpTotalVeh As Decimal = 0,
                                             Optional ByVal strMultiplesFact As String = "", Optional ByVal strGenFactAccesorios As String = "")

        Dim oMatrixVeh As SAPbouiCOM.Matrix
        Dim oMatrixAcc As SAPbouiCOM.Matrix
        Dim strPrecioTotalUnidad As String
        Dim decPrecioTotalUnidad As Decimal
        Dim strPrecioTotalAcc As String
        Dim decPrecioTotalAcc As Decimal
        Dim strImpuesto As String
        Dim strRate As String
        Dim decRate As Decimal = 0
        Dim decPrecioImp As Decimal
        Dim decDescuento As Decimal
        Dim decMontoBonos As Decimal
        Dim decMontoOtrosCostos As Decimal
        Dim dtFechaContrato As DateTime

        Try
            If Nothing <> oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0) Then
                dtFechaContrato = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0), "yyyyMMdd", Nothing)
            ElseIf Nothing <> oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0) Then
                dtFechaContrato = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)
            Else
                dtFechaContrato = DateTime.Now
            End If
            decPorcDescuento = decPorcDescuento / 100

            If blnVeh = True Then

                oMatrixVeh = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                For i As Integer = 0 To oMatrixVeh.RowCount - 1

                    strPrecioTotalUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Pre_Tot", i).Trim()

                    If Not String.IsNullOrEmpty(strPrecioTotalUnidad) Then
                        decPrecioTotalUnidad = Decimal.Parse(strPrecioTotalUnidad, n)
                    End If

                    decMontoBonos = ObtieneMonto(oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).Trim(),
                                                      "@SCGD_BONOXCONT", "U_Monto", "U_Unidad")

                    decPrecioTotalUnidad = decPrecioTotalUnidad - decMontoBonos

                    decMontoOtrosCostos = ObtieneMonto(oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).Trim(),
                                                      g_str_OTROCXCV, "U_Monto", "U_Unidad")

                    decPrecioTotalUnidad = decPrecioTotalUnidad + decMontoOtrosCostos

                    decDescuento = decPrecioTotalUnidad * decPorcDescuento

                    decPrecioTotalUnidad = decPrecioTotalUnidad - decDescuento

                    strImpuesto = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Impuesto", i).Trim()
                    If Not String.IsNullOrEmpty(strImpuesto) Then
                        decRate = Utilitarios.RetornaImpuestoVenta(strImpuesto, dtFechaContrato) / 100
                    Else
                        decRate = 0
                    End If

                    decPrecioImp = decPrecioTotalUnidad * decRate
                    decImpTotalVeh += decPrecioImp

                Next
                decImpTotalVeh += calculaImpuestosOtros(decRate, oForm)
            End If

            If blnAcc = True Then

                oMatrixAcc = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

                For i As Integer = 0 To oMatrixAcc.RowCount - 1

                    strPrecioTotalAcc = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_PrTo_Acc", i).Trim()
                    If Not String.IsNullOrEmpty(strPrecioTotalAcc) Then
                        decPrecioTotalAcc = Decimal.Parse(strPrecioTotalAcc, n)
                    End If

                    'strDescLineaAcc = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Desc_Acc", i).Trim()
                    'If Not String.IsNullOrEmpty(strDescLineaAcc) Then
                    '    decDescLineaAccPor = Decimal.Parse(strDescLineaAcc, n)
                    '    decDescLineaAccPor = decDescLineaAccPor / 100
                    'Else
                    '    decDescLineaAccPor = 0
                    'End If

                    'decDescLineaAcc = decPrecioTotalAcc * decDescLineaAccPor
                    'decDescuento = decPrecioTotalAcc * decPorcDescuento

                    decPrecioTotalAcc = decPrecioTotalAcc '- decDescuento - decDescLineaAcc

                    strImpuesto = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Imp_Acc", i).Trim()
                    If Not String.IsNullOrEmpty(strImpuesto) Then
                        decRate = Utilitarios.RetornaImpuestoVenta(strImpuesto, dtFechaContrato) / 100
                    Else
                        decRate = 0
                    End If

                    decPrecioImp = decPrecioTotalAcc * decRate
                    decImpTotalAcc += decPrecioImp

                Next

                If Not strGenFactAccesorios = "Y" And strMultiplesFact = "Y" Then

                    decImpTotalAcc = decImpTotalAcc * oMatrixVeh.RowCount

                ElseIf Not strGenFactAccesorios = "Y" And strMultiplesFact = "N" Then

                    decImpTotalAcc = decImpTotalAcc '* oMatrixVeh.RowCount

                End If

            End If

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Private Function ObtieneMonto(ByVal p_strUnidad As String, ByVal p_DataSource As String,
                                       ByVal p_strColMonto As String, ByVal p_strColUnidad As String) As Decimal
        Dim decMontoBonos As Decimal
        Dim decMontoBonosTotal As Decimal = 0
        Dim strMontoBonos As String

        For i As Integer = 0 To oForm.DataSources.DBDataSources.Item(p_DataSource).Size - 1
            decMontoBonos = 0
            strMontoBonos = oForm.DataSources.DBDataSources.Item(p_DataSource).GetValue(p_strColMonto, i)
            If p_strUnidad = oForm.DataSources.DBDataSources.Item(p_DataSource).GetValue(p_strColUnidad, i).Trim() Then
                If Not String.IsNullOrEmpty(strMontoBonos) Then
                    decMontoBonos = Decimal.Parse(strMontoBonos, n)
                End If
                decMontoBonosTotal += decMontoBonos
            End If
        Next
        Return decMontoBonosTotal

    End Function

    Public Sub CargarContrato(ByVal p_strItem As String, ByVal strFormID As String, Optional ByVal p_UsaEmpleado As Boolean = False, Optional ByVal p_EsTramite As Boolean = False, Optional ByVal p_esSeguroPV As Boolean = False)

        Dim oitem As SAPbouiCOM.Item
        Dim oedit As SAPbouiCOM.EditText

        Dim strIdVehiculo As String
        oForm = m_SBO_Application.Forms.Item(strFormID)

        If oForm IsNot Nothing Then

            oForm.Freeze(True)

            oForm.Mode = SAPbouiCOM.BoFormMode.fm_FIND_MODE
            oitem = oForm.Items.Item(mc_strNumContrato)
            oedit = CType(oitem.Specific, SAPbouiCOM.EditText)

            strIdVehiculo = p_strItem
            strIdVehiculo = strIdVehiculo.Trim

            oForm.Items.Item("txtNumCont").Specific.Value = strIdVehiculo

            If m_SBO_Application.Menus.Item("1281").Enabled Then m_SBO_Application.Menus.Item("1281").Activate()

            oForm.Items.Item("1").Click(SAPbouiCOM.BoCellClickType.ct_Regular)

            If p_UsaEmpleado And p_EsTramite Then
                Call oForm.EnableMenu("1281", False)
                Call oForm.EnableMenu("1282", False)
                Call oForm.EnableMenu("1291", False)
                Call oForm.EnableMenu("1288", False)
                Call oForm.EnableMenu("1289", False)
                Call oForm.EnableMenu("1290", False)
            Else
                Call oForm.EnableMenu("1281", True)
                Call oForm.EnableMenu("1282", True)
                Call oForm.EnableMenu("1291", True)
                Call oForm.EnableMenu("1288", True)
                Call oForm.EnableMenu("1289", True)
                Call oForm.EnableMenu("1290", True)
            End If

            SeguroPV = p_esSeguroPV

            Call ManejarEstados(oForm)
            ManejoEventosCombo(oForm, ContratoVentasCls.mc_strMarcaUS, oForm.UniqueID)

            oForm.Freeze(False)

        End If

    End Sub

    <System.CLSCompliant(False)> _
    Public Sub LostFocus(ByVal FormUID As String, ByVal pVal As SAPbouiCOM.ItemEvent, ByRef BubbleEvent As Boolean)

        If (pVal.ItemUID = "btnAprobar" Or pVal.ItemUID = "btnRechaza") _
                AndAlso Not pVal.BeforeAction _
                AndAlso (pVal.FormMode <> 3 AndAlso pVal.FormMode <> "0") Then

        End If
    End Sub

    Public Sub ManejadorEventoClick(ByRef pval As SAPbouiCOM.ItemEvent, ByVal FormUID As String, ByRef BubbleEvent As Boolean)

        Dim oForm As SAPbouiCOM.Form
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim strUnidad As String
        Dim intRegistoEliminar As Integer
        Dim strMarca As String
        Dim strEstilo As String
        Dim strMotor As String
        Dim strChasis As String
        Dim strAño As String
        Dim strPlaca As String
        Dim strColor As String
        Dim strTipo As String
        Dim strRTVMM As String
        Dim strRTVAA As String
        Dim strGravamen As String
        Dim strValor As String
        Dim strAjuste As String
        Dim strModelo As String
        Dim strTransmision As String
        Dim strPrecio As String
        Dim strImpuesto As String
        Dim strPagos As String
        Dim strDescuento As String
        Dim strGasLoc As String
        Dim strOtros As String
        Dim strFechaAvaluo As String
        Dim dtFechaAvaluo As Date
        Dim strDerCirc As String
        Dim dtDerCirc As Date
        Dim strFechaGrav As String
        Dim dtFechaGrav As Date
        Dim strDependeDataTable As String
        Dim strGuardaDataTable As String
        Dim strCombustible As String
        Dim strKilometraje As String
        Dim strCodClasificacion As String
        Dim strValorVenta As String
        Dim strCodeTrans As String
        Dim strCodeCombus As String
        Dim strCodeColor As String
        Dim strCodeEstilo As String
        Dim strCodeModelo As String
        Dim strCodeMarca As String
        Dim strCategoriaUsado As String
        'Dim strTipoContrato As String = String.Empty
        Dim strBono As String

        Dim oCombo As SAPbouiCOM.ComboBox
        Dim strKm_Venta As String
        Dim strCodPro As String
        Dim strNomPro As String
        Dim strDescMonto As String
        Dim strTotUsa As String

        Try

            oForm = m_SBO_Application.Forms.Item(FormUID)

            oForm.Freeze(True)

            If pval.ItemUID = "mtx_Usado" AndAlso pval.ActionSuccess Then

                oMatrix = DirectCast(oForm.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)

                Call LimpiarUsadoTemporal(oForm)

                intRegistoEliminar = oMatrix.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_RowOrder)

                If intRegistoEliminar <> -1 Then

                    strUnidad = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Cod_Unid", intRegistoEliminar - 1).Trim

                    If Not String.IsNullOrEmpty(strUnidad) Then

                        strMotor = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Motor", intRegistoEliminar - 1).Trim
                        strChasis = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_VIN", intRegistoEliminar - 1).Trim
                        strAño = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Anio", intRegistoEliminar - 1).Trim
                        strPlaca = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Placa", intRegistoEliminar - 1).Trim
                        strTipo = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Tipo", intRegistoEliminar - 1).Trim
                        strRTVMM = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_RTV_MM", intRegistoEliminar - 1).Trim
                        strRTVAA = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_RTV_AA", intRegistoEliminar - 1).Trim
                        strGravamen = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Gravamen", intRegistoEliminar - 1).Trim
                        strValor = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Val_Rec", intRegistoEliminar - 1).Trim
                        strAjuste = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Aj_Cos", intRegistoEliminar - 1).Trim
                        strCodClasificacion = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Cod_Clasif_Us", intRegistoEliminar - 1).Trim
                        strFechaAvaluo = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Fec_Av", intRegistoEliminar - 1).Trim
                        strValorVenta = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Val_Venta", intRegistoEliminar - 1).Trim
                        strKilometraje = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_KmUs", intRegistoEliminar - 1).Trim
                        strCombustible = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_CoUs", intRegistoEliminar - 1).Trim
                        strCodeTrans = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Cod_Trans_Us", intRegistoEliminar - 1).Trim
                        strCodeCombus = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Cod_Comb_Us", intRegistoEliminar - 1).Trim
                        strCodeMarca = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Cod_Marca_Us", intRegistoEliminar - 1).Trim
                        strCodeEstilo = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Cod_Estilo_Us", intRegistoEliminar - 1).Trim
                        strCodeModelo = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Cod_Mod_Us", intRegistoEliminar - 1).Trim
                        strCodeColor = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Cod_Col_Us", intRegistoEliminar - 1).Trim
                        strCategoriaUsado = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_CatUs", intRegistoEliminar - 1).Trim
                        'strTipoContrato = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_TipoCo", intRegistoEliminar - 1).Trim
                        strCodPro = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Cod_Prov", intRegistoEliminar - 1).ToString.Trim
                        strNomPro = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Nom_Prov", intRegistoEliminar - 1).ToString.Trim
                        strImpuesto = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_ImpUsado", intRegistoEliminar - 1).ToString.Trim
                        strTotUsa = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_TotalCImpuest", intRegistoEliminar - 1).ToString.Trim


                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_RTV_MM", 0, strRTVMM)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_RTV_AAAA", 0, strRTVAA)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Us", 0, strValor)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Val_Inv", 0, strAjuste)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Gravo", 0, strGravamen)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ValVeh_Us", 0, strValorVenta)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TranU", 0, strCodeTrans)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_KmU", 0, strKilometraje)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ModU", 0, strCodeModelo)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ComU", 0, strCodeCombus)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CatVeUs", 0, strCategoriaUsado)
                        'oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TipoCo", 0, strTipoContrato)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Cod_ProvUS", 0, strCodPro)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Nom_ProvUS", 0, strNomPro)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Unid_Us", 0, strUnidad)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Mot_Us", 0, strMotor)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_VIN_Us", 0, strChasis)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Anio_Us", 0, strAño)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Plac_Us", 0, strPlaca)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Impusa", 0, strImpuesto)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TImpusa", 0, strTotUsa)

                        If Not String.IsNullOrEmpty(strFechaAvaluo) Then
                            dtFechaAvaluo = Date.ParseExact(strFechaAvaluo, "yyyyMMdd", Nothing)
                            dtFechaAvaluo = New Date(dtFechaAvaluo.Year, dtFechaAvaluo.Month, dtFechaAvaluo.Day, 0, 0, 0)
                        End If

                        strDerCirc = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Der_Cir", intRegistoEliminar - 1).Trim
                        If Not String.IsNullOrEmpty(strDerCirc) Then
                            dtDerCirc = Date.ParseExact(strDerCirc, "yyyyMMdd", Nothing)
                            dtDerCirc = New Date(dtDerCirc.Year, dtDerCirc.Month, dtDerCirc.Day, 0, 0, 0)
                        End If

                        strFechaGrav = oForm.DataSources.DBDataSources.Item(strTablaUsaXContrato).GetValue("U_Gra_Fec", intRegistoEliminar - 1).Trim
                        If Not String.IsNullOrEmpty(strFechaGrav) Then
                            dtFechaGrav = Date.ParseExact(strFechaGrav, "yyyyMMdd", Nothing)
                            dtFechaGrav = New Date(dtFechaGrav.Year, dtFechaGrav.Month, dtFechaGrav.Day, 0, 0, 0)
                        End If

                        If Not String.IsNullOrEmpty(strCodeMarca) Then
                            oCombo = DirectCast(oForm.Items.Item("cboMarc_Us").Specific, SAPbouiCOM.ComboBox)
                            oCombo.Select(strCodeMarca, BoSearchKey.psk_ByValue)
                        End If

                        If Not String.IsNullOrEmpty(strCodeEstilo) Then
                            oCombo = DirectCast(oForm.Items.Item("cboEsti_Us").Specific, SAPbouiCOM.ComboBox)
                            oCombo.Select(strCodeEstilo, BoSearchKey.psk_ByValue)
                        End If

                        If Not String.IsNullOrEmpty(strCodeModelo) Then
                            oCombo = DirectCast(oForm.Items.Item("cboModU").Specific, SAPbouiCOM.ComboBox)
                            oCombo.Select(strCodeModelo, BoSearchKey.psk_ByValue)
                        End If

                        If Not String.IsNullOrEmpty(strCodeColor) Then
                            oCombo = DirectCast(oForm.Items.Item("cboCol_Us").Specific, SAPbouiCOM.ComboBox)
                            oCombo.Select(strCodeColor, BoSearchKey.psk_ByValue)
                        End If

                        If Not String.IsNullOrEmpty(strCodeTrans) Then
                            oCombo = DirectCast(oForm.Items.Item("cboTraU").Specific, SAPbouiCOM.ComboBox)
                            oCombo.Select(strCodeTrans, BoSearchKey.psk_ByValue)
                        End If

                        If Not String.IsNullOrEmpty(strCodeCombus) Then
                            oCombo = DirectCast(oForm.Items.Item("cboComU").Specific, SAPbouiCOM.ComboBox)
                            oCombo.Select(strCodeCombus, BoSearchKey.psk_ByValue)
                        End If

                        If Not String.IsNullOrEmpty(strTipo) Then
                            oCombo = DirectCast(oForm.Items.Item("cboTipo_Us").Specific, SAPbouiCOM.ComboBox)
                            oCombo.Select(strTipo, BoSearchKey.psk_ByDescription)
                        End If

                        If Not String.IsNullOrEmpty(strCodClasificacion) Then
                            oCombo = DirectCast(oForm.Items.Item("cboClasifU").Specific, SAPbouiCOM.ComboBox)
                            oCombo.Select(strCodClasificacion, BoSearchKey.psk_ByValue)
                        End If

                        If Not String.IsNullOrEmpty(strFechaAvaluo) Then
                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Aval_us", 0, dtFechaAvaluo.ToString("yyyyMMdd"))
                        End If

                        If Not String.IsNullOrEmpty(strDerCirc) Then
                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Der_Cir", 0, dtDerCirc.ToString("yyyyMMdd"))
                        End If

                        If Not String.IsNullOrEmpty(strFechaGrav) Then
                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Gra_Fec", 0, dtFechaGrav.ToString("yyyyMMdd"))
                        End If

                        If Not String.IsNullOrEmpty(strCategoriaUsado) Then
                            oCombo = DirectCast(oForm.Items.Item("cboCatUs").Specific, SAPbouiCOM.ComboBox)
                            oCombo.Select(strCategoriaUsado, BoSearchKey.psk_ByValue)
                        End If

                        'If Not String.IsNullOrEmpty(strTipoContrato) Then
                        '    oCombo = DirectCast(oForm.Items.Item("cboTipCo").Specific, SAPbouiCOM.ComboBox)
                        '    oCombo.Select(strTipoContrato, BoSearchKey.psk_ByValue)
                        'End If

                        oForm.Items.Item("btnEditUs").Enabled = True
                        oForm.Items.Item("btnAgregaU").Enabled = False
                        oForm.Items.Item("btnBuscaUs").Enabled = False


                        oForm.ActiveItem = "txtCl"

                        If String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Existe", intRegistoEliminar - 1)) Then
                            oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Existe", 0, "N")
                        End If

                        If oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Existe", intRegistoEliminar - 1) = "Y" And oDataTableConfiguracionesDMS.GetValue("U_ConCUCV", 0) = "Y" Then
                            oForm.Items.Item("txtUnid_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                        Else
                            oForm.Items.Item("txtUnid_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                        End If

                        oForm.Items.Item("txtUnid_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                        oForm.Items.Item("txtVIN_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)

                        If oDataTableConfiguracionesDMS.GetValue("U_SCGD_Pla", 0).ToString.Trim = "Y" Then
                            oForm.Items.Item("txtPlac_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                        End If

                        oForm.Items.Item("btnAgregaU").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                        oForm.Items.Item("btnEditUs").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                    End If
                End If
            End If

            If pval.ItemUID = "mtx_Vehi" AndAlso pval.ActionSuccess Then
                oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)
                Call LimpiarVehiculoTemporal(oForm)
                intRegistoEliminar = oMatrix.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_RowOrder)

                If intRegistoEliminar <> -1 Then
                    strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", intRegistoEliminar - 1).Trim

                    If Not String.IsNullOrEmpty(strUnidad) Then
                        strMarca = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Des_Marc", intRegistoEliminar - 1).Trim
                        strEstilo = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Des_Esti", intRegistoEliminar - 1).Trim
                        strModelo = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Des_Mode", intRegistoEliminar - 1).Trim
                        strColor = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Des_Col", intRegistoEliminar - 1).Trim
                        strMotor = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Num_Mot", intRegistoEliminar - 1).Trim
                        strChasis = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Num_VIN", intRegistoEliminar - 1).Trim
                        strAño = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Ano_Vehi", intRegistoEliminar - 1).Trim
                        strPlaca = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Num_Plac", intRegistoEliminar - 1).Trim
                        strTransmision = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Transmi", intRegistoEliminar - 1).Trim
                        strPrecio = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Pre_Vta", intRegistoEliminar - 1).Trim
                        strImpuesto = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Impuesto", intRegistoEliminar - 1).Trim
                        strDescuento = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Desc_Veh", intRegistoEliminar - 1).Trim
                        strPagos = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Pagos", intRegistoEliminar - 1).Trim
                        strGasLoc = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Gas_Loc", intRegistoEliminar - 1).Trim
                        strOtros = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Otro_Gas", intRegistoEliminar - 1).Trim
                        strBono = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Bono", intRegistoEliminar - 1).Trim
                        strKm_Venta = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Km_Venta", intRegistoEliminar - 1).Trim
                        strDescMonto = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_MDesc", intRegistoEliminar - 1).Trim

                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Cod_Unid", 0, strUnidad)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Marc", 0, strMarca)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Esti", 0, strEstilo)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Mode", 0, strModelo)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Col", 0, strColor)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Num_Mot", 0, strMotor)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Num_VIN", 0, strChasis)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Ano_Vehi", 0, strAño)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Num_Plac", 0, strPlaca)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Transmis", 0, strTransmision)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Vh", 0, strPrecio)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Imp_Vh", 0, strImpuesto)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Por_Temp", 0, strDescuento)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pago_Vh", 0, strPagos)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_GL_Temp", 0, strGasLoc)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_OG_Temp", 0, strOtros)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_BonoVV", 0, strBono)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Km_Venta", 0, strKm_Venta)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_DescUni", 0, strDescMonto)

                        oForm.Items.Item("btnAgreVeh").Enabled = False
                        oForm.Items.Item("btnActVeh").Enabled = True

                        'Diego Herrera - 15/06/2012: Quitar de Data Table de gastos de unidad las lineas dependientes
                        If oDataTableGastosUnidad.Rows.Count > 0 Then
                            For i As Integer = oDataTableGastosUnidad.Rows.Count - 1 To 0 Step -1
                                strDependeDataTable = oDataTableGastosUnidad.GetValue("depende", i)
                                strGuardaDataTable = oDataTableGastosUnidad.GetValue("guarda", i)

                                If strDependeDataTable = "Y" AndAlso Not strGuardaDataTable = "Y" Then
                                    oDataTableGastosUnidad.Rows.Remove(i)
                                End If
                            Next
                        End If
                        oForm.Items.Item("txtKmVenta").Enabled = EnableKmUni
                    End If
                End If
            End If

            'If (pval.ItemUID = "chkAuto" Or pval.ItemUID = "chkManu" Or pval.ItemUID = "chkSinCo") AndAlso pval.ActionSuccess Then
            '    ManejadorChecksBoxConsignado(pval.ItemUID, oForm)
            'End If

            oForm.Freeze(False)
        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Public Sub ManejadorEventosMenusBefore(ByVal pval As SAPbouiCOM.MenuEvent, ByVal oForm As SAPbouiCOM.Form, _
                                                 ByRef BubbleEvent As Boolean)

        If pval.BeforeAction = True AndAlso oForm.Mode <> SAPbouiCOM.BoFormMode.fm_FIND_MODE AndAlso oForm.Mode <> SAPbouiCOM.BoFormMode.fm_OK_MODE AndAlso oForm.Mode <> SAPbouiCOM.BoFormMode.fm_ADD_MODE Then
            ManejoUnidadesEliminadas(BubbleEvent)
        End If

        oForm.Items.Item("txtUnid_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
        oForm.Items.Item("txtVIN_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
        oForm.Items.Item("txtPlac_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)

    End Sub

    Public Sub ManejadorEventoMenuNuevo(ByVal pval As SAPbouiCOM.MenuEvent, ByVal oForm As SAPbouiCOM.Form)
        Dim strMoPreVta As String
        Dim strGeneraFacturaConsignado As String = String.Empty

        Try
            strMoPreVta = oDataTableConfiguracionesDMS.GetValue("U_MoPreVta", 0).ToString().Trim()

            If strMoPreVta = "Y" Then
                oForm.Items.Item("txtPrecioV").SetAutoManagedAttribute(BoAutoManagedAttr.ama_Editable, 11, BoModeVisualBehavior.mvb_True)
            Else
                oForm.Items.Item("txtPrecioV").SetAutoManagedAttribute(BoAutoManagedAttr.ama_Editable, 11, BoModeVisualBehavior.mvb_False)
            End If

            oForm.Items.Item("txtUnid_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            oForm.Items.Item("txtVIN_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            oForm.Items.Item("txtPlac_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)

            oForm.Items.Item("btnAprobar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            oForm.Items.Item("btnRechaza").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)

            strGeneraFacturaConsignado = oDataTableConfiguracionesDMS.GetValue("U_GenFacCns", 0).ToString().Trim()
            If strGeneraFacturaConsignado.ToUpper() = "Y" Then
                HabilitarDeshabilitarCtrlsConsignado(oForm, True)
            End If
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Public Sub ManejadorEventoMenuCancelar(ByVal pval As SAPbouiCOM.MenuEvent, ByVal oForm As SAPbouiCOM.Form)

        Dim strIDContrato As String
        Dim strCliente As String
        Dim strVendedor As String
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim strUnidad As String
        Dim strDispUnidad As String
        Dim strEstadoReservado As String
        Dim strEstadoDisponible As String
        Dim strIDVehiculo As String
        Dim oCompanyService As SAPbobsCOM.CompanyService
        Dim oGeneralService As SAPbobsCOM.GeneralService
        Dim oGeneralData As SAPbobsCOM.GeneralData
        Dim oGeneralParams As SAPbobsCOM.GeneralDataParams
        Dim strNombreVendedor As String
        Dim strSucursal As String
        Dim strCSucu As String

        'sucursal
        strSucursal = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Sucu", 0).Trim
        strCSucu = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CSucu", 0).Trim
        strIDContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0).Trim
        strCliente = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardName", 0).Trim
        strVendedor = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SlpCode", 0).Trim
        strNombreVendedor = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SlpName", 0).Trim

        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Estado", 0, "0")
        g_blnEventoActualizarAfecta = False

        '*******************************
        Dim strListaUsuarios As New List(Of String)
        strListaUsuarios = GeneraListaUsuariosMensajes(strCSucu, 0, String.Empty)
        '********************************

        oForm.Mode = SAPbouiCOM.BoFormMode.fm_UPDATE_MODE
        oForm.Items.Item("1").Click(SAPbouiCOM.BoCellClickType.ct_Regular)
        Call EnviarMensajesAprobacion(0, False, strIDContrato, strCliente, strVendedor, strNombreVendedor, strListaUsuarios, True)
        strEstadoReservado = oDataTableConfiguracionesDMS.GetValue("U_Disp_Res", 0)
        strEstadoDisponible = oDataTableConfiguracionesDMS.GetValue("U_Disp_R", 0)
        oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

        If oMatrix.RowCount > 0 Then
            strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim

            If Not String.IsNullOrEmpty(strUnidad) Then
                For i As Integer = 0 To oMatrix.RowCount - 1
                    strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).Trim

                    strDispUnidad = Utilitarios.EjecutarConsulta("Select U_Dispo from [@SCGD_VEHICULO] with (nolock) where U_Cod_Unid='" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                    If strDispUnidad = strEstadoReservado Then
                        strIDVehiculo = Utilitarios.EjecutarConsulta("Select Code from [@SCGD_VEHICULO] with (nolock) where U_Cod_Unid='" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        oCompanyService = m_oCompany.GetCompanyService()
                        oGeneralService = oCompanyService.GetGeneralService("SCGD_VEH")
                        oGeneralParams = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
                        oGeneralParams.SetProperty("Code", strIDVehiculo)
                        oGeneralData = oGeneralService.GetByParams(oGeneralParams)
                        oGeneralData.SetProperty("U_Dispo", strEstadoDisponible)
                        oGeneralData.SetProperty("U_ContratoV", String.Empty)
                        oGeneralData.SetProperty("U_VENRES", "")
                        oGeneralService.Update(oGeneralData)
                    End If
                Next
            End If
        End If
        Call AgregaLineaHistorial(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0), 0, CInt(oDataTableEstadosLimites.GetValue("Inferior", 0)))
        g_intCantUnidadesEli = 0
        g_blnEventoCerrarAfecta = False
        oForm.Close()
        g_blnEventoCerrarAfecta = True
        g_blnEventoActualizarAfecta = True
    End Sub

    Public Sub ManejadorEventoFormClose(ByRef pval As SAPbouiCOM.ItemEvent, ByVal FormUID As String, ByRef BubbleEvent As Boolean)
        If g_blnEventoCerrarAfecta = True Then
            Dim oForm As Form
            oForm = m_SBO_Application.Forms.Item(FormUID)

            If pval.BeforeAction = True AndAlso oForm.Mode <> SAPbouiCOM.BoFormMode.fm_FIND_MODE AndAlso oForm.Mode <> SAPbouiCOM.BoFormMode.fm_OK_MODE AndAlso oForm.Mode <> SAPbouiCOM.BoFormMode.fm_ADD_MODE Then
                ManejoUnidadesEliminadas(BubbleEvent)
            End If
        End If
        blnDibuja = False
        If CargaMasiva Then
            BubbleEvent = False
        End If
    End Sub

    Private Sub ManejoUnidadesEliminadas(ByRef BubbleEvent As Boolean)

        Dim strDispUnidad As String
        Dim strEstadoDisponible As String
        Dim oCompanyService As CompanyService
        Dim oGeneralService As GeneralService
        Dim oGeneralParams As GeneralDataParams
        Dim strIDVehiculo As String
        Dim oGeneralData As GeneralData
        Dim strEstadoReservado As String
        Dim strEmpleado As String

        If m_SBO_Application.MessageBox(My.Resources.Resource.PreguntaContinuarSinGuardar, 2, My.Resources.Resource.Si, My.Resources.Resource.No) = 1 Then

            strEstadoReservado = oDataTableConfiguracionesDMS.GetValue("U_Disp_Res", 0)
            strEstadoDisponible = oDataTableConfiguracionesDMS.GetValue("U_Disp_R", 0)

            strEmpleado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SlpName", 0).Trim

            For i As Integer = 0 To g_intCantUnidadesEli - 1

                strDispUnidad = Utilitarios.EjecutarConsulta("Select U_Dispo from [@SCGD_VEHICULO] with (nolock) where U_Cod_Unid='" & g_strUnidadEliminada(i) & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                If strDispUnidad = strEstadoDisponible Then

                    strIDVehiculo = Utilitarios.EjecutarConsulta("Select Code from [@SCGD_VEHICULO] with (nolock) where U_Cod_Unid='" & g_strUnidadEliminada(i) & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                    oCompanyService = m_oCompany.GetCompanyService()
                    oGeneralService = oCompanyService.GetGeneralService("SCGD_VEH")
                    oGeneralParams = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
                    oGeneralParams.SetProperty("Code", strIDVehiculo)
                    oGeneralData = oGeneralService.GetByParams(oGeneralParams)
                    oGeneralData.SetProperty("U_Dispo", strEstadoReservado)
                    oGeneralData.SetProperty("U_ContratoV", oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0).Trim())
                    oGeneralData.SetProperty("U_VENRES", strEmpleado)
                    oGeneralService.Update(oGeneralData)

                End If

            Next
            g_intCantUnidadesEli = 0
        Else
            BubbleEvent = False
        End If

    End Sub
    ''' <summary>
    ''' Metodo que cambia el codigo de unidad de las unidades usadas cuando se usa un prefijo
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub cambiarCodUnidadUsado()

        Try
            Dim oMatriz As SAPbouiCOM.Matrix
            Dim strCodUnid As String
            Dim intExisteUnidad As Integer
            Dim count As Integer
            Dim strCodUnidUsada As String

            oMatriz = DirectCast(oForm.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)

            For index As Integer = 0 To oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").Size - 1

                strCodUnidUsada = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", index).Trim

                If Not String.IsNullOrEmpty(strCodUnidUsada) Then
                    Do
                        strCodUnid = GenerarNoUnidadUsado(oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim, count)
                        intExisteUnidad = ValidaExisteCodUnidad(strCodUnid, True, oForm)
                        If intExisteUnidad = 0 Then
                            oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Unid", index, strCodUnid)
                        End If
                        count += 1

                    Loop While intExisteUnidad > 0
                End If
            Next

            oMatriz.LoadFromDataSource()

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    <System.CLSCompliant(False)> _
    Public Sub ManejadorEventoItemPress(ByRef pval As SAPbouiCOM.ItemEvent, _
                                                 ByVal FormUID As String, _
                                                 ByRef BubbleEvent As Boolean)
        Dim oForm As SAPbouiCOM.Form
        Dim oCombo As SAPbouiCOM.ComboBox
        Dim intEstado As Integer
        Dim blnAprobar As Boolean
        Dim strIDContrato As String
        Dim strCliente As String
        Dim strVendedor As String
        Dim strFoo As String
        Dim oEditText As SAPbouiCOM.EditText
        Dim strPlacaUsado As String
        Dim strVINUsado As String
        Dim strMonedaClienteFactura As String
        Dim strMonedaDeudorUsado As String
        Dim strMoneda As String
        Dim strFechaContrato As String
        Dim dtFechaContrato As Date
        Dim oMatrixUsado As SAPbouiCOM.Matrix
        Dim strUnidadUsado As String
        Dim strMonedaLocal As String

        Dim dtTablaTiposInventarios As System.Data.DataTable

        Dim oEditUsuario As SAPbouiCOM.EditText
        Dim oEditFecha As SAPbouiCOM.EditText
        Dim oEditHora As SAPbouiCOM.EditText
        Dim oEditComentarios As SAPbouiCOM.EditText
        Dim oEditNivel As SAPbouiCOM.EditText
        Dim oEditNivCode As SAPbouiCOM.EditText
        Dim blnResultadoFormalizacion As Boolean = True

        Try
            oForm = m_SBO_Application.Forms.Item(FormUID)

            If oForm IsNot Nothing Then

                If (pval.ItemUID = "btnFactura") AndAlso pval.BeforeAction AndAlso oForm.Items.Item("btnFactura").Enabled = True Then
                    Dim strItemCodeVehiculo As String
                    Dim strTipoVehiculoInventario As String
                    Dim strUnidadInventario As String
                    Dim strImpVeh As String
                    Dim strImpAcc As String
                    Dim strTipoCosteo As String
                    Dim strValidaFactCosteo As String
                    Dim strMultiplesFact As String
                    Dim strDescuentoFact As String
                    Dim strUsaRAMV As String
                    Dim strRamvValor As String
                    Dim blnUtilizaCosteoAccesorios As String
                    Dim strFechaContabilizacion As String
                    Dim strGeneraSalida As String

                    'datatable para cargar la tabla TipoVehiculo con los inventarios para la venta
                    dtTablaTiposInventarios = New System.Data.DataTable

                    dtTablaTiposInventarios = Utilitarios.EjecutarConsultaDataTable("SELECT Code, Name, U_InvVenta From dbo.[@SCGD_TIPOVEHICULO] with(nolock)", m_oCompany.CompanyDB, m_oCompany.Server)
                    Dim oMatrix As SAPbouiCOM.Matrix

                    If oForm.Mode = BoFormMode.fm_EDIT_MODE Or oForm.Mode = BoFormMode.fm_UPDATE_MODE Then
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorModoContratoFacturar, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        BubbleEvent = False
                        Exit Sub
                    End If

                    'valida que no se haya facturado un CV desde otra ventana
                    VerificaNivelAprobacionContrato(FormUID, BubbleEvent)

                    strFechaContabilizacion = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0).Trim

                    If String.IsNullOrEmpty(strFechaContabilizacion) Then
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorFechaContabilizacion, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        BubbleEvent = False
                        Exit Sub
                    End If

                    blnUtilizaCosteoAccesorios = oDataTableConfiguracionesDMS.GetValue("U_UsaAxC", 0)
                    strValidaFactCosteo = oDataTableConfiguracionesDMS.GetValue("U_Perm_Fac", 0)
                    strUsaRAMV = oDataTableConfiguracionesDMS.GetValue("U_Ramv", 0)
                    strGeneraSalida = oDataTableConfiguracionesDMS.GetValue("U_GeSalAut", 0)
                    strMultiplesFact = oDataTableConfiguracionesDMS.GetValue("U_Mul_Fac", 0)
                    strDescuentoFact = oDataTableConfiguracionesDMS.GetValue("U_Desc_Fac", 0)

                    oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                    If oMatrix.RowCount > 0 Then
                        strUnidadInventario = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim
                        If oMatrix.RowCount = 1 Then
                            If String.IsNullOrEmpty(strUnidadInventario) Then
                                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorUnidades, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                BubbleEvent = False
                            End If
                        End If

                        If Not String.IsNullOrEmpty(strUnidadInventario) Then
                            For i As Integer = 0 To oMatrix.RowCount - 1

                                strUnidadInventario = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).Trim

                                strTipoVehiculoInventario = Utilitarios.EjecutarConsulta(String.Format("Select U_Tipo from [@SCGD_VEHICULO] with (nolock) where U_Cod_Unid = '{0}'", strUnidadInventario.Trim), m_oCompany.CompanyDB, m_oCompany.Server)
                                If String.IsNullOrEmpty(strTipoVehiculoInventario) Then
                                    strTipoVehiculoInventario = Utilitarios.EjecutarConsulta(String.Format("Select U_Tipo_Ven from [@SCGD_VEHICULO] with (nolock) where U_Cod_Unid = '{0}'", strUnidadInventario.Trim), m_oCompany.CompanyDB, m_oCompany.Server)
                                End If

                                If strValidaFactCosteo = "Y" Then

                                    m_strMonedaSistema = m_objBLSBO.RetornarMonedaSistema()
                                    m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()

                                    strTipoCosteo = Utilitarios.EjecutarConsulta("Select U_TIPINV from [@SCGD_VEHICULO] with (nolock) where U_Cod_Unid = '" & strUnidadInventario & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                                    If strTipoCosteo = "S" OrElse Utilitarios.ConsultaCosteos(strUnidadInventario, m_oCompany.CompanyDB, m_oCompany.Server, m_strMonedaSistema, m_strMonedaLocal, blnUtilizaCosteoAccesorios) = True Then
                                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorFactCosteo, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                        BubbleEvent = False
                                        Exit Sub
                                    End If

                                    'If Not ConsultaVehiculoEnInventario(strUnidadInventario) Then
                                    '    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorFactCosteo, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    '    BubbleEvent = False
                                    '    Exit Sub
                                    'End If
                                End If

                                

                                strImpVeh = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Impuesto", i).Trim

                                If String.IsNullOrEmpty(strImpVeh) Then
                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ParaLaUnidad + strUnidadInventario + My.Resources.Resource.ErrorImpuestoCV, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                    Exit Sub
                                End If

                                If dtTablaTiposInventarios.Rows.Count > 0 Then
                                    Dim drw As System.Data.DataRow()
                                    drw = dtTablaTiposInventarios.Select("Code = '" & strTipoVehiculoInventario & "'")

                                    For Each row As DataRow In drw
                                        If Not String.IsNullOrEmpty(row.Item("U_InvVenta").ToString()) Then
                                            If row.Item("U_InvVenta").ToString() = "N" Then
                                                m_SBO_Application.SetStatusBarMessage(String.Format(My.Resources.Resource.ErrorTipoInventarioVenta, row.Item("Name").ToString(), strUnidadInventario))
                                                BubbleEvent = False
                                                Exit Sub
                                            End If
                                        End If
                                    Next
                                End If

                                objConfiguracionGeneral = Nothing
                                objConfiguracionGeneral = New SCGDataAccess.ConfiguracionesGeneralesAddon(strTipoVehiculoInventario, m_cn_Coneccion, BubbleEvent)
                                strItemCodeVehiculo = objConfiguracionGeneral.LineasFactura(ConfiguracionesGeneralesAddon.scgItemsFactura.PrecioVehículo)

                                If String.IsNullOrEmpty(strItemCodeVehiculo) Then
                                    m_SBO_Application.StatusBar.SetText("Ítem Venta no definido para este documento", SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                End If

                                If strUsaRAMV = "Y" Then
                                    strRamvValor = Utilitarios.EjecutarConsulta("SELECT U_Ramv from [@SCGD_VEhiculo] with (nolock) where U_Cod_Unid = '" & strUnidadInventario.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                    If String.IsNullOrEmpty(strRamvValor) Then
                                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.LaUnidad & strUnidadInventario.Trim() & My.Resources.Resource.MensajeContratoValorRamv, BoMessageTime.bmt_Short, BoStatusBarMessageType.smt_Error)
                                        BubbleEvent = False
                                    End If
                                End If

                                If Not String.IsNullOrEmpty(strItemCodeVehiculo) Then

                                    Dim decPrecioVehiculo As Decimal
                                    Dim decGastosPrenda As Decimal
                                    Dim decGastosInscripcion As Decimal

                                    Dim intItemCodeInscripcion As Integer
                                    Dim intItemCodePrenda As Integer

                                    decPrecioVehiculo = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0), n)
                                    decGastosPrenda = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Pre", 0), n)
                                    decGastosInscripcion = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Ins", 0), n)

                                    If decPrecioVehiculo > 0 Then
                                        If decGastosPrenda > 0 Then
                                            intItemCodeInscripcion = objConfiguracionGeneral.GastosAdicionales(SCGDataAccess.ConfiguracionesGeneralesAddon.scgItemsFactura.gastosIncripcion)
                                            If intItemCodeInscripcion = 0 Then
                                                m_SBO_Application.StatusBar.SetText("Gasto Adicional de Inscripción No Definido", SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                                BubbleEvent = False
                                            End If
                                        End If

                                        If decGastosInscripcion > 0 Then
                                            intItemCodePrenda = objConfiguracionGeneral.GastosAdicionales(SCGDataAccess.ConfiguracionesGeneralesAddon.scgItemsFactura.GastosPrenda)
                                            If intItemCodePrenda = 0 Then
                                                m_SBO_Application.StatusBar.SetText("Gasto Adicional de Prenda No Definido", SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                                BubbleEvent = False
                                            End If
                                        End If

                                    End If

                                End If

                                If strGeneraSalida = "Y" Then

                                    Dim strCuentaInventario As String
                                    Dim strCuentaCostos As String

                                    strCuentaInventario = objConfiguracionGeneral.CuentaStock(strTipoVehiculoInventario)
                                    strCuentaCostos = objConfiguracionGeneral.CuentaCosto(strTipoVehiculoInventario)

                                    If String.IsNullOrEmpty(strCuentaInventario) Or String.IsNullOrEmpty(strCuentaCostos) Then
                                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCuentasInventarioCostos, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                        BubbleEvent = False
                                    End If

                                End If

                            Next i

                            If strMultiplesFact = "Y" Then

                                Dim strGastosInscripcion As String
                                Dim decGastosInscripcion As Decimal
                                Dim strGastosPrenda As String
                                Dim decGastosPrenda As Decimal
                                Dim oMatrixGastos As SAPbouiCOM.Matrix
                                Dim strMontoGasto As String
                                Dim decMontoGasto As Decimal
                                Dim blnLineasGasto As Boolean = False
                                Dim blnTieneGastos As Boolean = False
                                Dim strCodGasto As String
                                Dim strTipoGasto As String

                                strGastosInscripcion = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Ins", 0)
                                strGastosInscripcion = strGastosInscripcion.Trim()
                                If Not String.IsNullOrEmpty(strGastosInscripcion) Then
                                    decGastosInscripcion = Decimal.Parse(strGastosInscripcion, n)
                                Else
                                    decGastosInscripcion = 0
                                End If
                                strGastosPrenda = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Pre", 0)
                                strGastosPrenda = strGastosPrenda.Trim()
                                If Not String.IsNullOrEmpty(strGastosPrenda) Then
                                    decGastosPrenda = Decimal.Parse(strGastosPrenda, n)
                                Else
                                    decGastosPrenda = 0
                                End If

                                If decGastosInscripcion > 0 OrElse decGastosPrenda > 0 Then
                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorGastosMultiplesFact, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                    Exit Sub
                                End If

                                oMatrixGastos = DirectCast(oForm.Items.Item("mtx_1").Specific, SAPbouiCOM.Matrix)

                                For i As Integer = 0 To oMatrixGastos.RowCount - 1

                                    strMontoGasto = oForm.DataSources.DBDataSources.Item("@SCGD_LINEASSUM").GetValue("U_Monto", i).Trim

                                    If Not String.IsNullOrEmpty(strMontoGasto) Then

                                        decMontoGasto = Decimal.Parse(strMontoGasto, n)

                                        If decMontoGasto > 0 Then

                                            blnTieneGastos = True

                                            strCodGasto = oForm.DataSources.DBDataSources.Item("@SCGD_LINEASSUM").GetValue("U_Cod_Item", i)
                                            strCodGasto = strCodGasto.Trim()

                                            strTipoGasto = Utilitarios.EjecutarConsulta("Select U_Tipo From [@SCGD_CONFLINEASSUM] with (nolock) where Code = '" & strCodGasto & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                                            If strTipoGasto = "1" Then

                                                blnLineasGasto = True

                                                Exit For

                                            End If

                                        End If

                                    End If

                                Next

                                If blnTieneGastos = True AndAlso blnLineasGasto = False Then

                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorLineasGastos, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                    Exit Sub

                                End If

                            End If

                            oMatrix = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

                            If oMatrix.RowCount > 0 Then
                                Dim strAcc As String = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Acc", 0)
                                strAcc = strAcc.Trim()
                                If Not String.IsNullOrEmpty(strAcc) Then
                                    For i As Integer = 0 To oMatrix.RowCount - 1
                                        strImpAcc = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Imp_Acc", i)
                                        strImpAcc = strImpAcc.Trim()
                                        If String.IsNullOrEmpty(strImpAcc) Then
                                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ParaElAccesorio + strAcc + My.Resources.Resource.ErrorImpuestoCV, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                            BubbleEvent = False
                                            Exit Sub
                                        End If
                                    Next
                                End If
                            End If
                        End If
                    ElseIf oMatrix.RowCount = 0 Then

                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorUnidades, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        BubbleEvent = False

                    End If

                    oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                    oMatrixUsado = DirectCast(oForm.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)

                    Dim strAjusteCosto As String
                    Dim decAjusteCosto As Decimal
                    Dim decTotalAjuste As Decimal

                    For i As Integer = 0 To oMatrixUsado.RowCount - 1

                        strAjusteCosto = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Aj_Cos", i).Trim

                        If Not String.IsNullOrEmpty(strAjusteCosto) Then
                            decAjusteCosto = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Aj_Cos", i), n)
                        Else
                            decAjusteCosto = 0
                        End If

                        decTotalAjuste += decAjusteCosto

                    Next

                    If decTotalAjuste > 0 Then

                        If oMatrix.RowCount > 1 Or oMatrixUsado.RowCount > 1 Then

                            If m_SBO_Application.MessageBox(My.Resources.Resource.PreguntaAjusteCosto, 2, My.Resources.Resource.Si, My.Resources.Resource.No) = 2 Then
                                BubbleEvent = False
                            End If

                        End If

                    End If

                    If oMatrixUsado.RowCount > 0 Then

                        strUnidadUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", 0).Trim

                        If Not String.IsNullOrEmpty(strUnidadUsado) Then

                            If Not String.IsNullOrEmpty(strUnidadUsado) Then

                                Dim strTipoRecibido As String

                                strTipoRecibido = objConfiguracionGeneral.InventarioVehiculoRecibido

                                Dim strCuentaTransito As String
                                Dim strCuentaInventario As String
                                Dim strTipoVehiculoUsado As String
                                Dim decMontoUsado As Decimal

                                For i As Integer = 0 To oMatrixUsado.RowCount - 1

                                    strTipoVehiculoUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Tipo", i).Trim

                                    strTipoVehiculoUsado = Utilitarios.EjecutarConsulta("Select Code From [@SCGD_TIPOVEHICULO] with (nolock) where Name = '" & strTipoVehiculoUsado & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                    If String.IsNullOrEmpty(strTipoVehiculoUsado) Then
                                        strTipoVehiculoUsado = strTipoRecibido
                                    End If

                                    strCuentaTransito = objConfiguracionGeneral.CuentaInventarioTransito(strTipoVehiculoUsado)
                                    strCuentaInventario = objConfiguracionGeneral.CuentaStock(strTipoVehiculoUsado)

                                    If String.IsNullOrEmpty(strCuentaTransito) Or String.IsNullOrEmpty(strCuentaInventario) Then
                                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCuentasTransitoInventario, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                        BubbleEvent = False
                                    End If

                                    decMontoUsado = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Val_Rec", i), n)

                                    If decMontoUsado <= 0 Then

                                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorMontoUsado, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                        BubbleEvent = False

                                    End If

                                Next

                            End If

                        End If

                    End If

                    Dim strUnidadDoc As String
                    Dim strTipoUniDoc As String
                    Dim strPrima As String
                    Dim decPrima As Decimal = 0
                    Dim strCuentaPrima As String
                    Dim strDescuento As String
                    Dim decDescuento As Decimal = 0
                    Dim strCuentaNotaCredDesc As String
                    Dim strImpNotaCredDesc As String
                    Dim strMontoUsado As String
                    Dim decUsado As Decimal = 0
                    Dim strImpNotaCredUsado As String
                    Dim strDeuda As String
                    Dim decDeuda As Decimal = 0
                    Dim strCuentaFactProvDeuda As String
                    Dim strImpFactProvDeuda As String
                    Dim strDebito As String
                    Dim decDebito As Decimal = 0
                    Dim strCuentaNotaDeb As String
                    Dim strImpNotaDeb As String
                    Dim strMontoTramites As String
                    Dim decMontoTramites As Decimal = 0
                    Dim strBodegaTram As String

                    oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                    If oMatrix.RowCount > 0 Then

                        strUnidadDoc = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim

                        If Not String.IsNullOrEmpty(strUnidadDoc) Then

                            strTipoUniDoc = Utilitarios.EjecutarConsulta("Select U_Tipo from dbo.[@SCGD_VEHICULO] with (nolock) where U_Cod_Unid = '" & strUnidadDoc & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                            objConfiguracionGeneral = Nothing
                            objConfiguracionGeneral = New SCGDataAccess.ConfiguracionesGeneralesAddon(strTipoUniDoc, m_cn_Coneccion, BubbleEvent)

                            strPrima = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deposito", 0).Trim

                            If Not String.IsNullOrEmpty(strPrima) Then
                                decPrima = Decimal.Parse(strPrima, n)
                            End If
                            If decPrima > 0 Then

                                Dim strGereneraPagoPrima As String = oDataTableConfiguracionesDMS.GetValue("U_Pag_Prim", 0)

                                If (String.Equals(strGereneraPagoPrima, "Y")) Then

                                    strCuentaPrima = objConfiguracionGeneral.CuentasAdicionales(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.PrimaVenta)
                                    If String.IsNullOrEmpty(strCuentaPrima) Then
                                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCuentaPrima, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                        BubbleEvent = False
                                        Exit Sub
                                    End If

                                End If


                            End If

                            If Not strDescuentoFact = "Y" Then

                                strDescuento = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Cre", 0)
                                strDescuento = strDescuento.Trim()
                                If Not String.IsNullOrEmpty(strDescuento) Then
                                    decDescuento = Decimal.Parse(strDescuento, n)
                                End If
                                If decDescuento > 0 Then
                                    strImpNotaCredDesc = objConfiguracionGeneral.Impuesto(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.NotasCreditoDescuentos)
                                    strCuentaNotaCredDesc = objConfiguracionGeneral.CuentasAdicionales(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.NotasCreditoDescuentos)
                                    If String.IsNullOrEmpty(strCuentaNotaCredDesc) OrElse String.IsNullOrEmpty(strImpNotaCredDesc) Then
                                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCuentaImpNotaCredDesc, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                        BubbleEvent = False
                                        Exit Sub
                                    End If
                                End If

                            End If

                            strMontoUsado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Mon_Usa", 0).Trim
                            If Not String.IsNullOrEmpty(strMontoUsado) Then
                                decUsado = Decimal.Parse(strMontoUsado, n)
                            End If
                            If decUsado > 0 Then
                                strImpNotaCredUsado = objConfiguracionGeneral.Impuesto(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.NotasCreditoUsados)
                                If String.IsNullOrEmpty(strImpNotaCredUsado) Then
                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorImpNotaCredUsado, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                    Exit Sub
                                End If
                            End If

                            'Valida cuenta e impuesto para factura de proveedor y nota de débito de deuda del usado
                            strDeuda = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deu_Usa", 0).Trim
                            If Not String.IsNullOrEmpty(strDeuda) Then
                                decDeuda = Decimal.Parse(strDeuda, n)
                            End If

                            If DMS_Connector.Configuracion.ParamGenAddon.U_UsaFPVU = "Y" Then
                                If decDeuda > 0 Then
                                    strImpFactProvDeuda = objConfiguracionGeneral.Impuesto(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaProveedor)
                                    strCuentaFactProvDeuda = objConfiguracionGeneral.CuentasAdicionales(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.FacturaProveedor)
                                    If String.IsNullOrEmpty(strCuentaFactProvDeuda) OrElse String.IsNullOrEmpty(strImpFactProvDeuda) Then
                                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCuentaImpFactProvDeuda, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                        BubbleEvent = False
                                        Exit Sub
                                    End If
                                End If
                            End If
                            'Valida cuenta e impuesto para nota de debito

                            strDebito = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Deb", 0).Trim
                            If Not String.IsNullOrEmpty(strDebito) Then
                                decDebito = Decimal.Parse(strDebito, n)
                            End If
                            If decDebito > 0 Then
                                strImpNotaDeb = objConfiguracionGeneral.Impuesto(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.DocumentosDeuda)
                                strCuentaNotaDeb = objConfiguracionGeneral.CuentasAdicionales(SCGDataAccess.ConfiguracionesGeneralesAddon.scgTipoSeries.DocumentosDeuda)
                                If String.IsNullOrEmpty(strCuentaNotaDeb) OrElse String.IsNullOrEmpty(strImpNotaDeb) Then
                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCuentaImpNotaDeb, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                    Exit Sub
                                End If
                            End If

                            'Valida bodega para sacar cuenta para asiento de trámites

                            strMontoTramites = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tot_Tram", 0).Trim
                            If Not String.IsNullOrEmpty(strMontoTramites) Then
                                decMontoTramites = Decimal.Parse(strMontoTramites, n)
                            End If
                            If decMontoTramites > 0 Then
                                strBodegaTram = Utilitarios.EjecutarConsulta("Select U_Bod_Tram from dbo.[@SCGD_ADMIN4] with (nolock) where U_Tipo = '" & strTipoUniDoc & "' and Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)
                                If String.IsNullOrEmpty(strBodegaTram) Then
                                    strBodegaTram = oDataTableConfiguracionesDMS.GetValue("U_AlmGeTra", 0)
                                End If
                                If String.IsNullOrEmpty(strBodegaTram) Then
                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorBodegaTramites, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                    Exit Sub
                                End If
                            End If

                        End If

                    End If

                    'Validación para préstamo generado con Financiamiento Propio

                    Dim strFinancPropio As String
                    strFinancPropio = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Fin_Prop", 0).Trim

                    If strFinancPropio = "Y" Then

                        Dim blnDatosCompletos As Boolean = True
                        Dim strCuentaCredito As String
                        Dim strValidaCredito As String
                        Dim strMonedaCredito As String
                        Dim strFechaPrestamo As String
                        Dim dtFechaPrestamo As Date
                        Dim strEstadoPeriodo As String
                        Dim strGenerarAsiento As String

                        Call ValidarDatosFinanciamiento(oForm, blnDatosCompletos)

                        If blnDatosCompletos = False Then

                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorFinancPropio, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Warning)
                            BubbleEvent = False
                            Exit Sub

                        End If

                        m_decTipoCambio = 0

                        m_strMonedaSistema = m_objBLSBO.RetornarMonedaSistema()
                        m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()

                        Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, m_strConectionString)

                        strMoneda = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim
                        strFechaPrestamo = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Fec_1Ab", 0).Trim

                        If Not String.IsNullOrEmpty(strFechaPrestamo) Then

                            dtFechaPrestamo = Date.ParseExact(strFechaPrestamo, "yyyyMMdd", Nothing)
                            dtFechaPrestamo = New Date(dtFechaPrestamo.Year, dtFechaPrestamo.Month, dtFechaPrestamo.Day, 0, 0, 0)

                            m_decTipoCambio = m_objBLSBO.RetornarTipoCambioMoneda(m_strMonedaSistema, dtFechaPrestamo, m_strConectionString, False)

                            If (m_decTipoCambio = 0) Or (m_decTipoCambio = -1) Then
                                m_decTipoCambio = 1
                            End If

                            If (m_decTipoCambio = -1 OrElse m_decTipoCambio = 0) AndAlso strMoneda = m_strMonedaSistema Then

                                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorTipoCambioPrestamo, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                BubbleEvent = False
                                Exit Sub

                            End If

                            strEstadoPeriodo = Utilitarios.EjecutarConsulta("SELECT PeriodStat FROM dbo.[OFPR] with (nolock) WHERE '" & dtFechaPrestamo.ToString("yyyyMMdd") & "' >= F_RefDate AND '" & dtFechaPrestamo.ToString("yyyyMMdd") & "' <= T_RefDate", m_oCompany.CompanyDB, m_oCompany.Server)

                            If strEstadoPeriodo <> "N" Then

                                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorPeriodoContPrestamo, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                BubbleEvent = False
                                Exit Sub

                            End If

                        End If

                        If strMoneda = m_strMonedaLocal Then

                            strCuentaCredito = Utilitarios.EjecutarConsulta("Select U_Fin_Loc from dbo.[@SCGD_CONF_FINANC] with (nolock) where Code = 1", m_oCompany.CompanyDB, m_oCompany.Server)

                        ElseIf strMoneda = m_strMonedaSistema Then

                            strCuentaCredito = Utilitarios.EjecutarConsulta("Select U_Fin_Sis from dbo.[@SCGD_CONF_FINANC] with (nolock) where Code = 1", m_oCompany.CompanyDB, m_oCompany.Server)

                        Else

                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorMonedaFinanc, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Warning)
                            BubbleEvent = False
                            Exit Sub

                        End If

                        strValidaCredito = Utilitarios.EjecutarConsulta("Select AcctCode from dbo.[OACT] with (nolock) where FormatCode = '" & strCuentaCredito & "' AND Postable = 'Y'", m_oCompany.CompanyDB, m_oCompany.Server)

                        strGenerarAsiento = Utilitarios.EjecutarConsulta("Select U_Gen_As from [@SCGD_CONF_FINANC] with (nolock) where Code = '1'", m_oCompany.CompanyDB, m_oCompany.Server)

                        If strGenerarAsiento = "Y" Then

                            If String.IsNullOrEmpty(strCuentaCredito) OrElse String.IsNullOrEmpty(strValidaCredito) Then

                                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.MensajeCuentas, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Warning)
                                BubbleEvent = False

                            Else

                                strMonedaCredito = Utilitarios.EjecutarConsulta("Select ActCurr from dbo.[OACT] with (nolock) where AcctCode = '" & strValidaCredito & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                                If Not strMonedaCredito = "##" AndAlso Not strMonedaCredito = strMoneda Then

                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorMonPrest, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Warning)
                                    BubbleEvent = False

                                End If

                            End If

                        End If

                    End If

                    'Agregado 26/07/2012 - Diego Herrera: Validaciones para asiento generado por financiamiento externo

                    Dim strFinancExterno As String
                    Dim strMontoFinanc As String
                    Dim decMontoFinanc As Decimal = 0
                    Dim strBanco As String
                    Dim strCuentaBanco As String
                    Dim strCodigoBanco As String

                    strFinancExterno = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinE", 0).Trim
                    strMontoFinanc = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinanciaE", 0).Trim

                    If Not String.IsNullOrEmpty(strMontoFinanc) Then
                        decMontoFinanc = Decimal.Parse(strMontoFinanc, n)
                    End If

                    If strFinancExterno = "Y" AndAlso oDataTableConfiguracionesDMS.GetValue("U_Usa_FiEx", 0) = "Y" AndAlso decMontoFinanc > 0 Then

                        strBanco = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_EntFinE", 0).Trim

                        strCodigoBanco = Utilitarios.EjecutarConsulta("Select BankCode from dbo.[ODSC] with (nolock) where BankName = '" & strBanco & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                        strCuentaBanco = Utilitarios.EjecutarConsulta("Select U_Cuenta from dbo.[@SCGD_BANCO_CTA] with (nolock) where Name = '" & strCodigoBanco & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                        If String.IsNullOrEmpty(strCuentaBanco) Then

                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCuentaBanco & strBanco, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                            BubbleEvent = False

                        End If

                    End If

                    If oDataTableConfiguracionesDMS.GetValue("U_ValLeaSN", 0) = "Y" Then
                        If Not String.IsNullOrEmpty(oDataTableConfiguracionesDMS.GetValue("U_CodLeaSN", 0)) Then
                            If Utilitarios.ValidadSocioNegociosLeasing(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0).Trim(), m_oCompany,
                                                                       oDataTableConfiguracionesDMS.GetValue("U_CodLeaSN", 0).ToString.Trim) Then
                                If Not Utilitarios.ValidaInfoLeasing(oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_SCGD_ConEjeBan", 0).ToString.Trim,
                                                                     oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_SCGD_NrOC", 0).ToString.Trim,
                                                                     oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_SCGD_NrOL", 0).ToString.Trim,
                                                                     m_SBO_Application) Then
                                    BubbleEvent = False

                                End If
                            End If
                        Else
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.LeasingSNnoConfigurado, BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Warning)
                            BubbleEvent = False
                        End If

                    End If


                End If

                Dim lsItems As New List(Of String)

                If (pval.ItemUID = "btnRechaza") _
                                AndAlso Not pval.BeforeAction _
                                AndAlso (oForm.Mode <> SAPbouiCOM.BoFormMode.fm_ADD_MODE AndAlso oForm.Mode <> SAPbouiCOM.BoFormMode.fm_FIND_MODE) Then

                    If oForm.Mode = SAPbouiCOM.BoFormMode.fm_UPDATE_MODE Then

                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ActualizarAntesAprobar, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning)

                    ElseIf oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE Then

                        Dim strTipoRetornoRechazo As String = String.Empty
                        Dim strEstadoUsados As String = String.Empty
                        Dim strEstadoFinanciamiento As String = String.Empty
                        Dim oMatrixUsados As SAPbouiCOM.Matrix
                        Dim strNombreVendedor As String
                        Dim strSucursal As String = String.Empty
                        Dim strCSucu As String = String.Empty
                        Dim strListaUsuarios As New List(Of String)
                        Dim blnValidaNivUsaFin As Boolean = False
                        Dim intContratoVentas As Integer = 0

                        oForm.Freeze(True)

                        'sucursal
                        strSucursal = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Sucu", 0).Trim
                        strCSucu = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CSucu", 0).Trim
                        strIDContrato = oForm.Items.Item(mc_strNumContrato).Specific.String
                        strCliente = oForm.Items.Item("txtNCl_veh").Specific.String
                        strVendedor = oForm.Items.Item("txtCodeVen").Specific.String
                        strNombreVendedor = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SlpName", 0).Trim

                        strEstadoUsados = oDataTableConfiguracionesDMS.GetValue("U_Niv_Usa", 0)
                        strEstadoFinanciamiento = oDataTableConfiguracionesDMS.GetValue("U_Niv_Fin", 0)

                        oCombo = DirectCast(oForm.Items.Item(mc_strEstado).Specific, SAPbouiCOM.ComboBox)

                        If Not String.IsNullOrEmpty(oCombo.Selected.Value) Then

                            If pval.ItemUID = "btnAprobar" Then
                                Utilitarios.bLoadInputEvents = False
                                If m_SBO_Application.MessageBox(My.Resources.Resource.PreguntaAprobarContrato, 2, My.Resources.Resource.Si, My.Resources.Resource.No) = 1 Then
                                    intEstado = CInt(oCombo.Selected.Value)
                                    If intEstado < m_intEstadoSuperior Then

                                        intEstado += 1
                                        'validacion niveles aprobacion
                                        ValidaPorTipoInventario(intEstado, True, blnValidaNivUsaFin, strEstadoUsados, strEstadoFinanciamiento, oMatrixUsados)

                                        If Not blnValidaNivUsaFin Then
                                            ValidaAprobUsaFin(intEstado, strEstadoUsados, strEstadoFinanciamiento, oMatrixUsados, blnValidaNivUsaFin)
                                        End If

                                        blnAprobar = True
                                    End If
                                Else
                                    intEstado = -1
                                End If

                            ElseIf pval.ItemUID = "btnRechaza" Then

                                oForm = m_SBO_Application.Forms.Item(FormUID)
                                oEditComentarios = DirectCast(oForm.Items.Item("txtH_RC").Specific, SAPbouiCOM.EditText)
                                objComentario = New ComentariosHistorial(m_oCompany, m_SBO_Application)
                                objComentario.FormCV = oForm
                                oEditComentarios.Value = String.Empty
                                objComentario.ShowInput(My.Resources.Resource.TXTRechazarContratos, My.Resources.Resource.PreguntaRechazarContrato)

                                If String.IsNullOrEmpty(oEditComentarios.Value) Then
                                    BubbleEvent = False
                                    intEstado = -1
                                Else
                                    intEstado = CInt(oCombo.Selected.Value)
                                    If intEstado > m_intEstadoInferior AndAlso intEstado < m_intEstadoPrefacturacion Then

                                        strTipoRetornoRechazo = Utilitarios.EjecutarConsulta(String.Format("Select isNull(U_RczCtrVnt, 'N') as RechazoContratoVentas from [@SCGD_ADMIN] Where Code = 'DMS'"), m_oCompany.CompanyDB, m_oCompany.Server)
                                        If strTipoRetornoRechazo.ToString.Trim.ToUpper = "Y" Then
                                            intEstado = 1
                                        Else
                                            intEstado -= 1
                                        End If


                                        ValidaPorTipoInventario(intEstado, False, blnValidaNivUsaFin, strEstadoUsados, strEstadoFinanciamiento, oMatrixUsados)

                                        If Not blnValidaNivUsaFin Then
                                            ValidaRechaUsaFin(intEstado, strEstadoUsados, strEstadoFinanciamiento, oMatrixUsados, blnValidaNivUsaFin)
                                        End If

                                        blnAprobar = False
                                    ElseIf intEstado = m_intEstadoPrefacturacion Then
                                        intEstado = m_intEstadoInferior + 1
                                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Reaproba", 0, "Y")
                                        blnAprobar = False
                                    End If

                                End If

                            Else
                                intEstado = 1
                            End If

                        End If

                        oForm.Freeze(False)
                        If intEstado <> -1 Then

                            m_blnPreguntaGuardaCambios = True

                            g_blnEventoCerrarAfecta = True

                            m_blnPreguntaGuardaCambios = False
                            oCombo.Select(CStr(intEstado))

                            intContratoVentas = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0)

                            ''''''''''''''''''''''''''''''''Agrega Historial'''''''''''''''''''''''''''''''''''''
                            If blnAprobar Then
                                AgregaLineaHistorial(intContratoVentas, intEstado - 1, intEstado)
                            Else
                                AgregaLineaHistorial(intContratoVentas, intEstado + 1, intEstado)
                            End If
                            ''''''''''''''''''''''''''''''''Agrega Historial'''''''''''''''''''''''''''''''''''''

                            'Si el estado va para cancelado pogno el vehiculo Disponinble
                            If intEstado = m_intEstadoInferior Then
                                LimpiarDisponibilidad()
                            End If


                            'Arrojo el mensaje
                            If pval.ItemUID = "btnAprobar" Then
                                m_SBO_Application.StatusBar.SetText(String.Format(My.Resources.Resource.AprobacionCV, intContratoVentas), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success)
                            ElseIf pval.ItemUID = "btnRechaza" Then
                                m_SBO_Application.StatusBar.SetText(String.Format(My.Resources.Resource.DESAprobacionCV, intContratoVentas), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success)
                            End If

                            strFoo = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Foo", 0)
                            strListaUsuarios = GeneraListaUsuariosMensajes(strCSucu, intEstado, strFoo)
                            oForm.Close()

                            Call EnviarMensajesAprobacion(intEstado, blnAprobar, strIDContrato, strCliente, strVendedor, strNombreVendedor, strListaUsuarios)

                        End If
                    End If


                ElseIf pval.ItemUID = "btnCalcula" AndAlso pval.ActionSuccess Then

                    Call CalcularPrecioModPrecioVenta(oForm)

                    Call CalculaPrecioAccesorios(oForm)

                    Call CalculaPrecioTramites(oForm)

                    Call CalcularCostos(pval.FormUID)

                    Call FormateaPreciosBase(oForm)

                    If oForm.Mode = BoFormMode.fm_OK_MODE Then
                        oForm.Mode = BoFormMode.fm_UPDATE_MODE
                    End If

                ElseIf pval.ItemUID = "btnPrint" AndAlso pval.ActionSuccess Then

                    Call ImprimirReporte(oForm)

                ElseIf pval.ItemUID = "btnAct_Veh" AndAlso pval.ActionSuccess Then

                    Call ActualizarValoresVehículo()

                ElseIf pval.ItemUID = "btnFactura" _
                                AndAlso Not pval.BeforeAction _
                                AndAlso pval.FormMode <> 3 AndAlso pval.FormMode <> 0 Then

                    Dim oItemNumContrato As SAPbouiCOM.Item = oForm.Items.Item("txtNumCont")
                    Dim oEditNumContrato As SAPbouiCOM.EditText

                    oEditNumContrato = oItemNumContrato.Specific

                    Dim StrConsulta As String = "SELECT  [U_Mon_Usa] " & _
                                                " FROM [" & TablaContrato & "] with (nolock) " & _
                                                "where docNum = " & oEditNumContrato.Value


                    strUnidadUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", 0).Trim

                    Dim strValor As String = Utilitarios.EjecutarConsulta(StrConsulta, m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)

                    If strValor = String.Empty OrElse CDec(strValor) = 0 Then

                        blnTieneVehiculoUsado = False
                        Call GenerarFormalizacion(oForm, blnResultadoFormalizacion)

                        If blnResultadoFormalizacion Then
                            Call ValidaPermisoAprobacion(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CSucu", 0).Trim(), oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Estado", 0).Trim())
                        End If
                    Else
                        If Not strUnidadUsado <> String.Empty Then

                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.DigiteCodigoUnidad, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)

                        Else
                            blnTieneVehiculoUsado = True
                            Call GenerarFormalizacion(oForm, blnResultadoFormalizacion)

                            If blnResultadoFormalizacion Then
                                Call ValidaPermisoAprobacion(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CSucu", 0).Trim(), oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Estado", 0).Trim())
                            End If
                        End If

                    End If

                ElseIf (pval.ItemUID = "btnOtrosL" OrElse pval.ItemUID = "btnOcultaL") AndAlso pval.ActionSuccess Then

                    oForm.ActiveItem = "txtTitul"

                    oForm.Freeze(True)

                    If pval.ItemUID = "btnOtrosL" Then

                        lsItems.Clear()
                        lsItems.Add("lblAcreedo")
                        lsItems.Add("lblEnteF")
                        lsItems.Add("txtCAcree")
                        lsItems.Add("txtAcreedo")
                        lsItems.Add("txtEnte_Fi")
                        lsItems.Add("lblObserv")
                        lsItems.Add("txtObserv")
                        lsItems.Add("lblLineasF")
                        lsItems.Add("lblEntFinP")
                        lsItems.Add("txtETFin")
                        MostrarItems(oForm, lsItems, False)

                        lsItems.Clear()
                        lsItems.Add("lblLineasF")
                        MostrarItems(oForm, lsItems, True)

                        lsItems.Clear()
                        lsItems.Add("btnCalPrec")
                        lsItems.Add("btnCalcula")
                        lsItems.Add("btnOtrosC")
                        lsItems.Add("btnOtCost")
                        lsItems.Add("btnPagos")
                        lsItems.Add("chkPorDes")
                        HabilitaItems(oForm, lsItems, False)

                    ElseIf pval.ItemUID = "btnOcultaL" Then

                        lsItems.Clear()
                        lsItems.Add("lblAcreedo")
                        lsItems.Add("lblEnteF")
                        lsItems.Add("txtCAcree")
                        lsItems.Add("txtAcreedo")
                        lsItems.Add("txtEnte_Fi")
                        lsItems.Add("lblObserv")
                        lsItems.Add("txtObserv")
                        lsItems.Add("btnCalPrec")
                        lsItems.Add("lblEntFinP")
                        lsItems.Add("txtETFin")
                        MostrarItems(oForm, lsItems, True)

                        lsItems.Clear()
                        lsItems.Add("lblLineasF")
                        MostrarItems(oForm, lsItems, False)

                        lsItems.Clear()
                        lsItems.Add("btnCalPrec")
                        lsItems.Add("btnCalcula")
                        lsItems.Add("btnOtrosC")
                        lsItems.Add("btnOtCost")
                        lsItems.Add("btnPagos")
                        lsItems.Add("chkPorDes")
                        HabilitaItems(oForm, lsItems, True)

                    End If

                    Call ManejoControlesOtrosL(pval.FormUID)

                    oForm.Freeze(False)

                ElseIf (pval.ItemUID = "btnOtrosC" Or pval.ItemUID = "btnOcultaC") AndAlso pval.ActionSuccess Then

                    oForm.ActiveItem = "txtTitul"

                    oForm.Freeze(True)

                    If pval.ItemUID = "btnOtrosC" Then

                        lsItems.Clear()
                        lsItems.Add("lblAcreedo")
                        lsItems.Add("lblEnteF")
                        lsItems.Add("txtCAcree")
                        lsItems.Add("txtAcreedo")
                        lsItems.Add("txtEnte_Fi")
                        lsItems.Add("lblObserv")
                        lsItems.Add("txtObserv")
                        lsItems.Add("lblEntFinP")
                        lsItems.Add("txtETFin")
                        MostrarItems(oForm, lsItems, False)

                        lsItems.Clear()
                        lsItems.Add("btnCalPrec")
                        lsItems.Add("btnOtrosL")
                        lsItems.Add("btnOtCost")
                        lsItems.Add("btnPagos")
                        lsItems.Add("btnCalcula")
                        lsItems.Add("chkPorDes")
                        HabilitaItems(oForm, lsItems, False)

                    ElseIf pval.ItemUID = "btnOcultaC" Then

                        lsItems.Clear()
                        lsItems.Add("lblAcreedo")
                        lsItems.Add("lblEnteF")
                        lsItems.Add("txtCAcree")
                        lsItems.Add("txtAcreedo")
                        lsItems.Add("txtEnte_Fi")
                        lsItems.Add("lblObserv")
                        lsItems.Add("txtObserv")
                        lsItems.Add("lblEntFinP")
                        lsItems.Add("txtETFin")
                        MostrarItems(oForm, lsItems, True)

                        lsItems.Clear()
                        lsItems.Add("btnCalPrec")
                        lsItems.Add("btnOtrosL")
                        lsItems.Add("btnOtCost")
                        lsItems.Add("btnPagos")
                        lsItems.Add("btnCalcula")
                        lsItems.Add("chkPorDes")
                        HabilitaItems(oForm, lsItems, True)

                    End If

                    Call ManejoControlesOtrosC(pval.FormUID)

                    oForm.Freeze(False)

                ElseIf (pval.ItemUID = "btnOtCost" Or pval.ItemUID = "btnOcOtCo") AndAlso pval.ActionSuccess Then

                    oForm.ActiveItem = "txtTitul"

                    oForm.Freeze(True)

                    If pval.ItemUID = "btnOtCost" Then

                        lsItems.Clear()
                        lsItems.Add("lblAcreedo")
                        lsItems.Add("lblEnteF")
                        lsItems.Add("txtCAcree")
                        lsItems.Add("txtAcreedo")
                        lsItems.Add("txtEnte_Fi")
                        lsItems.Add("lblObserv")
                        lsItems.Add("txtObserv")
                        lsItems.Add("lblEntFinP")
                        lsItems.Add("txtETFin")
                        MostrarItems(oForm, lsItems, False)

                        lsItems.Clear()
                        lsItems.Add("lblOtCos")
                        MostrarItems(oForm, lsItems, True)

                        lsItems.Clear()
                        lsItems.Add("btnCalPrec")
                        lsItems.Add("btnOtrosC")
                        lsItems.Add("btnOtrosL")
                        lsItems.Add("btnPagos")
                        lsItems.Add("btnCalcula")
                        lsItems.Add("chkPorDes")
                        HabilitaItems(oForm, lsItems, False)

                    ElseIf pval.ItemUID = "btnOcOtCo" Then

                        lsItems.Clear()
                        lsItems.Add("lblAcreedo")
                        lsItems.Add("lblEnteF")
                        lsItems.Add("txtCAcree")
                        lsItems.Add("txtAcreedo")
                        lsItems.Add("txtEnte_Fi")
                        lsItems.Add("lblObserv")
                        lsItems.Add("txtObserv")
                        lsItems.Add("lblEntFinP")
                        lsItems.Add("txtETFin")
                        MostrarItems(oForm, lsItems, True)

                        lsItems.Clear()
                        lsItems.Add("lblOtCos")
                        MostrarItems(oForm, lsItems, False)

                        lsItems.Clear()
                        lsItems.Add("btnCalPrec")
                        lsItems.Add("btnOtrosC")
                        lsItems.Add("btnOtrosL")
                        lsItems.Add("btnPagos")
                        lsItems.Add("btnCalcula")
                        lsItems.Add("chkPorDes")
                        HabilitaItems(oForm, lsItems, True)

                    End If

                    Call ManejoControlesOtrosCostos(pval.FormUID)

                    oForm.Freeze(False)

                ElseIf (pval.ItemUID = "btnPagos" Or pval.ItemUID = "btnOcuPago") AndAlso pval.ActionSuccess Then

                    oForm.ActiveItem = "txtTitul"

                    oForm.Freeze(True)

                    If pval.ItemUID = "btnPagos" Then

                        lsItems.Clear()
                        lsItems.Add("lblAcreedo")
                        lsItems.Add("lblEnteF")
                        lsItems.Add("txtCAcree")
                        lsItems.Add("txtAcreedo")
                        lsItems.Add("txtEnte_Fi")
                        lsItems.Add("lblObserv")
                        lsItems.Add("txtObserv")
                        lsItems.Add("mtx_OtrCos")
                        lsItems.Add("btnOcOtCo")
                        lsItems.Add("lblEntFinP")
                        lsItems.Add("txtETFin")
                        MostrarItems(oForm, lsItems, False)

                        lsItems.Clear()
                        lsItems.Add("mtx_Pagos")
                        lsItems.Add("btnOcuPago")
                        lsItems.Add("lblPagos")
                        lsItems.Add("lblLineasF")
                        lsItems.Add("picLineas")
                        MostrarItems(oForm, lsItems, True)

                        lsItems.Clear()
                        lsItems.Add("btnCalPrec")
                        lsItems.Add("btnOtrosC")
                        lsItems.Add("btnOtCost")
                        lsItems.Add("btnOtrosL")
                        lsItems.Add("btnCalcula")
                        lsItems.Add("chkPorDes")
                        HabilitaItems(oForm, lsItems, False)

                    ElseIf pval.ItemUID = "btnOcuPago" Then

                        lsItems.Clear()
                        lsItems.Add("lblAcreedo")
                        lsItems.Add("lblEnteF")
                        lsItems.Add("txtCAcree")
                        lsItems.Add("txtAcreedo")
                        lsItems.Add("txtEnte_Fi")
                        lsItems.Add("lblObserv")
                        lsItems.Add("txtObserv")
                        lsItems.Add("lblEntFinP")
                        lsItems.Add("txtETFin")
                        MostrarItems(oForm, lsItems, True)

                        lsItems.Clear()
                        lsItems.Add("mtx_Pagos")
                        lsItems.Add("btnOcuPago")
                        lsItems.Add("lblPagos")
                        lsItems.Add("lblLineasF")
                        lsItems.Add("picLineas")
                        MostrarItems(oForm, lsItems, False)

                        lsItems.Clear()
                        lsItems.Add("btnCalPrec")
                        lsItems.Add("btnOtrosC")
                        lsItems.Add("btnOtCost")
                        lsItems.Add("btnOtrosL")
                        lsItems.Add("btnCalcula")
                        lsItems.Add("chkPorDes")
                        HabilitaItems(oForm, lsItems, True)

                    End If

                    oForm.Freeze(False)


                ElseIf pval.ItemUID = "1" AndAlso pval.BeforeAction AndAlso
                    oForm.Mode <> SAPbouiCOM.BoFormMode.fm_FIND_MODE AndAlso
                    oForm.Mode <> SAPbouiCOM.BoFormMode.fm_OK_MODE Then

                    Dim strGeneraFacturaConsignado As String = String.Empty

                    strGeneraFacturaConsignado = oDataTableConfiguracionesDMS.GetValue("U_GenFacCns", 0).ToString().Trim()
                    'Si el parámetro esta habilitado se genera una factura de servicio por el vehículo consignado y un asiento de regularización
                    If strGeneraFacturaConsignado.ToUpper = "Y" Then
                        'Se desactivan las validaciones de consignados, por solicitud del cliente.
                        'If ValidarDatosConsignados(oForm) = False Then
                        '    BubbleEvent = False
                        'End If
                        RecalcularTotalesConsignado(oForm)
                    End If

                    If SeguroPV Then
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_UsrUpdSPV", 0, m_SBO_Application.Company.UserName)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SegPV_Upd", 0, "Y")
                        For Each item As SAPbouiCOM.Item In oForm.Items
                            If item.Type = BoFormItemTypes.it_EDIT OrElse item.Type = BoFormItemTypes.it_COMBO_BOX OrElse item.Type = BoFormItemTypes.it_MATRIX OrElse item.Type = BoFormItemTypes.it_EXTEDIT OrElse item.Type = BoFormItemTypes.it_CHECK_BOX Then
                                If item.FromPane = 10 And item.ToPane = 10 Then
                                    item.SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                                End If
                            End If
                        Next
                        oForm.Items.Item("1").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    Else
                        If g_blnEventoActualizarAfecta = True Then

                            If m_blnPreguntaGuardaCambios Then
                                If m_SBO_Application.MessageBox(My.Resources.Resource.GuardarCambios, 2, My.Resources.Resource.Si, My.Resources.Resource.No) = 2 Then
                                    BubbleEvent = False
                                Else
                                    If oForm.Mode = SAPbouiCOM.BoFormMode.fm_ADD_MODE Then

                                        Dim oMatrixVehi As SAPbouiCOM.Matrix
                                        Dim strUnidad As String

                                        oMatrixVehi = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)
                                        oMatrixVehi.FlushToDataSource()

                                        For i As Integer = 0 To oMatrixVehi.RowCount - 1
                                            strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).Trim()
                                            Call ValidarDispVehiculo(oForm, FormUID, BubbleEvent, strUnidad)

                                            If BubbleEvent = False Then
                                                Exit For
                                            End If
                                        Next i
                                    End If

                                    oCombo = DirectCast(oForm.Items.Item(mc_strMoneda).Specific, SAPbouiCOM.ComboBox)

                                    If Not oCombo.Selected.Value Is Nothing Then

                                        'Valida Moneda Cliente Facturar
                                        oEditText = DirectCast(oForm.Items.Item(mc_strCliente).Specific, SAPbouiCOM.EditText)
                                        strMonedaClienteFactura = Utilitarios.EjecutarConsulta("Select Currency from [OCRD] with (nolock) where CardCode='" & oEditText.Value & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                                        If strMonedaClienteFactura <> oCombo.Selected.Value Then
                                            If strMonedaClienteFactura <> "##" Then
                                                BubbleEvent = False
                                                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.MonedaClienteContrato, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                                            End If
                                        End If

                                        'Valida Moneda Proveedor Deudas Usado
                                        Dim strProveedorDeudaUsado As String =
                                            oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_Acre", 0).ToString().Trim()

                                        If strProveedorDeudaUsado <> String.Empty Then
                                            strMonedaDeudorUsado = Utilitarios.EjecutarConsulta(String.Format("Select Currency from [OCRD] with (nolock) where CardCode='{0}'", strProveedorDeudaUsado), m_oCompany.CompanyDB, m_oCompany.Server)

                                            If strMonedaDeudorUsado <> oCombo.Selected.Value Then
                                                If strMonedaDeudorUsado <> "##" Then
                                                    BubbleEvent = False
                                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.MonedaAcreedorUsado, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                                                End If
                                            End If
                                        End If
                                    End If

                                    strVendedor = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FooVend", 0).Trim

                                    If String.IsNullOrEmpty(strVendedor) _
                                        Then
                                        BubbleEvent = False
                                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorVendedorContrato, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    End If

                                    oMatrixUsado = DirectCast(oForm.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)

                                    If oMatrixUsado.RowCount > 0 Then
                                        strUnidadUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", 0).Trim

                                        If Not String.IsNullOrEmpty(strUnidadUsado) Then
                                            For i As Integer = 0 To oMatrixUsado.RowCount - 1
                                                strPlacaUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Placa", i).Trim
                                                strVINUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_VIN", i).Trim

                                                If strPlacaUsado = String.Empty And strVINUsado = String.Empty Then
                                                    BubbleEvent = False
                                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ContratoVentaSinVINoPlaca, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                                                End If
                                            Next
                                        End If
                                    End If

                                    oCombo = DirectCast(oForm.Items.Item(mc_strPeriodoCobro).Specific, SAPbouiCOM.ComboBox)

                                    If oCombo.Selected Is Nothing Then
                                        BubbleEvent = False
                                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.MensajeNoPeriodoPago, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                                    End If

                                    Dim oMatrix As SAPbouiCOM.Matrix
                                    Dim decPrecioVenta As Decimal
                                    Dim decPrecioUnidad As Decimal
                                    Dim decPrecioUnidades As Decimal

                                    oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                                    oMatrix.FlushToDataSource()

                                    For i As Integer = 0 To oMatrix.RowCount - 1

                                        decPrecioUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Pre_Tot", i)
                                        decPrecioUnidades += decPrecioUnidad

                                    Next i

                                    decPrecioVenta = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0)

                                    Dim strUsaFinPropio As String
                                    Dim strUsaFinExterno As String
                                    Dim strFinPropio As String
                                    Dim strFinExterno As String
                                    Dim strMontoFinanciar As String
                                    Dim decMontoFinanciar As Decimal = 0

                                    strUsaFinPropio = oDataTableConfiguracionesDMS.GetValue("U_Usa_Fin", 0).trim
                                    strUsaFinExterno = oDataTableConfiguracionesDMS.GetValue("U_Usa_FiEx", 0).trim
                                    strFinPropio = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Fin_Prop", 0).Trim
                                    strFinExterno = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinE", 0).Trim
                                    strMontoFinanciar = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Financia", 0).Trim

                                    If Not String.IsNullOrEmpty(strMontoFinanciar) Then
                                        decMontoFinanciar = Decimal.Parse(strMontoFinanciar, n)
                                    End If

                                    If strFinExterno = "Y" Then
                                        decMontoFinanciar += oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinanciaE", 0).Trim
                                    End If

                                    If decMontoFinanciar > 0 AndAlso ((strUsaFinPropio = "Y" AndAlso Not strFinPropio = "Y") AndAlso (strUsaFinExterno = "Y" AndAlso Not strFinExterno = "Y")) Then
                                        BubbleEvent = False
                                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorUsoFinanciamiento, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                                        Exit Sub
                                    End If

                                    If Not IsNothing(ListaBonosEliminar) AndAlso ListaBonosEliminar.Count > 0 Then
                                        For Each bonosVehiculo As BonosVehiculo In ListaBonosEliminar
                                            EliminaBonosUnidad(bonosVehiculo.strCodigoVehiculo, bonosVehiculo.strCodigoBono, bonosVehiculo.dblMonto, BubbleEvent)
                                        Next
                                        ListaBonosEliminar.Clear()
                                    End If

                                End If
                            End If
                            If BubbleEvent = True Then

                                Call LimpiarUsadoTemporal(oForm)

                                Call LimpiarVehiculoTemporal(oForm)

                                Call CalcularPrecioModPrecioVenta(oForm)

                                Call CalculaPrecioAccesorios(oForm)

                                Call CalculaPrecioTramites(oForm)

                                Call CalcularCostos(pval.FormUID)

                                Call FormateaPreciosBase(oForm)

                                Dim oMatrix As SAPbouiCOM.Matrix
                                Dim strUnidad As String
                                Dim strMarca As String
                                Dim strDispUnidad As String
                                Dim strEstadoReservado As String
                                Dim strEstadoDisponible As String
                                Dim strEstadoFacturado As String
                                Dim strEmpleado As String
                                Dim strIDVehiculo As String
                                Dim oCompanyService As SAPbobsCOM.CompanyService
                                Dim oGeneralService As SAPbobsCOM.GeneralService
                                Dim oGeneralData As SAPbobsCOM.GeneralData
                                Dim oGeneralParams As SAPbobsCOM.GeneralDataParams

                                Dim strEstado As String = String.Empty
                                Dim strFechaReserva As String


                                strEstadoReservado = oDataTableConfiguracionesDMS.GetValue("U_Disp_Res", 0)
                                strEstadoFacturado = Utilitarios.EjecutarConsulta("Select Top(1) (U_Prio) Fac from [@SCGD_ADMIN9] with (nolock) order by U_Prio desc", m_oCompany.CompanyDB, m_oCompany.Server)
                                strEstadoDisponible = oDataTableConfiguracionesDMS.GetValue("U_Disp_R", 0)
                                strEstado = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Estado", 0)
                                strFechaReserva = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_DocDate", 0)
                                strFechaReserva = Date.ParseExact(strFechaReserva, "yyyyMMdd", Nothing)

                                oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                                If oMatrix.RowCount > 0 Then

                                    strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim

                                    If Not String.IsNullOrEmpty(strUnidad) Then

                                        If oMatrix.RowCount = 1 Then

                                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Cod_Unid", 0, strUnidad.Trim())
                                            strMarca = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Des_Marc", 0)
                                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Marc", 0, strMarca.Trim())

                                        Else

                                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Cod_Unid", 0, My.Resources.Resource.UnidadesMultiples)
                                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Marc", 0, "---")

                                        End If

                                        strEmpleado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SlpName", 0).Trim

                                        Dim strDocEntryCV As String = String.Empty
                                        Dim intDocEntryCV As Integer = 0

                                        For i As Integer = 0 To oMatrix.RowCount - 1

                                            strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).Trim

                                            strDispUnidad = Utilitarios.EjecutarConsulta("Select U_Dispo from [@SCGD_VEHICULO] with (nolock) where U_Cod_Unid='" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                                            strIDVehiculo = Utilitarios.EjecutarConsulta("Select Code from [@SCGD_VEHICULO] with (nolock) where U_Cod_Unid='" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                                            strDocEntryCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0).ToString.Trim()

                                            If Not String.IsNullOrEmpty(strDocEntryCV) Then
                                                intDocEntryCV = Integer.Parse(strDocEntryCV)
                                            Else
                                                strDocEntryCV = Utilitarios.EjecutarConsulta(" select max(DocEntry) from [@SCGD_CVENTA] ", m_oCompany.CompanyDB, m_oCompany.Server)
                                                intDocEntryCV = Integer.Parse(strDocEntryCV)
                                                intDocEntryCV += 1
                                            End If

                                            oCompanyService = m_oCompany.GetCompanyService()
                                            oGeneralService = oCompanyService.GetGeneralService("SCGD_VEH")
                                            oGeneralParams = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
                                            oGeneralParams.SetProperty("Code", strIDVehiculo)
                                            oGeneralData = oGeneralService.GetByParams(oGeneralParams)
                                            If strEstado = "0" Then
                                                oGeneralData.SetProperty("U_Dispo", strEstadoDisponible)
                                            ElseIf strEstado <> strEstadoFacturado.Trim() Then
                                                oGeneralData.SetProperty("U_Dispo", strEstadoReservado)
                                                'Erick Sanabria Bravo Agrega Fecha de Reserva a la unidad Reservada en el CV 21.11.2013
                                                oGeneralData.SetProperty("U_FchRsva", strFechaReserva)
                                                oGeneralData.SetProperty("U_ContratoV", intDocEntryCV.ToString().Trim())
                                            End If
                                            oGeneralData.SetProperty("U_VENRES", strEmpleado)
                                            oGeneralService.Update(oGeneralData)
                                        Next

                                    End If

                                End If

                                g_intCantUnidadesEli = 0

                                'Diego Herrera - 14/06/2012: Insertar gastos de unidades a base de datos

                                Dim strContrato As String
                                Dim strCodeTabla As String
                                Dim intCodeTabla As Integer = 0
                                Dim strGuardaDataTable As String
                                Dim strInsertaLineaGasto As String
                                Dim strInsertaGastos As String
                                Dim intInsert As Integer = 0
                                Dim decMonto As Decimal

                                If oDataTableGastosUnidad.Rows.Count > 0 Then

                                    If oForm.Mode = BoFormMode.fm_ADD_MODE Then

                                        strContrato = Utilitarios.EjecutarConsulta("Select AutoKey From [ONNM] with (nolock) Where ObjectCode = 'SCGD_CVT'", m_oCompany.CompanyDB, m_oCompany.Server)

                                    ElseIf oForm.Mode = BoFormMode.fm_EDIT_MODE OrElse oForm.Mode = BoFormMode.fm_UPDATE_MODE Then

                                        strContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0).Trim

                                        If Not String.IsNullOrEmpty(strContrato) Then
                                            Utilitarios.EjecutarConsulta("Delete From [@SCGD_GASTOS_VEH]  Where U_Contrato = '" & strContrato & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                        End If

                                    End If

                                    If Not String.IsNullOrEmpty(strContrato) Then

                                        strCodeTabla = Utilitarios.EjecutarConsulta("Select Max(CAST(Code AS INT)) From [@SCGD_GASTOS_VEH]", m_oCompany.CompanyDB, m_oCompany.Server)
                                        If Not String.IsNullOrEmpty(strCodeTabla) Then
                                            intCodeTabla = Integer.Parse(strCodeTabla)
                                        End If
                                        intCodeTabla += 1

                                        For i As Integer = 0 To oDataTableGastosUnidad.Rows.Count - 1

                                            strGuardaDataTable = oDataTableGastosUnidad.GetValue("guarda", i)

                                            If strGuardaDataTable = "Y" Then

                                                decMonto = oDataTableGastosUnidad.GetValue("monto", i)

                                                strInsertaLineaGasto = "Insert into [@SCGD_GASTOS_VEH] (Code, Name, U_Cod_Item, U_Des_Item, U_Monto, U_Contrato, U_Unidad, U_Moneda) values ('" & _
                                                         intCodeTabla & "','" & intCodeTabla & "','" & oDataTableGastosUnidad.GetValue("codItem", i) & "','" & oDataTableGastosUnidad.GetValue("desItem", i) & _
                                                         "','" & decMonto.ToString(n) & "','" & strContrato & "','" & oDataTableGastosUnidad.GetValue("unidad", i) & "','" & oDataTableGastosUnidad.GetValue("moneda", i) & "')"

                                                If intInsert = 0 Then

                                                    strInsertaGastos = strInsertaLineaGasto

                                                Else

                                                    strInsertaGastos = strInsertaGastos & ";" & strInsertaLineaGasto

                                                End If

                                                intCodeTabla += 1
                                                intInsert += 1

                                            End If

                                        Next

                                        If Not String.IsNullOrEmpty(strInsertaGastos) Then

                                            Utilitarios.EjecutarConsulta(strInsertaGastos, m_oCompany.CompanyDB, m_oCompany.Server)

                                        End If

                                    End If

                                End If

                                oForm.Items.Item("txtNumCot").Specific.string = String.Empty

                            End If

                        End If
                    End If
                    If oForm.Mode = SAPbouiCOM.BoFormMode.fm_ADD_MODE Then
                        Dim nivel As Integer = -1
                        Dim strNivCode As String
                        Dim fhaActual As DateTime

                        'Asignación de los valores
                        fhaActual = Utilitarios.RetornaFechaActual(m_oCompany.CompanyDB, m_oCompany.Server)
                        Integer.TryParse(oDataTableEstadosLimites.GetValue("Inferior", 0).ToString, nivel)

                        oEditUsuario = DirectCast(oForm.Items.Item("txtH_User").Specific, SAPbouiCOM.EditText)
                        oEditFecha = DirectCast(oForm.Items.Item("txtH_Fecha").Specific, SAPbouiCOM.EditText)
                        oEditHora = DirectCast(oForm.Items.Item("txtH_Hora").Specific, SAPbouiCOM.EditText)
                        oEditNivel = DirectCast(oForm.Items.Item("txtH_Niv").Specific, SAPbouiCOM.EditText)
                        oEditNivCode = DirectCast(oForm.Items.Item("txtH_NivC").Specific, SAPbouiCOM.EditText)
                        oEditComentarios = DirectCast(oForm.Items.Item("txtH_Com").Specific, SAPbouiCOM.EditText)

                        For i As Integer = 0 To oDataTableEstados.Rows.Count - 1
                            If oDataTableEstados.GetValue("U_Prio", i).ToString().Trim() = Convert.ToString(nivel + 1) Then
                                strNivCode = oDataTableEstados.GetValue("U_Codigo", i).ToString().Trim()
                                Exit For
                            End If
                        Next

                        oEditUsuario.Value = m_SBO_Application.Company.UserName
                        oEditFecha.Value = DateTime.Now.ToString("yyyyMMdd")
                        oEditHora.Value = DateTime.Now.ToShortTimeString()
                        oEditComentarios.Value = My.Resources.Resource.TXTComentCreacionCV
                        oEditNivel.Value = Convert.ToString(nivel + 1)
                        oEditNivCode.Value = strNivCode
                    End If

                ElseIf pval.ItemUID = mc_strBtnArchivos AndAlso pval.ActionSuccess AndAlso (oForm.Mode = SAPbouiCOM.BoFormMode.fm_VIEW_MODE OrElse oForm.Mode = SAPbouiCOM.BoFormMode.fm_EDIT_MODE OrElse oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE OrElse oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE) Then

                    Dim tr As System.Threading.Thread = New System.Threading.Thread(New System.Threading.ThreadStart(AddressOf CargaDialogo))
                    tr.CurrentUICulture = My.Resources.Resource.Culture 'Thread.CurrentThread.CurrentUICulture
                    tr.SetApartmentState(Threading.ApartmentState.STA)
                    tr.Start()

                ElseIf pval.ItemUID = "btnReversa" AndAlso Not pval.BeforeAction AndAlso pval.FormMode <> 3 AndAlso pval.FormMode <> 0 Then

                    If m_SBO_Application.MessageBox(My.Resources.Resource.MensajeDeseaRevertirContrato & " ?? ", 2, My.Resources.Resource.Si, My.Resources.Resource.No) = 1 Then

                        Dim strFechaReversion As String

                        strFechaReversion = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDr", 0).Trim()

                        If Not String.IsNullOrEmpty(strFechaReversion) Then

                            Dim clsReversar As New ReversarContratosCls(m_SBO_Application, m_oCompany)
                            Dim strDocEntry As String

                            strDocEntry = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0).ToString().Trim()

                            oCombo = DirectCast(oForm.Items.Item(mc_strEstado).Specific, SAPbouiCOM.ComboBox)
                            intEstado = CInt(oCombo.Selected.Value)

                            clsReversar.ReversarDocumentosContratoVentas(oForm, oDataTableFacturas, oDataTableValidaFacturas)
                            ''''''''''''''''''''''''''''''''Agrega Historial'''''''''''''''''''''''''''''''''''''
                            If oForm Is Nothing Then
                                AgregaLineaHistorial(strDocEntry, intEstado, 0, True)
                            End If

                            ''''''''''''''''''''''''''''''''Agrega Historial'''''''''''''''''''''''''''''''''''''


                        ElseIf String.IsNullOrEmpty(strFechaReversion) Then
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorFechaContReversa2, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                            Exit Sub
                        End If
                    End If

                ElseIf pval.ItemUID = "txtFecha" AndAlso Not pval.BeforeAction Then

                    strMoneda = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0)

                    strFechaContrato = DirectCast(oForm.Items.Item("txtFecha").Specific, EditText).Value
                    dtFechaContrato = Date.ParseExact(strFechaContrato, "yyyyMMdd", Nothing)

                    m_objBLSBO.Set_Compania(m_oCompany)
                    m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
                    Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, m_strConectionString)
                    If Trim(strMoneda) <> m_strMonedaLocal Then
                        oForm.Items.Item("txtTipoCam").Visible = True
                        m_decTipoCambio = m_objBLSBO.RetornarTipoCambioMoneda(strMoneda, dtFechaContrato, m_strConectionString, False)
                    Else
                        oForm.Items.Item("txtTipoCam").Visible = False
                        m_decTipoCambio = 1
                    End If

                    If m_decTipoCambio = -1 Then
                        oForm.Items.Item("txtTipoCam").Specific.value = 0
                        m_SBO_Application.MessageBox(My.Resources.Resource.TipoCambioNoActualizado)
                    Else
                        oForm.Items.Item("txtTipoCam").Specific.value = m_decTipoCambio
                    End If

                    Call FormateaPreciosBase(oForm)

                    'Agregado 14/01/2011: Manejo de evento de eliminar unidades cargadas en el contrato de venta

                ElseIf pval.ItemUID = "btnDelUnid" AndAlso pval.ActionSuccess Then

                    Call EliminarVehiculo(FormUID)
                    If Not String.IsNullOrEmpty(objConfiguracionGeneral.SerieUnidades) AndAlso Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim) Then
                        Call ActualizaCodUnidUsados(oForm, oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim)
                    End If

                ElseIf pval.ItemUID = "btnCalcAcc" AndAlso pval.ActionSuccess Then

                    Call CalculaPrecioAccesorios(oForm)

                    Call CalcularCostos(pval.FormUID)

                    Call FormateaPreciosBase(oForm)

                    If oForm.Mode = BoFormMode.fm_OK_MODE Then
                        oForm.Mode = BoFormMode.fm_UPDATE_MODE
                    End If

                ElseIf pval.ItemUID = "btnCalPrec" AndAlso pval.ActionSuccess Then

                    Call CalculaPrecioVenta(oForm)

                    Call CalcularCostos(pval.FormUID)

                ElseIf pval.ItemUID = "btnAgregaU" AndAlso pval.ActionSuccess Then
                    If ValidarCamposUsado() Then
                        oForm.Freeze(True)
                        Dim strTipoInventario As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tip_Us", 0)
                        calculaImpuestodeusado(BubbleEvent, strTipoInventario)
                        If blnUsaFacturaProveedoresVehiculoUsado = True Then
                            Dim strCodigoProveedor As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_ProvUS", 0)

                            If Not String.IsNullOrEmpty(strCodigoProveedor.Trim()) Then
                                If AgregarUsado(oForm) Then
                                    oForm.Items.Item("txtUnid_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                    oForm.Items.Item("txtVIN_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                    oForm.Items.Item("txtPlac_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)

                                End If

                                Call CalcularCostos(pval.FormUID)
                            Else
                                m_SBO_Application.SetStatusBarMessage("Se debe agregar codigo de proveedor", BoMessageTime.bmt_Short, True)
                                oForm.Items.Item("btnEditUs").Enabled = False
                                oForm.Items.Item("btnAgregaU").Enabled = True
                                oForm.Items.Item("btnBuscaUs").Enabled = True
                            End If

                        Else
                            If AgregarUsado(oForm) Then
                                oForm.Items.Item("txtUnid_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                oForm.Items.Item("txtVIN_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                oForm.Items.Item("txtPlac_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                            Else
                                oForm.Items.Item("btnEditUs").Enabled = False
                                oForm.Items.Item("btnAgregaU").Enabled = True
                                oForm.Items.Item("btnBuscaUs").Enabled = True
                            End If

                            Call CalcularCostos(pval.FormUID)
                        End If

                        oForm.Freeze(False)
                    End If
                ElseIf pval.ItemUID = "btnQui_Us" AndAlso pval.ActionSuccess Then
                    oForm.Freeze(True)

                    Call EliminarUsado(FormUID)

                    oForm.Items.Item("txtUnid_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                    oForm.Items.Item("txtVIN_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                    oForm.Items.Item("txtPlac_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                    oForm.Items.Item("btnAgregaU").Enabled = True

                    If Not String.IsNullOrEmpty(objConfiguracionGeneral.SerieUnidades) Then
                        Call cambiarCodUnidadUsado()
                    End If

                    LimpiarUsadoTemporal(oForm)
                    Call CalcularCostos(pval.FormUID)

                    oForm.Freeze(False)

                ElseIf pval.ItemUID = "btnEditUs" AndAlso pval.ActionSuccess Then
                    If ValidarCamposUsado() Then
                        Dim strTipoInventario As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tip_Us", 0)
                        calculaImpuestodeusado(BubbleEvent, strTipoInventario)
                        If blnUsaFacturaProveedoresVehiculoUsado = True Then
                            Dim strCodigoProveedor As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_ProvUS", 0)
                            If Not String.IsNullOrEmpty(strCodigoProveedor.Trim()) Then
                                If EditarUsado(FormUID) And oDataTableConfiguracionesDMS.GetValue("U_ConCUCV", 0) = "Y" Then
                                    oForm.Items.Item("txtUnid_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                    oForm.Items.Item("txtVIN_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                    oForm.Items.Item("txtPlac_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)

                                End If

                                Call CalcularCostos(pval.FormUID)
                            Else
                                m_SBO_Application.SetStatusBarMessage("Se debe agregar codigo de proveedor", BoMessageTime.bmt_Short, True)

                            End If

                        Else
                            If EditarUsado(FormUID) And oDataTableConfiguracionesDMS.GetValue("U_ConCUCV", 0) = "Y" Then
                                oForm.Items.Item("txtUnid_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                oForm.Items.Item("txtVIN_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                oForm.Items.Item("txtPlac_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)

                            End If

                            Call CalcularCostos(pval.FormUID)
                        End If
                    End If
                ElseIf pval.ItemUID = "btnAgreVeh" AndAlso pval.ActionSuccess Then
                    oForm.Freeze(True)

                    Call CalculaDescXUnidad()
                    Call CargarVehiculo(oForm, FormUID)
                    If Not String.IsNullOrEmpty(objConfiguracionGeneral.SerieUnidades) Then
                        Call ActualizaCodUnidUsados(oForm, oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim)
                    End If

                    oForm.Freeze(False)

                ElseIf pval.ItemUID = "btnAgreVeh" AndAlso pval.BeforeAction Then
                    Dim strUnidad As String

                    strUnidad = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_Unid", 0).Trim

                    Call ValidarDispVehiculo(oForm, FormUID, BubbleEvent, strUnidad)
                    Call ValidarPagosRecibidos(oForm, FormUID, BubbleEvent, strUnidad)

                ElseIf pval.ItemUID = "btnActVeh" AndAlso pval.ActionSuccess Then

                    Dim oMatriz As SAPbouiCOM.Matrix
                    Dim intPosicion As Integer
                    Dim strPrecio As String
                    Dim strImpuesto As String
                    Dim strDescuento As String
                    Dim strGasLoc As String
                    Dim strOtros As String
                    Dim strUnidad As String
                    Dim strUnidadDataTable As String
                    Dim strDependeDataTable As String
                    Dim strUnidadDepende As String
                    Dim strGuardaDepende As String
                    Dim intLineasBorrar() As Integer = Nothing
                    Dim intCantBorrar As Integer = 0
                    Dim blnEliminado As Boolean = False
                    Dim strMontoDesc As String
                    oForm.Freeze(True)
                    oMatriz = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                    intPosicion = oMatriz.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_RowOrder)

                    Call CalculaDescXUnidad()

                    strPrecio = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vh", 0).Trim
                    strImpuesto = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Imp_Vh", 0).Trim
                    strDescuento = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Por_Temp", 0).Trim
                    strGasLoc = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GL_Temp", 0).Trim
                    strOtros = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_OG_Temp", 0).Trim
                    strMontoDesc = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DescUni", 0).Trim

                    oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pre_Vta", intPosicion - 1, strPrecio)
                    oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Impuesto", intPosicion - 1, strImpuesto)
                    oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Desc_Veh", intPosicion - 1, strDescuento)
                    oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Gas_Loc", intPosicion - 1, strGasLoc)
                    oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Otro_Gas", intPosicion - 1, strOtros)
                    oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_MDesc", intPosicion - 1, strMontoDesc)

                    oMatriz.LoadFromDataSource()

                    strUnidad = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_Unid", 0).Trim

                    Call LimpiarVehiculoTemporal(oForm)

                    Call CalculaPrecioVenta(oForm)

                    Call CalcularCostos(FormUID)

                    Call FormateaPreciosBase(oForm)



                    '13/06/2012 - Diego Herrera: Actualización de líneas del Data Table de gastos con unidad actualizada

                    If oDataTableGastosUnidad.Rows.Count > 0 Then

                        For i As Integer = oDataTableGastosUnidad.Rows.Count - 1 To 0 Step -1

                            strUnidadDataTable = oDataTableGastosUnidad.GetValue("unidad", i)
                            strDependeDataTable = oDataTableGastosUnidad.GetValue("depende", i)

                            If strUnidadDataTable = strUnidad Then

                                If strDependeDataTable = "Y" Then

                                    If blnEliminado = False Then

                                        For intDep As Integer = oDataTableGastosUnidad.Rows.Count - 1 To 0 Step -1

                                            strUnidadDepende = oDataTableGastosUnidad.GetValue("unidad", intDep)
                                            strGuardaDepende = oDataTableGastosUnidad.GetValue("guarda", intDep)

                                            If strUnidadDataTable = strUnidadDepende AndAlso strGuardaDepende = "Y" Then

                                                blnEliminado = True
                                                ReDim Preserve intLineasBorrar(intCantBorrar)
                                                intLineasBorrar(intCantBorrar) = intDep
                                                intCantBorrar += 1

                                            End If

                                        Next

                                    End If

                                End If

                                oDataTableGastosUnidad.SetValue("guarda", i, "Y")
                                oDataTableGastosUnidad.SetValue("depende", i, "N")

                            End If

                        Next

                        If intCantBorrar > 0 Then

                            For i As Integer = 0 To intCantBorrar - 1

                                oDataTableGastosUnidad.Rows.Remove(intLineasBorrar(i))

                            Next

                        End If

                    End If

                    oForm.Items.Item("btnAgreVeh").Enabled = False
                    oForm.Items.Item("btnActVeh").Enabled = False

                    oForm.Freeze(False)
                ElseIf pval.ItemUID = "lkUniTemp" AndAlso pval.ActionSuccess Then

                    Dim strUnidad As String
                    Dim strIDVeh As String

                    m_oVehiculos = New VehiculosCls(m_oCompany, m_SBO_Application)

                    strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Cod_Unid", 0).Trim

                    strIDVeh = Utilitarios.EjecutarConsulta("SELECT DocEntry FROM [@SCGD_VEHICULO] with (nolock) WHERE U_Cod_Unid = '" & strUnidad & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)

                    Call m_oVehiculos.DibujarFormularioDetalleInformacionVehiculo("", _
                                                 strIDVeh, _
                                                 True, _
                                                 "", _
                                                 0, True, False, VehiculosCls.ModoFormulario.scgVentas)

                ElseIf pval.ItemUID = "btnPlanPag" AndAlso pval.ActionSuccess Then

                    Dim strFinProp As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Fin_Prop", 0).Trim

                    If strFinProp = "Y" Then

                        Dim blnDatosCompletos As Boolean = True
                        Dim blnPlanPagos As Boolean = True

                        Call ValidarDatosFinanciamiento(oForm, blnDatosCompletos, blnPlanPagos)

                        If blnDatosCompletos = True Then

                            Call GenerarPlanPagos(oForm)

                        Else

                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorFinancPropio, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Warning)

                        End If

                    Else

                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorPlanPagos, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning)

                    End If

                ElseIf pval.ItemUID = "chkGenFaAc" AndAlso pval.BeforeAction = False AndAlso pval.ActionSuccess = True Then

                    Dim strGeneraFactAcc As String

                    strGeneraFactAcc = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GenFaAcc", 0).Trim

                    Dim strManejoDescuentoFact As String = oDataTableConfiguracionesDMS.GetValue("U_Desc_Fac", 0)

                    If strManejoDescuentoFact = "Y" Then

                        If strGeneraFactAcc = "Y" Then
                            oForm.Items.Item("txtPoDeAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                            oForm.Items.Item("txtMonDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                        Else
                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_AcDescPo", 0, "0")
                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Acc_Desc", 0, "0")
                            oForm.Items.Item("txtPoDeAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                            oForm.Items.Item("txtMonDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                        End If

                    End If

                    Call CalculaPrecioAccesorios(oForm)

                    Call CalcularCostos(pval.FormUID)

                ElseIf pval.ItemUID = "btnBalance" AndAlso pval.BeforeAction = False AndAlso pval.ActionSuccess = True Then

                    Call GeneraBalance(oForm)

                ElseIf pval.ItemUID = "btnOtrosVh" AndAlso pval.BeforeAction = False AndAlso pval.ActionSuccess = True Then

                    Call GenerarGastos(oForm)

                ElseIf pval.ItemUID = "ckbFinE" AndAlso pval.BeforeAction = False AndAlso pval.ActionSuccess = True Then

                    Call ManejoFinanciamientoExterno()

                ElseIf pval.ItemUID = "btnAprobar" AndAlso pval.BeforeAction = True AndAlso pval.ActionSuccess = False Then

                    Dim oMatrix As SAPbouiCOM.Matrix
                    Dim strUnidadInventario As String

                    oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                    If oMatrix.RowCount = 1 Then

                        strUnidadInventario = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim

                        If String.IsNullOrEmpty(strUnidadInventario) Then

                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorAprobacionContrato, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                            BubbleEvent = False

                        End If

                    ElseIf oMatrix.RowCount = 0 Then

                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorAprobacionContrato, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        BubbleEvent = False

                    End If

                ElseIf pval.ItemUID = "btnCargM" AndAlso pval.BeforeAction = True AndAlso pval.ActionSuccess = False Then

                    Dim strClient As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0).Trim

                    'validacion de existencia de cleinte para el contrato de ventas
                    If Not String.IsNullOrEmpty(strClient) Then
                        Dim tr As System.Threading.Thread = New System.Threading.Thread(New System.Threading.ThreadStart(AddressOf ManejoOpenFileDialog))
                        tr.SetApartmentState(Threading.ApartmentState.STA)
                        tr.Start()
                    Else
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCliente, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                    End If

                ElseIf pval.ItemUID = "btnComprar" AndAlso pval.BeforeAction = True AndAlso pval.ActionSuccess = False Then
                    'Modificado: Roiner Camacho Esquivel 14/11/2012
                    'Manejo del BeforeAction para la compra de accesorios desde el Contrato de Ventas
                    Dim strContrato As String
                    Dim oMatrixAcc As SAPbouiCOM.Matrix
                    Dim blnCompra As Boolean = False
                    Dim strComprar As String
                    Dim strAccesorio As String
                    Dim strCantidad As String
                    Dim intCantidad As Integer = 0
                    Dim strCostoAcc As String
                    Dim decCostoAcc As Decimal = 0
                    Dim strImpCompra As String
                    Dim strProveedor As String
                    Dim blnExisteProv As Boolean
                    'validar si ya se asigno a una orden de compra
                    Dim strOrdenCompra As String
                    Dim strLineCV As String
                    'validacion para que el accesorio sea un articulo de compra
                    Dim strArtCompra As String

                    strContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0).Trim

                    If String.IsNullOrEmpty(strContrato) Then

                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorComprarCV, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        BubbleEvent = False
                        Exit Sub

                    End If

                    oMatrixAcc = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

                    oMatrixAcc.FlushToDataSource()

                    intContadorAccs = 0

                    intContProvAccs = 0

                    For i As Integer = 0 To oMatrixAcc.RowCount - 1
                        'obtiene si ha marcado el check de comprar
                        strComprar = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Comprar", i).Trim

                        'valida si lo desea comprar
                        If strComprar = "Y" Then
                            strAccesorio = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Acc", i).Trim
                            'validacion de que el accesorio no haya sido comprado (asignado a una orden de compra)

                            If Not String.IsNullOrEmpty(strAccesorio) Then

                                strOrdenCompra = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Ord_Acc", i).Trim
                                'codigo de accesorio
                                If Not String.IsNullOrEmpty(strOrdenCompra) Then
                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.El_Accesorio + strAccesorio + My.Resources.Resource.AccesorioAsignadoOrdenCompra, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                    Exit Sub
                                End If

                                strArtCompra = ""
                                strArtCompra = Utilitarios.EjecutarConsulta(String.Format("SELECT PrchseItem FROM OITM  with (nolock) WHERE ItemCode = '{0}'", strAccesorio), m_oCompany.CompanyDB, m_oCompany.Server)
                                'validacion de articulo de compra
                                If String.IsNullOrEmpty(strArtCompra) _
                                    Or strArtCompra = "N" Then
                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.El_Accesorio + strAccesorio + My.Resources.Resource.DebeSerDeCompra, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                    Exit Sub
                                End If

                                blnCompra = True

                                strCantidad = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Cant_Acc", i)
                                strCantidad = strCantidad.Trim()
                                If Not String.IsNullOrEmpty(strCantidad) Then
                                    intCantidad = Integer.Parse(strCantidad)
                                End If
                                strCostoAcc = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Cost_Acc", i)
                                strCostoAcc = strCostoAcc.Trim()
                                If Not String.IsNullOrEmpty(strCostoAcc) Then
                                    decCostoAcc = Decimal.Parse(strCostoAcc, n)
                                End If
                                strImpCompra = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Imp_Com", i).Trim
                                strProveedor = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Prov_Acc", i).Trim

                                'line del cv a la orden de compra 
                                strLineCV = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("LineId", i).Trim

                                If intCantidad <= 0 OrElse decCostoAcc <= 0 OrElse String.IsNullOrEmpty(strImpCompra) OrElse String.IsNullOrEmpty(strProveedor) Then

                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorDatosCompraAcc & strAccesorio, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                    Exit For

                                End If
                                'carga de vectores para crear la orden de compra
                                ReDim Preserve strArregloAccesorio(intContadorAccs)
                                strArregloAccesorio(intContadorAccs) = strAccesorio
                                ReDim Preserve intArregloCantAcc(intContadorAccs)
                                intArregloCantAcc(intContadorAccs) = intCantidad
                                ReDim Preserve decArregloCostoAcc(intContadorAccs)
                                decArregloCostoAcc(intContadorAccs) = decCostoAcc
                                ReDim Preserve strArregloImpCompraAcc(intContadorAccs)
                                strArregloImpCompraAcc(intContadorAccs) = strImpCompra
                                ReDim Preserve strArregloProveedorAcc(intContadorAccs)
                                strArregloProveedorAcc(intContadorAccs) = strProveedor
                                ReDim Preserve intArregloPosicDSAcc(intContadorAccs)
                                intArregloPosicDSAcc(intContadorAccs) = i
                                'vector para lineas del contrato de ventas
                                ReDim Preserve intArregloLinesAcc(intContadorAccs)
                                intArregloLinesAcc(intContadorAccs) = strLineCV

                                If intContProvAccs = 0 Then

                                    ReDim Preserve strArregloProvAccs(intContProvAccs)
                                    strArregloProvAccs(intContProvAccs) = strArregloProveedorAcc(intContadorAccs)
                                    intContProvAccs += 1

                                ElseIf intContProvAccs > 0 Then

                                    blnExisteProv = False

                                    For Each proveedor As String In strArregloProvAccs

                                        If strArregloProveedorAcc(intContadorAccs) = proveedor Then

                                            blnExisteProv = True
                                            Exit For

                                        End If

                                    Next

                                    If blnExisteProv = False Then

                                        ReDim Preserve strArregloProvAccs(intContProvAccs)
                                        strArregloProvAccs(intContProvAccs) = strArregloProveedorAcc(intContadorAccs)
                                        intContProvAccs += 1

                                    End If

                                End If

                                intContadorAccs += 1

                            End If

                        End If

                    Next

                    If blnCompra = False Then

                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorAccsComprar, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        BubbleEvent = False
                        Exit Sub

                    End If



                ElseIf pval.ItemUID = "btnComprar" AndAlso pval.BeforeAction = False AndAlso pval.ActionSuccess = True Then
                    'generar orden de compra
                    Call GenerarOrdenesCompraAccs(oForm)

                ElseIf pval.ItemUID = "del" AndAlso pval.BeforeAction = True AndAlso pval.ActionSuccess = False Then

                    Dim oMatrixAccs As SAPbouiCOM.Matrix
                    Dim intRegistoEliminar As Integer
                    Dim strOrdenCompra As String
                    Dim strUnidadLigada As String
                    Dim strUsaControlAccesorios As String = String.Empty

                    strUsaControlAccesorios = DMS_Connector.Configuracion.ParamGenAddon.U_CtrlAcc

                    oMatrixAccs = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

                    intRegistoEliminar = oMatrixAccs.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_RowOrder)

                    If intRegistoEliminar > -1 Then

                        oMatrixAccs.FlushToDataSource()

                        strOrdenCompra = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Ord_Acc", intRegistoEliminar - 1).Trim
                        strUnidadLigada = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Cod_Unid", intRegistoEliminar - 1).Trim

                        If Not String.IsNullOrEmpty(strOrdenCompra) Then

                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorElimAccCompra, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                            BubbleEvent = False
                            Exit Sub
                        End If

                        If Not String.IsNullOrEmpty(strUnidadLigada) Then

                            If strUsaControlAccesorios.ToUpper() = "Y" AndAlso ValidaAccesoriosUnidad(strUnidadLigada, oForm) = True Then
                                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorElimAccIns, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                BubbleEvent = False
                                Exit Sub
                            End If

                        End If

                    End If

                ElseIf pval.ItemUID = "btnCalTra" AndAlso pval.ActionSuccess = True Then

                    Call CalculaPrecioTramites(oForm)

                    Call CalcularCostos(pval.FormUID)

                    Call FormateaPreciosBase(oForm)

                    If oForm.Mode = BoFormMode.fm_OK_MODE Then
                        oForm.Mode = BoFormMode.fm_UPDATE_MODE
                    End If

                ElseIf pval.ItemUID = "btnDelTra" AndAlso pval.ActionSuccess = True AndAlso pval.BeforeAction = False Then

                    Call EliminarItem(pval.FormUID, TipoItem.Tramite)

                ElseIf pval.ItemUID = "btnCompTra" AndAlso pval.BeforeAction = True AndAlso pval.ActionSuccess = False Then

                    Dim strContrato As String
                    Dim oMatrixTram As SAPbouiCOM.Matrix
                    Dim blnCompra As Boolean = False
                    Dim strComprar As String
                    Dim strTramite As String
                    Dim strCantidad As String
                    Dim intCantidad As Integer = 0
                    Dim strCostoTram As String
                    Dim decCostoTram As Decimal = 0
                    Dim strImpCompra As String
                    Dim strProveedor As String
                    Dim blnExisteProv As Boolean
                    Dim strOrdenCompra As String
                    'validacion para ser artículo de compra 
                    Dim strArtCompra As String

                    strContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0).Trim

                    If String.IsNullOrEmpty(strContrato) Then

                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorComprarCV, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        BubbleEvent = False
                        Exit Sub

                    End If

                    oMatrixTram = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

                    oMatrixTram.FlushToDataSource()

                    intContadorTram = 0

                    intContProvTram = 0

                    For i As Integer = 0 To oMatrixTram.RowCount - 1

                        strComprar = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Comprar", i).Trim

                        If strComprar = "Y" Then
                            strTramite = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Cod_Tram", i).Trim
                            'validacion de que el accesorio no haya sido comprado (asignado a una orden de compra)

                            If Not String.IsNullOrEmpty(strTramite) Then

                                strOrdenCompra = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Ord_Comp", i).Trim

                                'codigo de accesorio
                                If Not String.IsNullOrEmpty(strOrdenCompra) Then
                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.El_Tramite + strTramite + My.Resources.Resource.AccesorioAsignadoOrdenCompra, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                    Exit Sub
                                End If


                                strArtCompra = ""
                                strArtCompra = Utilitarios.EjecutarConsulta(String.Format("SELECT PrchseItem FROM OITM  with (nolock) WHERE ItemCode = '{0}'", strTramite), m_oCompany.CompanyDB, m_oCompany.Server)
                                'validacion de articulo de compra
                                If String.IsNullOrEmpty(strArtCompra) _
                                    Or strArtCompra = "N" Then
                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.El_Tramite + strTramite + My.Resources.Resource.DebeSerDeCompra, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                    Exit Sub
                                End If

                                blnCompra = True

                                strCantidad = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Cant", i).Trim

                                If Not String.IsNullOrEmpty(strCantidad) Then
                                    intCantidad = Integer.Parse(strCantidad)
                                End If
                                strCostoTram = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Costo", i).Trim

                                If Not String.IsNullOrEmpty(strCostoTram) Then
                                    decCostoTram = Decimal.Parse(strCostoTram, n)
                                End If

                                strImpCompra = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Imp_Com", i).Trim
                                strProveedor = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_ProvTram", i).Trim

                                If intCantidad <= 0 OrElse decCostoTram <= 0 OrElse String.IsNullOrEmpty(strImpCompra) OrElse String.IsNullOrEmpty(strProveedor) Then

                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorDatosCompraTram & strTramite, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                    BubbleEvent = False
                                    Exit For

                                End If

                                ReDim Preserve strArregloTram(intContadorTram)
                                strArregloTram(intContadorTram) = strTramite
                                ReDim Preserve intArregloCantTram(intContadorTram)
                                intArregloCantTram(intContadorTram) = intCantidad
                                ReDim Preserve decArregloCostoTram(intContadorTram)
                                decArregloCostoTram(intContadorTram) = decCostoTram
                                ReDim Preserve strArregloImpCompraTram(intContadorTram)
                                strArregloImpCompraTram(intContadorTram) = strImpCompra
                                ReDim Preserve strArregloProveedorTram(intContadorTram)
                                strArregloProveedorTram(intContadorTram) = strProveedor
                                ReDim Preserve intArregloPosicDSTram(intContadorTram)
                                intArregloPosicDSTram(intContadorTram) = i

                                If intContProvTram = 0 Then

                                    ReDim Preserve strArregloProvTram(intContProvTram)
                                    strArregloProvTram(intContProvTram) = strArregloProveedorTram(intContadorTram)
                                    intContProvTram += 1

                                ElseIf intContProvTram > 0 Then

                                    blnExisteProv = False

                                    For Each proveedor As String In strArregloProvTram

                                        If strArregloProveedorTram(intContadorTram) = proveedor Then

                                            blnExisteProv = True
                                            Exit For

                                        End If

                                    Next

                                    If blnExisteProv = False Then

                                        ReDim Preserve strArregloProvTram(intContProvTram)
                                        strArregloProvTram(intContProvTram) = strArregloProveedorTram(intContadorTram)
                                        intContProvTram += 1

                                    End If

                                End If

                                intContadorTram += 1

                            End If

                        End If

                    Next

                    If blnCompra = False Then

                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorTramitesComprar, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        BubbleEvent = False
                        Exit Sub

                    End If


                ElseIf pval.ItemUID = "btnCompTra" AndAlso pval.BeforeAction = False AndAlso pval.ActionSuccess = True Then

                    Call GenerarOrdenesCompraTramites(oForm)

                ElseIf pval.ItemUID = "btnDelTra" AndAlso pval.ActionSuccess = False AndAlso pval.BeforeAction = True Then

                    Dim oMatrixTram As SAPbouiCOM.Matrix
                    Dim intRegistoEliminar As Integer
                    Dim strOrdenCompra As String

                    oMatrixTram = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

                    intRegistoEliminar = oMatrixTram.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_RowOrder)

                    If intRegistoEliminar > -1 Then

                        oMatrixTram.FlushToDataSource()

                        strOrdenCompra = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Ord_Comp", intRegistoEliminar - 1).Trim

                        If Not String.IsNullOrEmpty(strOrdenCompra) Then

                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorElimTramCompra, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                            BubbleEvent = False
                            Exit Sub

                        End If

                    End If

                ElseIf pval.ItemUID = "1" AndAlso pval.ActionSuccess = True AndAlso pval.FormMode = BoFormMode.fm_ADD_MODE Then

                    'Validacion para ver si se desea crear un nuevo contrato o no
                    If m_SBO_Application.MessageBox(My.Resources.Resource.ContinuaHaciendoCV, 2, My.Resources.Resource.Si, My.Resources.Resource.No) = 2 Then
                        BubbleEvent = False
                        oForm.Close()
                    Else
                        oForm.Freeze(True)

                        Dim strMonedaDefecto As String

                        'Limpia los campos para dejar el formulario en blanco
                        Call AsignarValoresIniciales()
                        Call CargaSucursalAlContrato()

                        'Obtengo la moneda y la pongo en el txt
                        strMonedaDefecto = oDataTableConfiguracionesDMS.GetValue("U_Mon_Def", 0)

                        If Not String.IsNullOrEmpty(strMonedaDefecto) Then
                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Moneda", 0, strMonedaDefecto)
                        Else
                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Moneda", 0, m_strMonedaSistema)
                            strMonedaDefecto = m_strMonedaSistema
                        End If

                        'Obtengo la fecha del Contrato y la pongo en el txt
                        strFechaContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0)
                        strFechaContrato = strFechaContrato.Trim()

                        If Not String.IsNullOrEmpty(strFechaContrato) Then
                            dtFechaContrato = Date.ParseExact(strFechaContrato, "yyyyMMdd", Nothing)
                        Else
                            dtFechaContrato = Now.Date
                        End If

                        'Obtengo el tipo de cambio y lo pongo en el txt
                        m_decTipoCambio = m_objBLSBO.RetornarTipoCambioMoneda(strMonedaDefecto, dtFechaContrato, m_strConectionString, False)


                        'STRING MONEDAS
                        Dim objGlobal As DMSOneFramework.BLSBO.GlobalFunctionsSBO
                        'monedas
                        objGlobal = New DMSOneFramework.BLSBO.GlobalFunctionsSBO

                        strMonedaLocal = objGlobal.RetornarMonedaLocal

                        If m_decTipoCambio = -1 And strMonedaDefecto.Trim() <> strMonedaLocal Then
                            oForm.Items.Item("txtTipoCam").Specific.value = 0
                            m_SBO_Application.MessageBox(My.Resources.Resource.TipoCambioNoActualizado)
                        Else
                            oForm.Items.Item("txtTipoCam").Specific.value = m_decTipoCambio
                        End If

                        'Focus al txt cliente
                        oForm.Items.Item("txtCl").Click()

                        oForm.Freeze(False)

                    End If

                ElseIf pval.ItemUID = "btnHistApr" Then

                    If (pval.Before_Action) Then
                        oForm = m_SBO_Application.Forms.GetForm(pval.FormTypeEx, pval.FormTypeCount)
                        Dim boolExisteForm As Boolean
                        boolExisteForm = Utilitarios.ValidarSiFormularioAbierto(g_strFormcomentariosApr, True, m_SBO_Application)
                        If Not boolExisteForm Then
                            CargarFormularioHistorialApr(pval, BubbleEvent)
                        End If

                    ElseIf Not pval.Before_Action Then
                        Dim numOT As String
                        Dim DocEntry As String
                        oForm = m_SBO_Application.Forms.GetForm(pval.FormTypeEx, pval.FormTypeCount)
                        DocEntry = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0).Trim()
                        objHistorial.LoadMatrixLines(pval.FormUID, DocEntry)

                    End If

                ElseIf (pval.ItemUID = "chkAuto" Or pval.ItemUID = "chkManu" Or pval.ItemUID = "chkSinCo") AndAlso pval.ActionSuccess Then
                    ManejadorChecksBoxConsignado(pval.ItemUID, oForm)
                End If

                If pval.BeforeAction Then
                    Select Case pval.ItemUID

                        Case g_str_mtxBonos

                        Case "1"
                            EliminaLineasBlancoMatrix(g_str_mtxBonos, g_str_BONOXCONT, g_strUBono, g_strUMonto, oForm)
                            EliminaLineasBlancoMatrix(g_str_mtxOtrosCostos, g_str_OTROCXCV, g_strUCodCos, g_strUMonto, oForm)

                        Case "btnEliBon"

                        Case "Folder9"

                        Case "btnCalTB"

                    End Select
                    If blnDibuja Then
                        Call ValidaPermisoAprobacion(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CSucu", 0).ToString().Trim(), oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Estado", 0).ToString().Trim())
                    End If
                ElseIf pval.ActionSuccess Then
                    Select Case pval.ItemUID

                        Case g_str_mtxBonos

                        Case "1"

                        Case "btnEliBono"
                            EliminarLíneasMatrizBonos(FormUID)
                            CalculaTotalBonos(oForm)
                            'AgregaLineaMatrizBonos(oForm)
                        Case "Folder9", "Folder2"
                            If oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).Size > 0 Or _
                                oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size > 0 Then
                                oForm.Freeze(True)
                                CalculaTotalBonos(oForm)
                                CalculaTotalOtrosCostos(oForm)
                                Call CalculaPrecioAccesorios(oForm)
                                CalcularCostos(pval.FormUID)
                                If oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue(mc_strU_PorDes, 0).ToString().Trim() = "Y" AndAlso Not SeguroPV Then
                                    oForm.Items.Item("txtPorDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                    oForm.Items.Item("txtNota_Cr").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                                ElseIf oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue(mc_strU_PorDes, 0).ToString().Trim() = "N" Then
                                    oForm.Items.Item("txtPorDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                                    oForm.Items.Item("txtNota_Cr").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                End If
                                oForm.Freeze(False)
                            End If

                            oDataTablePagosRealizados = oForm.DataSources.DataTables.Item("Pagos")

                            If oDataTablePagosRealizados.Rows.Count > 0 Then
                                CalcularCostos(pval.FormUID)

                                If oForm.Mode = BoFormMode.fm_OK_MODE Then
                                    oForm.Mode = BoFormMode.fm_UPDATE_MODE
                                End If
                            End If

                        Case "btnCalTB"
                            If oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).Size > 1 Then
                                CalculaTotalBonos(oForm)
                            End If
                        Case "chkPorDes"
                            If oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue(mc_strU_PorDes, 0).ToString.Trim() = "Y" Then
                                oForm.Items.Item("txtPorDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                oForm.Items.Item("txtNota_Cr").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                            ElseIf oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue(mc_strU_PorDes, 0).ToString.Trim() = "N" Then
                                oForm.Items.Item("txtPorDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                                oForm.Items.Item("txtNota_Cr").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                            End If

                        Case "chkPorDes2"

                            Dim strManejoDescuentoFact As String = oDataTableConfiguracionesDMS.GetValue("U_Desc_Fac", 0)

                            If strManejoDescuentoFact = "Y" Then
                                If oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_PorDesV", 0).ToString.Trim() = "Y" Then
                                    oForm.Items.Item("txtPorTemp").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                    oForm.Items.Item("txtDescUni").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                                ElseIf oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_PorDesV", 0).ToString.Trim() = "N" Then
                                    oForm.Items.Item("txtPorTemp").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                                    oForm.Items.Item("txtDescUni").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                                End If
                            End If

                    End Select


                End If

            End If
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        Finally

            If BubbleEvent = True Then

            End If
        End Try
    End Sub

    ''' <summary>
    ''' Valida que los campos ingresados en el vehículo usados sean correctos
    ''' </summary>
    ''' <returns>True = Datos Válidos. False = Datos inválidos, formato incorrecto o faltantes</returns>
    ''' <remarks></remarks>
    Private Function ValidarCamposUsado() As Boolean
        Dim strKilometraje As String = String.Empty
        Dim dblKilometraje As Double = 0

        Try
            'Validación del Kilometraje
            strKilometraje = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_KmU", 0).Trim()
            If String.IsNullOrEmpty(strKilometraje) Then
                'Mensaje de error, el Kilometraje no puede estar en blanco
                m_SBO_Application.SetStatusBarMessage(My.Resources.Resource.ErrorKilometrajeVacio, BoMessageTime.bmt_Short, True)
                Return False
            Else
                If Not Double.TryParse(strKilometraje, dblKilometraje) Then
                    'Mensaje de error, el Kilometraje no es válido
                    m_SBO_Application.SetStatusBarMessage(My.Resources.Resource.ErrorFormatoKilometraje, BoMessageTime.bmt_Short, True)
                    Return False
                End If
            End If

            'Agregar nuevas validaciones aquí
            'Agregar nuevas validaciones aquí
            'Agregar nuevas validaciones aquí


            'Si se llega hasta este punto, significa que todas las validaciones fueron exitosas
            'y se retorna True
            Return True
        Catch ex As Exception
            DMS_Connector.Helpers.ManejoErrores(ex)
        End Try
    End Function

    Private Sub CalculaTotalOtrosCostos(ByVal p_oForm As Form)

        Dim m_intMontoTotal As Decimal = 0
        Dim m_intMonto As Decimal = 0
        Dim oMatrix As SAPbouiCOM.Matrix

        Try
            oMatrix = DirectCast(p_oForm.Items.Item(g_str_mtxOtrosCostos).Specific, SAPbouiCOM.Matrix)
            oMatrix.FlushToDataSource()

            For j As Integer = 0 To p_oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size - 1

                If Not String.IsNullOrEmpty(p_oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", j).Trim()) Then

                    For i As Integer = 0 To p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).Size - 1
                        If p_oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", j).Trim = p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).GetValue("U_Unidad", i).Trim Then

                            m_intMonto = Decimal.Parse(p_oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).GetValue(g_strUMonto, i), n)

                            m_intMontoTotal += m_intMonto

                        End If
                    Next

                End If

            Next

            p_oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_OtrCos", 0, m_intMontoTotal.ToString(n))

            oMatrix.LoadFromDataSource()

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Private Sub CalculaTotalBonos(ByVal p_oForm As Form)
        Dim m_intTamano As Integer = 0
        Dim m_intMontoTotalCobrar As Decimal = 0
        Dim m_intMontoTotal As Double = 0
        Dim m_dblMonto As Double = 0
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim m_strUnidad As String
        Dim m_dblTotalXUnidad As Double
        Dim m_intPosicion As Integer
        'Dim m_strTotalBono As String
        Dim m_dblTotalBono As Double
        Dim dblTotalBonos As Double

        Try
            oMatrix = DirectCast(p_oForm.Items.Item(g_str_mtxBonos).Specific, SAPbouiCOM.Matrix)
            oMatrix.FlushToDataSource()

            m_intTamano = p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).Size


            m_intMontoTotal = 0
            For i As Integer = 0 To m_intTamano - 1
                m_dblMonto = Double.Parse(p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).GetValue(g_strUMonto, i), n)
                m_intMontoTotal = m_intMontoTotal + m_dblMonto

                If Utilitarios.EjecutarConsulta(String.Format("select U_CobraBo from [@SCGD_TIPOBONO]  with (nolock) where Code = '{0}'",
                                  p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).GetValue(g_strUBono, i)),
                              m_oCompany.CompanyDB, m_oCompany.Server) = "Y" Then

                    m_intMontoTotalCobrar = m_intMontoTotalCobrar + m_dblMonto
                End If

            Next

            oMatrix = DirectCast(p_oForm.Items.Item(g_str_mtxVehi).Specific, SAPbouiCOM.Matrix)
            oMatrix.FlushToDataSource()

            p_oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_BonoDV2", 0, m_intMontoTotal.ToString(n))
            'p_oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_BonoDV", 0, m_intMontoTotal.ToString(n))
            p_oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MonCBo", 0, m_intMontoTotalCobrar.ToString(n))

            m_dblMonto = 0

            dtTotalesBonosXUnidad.Rows.Clear()

            For i As Integer = 0 To m_intTamano - 1

                m_strUnidad = p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).GetValue(g_strUUnidad, i).ToString().Trim()
                m_dblMonto = Double.Parse(p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).GetValue(g_strUMonto, i), n)
                If Not String.IsNullOrEmpty(m_strUnidad) Then

                    If ExisteUnidadDTTotalesBonos(dtTotalesBonosXUnidad, m_strUnidad, m_dblTotalXUnidad, m_intPosicion) Then
                        m_dblTotalXUnidad += m_dblMonto
                        dtTotalesBonosXUnidad.SetValue("Total", m_intPosicion, m_dblTotalXUnidad)
                    Else
                        dtTotalesBonosXUnidad.Rows.Add()
                        dtTotalesBonosXUnidad.SetValue("Unidad", dtTotalesBonosXUnidad.Rows.Count - 1, m_strUnidad)
                        dtTotalesBonosXUnidad.SetValue("Total", dtTotalesBonosXUnidad.Rows.Count - 1, m_dblMonto)
                    End If
                End If
            Next

            For i As Integer = 0 To dtTotalesBonosXUnidad.Rows.Count - 1
                For x As Integer = 0 To p_oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).Size - 1
                    If dtTotalesBonosXUnidad.GetValue("Unidad", i).ToString().Trim() = p_oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", x).ToString().Trim() Then

                        m_dblTotalBono = CDbl(dtTotalesBonosXUnidad.GetValue("Total", i))
                        p_oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Bono", x, CDbl(dtTotalesBonosXUnidad.GetValue("Total", i)).ToString(n))
                        dblTotalBonos += m_dblTotalBono
                        Exit For
                    End If
                Next
            Next

            p_oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_BonoDV", 0, dblTotalBonos.ToString(n))

            oMatrix.LoadFromDataSource()

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub



    Private Function ExisteUnidadDTTotalesBonos(ByVal p_dtBonosUnidad As DataTable, ByVal p_strUnidad As String,
                                                ByRef p_dblTotalXUnidad As Double, ByRef p_intPosicion As Integer) As Boolean
        Try

            For i As Integer = 0 To p_dtBonosUnidad.Rows.Count - 1
                If p_dtBonosUnidad.GetValue("Unidad", i).ToString() = p_strUnidad Then
                    p_dblTotalXUnidad = CDbl(p_dtBonosUnidad.GetValue("Total", i))
                    p_intPosicion = i
                    Return True
                End If
            Next
            Return False
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Private Sub ValidaTIUnidades(ByVal oForm As Form,
                                      ByRef blnNuevo As Boolean,
                                      ByRef blnUsado As Boolean)

        Dim strUnidad As String = String.Empty
        Dim strConsulta As String = String.Empty
        Dim strTipoInventario As String = String.Empty

        Try

            strConsulta = "select tv.U_Usado from [@SCGD_VEHICULO] as ve  with (nolock) inner join [@SCGD_TIPOVEHICULO] as tv  with (nolock) on tv.Code = ve.U_Tipo where U_Cod_Unid ='{0}'"

            For i As Integer = 0 To oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size - 1
                strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).Trim

                strTipoInventario = Utilitarios.EjecutarConsulta(String.Format(strConsulta, strUnidad), m_oCompany.CompanyDB, m_oCompany.Server)

                If strTipoInventario = "Y" Then
                    blnUsado = True
                ElseIf strTipoInventario = "N" Or String.IsNullOrEmpty(strTipoInventario) Then
                    blnNuevo = True
                End If
                If blnNuevo = True AndAlso blnUsado = True Then
                    Exit For
                End If
            Next
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    'Agregado Diego Herrera - 10/09/2012: Generación de Ordenes de Compra de Accesorios para cada accesorio a comprar según proveedor seleccionado
    'modificado Roiner Camacho - 14/11/2012
    ''' <summary>
    ''' Genera Órdenes de compra por los accesorios seleccionados 
    ''' </summary>
    ''' <param name="oForm">Form de Contrato de Ventas</param>
    ''' <remarks></remarks>
    Private Sub GenerarOrdenesCompraAccs(ByVal oForm As SAPbouiCOM.Form)


        Dim oOrdenCompra As SAPbobsCOM.Documents
        Dim intError As Integer = 0
        Dim strMensajeError As String
        Dim strContrato As String
        Dim strMoneda As String
        Dim strOrdenCompra As String
        Dim oMatrixAcc As SAPbouiCOM.Matrix
        Dim strUnidad As String
        Dim strTipoVeh As String
        Dim strBodegaAccGeneral As String
        Dim strBodegaTipoVeh As String
        Dim strCodigoTransaccionCosteoAccesorio As String = String.Empty
        Dim strMultiplesFact As String
        Dim strGenFactAccs As String
        Dim oMatrixVeh As SAPbouiCOM.Matrix
        Dim strDocEntryCV As String
        Dim strCodTitular As String
        Dim strUnidades As String

        'valor para Accesorios para costeo

        Dim strUnidadAxC As String = String.Empty

        Try

            oMatrixAcc = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

            strContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0).Trim
            strDocEntryCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0).Trim
            strCodTitular = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Foo", 0).Trim
            strMoneda = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim
            strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim

            strTipoVeh = Utilitarios.EjecutarConsulta("Select U_Tipo from dbo.[@SCGD_Vehiculo]  with (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            blnUtilizaCosteoAccesorios = Utilitarios.EjecutarConsulta("Select U_UsaAxC from dbo.[@SCGD_ADMIN]  with (nolock) ", m_oCompany.CompanyDB, m_oCompany.Server)

            'lista con todas las unidades ingresadas en el contrato de venta 
            For i As Integer = 1 To oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size
                strUnidades = strUnidades + " " + oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i - 1).Trim
            Next

            strBodegaTipoVeh = objConfiguracionGeneral.AccesoriosXAlmacen(strTipoVeh)
            strBodegaAccGeneral = oDataTableConfiguracionesDMS.GetValue("U_SCGD_BodAcc", 0)

            strMultiplesFact = oDataTableConfiguracionesDMS.GetValue("U_Mul_Fac", 0)

            strGenFactAccs = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GenFaAcc", 0).Trim

            strCodigoTransaccionCosteoAccesorio = objConfiguracionGeneral.CodigoTransaccionAccesorioCosteo

            oMatrixVeh = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

            Dim strUsaDimensiones As String = oDataTableConfiguracionesDMS.GetValue("U_UsaDimC", 0)

            If strUsaDimensiones = "Y" Then
                'hago el llamado para cargar la configuracion de los documentos
                'que usaran Dimensiones
                ListaConfiguracion = New Hashtable
                ListaConfiguracion = ClsLineasDocumentosDimension.DatatableConfiguracionDocumentosDimensiones()
                blnUsaDimensiones = True
            End If

            If m_oCompany.InTransaction Then
                m_oCompany.EndTransaction(BoWfTransOpt.wf_RollBack)
            End If

            m_oCompany.StartTransaction()

            For Each proveedor As String In strArregloProvAccs

                oOrdenCompra = DirectCast(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oPurchaseOrders), SAPbobsCOM.Documents)

                oOrdenCompra.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Items
                oOrdenCompra.CardCode = proveedor
                oOrdenCompra.Comments = My.Resources.Resource.ComentarioCompraAccs & strContrato
                oOrdenCompra.DocCurrency = strMoneda
                oOrdenCompra.DocDate = Now.Date
                'codigo de titular
                oOrdenCompra.SalesPersonCode = strCodTitular
                'lista de unidades 
                oOrdenCompra.UserFields.Fields.Item("U_SCGD_Unidades").Value = strUnidades

                'ingreso >> 8 = Tipo Accesorio
                '           DocEntry del CV
                oOrdenCompra.UserFields.Fields.Item("U_SCGD_TipoArt").Value = "7"
                oOrdenCompra.UserFields.Fields.Item("U_SCGD_NoCVta").Value = strDocEntryCV

                For i As Integer = 0 To intContadorAccs - 1

                    If strArregloProveedorAcc(i) = proveedor Then
                        'ingreso el numero de linea del cv

                        If blnUtilizaCosteoAccesorios = "Y" Then

                            'por cada unidad se agrega una linea en la orden de compra para Costeo
                            For m As Integer = 1 To oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size

                                strUnidadAxC = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", m - 1).Trim

                                oOrdenCompra.Lines.UserFields.Fields.Item("U_SCGD_LineCV").Value = intArregloLinesAcc(i).ToString()
                                oOrdenCompra.Lines.ItemCode = strArregloAccesorio(i)

                                oOrdenCompra.Lines.UserFields.Fields.Item("U_SCGD_Cod_Unid").Value = strUnidadAxC
                                oOrdenCompra.Lines.UserFields.Fields.Item("U_SCGD_Cod_Tran").Value = strCodigoTransaccionCosteoAccesorio

                                oOrdenCompra.Lines.Quantity = intArregloCantAcc(i)

                                oOrdenCompra.Lines.UnitPrice = decArregloCostoAcc(i)
                                oOrdenCompra.Lines.TaxCode = strArregloImpCompraAcc(i)
                                oOrdenCompra.Lines.VatGroup = strArregloImpCompraAcc(i)

                                If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                                    oOrdenCompra.Lines.WarehouseCode = strBodegaTipoVeh
                                ElseIf Not String.IsNullOrEmpty(strBodegaAccGeneral) Then
                                    oOrdenCompra.Lines.WarehouseCode = strBodegaAccGeneral
                                End If

                                If blnUsaDimensiones Then
                                    '******************************************************************************************
                                    'lleno el datatable de dimensiones para el tipo de inventario y la marca del vehiculo
                                    Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from dbo.[@SCGD_VEHICULO]  with (nolock) where U_Cod_Unid = '" & strUnidadAxC.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                    oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_TipIn", m - 1).Trim, strCodigoMarca, oDataTableDimensionesContablesDMS))
                                    '******************************************************************************************
                                    If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                                        ClsLineasDocumentosDimension.AgregarDimensionesLineasDocumentos(oOrdenCompra.Lines, oDataTableDimensionesContablesDMS)

                                    End If

                                End If

                                oOrdenCompra.Lines.Add()
                            Next

                        Else

                            If blnUsaDimensiones Then
                                'Si utiliza dimensiones, debe existir una línea para cada accesorio por cada vehículo ya que las dimensiones se asignan por vehículo
                                For m As Integer = 1 To oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size

                                    strUnidadAxC = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", m - 1).Trim
                                    oOrdenCompra.Lines.UserFields.Fields.Item("U_SCGD_LineCV").Value = intArregloLinesAcc(i).ToString()
                                    oOrdenCompra.Lines.ItemCode = strArregloAccesorio(i)
                                    oOrdenCompra.Lines.Quantity = intArregloCantAcc(i)
                                    oOrdenCompra.Lines.UnitPrice = decArregloCostoAcc(i)
                                    oOrdenCompra.Lines.TaxCode = strArregloImpCompraAcc(i)
                                    oOrdenCompra.Lines.VatGroup = strArregloImpCompraAcc(i)

                                    If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                                        oOrdenCompra.Lines.WarehouseCode = strBodegaTipoVeh
                                    ElseIf Not String.IsNullOrEmpty(strBodegaAccGeneral) Then
                                        oOrdenCompra.Lines.WarehouseCode = strBodegaAccGeneral
                                    End If

                                    If blnUsaDimensiones Then
                                        '******************************************************************************************
                                        'lleno el datatable de dimensiones para el tipo de inventario y la marca del vehiculo
                                        Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from dbo.[@SCGD_VEHICULO]  with (nolock) where U_Cod_Unid = '" & strUnidadAxC.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                        oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_TipIn", m - 1).Trim, strCodigoMarca, oDataTableDimensionesContablesDMS))
                                        '******************************************************************************************
                                        If oDataTableDimensionesContablesDMS.Rows.Count <> 0 Then

                                            ClsLineasDocumentosDimension.AgregarDimensionesLineasDocumentos(oOrdenCompra.Lines, oDataTableDimensionesContablesDMS)

                                        End If

                                    End If

                                    oOrdenCompra.Lines.Add()
                                Next


                            Else
                                oOrdenCompra.Lines.UserFields.Fields.Item("U_SCGD_LineCV").Value = intArregloLinesAcc(i).ToString()
                                oOrdenCompra.Lines.ItemCode = strArregloAccesorio(i)

                                If strMultiplesFact = "Y" AndAlso oMatrixVeh.RowCount > 1 AndAlso Not strGenFactAccs = "Y" Then
                                    oOrdenCompra.Lines.Quantity = intArregloCantAcc(i) * oMatrixVeh.RowCount
                                Else
                                    oOrdenCompra.Lines.Quantity = intArregloCantAcc(i)
                                End If
                                oOrdenCompra.Lines.UnitPrice = decArregloCostoAcc(i)
                                oOrdenCompra.Lines.TaxCode = strArregloImpCompraAcc(i)
                                oOrdenCompra.Lines.VatGroup = strArregloImpCompraAcc(i)
                                If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                                    oOrdenCompra.Lines.WarehouseCode = strBodegaTipoVeh
                                ElseIf Not String.IsNullOrEmpty(strBodegaAccGeneral) Then
                                    oOrdenCompra.Lines.WarehouseCode = strBodegaAccGeneral
                                End If
                                oOrdenCompra.Lines.Add()
                            End If

                        End If

                    End If

                Next

                intError = oOrdenCompra.Add()
                If intError <> 0 Then
                    m_oCompany.GetLastError(intError, strMensajeError)
                    Throw New ExceptionsSBO(intError, strMensajeError)
                Else
                    m_oCompany.GetNewObjectCode(strOrdenCompra)

                    For i As Integer = 0 To intContadorAccs - 1

                        If strArregloProveedorAcc(i) = proveedor Then

                            oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Ord_Acc", intArregloPosicDSAcc(i), strOrdenCompra)

                        End If

                    Next

                End If

            Next

            LimpiarCheckCompra("@SCGD_ACCXCONT", "U_Ord_Acc")

            oMatrixAcc.LoadFromDataSource()

            m_oCompany.EndTransaction(BoWfTransOpt.wf_Commit)

            oForm.Items.Item("btnComprar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)

            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.OrdenCompraAccRealziada, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Success)

            g_blnEventoActualizarAfecta = False

            oForm.Mode = SAPbouiCOM.BoFormMode.fm_UPDATE_MODE
            oForm.Items.Item("1").Click(SAPbouiCOM.BoCellClickType.ct_Regular)

            g_blnEventoActualizarAfecta = True

        Catch ex As Exception
            'manejo de rollback para la transaccion
            If m_oCompany.InTransaction Then
                m_oCompany.EndTransaction(BoWfTransOpt.wf_RollBack)
            End If

            Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Private Sub LimpiarCheckCompra(ByVal Tabla As String, ByVal ColumnaOrden As String)
        For i As Integer = 0 To oForm.DataSources.DBDataSources.Item(Tabla).Size - 1
            If Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item(Tabla).GetValue(ColumnaOrden, i).Trim) Then
                oForm.DataSources.DBDataSources.Item(Tabla).SetValue("U_Comprar", i, "N")
            Else
                oForm.DataSources.DBDataSources.Item(Tabla).SetValue("U_Comprar", i, "Y")
            End If
        Next
    End Sub

    'Agregado Diego Herrera - 18/09/2012: Generación de Ordenes de Compra de Trámites para cada trámite a comprar según proveedor seleccionado

    Private Sub GenerarOrdenesCompraTramites(ByVal oForm As SAPbouiCOM.Form)

        Dim oOrdenCompra As SAPbobsCOM.Documents

        Dim intError As Integer = 0
        Dim strMensajeError As String
        Dim strContrato As String
        Dim strMoneda As String
        Dim strOrdenCompra As String
        Dim oMatrixTram As SAPbouiCOM.Matrix
        Dim strUnidad As String
        Dim strTipoVeh As String
        Dim strBodegaTipoVeh As String
        Dim strBodegaTramGeneral As String
        Dim strDocEntryCV As String
        Dim strCodTitular As String
        Dim strUnidades As String

        Try

            oMatrixTram = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

            strContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0).Trim
            strDocEntryCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0).Trim
            strCodTitular = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Foo", 0).Trim
            strMoneda = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim
            strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim

            strTipoVeh = Utilitarios.EjecutarConsulta("Select U_Tipo from dbo.[@SCGD_Vehiculo]  with (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            'lista con todas las unidades ingresadas en el contrato de venta 
            For i As Integer = 1 To oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size
                strUnidades = strUnidades + " " + oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i - 1).Trim
            Next

            strBodegaTipoVeh = Utilitarios.EjecutarConsulta("Select U_Bod_Tram from dbo.[@SCGD_ADMIN4]  with (nolock) where U_Tipo = '" & strTipoVeh & "' and Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)
            strBodegaTramGeneral = oDataTableConfiguracionesDMS.GetValue("U_AlmGeTra", 0)

            m_oCompany.StartTransaction()

            For Each proveedor As String In strArregloProvTram

                oOrdenCompra = DirectCast(m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oPurchaseOrders), SAPbobsCOM.Documents)

                oOrdenCompra.DocType = SAPbobsCOM.BoDocumentTypes.dDocument_Items
                oOrdenCompra.CardCode = proveedor
                oOrdenCompra.Comments = My.Resources.Resource.ComentarioCompraTramites & strContrato
                oOrdenCompra.DocCurrency = strMoneda
                oOrdenCompra.DocDate = Now.Date

                'codigo de titular
                oOrdenCompra.SalesPersonCode = strCodTitular
                oOrdenCompra.UserFields.Fields.Item("U_SCGD_Unidades").Value = strUnidades
                oOrdenCompra.UserFields.Fields.Item("U_SCGD_TipoArt").Value = "9"
                oOrdenCompra.UserFields.Fields.Item("U_SCGD_NoCVta").Value = strDocEntryCV

                For i As Integer = 0 To intContadorTram - 1

                    If strArregloProveedorTram(i) = proveedor Then

                        oOrdenCompra.Lines.ItemCode = strArregloTram(i)
                        oOrdenCompra.Lines.Quantity = intArregloCantTram(i)
                        oOrdenCompra.Lines.UnitPrice = decArregloCostoTram(i)
                        oOrdenCompra.Lines.TaxCode = strArregloImpCompraTram(i)
                        oOrdenCompra.Lines.VatGroup = strArregloImpCompraTram(i)
                        If Not String.IsNullOrEmpty(strBodegaTipoVeh) Then
                            oOrdenCompra.Lines.WarehouseCode = strBodegaTipoVeh
                        ElseIf Not String.IsNullOrEmpty(strBodegaTramGeneral) Then
                            oOrdenCompra.Lines.WarehouseCode = strBodegaTramGeneral
                        End If
                        oOrdenCompra.Lines.Add()

                    End If

                Next

                intError = oOrdenCompra.Add()
                If intError <> 0 Then
                    m_oCompany.GetLastError(intError, strMensajeError)
                    Throw New ExceptionsSBO(intError, strMensajeError)
                Else
                    m_oCompany.GetNewObjectCode(strOrdenCompra)

                    For i As Integer = 0 To intContadorTram - 1

                        If strArregloProveedorTram(i) = proveedor Then

                            oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Ord_Comp", intArregloPosicDSTram(i), strOrdenCompra)

                        End If

                    Next

                End If

            Next

            LimpiarCheckCompra("@SCGD_TRAMXCONT", "U_Ord_Comp")

            oMatrixTram.LoadFromDataSource()

            m_oCompany.EndTransaction(BoWfTransOpt.wf_Commit)

            oForm.Items.Item("btnCompTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)

            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.OrdenCompraTramRealizada, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Success)

            g_blnEventoActualizarAfecta = False

            oForm.Mode = SAPbouiCOM.BoFormMode.fm_UPDATE_MODE
            oForm.Items.Item("1").Click(SAPbouiCOM.BoCellClickType.ct_Regular)

            g_blnEventoActualizarAfecta = True

        Catch ex As Exception

            Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    'obtiene la direccion del archivo, manejo del FileDialog
    Private Sub ManejoOpenFileDialog()
        Dim myStream As Stream = Nothing
        Dim openFileDialog1 As New OpenFileDialog()

        openFileDialog1.InitialDirectory = "C:\"
        openFileDialog1.Filter = "Archivos Excel(*.xlsx ; *.xls)|*.xlsx;*.xls"
        openFileDialog1.FilterIndex = 2
        openFileDialog1.Title = My.Resources.Resource.TituloBuscadorExcel
        openFileDialog1.Multiselect = False
        openFileDialog1.RestoreDirectory = True

        If openFileDialog1.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
            Try
                myStream = openFileDialog1.OpenFile()
                If (myStream IsNot Nothing) Then
                    ' Insert code to read the stream here.
                    StrDireccion = openFileDialog1.FileName
                End If
            Catch Ex As Exception
                'Error al cargar el excel
                m_SBO_Application.StatusBar.SetText(
                            My.Resources.Resource.ErrorCargaExcel, _
                            SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
            Finally
                ' Check this again, since we need to make sure we didn't throw an exception on open.
                If (myStream IsNot Nothing) Then
                    myStream.Close()
                    oForm.Freeze(True)
                    CargaMasiva = True
                    'se carga el excel en un datatable
                    Call CargaExcel(oForm)
                    CargaMasiva = False

                    oForm.Freeze(False)
                End If
            End Try
            'StrDireccion = openFileDialog1.FileName
            'Call CargaExcel(oForm)
        End If

    End Sub

    'Se obtienen los datos de las hojas de excel, 
    'se manipulan para obtenerlos en un datatable
    Private Sub CargaExcel(ByVal oForm As SAPbouiCOM.Form)
        Try
            Dim inserto As Boolean = False

            'declaracion de objetos excel
            Dim oAppExcel As Excel.Application
            Dim oLibroExcel As Excel.Workbook
            Dim oHojaExcel As Excel.Worksheet

            If Not String.IsNullOrEmpty(StrDireccion) Then

                oAppExcel = New Excel.ApplicationClass
                oLibroExcel = oAppExcel.Workbooks.Open(StrDireccion, 0, True, 5, "", "", True, Microsoft.Office.Interop.Excel.XlPlatform.xlWindows, "\t", False, False, 0, True, False, Microsoft.Office.Interop.Excel.XlCorruptLoad.xlNormalLoad)
                oHojaExcel = oLibroExcel.Worksheets(1)

                Dim contadorCelda As Integer = 1
                Dim strUnidad As String = ""
                Dim strPrecio As String = ""
                'limpiar el datatable 
                dtUnidadesExcelSBO.Rows.Clear()
                'Realizando carga excel
                m_SBO_Application.StatusBar.SetText(
                            My.Resources.Resource.RealizandoCargaExcel, _
                            SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Warning)
                'carga el datatable con los datos de excel
                While Not String.IsNullOrEmpty(oHojaExcel.Cells(contadorCelda + 1, 1).Value)
                    strUnidad = oHojaExcel.Cells(contadorCelda + 1, 1).Value
                    strPrecio = oHojaExcel.Cells(contadorCelda + 1, 2).Value
                    dtUnidadesExcelSBO.Rows.Add(1)
                    If String.IsNullOrEmpty(strPrecio) Then
                        strPrecio = "0"
                    End If
                    dtUnidadesExcelSBO.SetValue("unidad", contadorCelda - 1, strUnidad)
                    dtUnidadesExcelSBO.SetValue("precio", contadorCelda - 1, strPrecio)
                    contadorCelda = contadorCelda + 1
                End While

                oLibroExcel.Close()
                oAppExcel.Quit()

                'insertar unidades existentes
                If Not dtUnidadesExcelSBO Is Nothing Then

                    If dtUnidadesExcelSBO.Rows.Count > 0 Then
                        'Inserta las unidades en el Contrato de Ventas
                        inserto = InsertaUnidades(dtUnidadesExcelSBO, oForm)

                        If inserto Then
                            'Finaliza carga excel
                            m_SBO_Application.StatusBar.SetText(
                                        My.Resources.Resource.TerminandoOperaciones, _
                                        SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Warning)

                            'calculo de precios de venta para el contrato de ventas
                            CalculaPrecioVenta(oForm)
                            'cargo los pagos realizados 
                            CargarPagosRealizados(oForm)
                            'Formateo de precio base 
                            FormateaPreciosBase(oForm)
                            'calcula costos
                            CalcularCostos(oForm.UniqueID)
                            'Finaliza carga excel
                            m_SBO_Application.StatusBar.SetText(
                                        My.Resources.Resource.FinalizaCargaExcel & contadorCelda - 1 & My.Resources.Resource.UnidadesProcesadas, _
                                        SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Success)
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub


    'retorna la version de Office que se tiene
    Private Function verVersion() As Object

        Dim Obj As Object
        Dim TempVer As Object
        On Error Resume Next

        ' Para el Excel  
        Obj = CreateObject("Excel.Application")
        TempVer = Obj.version
        ' retorna el valor a la función 
        verVersion = TempVer
        ' cierra y elimina la referencia creada  
        Obj.quit()
        Obj = Nothing

    End Function

    'agrega unidades al contrato de ventas
    Private Function InsertaUnidades(ByVal dtUnidadesExcel As SAPbouiCOM.DataTable, ByVal oForm As SAPbouiCOM.Form) As Boolean
        Try
            Dim intMens As Integer = 0
            Dim oMVehiculos As SAPbouiCOM.Matrix
            Dim contador As Integer = 0

            oMVehiculos = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

            oMVehiculos.FlushToDataSource()
            oMVehiculos.Clear()

            'manejo de vehiculos cargados previamente en el contrato
            If oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size > 0 Then
                If Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim) Then
                    intMens = m_SBO_Application.MessageBox(My.Resources.Resource.PreguntaCargaMasiva, 1, My.Resources.Resource.Si, My.Resources.Resource.No, My.Resources.Resource.btnCancelar)
                Else
                    intMens = 1
                End If
                'Respuesta al borrar???
                If intMens = 1 Then

                    'Validando carga
                    m_SBO_Application.StatusBar.SetText(
                               My.Resources.Resource.ValidaCargaExcel, _
                               SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Warning)

                    '****************
                    'manejo de validaciones sobre las unidades
                    Dim dtUnidadesExistentes As DataTable = ValidaUnidades(dtUnidadesExcel, oForm)
                    '****************

                    'si no hay errores con las unidades
                    If dtUnidadesExistentes IsNot Nothing Then
                        'inicio de carga
                        m_SBO_Application.StatusBar.SetText(
                                               My.Resources.Resource.IniciaCargaExcel, _
                                               SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Warning)

                        'Datos de tipos de transmision
                        dtTransmision.ExecuteQuery("SELECT Code, Name FROM [@SCGD_TRANSMISION]")

                        'limpio el datasource
                        oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Clear()

                        For i As Integer = 0 To dtUnidadesExistentes.Rows.Count - 1
                            Dim strUnidad As String = ""
                            Dim strMarca As String = ""
                            Dim strEstilo As String = ""
                            Dim strModelo As String = ""
                            Dim strColor As String = ""
                            Dim strNumMotor As String = ""
                            Dim strNumVIN As String = ""
                            Dim strAno As String = ""
                            Dim strPlaca As String = ""
                            Dim strTransmision As String = ""
                            Dim strPreVenta As Decimal
                            Dim strImpuestos As String = ""

                            If Not IsDBNull(dtUnidadesExistentes.Columns.Item("U_Cod_Unid").Cells.Item(i).Value) Then strUnidad = dtUnidadesExistentes.Columns.Item("U_Cod_Unid").Cells.Item(i).Value
                            If Not IsDBNull(dtUnidadesExistentes.Columns.Item("U_Des_Marc").Cells.Item(i).Value) Then strMarca = dtUnidadesExistentes.Columns.Item("U_Des_Marc").Cells.Item(i).Value
                            If Not IsDBNull(dtUnidadesExistentes.Columns.Item("U_Des_Esti").Cells.Item(i).Value) Then strEstilo = dtUnidadesExistentes.Columns.Item("U_Des_Esti").Cells.Item(i).Value
                            If Not IsDBNull(dtUnidadesExistentes.Columns.Item("U_Des_Mode").Cells.Item(i).Value) Then strModelo = dtUnidadesExistentes.Columns.Item("U_Des_Mode").Cells.Item(i).Value
                            If Not IsDBNull(dtUnidadesExistentes.Columns.Item("U_Des_Col").Cells.Item(i).Value) Then strColor = dtUnidadesExistentes.Columns.Item("U_Des_Col").Cells.Item(i).Value
                            If Not IsDBNull(dtUnidadesExistentes.Columns.Item("U_Num_Mot").Cells.Item(i).Value) Then strNumMotor = dtUnidadesExistentes.Columns.Item("U_Num_Mot").Cells.Item(i).Value
                            If Not IsDBNull(dtUnidadesExistentes.Columns.Item("U_Num_VIN").Cells.Item(i).Value) Then strNumVIN = dtUnidadesExistentes.Columns.Item("U_Num_VIN").Cells.Item(i).Value
                            If Not IsDBNull(dtUnidadesExistentes.Columns.Item("U_Ano_Vehi").Cells.Item(i).Value) Then strAno = dtUnidadesExistentes.Columns.Item("U_Ano_Vehi").Cells.Item(i).Value
                            If Not IsDBNull(dtUnidadesExistentes.Columns.Item("U_Num_Plac").Cells.Item(i).Value) Then strPlaca = dtUnidadesExistentes.Columns.Item("U_Num_Plac").Cells.Item(i).Value
                            If Not IsDBNull(dtUnidadesExistentes.Columns.Item("U_Transmis").Cells.Item(i).Value) Then
                                'se selecciona sobre el datatable
                                strTransmision = Utilitarios.SeleccionaCampo(dtTransmision, "Name", "Code", dtUnidadesExistentes.Columns.Item("U_Transmis").Cells.Item(i).Value)
                            End If
                            If Not IsDBNull(dtUnidadesExistentes.Columns.Item("U_Precio").Cells.Item(i).Value) Then strPreVenta = dtUnidadesExistentes.Columns.Item("U_Precio").Cells.Item(i).Value
                            If Not IsDBNull(dtUnidadesExistentes.Columns.Item("U_Tipo").Cells.Item(i).Value) Then strImpuestos = dtUnidadesExistentes.Columns.Item("U_Tipo").Cells.Item(i).Value

                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").InsertRecord(contador)
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Cod_Unid", contador, strUnidad)
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Des_Marc", contador, strMarca)
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Des_Esti", contador, strEstilo)
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Des_Mode", contador, strModelo)
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Des_Col", contador, strColor)
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Num_Mot", contador, strNumMotor)
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Num_VIN", contador, strNumVIN)
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Ano_Vehi", contador, strAno)
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Num_Plac", contador, strPlaca)
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Transmi", contador, strTransmision)
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pre_Vta", contador, strPreVenta.ToString(n))
                            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Impuesto", contador, strImpuestos)

                            oMVehiculos.AddRow(1, contador)
                            contador = contador + 1

                        Next

                        oMVehiculos.LoadFromDataSource()
                        Return True
                    Else
                        Return False
                    End If
                Else
                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.NoInsertoUnidades, BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Warning)
                    'si no borra carga del datasource
                    oMVehiculos.LoadFromDataSource()
                End If
            End If
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    'manejo de las validaciones para las unidades
    Private Function ValidaUnidades(ByVal dtUnidadesExcel As SAPbouiCOM.DataTable, ByVal oForm As SAPbouiCOM.Form) As SAPbouiCOM.DataTable
        Try
            '*********************                  VARIABLES                  *********************
            'existen errores en las unidades?
            Dim Errores As Boolean = False
            'se imprimieron mensajes de error?
            Dim Mensaje As Boolean = False

            '*****     VARIABLES GENERALES PARA ERROR EN UNIDADES     *****
            Dim comando As String = ""
            Dim strUnidadMensaje As String = ""
            Dim strCliente As String = ""

            '*****     ERROR UNIDADES REPETIDAS     *****
            Dim htUnidadesExcel As New Hashtable()

            '*****     ERROR UNIDADES NO EXISTENTES     *****
            Dim strUnidadesExcel(dtUnidadesExcel.Rows.Count - 1) As String
            Dim cont As Integer

            '*****     ERROR IMPUESTOS DE UNIDADES    *****
            Dim dtImpuestos As SAPbouiCOM.DataTable
            Dim strLista As String = ""

            '*****     ERROR PRECIOS DE UNIDADES     *****
            Dim strUnidadMV As String = ""
            Dim strPrecioExcel As String = ""
            Dim strPrecioMV As String = ""

            '*****     ERROR UNIDADES SIN PERMISO DE USUARIO       *****
            Dim strConectionString As String = ""
            Dim cnConeccionBD As SqlClient.SqlConnection
            Dim dstInventario As New TipoVehUsuario
            Dim dtaInventario As New TipoVehUsuarioTableAdapters._SCGD_CONFEMPXVEHTableAdapter
            Dim drInventario As TipoVehUsuario.__SCGD_CONFEMPXVEHRow
            Dim strInventario As String
            Dim strUsuarioSBO As String
            Dim strTipoUnidad As String
            Dim blnInventarioPerm As Boolean = False
            Dim strUnid As String = ""
            Dim strInventarioVendido As String = ""

            ''*****      ERROR UNIDADES NO CONFIGURADO ARTICULO     *****
            Dim struni As String = ""
            Dim strItemInventario As String = ""
            Dim strValidaItem As String = ""
            Dim isNull As Boolean = False

            ''*****      ERROR DISPONIBILIDAD DE ARTICULO     *****
            Dim strDispo_V As String = ""
            Dim strDispo_Res As String = ""
            '*********************                  VARIABLES                  *********************

            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            '*********************                VALIDACIONES                  *********************

            '*****      ERROR UNIDADES SIN PERMISO DE USUARIO  (1)     *****
            Configuracion.CrearCadenaDeconexion(m_oCompany.Server, _
                                     m_oCompany.CompanyDB, _
                                     strConectionString)

            cnConeccionBD = New SqlClient.SqlConnection
            cnConeccionBD.ConnectionString = strConectionString
            cnConeccionBD.Open()
            dtaInventario.Connection = New SqlClient.SqlConnection(strConectionString)
            dtaInventario.Connection = cnConeccionBD
            'nombre de usuario de SAP
            strUsuarioSBO = m_SBO_Application.Company.UserName

            If Not String.IsNullOrEmpty(strUsuarioSBO) Then
                dtaInventario.Fill(dstInventario.__SCGD_CONFEMPXVEH, strUsuarioSBO)
            End If

            If Not dstInventario.__SCGD_CONFEMPXVEH.Rows.Count = 0 Then
                drInventario = dstInventario.__SCGD_CONFEMPXVEH.Rows(0)
            Else
                'ERROR
                GoTo ErrorPermisos1
            End If

            ''*****      ERROR UNIDADES NO CONFIGURADO ARTICULO     *****
            dtAdmin1.ExecuteQuery("Select U_Tipo, U_ItemCode from [@SCGD_ADMIN1]  with (nolock) where U_Cod_Item = '1'")

            'Cliente del CV
            strCliente = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0)
            strCliente = strCliente.Trim()

            '*****     ERROR UNIDADES REPETIDAS     *****
            Dim strUnidad As String = ""
            Dim strPrecio As String = ""
            For i As Integer = 0 To dtUnidadesExcel.Rows.Count - 1
                strUnidad = ""
                strPrecio = ""
                strUnidad = dtUnidadesExcel.GetValue("unidad", i)
                strPrecio = dtUnidadesExcel.GetValue("precio", i)
                If String.IsNullOrEmpty(strUnidad) Then Exit For
                'se recorren las unidades para verificar si existen unidades repetidas
                If Not String.IsNullOrEmpty(strUnidad) Then
                    If htUnidadesExcel(strUnidad) Is Nothing Then
                        'creo un hastable con las unidades y los precios ingresados en excel
                        htUnidadesExcel.Add(strUnidad, strPrecio)
                    Else
                        strUnidadMensaje = strUnidad
                        GoTo ErrorRepetidas
                    End If
                End If

                'vector de unidades existentes en el excel
                strUnidadesExcel(cont) = strUnidad
                cont = cont + 1
            Next

            'creo el comando para obtener los datos de las unidades existentes
            comando = RetornaConsultaUnidades(strUnidadesExcel, strLista)

            If Not String.IsNullOrEmpty(comando) Then
                dtUnidadesBD = oForm.DataSources.DataTables.Item("UnidadesBD")
                dtUnidadesBD.Rows.Clear()
                dtUnidadesBD.ExecuteQuery(comando)
            End If

            ''*****     ERROR UNIDADES NO EXISTENTES     *****
            For i As Integer = 0 To strUnidadesExcel.Length - 1
                'valor para validar si la unidad existe
                Dim UnidadExistente As String = ""
                UnidadExistente = Utilitarios.SeleccionaCampo(dtUnidadesBD, "U_Cod_Unid", "U_Cod_Unid", strUnidadesExcel(i))
                'si la unidad no existe
                If String.IsNullOrEmpty(UnidadExistente) Then
                    strUnidadMensaje = strUnidadesExcel(i)
                    GoTo ErrorNoExisteUnidad
                End If
            Next

            ''*****      ERROR UNIDADES SIN PERMISO DE USUARIO  (2)     *****
            strInventarioVendido = Utilitarios.EjecutarConsulta("SELECT U_Inven_V FROM [@SCGD_ADMIN]", _
                                                                m_oCompany.CompanyDB, m_oCompany.Server)

            '*****    ERROR IMPUESTOS DE UNIDADES    *****
            dtImpuestos = Nothing
            If Not String.IsNullOrEmpty(strLista) Then
                'cargotable para consulta de impuestos
                dtImpuestos = CargarImpuesto(strCliente, strLista)
                For i As Integer = 0 To dtImpuestos.Rows.Count - 1
                    'Manejo de Impuestos
                    If String.IsNullOrEmpty(dtImpuestos.GetValue("U_Cod_Imp", i)) Then
                        strUnidadMensaje = dtImpuestos.GetValue("U_Cod_Unid", i)
                        'tipo de inventario de venta
                        If strInventarioVendido = dtImpuestos.GetValue("U_Tipo", i) Then
                            GoTo ErrorPermisos3
                        End If
                        GoTo ErrorImpuestos
                    End If
                Next
            End If

            ''*****      ERROR DISPONIBILIDAD DE ARTICULO     *****
            strDispo_V = Utilitarios.EjecutarConsulta("Select U_Disp_V From [@SCGD_ADMIN]", m_oCompany.CompanyDB, m_oCompany.Server)
            strDispo_V = strDispo_V.Trim()
            strDispo_Res = Utilitarios.EjecutarConsulta("Select U_Disp_Res From [@SCGD_ADMIN]", m_oCompany.CompanyDB, m_oCompany.Server)
            strDispo_Res = strDispo_Res.Trim()

            If dtUnidadesBD IsNot Nothing And dtImpuestos IsNot Nothing Then

                For i As Integer = 0 To dtUnidadesBD.Rows.Count - 1

                    ''*****      ERROR UNIDADES SIN PERMISO DE USUARIO  (2)     *****
                    strUnid = dtUnidadesBD.GetValue("U_Cod_Unid", i)
                    strTipoUnidad = ""
                    Dim strTipoXUnidad As String = ""
                    strTipoXUnidad = Utilitarios.SeleccionaCampo(dtUnidadesBD, "U_Tipo", "U_Cod_Unid", strUnid)

                    If Not String.IsNullOrEmpty(strTipoXUnidad) Then
                        strTipoUnidad = strTipoXUnidad
                    Else
                        strTipoUnidad = ""
                    End If

                    For Each drInventario In dstInventario.__SCGD_CONFEMPXVEH
                        strInventario = drInventario.U_Tipo_Inv
                        If Not strInventario = strInventarioVendido Then
                            If strTipoUnidad = strInventario Then
                                blnInventarioPerm = True
                                Exit For
                            End If
                        Else
                            strUnidadMensaje = strUnid
                            GoTo ErrorPermisos3
                        End If
                    Next
                    'ERROR
                    If blnInventarioPerm = False Then
                        strUnidadMensaje = strUnid
                        GoTo ErrorPermisos2
                    Else
                        blnInventarioPerm = False
                    End If

                    cnConeccionBD.Close()

                    ''*****      ERROR UNIDADES NO CONFIGURADO ARTICULO     *****
                    struni = dtUnidadesBD.GetValue("U_Cod_Unid", i)

                    If Not IsDBNull(dtUnidadesBD.GetValue("U_ArtVent", i)) Then
                        If String.IsNullOrEmpty(dtUnidadesBD.GetValue("U_ArtVent", i)) Then isNull = True Else isNull = False
                    Else
                        isNull = True
                    End If

                    If isNull Then
                        strItemInventario = Utilitarios.SeleccionaCampo(dtAdmin1, "U_ItemCode", "U_Tipo", strTipoUnidad)
                    Else
                        strItemInventario = Utilitarios.EjecutarConsulta("SELECT [@SCGD_CONF_ART_VENTA].U_ArtVent FROM [@SCGD_VEHICULO]  with (nolock)" & _
                                                                         " INNER JOIN [@SCGD_CONF_ART_VENTA]  with (nolock) ON [@SCGD_VEHICULO].U_ArtVent = [@SCGD_CONF_ART_VENTA].Code " & _
                                                                         "WHERE [@SCGD_VEHICULO].U_Cod_Unid = '" & struni & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                    End If

                    If Not String.IsNullOrEmpty(strItemInventario) Then
                        strValidaItem = Utilitarios.EjecutarConsulta("Select ItemCode from [OITM]  with (nolock) where ItemCode = '" & strItemInventario & "'",
                                                                     m_oCompany.CompanyDB, m_oCompany.Server)
                    End If

                    'ERROR
                    If String.IsNullOrEmpty(strValidaItem) Then
                        strUnidadMensaje = strUnid
                        GoTo ErrorNoConfigurado
                    Else
                        strValidaItem = ""
                    End If

                    'Manejo de impuestos 
                    If dtImpuestos IsNot Nothing Then

                        Dim strCodImp As String = ""
                        'selecciono el cod de impuestos para esta unidad 
                        strCodImp = Utilitarios.SeleccionaCampo(dtImpuestos, "U_Cod_Imp", "U_Cod_Unid", dtUnidadesBD.GetValue("U_Cod_Unid", i))
                        If Not strCodImp Is Nothing Then
                            dtUnidadesBD.SetValue("U_Tipo", i, strCodImp)
                        End If
                    End If

                    ''*****      ERROR DISPONIBILIDAD DE ARTICULO     *****
                    'Manejo de disponibilidad
                    If Not String.IsNullOrEmpty(strDispo_V) Or _
                        Not String.IsNullOrEmpty(strDispo_Res) Then
                        If Not IsDBNull(dtUnidadesBD.GetValue("U_Dispo", i)) Then
                            If dtUnidadesBD.GetValue("U_Dispo", i) = strDispo_V Then
                                strUnidadMensaje = strUnid
                                GoTo ErrorDisponibilidad1
                            End If
                            If dtUnidadesBD.GetValue("U_Dispo", i) = strDispo_Res Then
                                strUnidadMensaje = strUnid
                                GoTo ErrorDisponibilidad1
                            End If
                        Else
                            strUnidadMensaje = strUnid
                            GoTo ErrorDisponibilidad1
                        End If
                    Else
                        strUnidadMensaje = strUnid
                        GoTo ErrorDisponibilidad2
                    End If
                Next

                'ordenar el datatable 
                dtUnidadesBDOrdenadas.Rows.Clear()
                For i As Integer = 0 To dtUnidadesExcel.Rows.Count - 1
                    For x As Integer = 0 To dtUnidadesBD.Rows.Count - 1
                        If dtUnidadesExcel.GetValue("unidad", i) = dtUnidadesBD.GetValue("U_Cod_Unid", x) Then
                            dtUnidadesBDOrdenadas.Rows.Add(1)
                            dtUnidadesBDOrdenadas.SetValue("U_Cod_Unid", i, dtUnidadesBD.GetValue("U_Cod_Unid", x))
                            dtUnidadesBDOrdenadas.SetValue("U_Des_Marc", i, dtUnidadesBD.GetValue("U_Des_Marc", x))
                            dtUnidadesBDOrdenadas.SetValue("U_Des_Esti", i, dtUnidadesBD.GetValue("U_Des_Esti", x))
                            dtUnidadesBDOrdenadas.SetValue("U_Des_Mode", i, dtUnidadesBD.GetValue("U_Des_Mode", x))
                            dtUnidadesBDOrdenadas.SetValue("U_Des_Col", i, dtUnidadesBD.GetValue("U_Des_Col", x))
                            dtUnidadesBDOrdenadas.SetValue("U_Num_Mot", i, dtUnidadesBD.GetValue("U_Num_Mot", x))
                            dtUnidadesBDOrdenadas.SetValue("U_Num_VIN", i, dtUnidadesBD.GetValue("U_Num_VIN", x))
                            dtUnidadesBDOrdenadas.SetValue("U_Ano_Vehi", i, dtUnidadesBD.GetValue("U_Ano_Vehi", x))
                            dtUnidadesBDOrdenadas.SetValue("U_Num_Plac", i, dtUnidadesBD.GetValue("U_Num_Plac", x))
                            dtUnidadesBDOrdenadas.SetValue("U_Transmis", i, dtUnidadesBD.GetValue("U_Transmis", x))
                            'dtUnidadesBDOrdenadas.SetValue("U_Precio", i, Decimal.Parse(dtUnidadesBD.GetValue("U_Precio", x), n).ToString())
                            dtUnidadesBDOrdenadas.SetValue("U_Tipo", i, dtUnidadesBD.GetValue("U_Tipo", x))
                            dtUnidadesBDOrdenadas.SetValue("U_Dispo", i, dtUnidadesBD.GetValue("U_Dispo", x))
                            dtUnidadesBDOrdenadas.SetValue("U_ArtVent", i, dtUnidadesBD.GetValue("U_ArtVent", x))
                            Exit For
                        End If
                    Next
                Next

                '*****     ERROR PRECIOS DE UNIDADES     *****
                'pinta precios en la matriz ordenada
                For x As Integer = 0 To dtUnidadesBDOrdenadas.Rows.Count - 1
                    For i As Integer = 0 To dtUnidadesBD.Rows.Count - 1
                        If dtUnidadesBDOrdenadas.GetValue("U_Cod_Unid", x) = dtUnidadesBD.GetValue("U_Cod_Unid", i) Then

                            'limpio la unidad y precio
                            strUnidadMV = ""
                            strUnidadMV = dtUnidadesBD.GetValue("U_Cod_Unid", i)
                            strUnidadMensaje = strUnidadMV
                            strPrecioMV = ""
                            strPrecioExcel = ""

                            If Not IsDBNull(htUnidadesExcel(strUnidadMV)) Then strPrecioExcel = htUnidadesExcel(strUnidadMV) Else strPrecioExcel = 0

                            If Not IsDBNull(dtUnidadesBD.GetValue("U_Precio", i)) Then strPrecioMV = dtUnidadesBD.GetValue("U_Precio", i) Else strPrecioMV = 0

                            dtUnidadesBDOrdenadas.SetValue("U_Precio", x, 0)
                            'dtUnidadesBD.SetValue("U_Precio", i, 0)

                            'precio excel y mv
                            If Not IsDBNull(strPrecioExcel) Then
                                If Not String.IsNullOrEmpty(strPrecioExcel) Then
                                    If IsNumeric(strPrecioExcel) Then
                                        If Not Decimal.Parse(strPrecioExcel) = 0 Then
                                            dtUnidadesBDOrdenadas.SetValue("U_Precio", x, strPrecioExcel)
                                        End If
                                    End If
                                End If
                            End If

                            'precio MV
                            If dtUnidadesBDOrdenadas.GetValue("U_Precio", x) = 0 Then
                                If Not IsDBNull(strPrecioMV) Then
                                    If Not String.IsNullOrEmpty(strPrecioMV) Then
                                        If IsNumeric(strPrecioMV) Then
                                            If Not Decimal.Parse(strPrecioMV) = 0 Then
                                                Dim Precio As String = AsignaPrecioCorrecto(strPrecioMV, strUnidadMV)
                                                'asigna el precio del maestro de vehiculos 
                                                If Not String.IsNullOrEmpty(Precio) Then
                                                    dtUnidadesBDOrdenadas.SetValue("U_Precio", x, Precio)
                                                Else
                                                    'error por el tipo de cambio de sistema
                                                    GoTo ErrorTipoCambio
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If

                            'If dtUnidadesBD.GetValue("U_Precio", i) = 0 Then GoTo ErrorSinPrecio
                            If dtUnidadesBDOrdenadas.GetValue("U_Precio", x) = 0 Then GoTo ErrorSinPrecio

                        End If
                    Next
                Next
            End If
            '*********************                VALIDACIONES                  ********************* 568 742 052

            '*********************                    ERRORES                  *********************
            'se da un error
            If Errores Then
ErrorSinPrecio:
                If Not Mensaje Then

                    Errores = True
                    Mensaje = True
                    'error por no poseer precio de venta, ni en el excel ni en maestro de vehiculos
                    m_SBO_Application.StatusBar.SetText(
                        My.Resources.Resource.LaUnidad & " " & strUnidadMensaje & My.Resources.Resource.ErrorSinPrecio, _
                        SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                End If
ErrorRepetidas:
                If Not Mensaje Then

                    Errores = True
                    Mensaje = True
                    'error por unidad repetida
                    m_SBO_Application.StatusBar.SetText(
                        My.Resources.Resource.LaUnidad & " " & strUnidadMensaje & My.Resources.Resource.ErrorRepetida, _
                        SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                End If

ErrorNoExisteUnidad:
                If Not Mensaje Then
                    Errores = True
                    Mensaje = True
                    'error porque la unidad no existe
                    m_SBO_Application.StatusBar.SetText(
                           My.Resources.Resource.LaUnidad & " " & strUnidadMensaje & My.Resources.Resource.ErrorNoExisteUnidad, _
                           SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                End If

ErrorImpuestos:
                If Not Mensaje Then
                    Errores = True
                    Mensaje = True
                    'error impuestos no definidos 
                    m_SBO_Application.StatusBar.SetText(
                        My.Resources.Resource.LaUnidad & " " & strUnidadMensaje & My.Resources.Resource.ErrorImpuestos, _
                           SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                End If

ErrorPermisos1:
                If Not Mensaje Then
                    Errores = True
                    Mensaje = True
                    'error impuestos no definidos 
                    m_SBO_Application.StatusBar.SetText(
                        My.Resources.Resource.ErrorPermisos1 & strUnidadMensaje, _
                           SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)

                End If

ErrorPermisos2:
                If Not Mensaje Then
                    Errores = True
                    Mensaje = True
                    'error impuestos no definidos 
                    m_SBO_Application.StatusBar.SetText(
                        My.Resources.Resource.ErrorPermisos2 & strUnidadMensaje, _
                           SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)

                End If

ErrorPermisos3:
                If Not Mensaje Then
                    Errores = True
                    Mensaje = True
                    'error impuestos no definidos 
                    m_SBO_Application.StatusBar.SetText(
                        My.Resources.Resource.LaUnidad & strUnidadMensaje & My.Resources.Resource.ErrorPermisos3, _
                           SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)

                End If

ErrorNoConfigurado:
                If Not Mensaje Then
                    Errores = True
                    Mensaje = True
                    'error impuestos no definidos 
                    m_SBO_Application.StatusBar.SetText(
                       My.Resources.Resource.ErrorNoConfigurado & strUnidadMensaje & My.Resources.Resource.NoExiste, _
                           SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)

                End If

ErrorDisponibilidad1:
                If Not Mensaje Then
                    Errores = True
                    Mensaje = True
                    'error impuestos no definidos 
                    m_SBO_Application.StatusBar.SetText(
                        My.Resources.Resource.LaUnidad & " " & strUnidadMensaje & My.Resources.Resource.ErrorDisponibilidad1, _
                           SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                End If

ErrorDisponibilidad2:
                If Not Mensaje Then
                    Errores = True
                    Mensaje = True
                    'error impuestos no definidos 
                    m_SBO_Application.StatusBar.SetText(
                        My.Resources.Resource.ErrorDisponibilidad2, _
                           SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                End If
ErrorTipoCambio:
                If Not Mensaje Then
                    Errores = True
                    Mensaje = True
                    'error tipo de cambio no definido
                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorTipoCambioCarga, _
                                                        BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)

                End If
            End If
            'si no existen errores se retorna la tabla con las unidades
            If Not Errores Then Return dtUnidadesBDOrdenadas Else Return Nothing

            '*********************                    ERRORES                  *********************
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    'retorna un comando para obtener los datos necesarios de 
    'todas las unidades existentes
    Private Function RetornaConsultaUnidades(ByVal strUnidades() As String, ByRef Lista As String) As String
        Dim strComando As String
        Dim strConsulta1 As String = "SELECT U_Cod_Unid, U_Des_Marc, U_Des_Esti, U_Des_Mode, U_Des_Col, U_Num_Mot, U_Num_VIN, U_Ano_Vehi, U_Num_Plac, U_Transmis, U_Precio, U_Tipo, U_Dispo, U_ArtVent FROM [@SCGD_VEHICULO]  with (nolock) WHERE U_Cod_Unid IN ("
        Dim strConsulta2 As String = ")"

        For Each Unidad As String In strUnidades
            If Not String.IsNullOrEmpty(Unidad) Then
                If Not String.IsNullOrEmpty(Lista) Then Lista = Lista & ","
                Lista = Lista & "'" & Unidad & "'"
            End If
        Next

        If Not String.IsNullOrEmpty(Lista) Then
            strComando = strConsulta1 & Lista & strConsulta2
        End If

        Return strComando
    End Function

    'obtine el precio correcto de acuerdo al tipo de cambio y la moneda del contrato de ventas
    Public Function AsignaPrecioCorrecto(ByVal PrecioMV As String, ByVal Unidad As String) As String

        Dim errorImpuestos As Boolean = False

        Dim strclienteCV As String = ""
        Dim strFechaCV As String = ""
        Dim dtFechaCV As Date
        Dim strMonedaCV As String = ""
        Dim strTipoCambioCV As String = ""

        Dim strMonedaVehiculo As String = ""

        Dim strMonedaLocal As String = ""
        Dim strMonedaSistema As String = ""
        Dim strTipoCambioSistema As String = ""

        'STRING MONEDAS
        Dim objGlobal As DMSOneFramework.BLSBO.GlobalFunctionsSBO
        'monedas
        objGlobal = New DMSOneFramework.BLSBO.GlobalFunctionsSBO

        strMonedaLocal = objGlobal.RetornarMonedaLocal
        strMonedaSistema = objGlobal.RetornarMonedaSistema

        strclienteCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardName", 0).Trim
        strMonedaCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim
        strFechaCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0).Trim

        dtFechaCV = Date.ParseExact(strFechaCV, "yyyyMMdd", Nothing)
        dtFechaCV = New Date(dtFechaCV.Year, dtFechaCV.Month, dtFechaCV.Day, 0, 0, 0)

        strTipoCambioSistema = objGlobal.RetornarTipoCambioMonedaRS(strMonedaSistema, dtFechaCV)

        strMonedaVehiculo = Utilitarios.EjecutarConsulta(String.Format("SELECT U_Moneda FROM [@SCGD_VEHICULO]  with (nolock) WHERE U_Cod_Unid = '{0}'", Unidad),
                                                m_oCompany.CompanyDB, m_oCompany.Server)
        'retorna el precio
        If String.IsNullOrEmpty(strMonedaVehiculo) Then
            Return PrecioMV
        End If
        If strMonedaCV = strMonedaVehiculo Then
            Return PrecioMV
        End If

        If Not String.IsNullOrEmpty(strTipoCambioSistema) Then
            If strTipoCambioSistema = "-1" _
                Or strTipoCambioSistema = "0" Then

                errorImpuestos = True
                GoTo ErrorImpuestos

            Else

                If strMonedaVehiculo <> strMonedaSistema And strMonedaVehiculo <> strMonedaLocal Then
                    strTipoCambioCV = objGlobal.RetornarTipoCambioMonedaRS(strMonedaVehiculo, dtFechaCV)
                Else
                    strTipoCambioCV = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_SCGD_TipoCambio", 0)
                End If

                strTipoCambioCV = strTipoCambioCV.Trim()
                If Not String.IsNullOrEmpty(strMonedaVehiculo) Then

                    PrecioMV = Utilitarios.ManejoMultimoneda(PrecioMV, strMonedaLocal, strMonedaSistema, strMonedaVehiculo,
                                                                   strMonedaCV, strTipoCambioCV, dtFechaCV, n, m_oCompany)
                Else
                    PrecioMV = ""
                End If

                Return PrecioMV
            End If
        Else

            errorImpuestos = True
            GoTo ErrorImpuestos
        End If

ErrorImpuestos:
        If errorImpuestos Then

            Return Nothing

        End If

    End Function

    Private Sub GenerarGastos(ByVal oForm As SAPbouiCOM.Form)

        Dim strPath As String
        Dim strUnidad As String
        Dim strContrato As String
        Dim strMoneda As String
        Dim strFecha As String
        Dim dtFecha As Date

        Try

            strUnidad = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_Unid", 0).Trim

            If Not String.IsNullOrEmpty(strUnidad) Then

                strContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0).Trim
                strMoneda = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim
                strFecha = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0).Trim

                If Not String.IsNullOrEmpty(strFecha) Then
                    dtFecha = Date.ParseExact(strFecha, "yyyyMMdd", Nothing)
                    dtFecha = New Date(dtFecha.Year, dtFecha.Month, dtFecha.Day, 0, 0, 0)
                Else
                    dtFecha = Now.Date
                End If

                m_formGastosAdicionales = New GastosAdicionales(m_SBO_Application, m_oCompany)
                oGestorFormularios = New GestorFormularios(m_SBO_Application)

                m_formGastosAdicionales.FormType = "SCGD_Gastos"
                m_formGastosAdicionales.Titulo = My.Resources.Resource.TituloGastos
                strPath = System.Windows.Forms.Application.StartupPath & My.Resources.Resource.XMLGastos
                m_formGastosAdicionales.NombreXml = strPath
                m_formGastosAdicionales.FormContrato = oForm

                If Not oGestorFormularios.FormularioAbierto(m_formGastosAdicionales, activarSiEstaAbierto:=True) Then

                    m_formGastosAdicionales.FormularioSBO = oGestorFormularios.CargaFormulario(m_formGastosAdicionales)

                    m_formGastosAdicionales.CargarGastosVehiculo(strUnidad, strContrato, strMoneda, dtFecha)

                End If

            ElseIf String.IsNullOrEmpty(strUnidad) Then

                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorGastosUnidad, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)

            End If

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Public Sub GenerarPlanPagos(ByVal oForm As SAPbouiCOM.Form)

        Dim strTipoCuota As String

        Dim intPlazo As Integer
        Dim strSaldo As String
        Dim decSaldo As Decimal
        Dim decInteresNormal As Decimal
        Dim strFechaInicio As String
        Dim dtFechaInicio As Date
        Dim intDiaPago As Integer

        Dim strPath As String

        Dim strCliente As String
        Dim strEnteFinanciero As String
        Dim strMoneda As String

        Dim strConectionString As String = ""

        Dim strIntNormal As String
        Dim decIntNormal As Decimal
        Dim strIntMora As String
        Dim decIntMora As Decimal
        Dim strNombreTipo As String
        Dim strPrecioVenta As String
        Dim decPrecioVenta As Decimal
        Dim strPrima As String
        Dim decPrima As Decimal

        Dim strPrestTemporal As String
        Dim intPrestTemporal As Integer
        Dim strCodCliente As String
        Dim strInsertaLineaPlan As String
        Dim intNumPago As Integer
        Dim strInsertPlanTemporal As String = Nothing
        Dim strCodePlanTemp As String
        Dim intCodePlanTemp As Integer
        Dim intCodePlanTempIns As Integer

        Try
            m_formPlanPlagos = New PlanPagosFormulario(m_SBO_Application, m_oCompany, m_oCompany.DbUserName, CatchingEvents.DBPassword, My.Resources.Resource.XMLPlanPagos)

            oGestorFormularios = New GestorFormularios(m_SBO_Application)

            strTipoCuota = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tipo_Cuo", 0).Trim

            strNombreTipo = Utilitarios.EjecutarConsulta("Select Name from [@SCGD_TIPO_CUOTA]  with (nolock) Where Code='" & strTipoCuota & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            intPlazo = Plazo(oForm)

            strSaldo = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Financia", 0).Trim
            If Not String.IsNullOrEmpty(strSaldo) Then
                decSaldo = Decimal.Parse(strSaldo, n)
            End If

            strIntNormal = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Tas_Anu", 0).Trim
            If Not String.IsNullOrEmpty(strIntNormal) Then
                decInteresNormal = Decimal.Parse(strIntNormal, n)
                decIntNormal = decInteresNormal
                decInteresNormal = decInteresNormal / 100
            End If

            strFechaInicio = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Fec_1Ab", 0).Trim
            dtFechaInicio = Date.ParseExact(strFechaInicio, "yyyyMMdd", Nothing)
            dtFechaInicio = New Date(dtFechaInicio.Year, dtFechaInicio.Month, dtFechaInicio.Day, 0, 0, 0)
            intDiaPago = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_DiaPago", 0).Trim
            strIntMora = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Int_Mor", 0).Trim

            If Not String.IsNullOrEmpty(strIntMora) Then
                decIntMora = Decimal.Parse(strIntMora, n)
            End If

            strPrecioVenta = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_DocTotal", 0).Trim
            If Not String.IsNullOrEmpty(strPrecioVenta) Then
                decPrecioVenta = Decimal.Parse(strPrecioVenta, n)
            End If

            strPrima = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Deposito", 0).Trim
            If Not String.IsNullOrEmpty(strPrima) Then
                decPrima = Decimal.Parse(strPrima, n)
            End If

            If strTipoCuota = "1" OrElse strTipoCuota = "2" Then

                Call m_formPlanPlagos.CalculoNivelada(intPlazo, decSaldo, decInteresNormal, dtFechaInicio, intDiaPago, False, "N")

            ElseIf strTipoCuota = "4" Then

                Call m_formPlanPlagos.CalculoDecreciente(intPlazo, decSaldo, decInteresNormal, dtFechaInicio, intDiaPago, "N")

            ElseIf strTipoCuota = "3" Then

                Call m_formPlanPlagos.CalculoGlobal(intPlazo, decSaldo, decInteresNormal, dtFechaInicio, intDiaPago)

            End If


            If strTipoCuota = "1" OrElse strTipoCuota = "2" OrElse strTipoCuota = "3" OrElse strTipoCuota = "4" Then

                m_formPlanPlagos.FormType = "SCGD_PlanTeorico"
                m_formPlanPlagos.Titulo = My.Resources.Resource.TituloPlanPagos
                Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, strConectionString)
                m_formPlanPlagos.StrConexion = strConectionString
                strPath = System.Windows.Forms.Application.StartupPath & My.Resources.Resource.XMLPlanPagos
                m_formPlanPlagos.NombreXml = strPath

                If Not oGestorFormularios.FormularioAbierto(m_formPlanPlagos, activarSiEstaAbierto:=True) Then
                    m_formPlanPlagos.FormularioSBO = oGestorFormularios.CargaFormulario(m_formPlanPlagos)

                    strCliente = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_CardName", 0).Trim
                    strEnteFinanciero = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Ent_Fin", 0).Trim
                    strMoneda = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Moneda", 0).Trim

                    strPrestTemporal = Utilitarios.EjecutarConsulta("Select COUNT(*) from [@SCGD_PREST_TEMP]", m_oCompany.CompanyDB, m_oCompany.Server)

                    If Not String.IsNullOrEmpty(strPrestTemporal) Then

                        intPrestTemporal = Integer.Parse(strPrestTemporal)
                        intPrestTemporal = intPrestTemporal + 1

                    ElseIf String.IsNullOrEmpty(strPrestTemporal) Then

                        intPrestTemporal = 1

                    End If

                    Call m_formPlanPlagos.CargarPlanPagos(strCliente, strEnteFinanciero, decSaldo, intPlazo, dtFechaInicio, strMoneda, decIntNormal, decIntMora, strNombreTipo, decPrecioVenta, decPrima, False, intPrestTemporal.ToString())
                    Call m_formPlanPlagos.CargarColumnasPlanPagos(intPlazo)

                    strCodCliente = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_CardCode", 0).Trim

                    Utilitarios.EjecutarConsulta("Insert into [@SCGD_PREST_TEMP] (Code, Name, U_Cliente, U_Fecha_Prest, U_Ente_Fin, U_Moneda, U_Mon_Fin, U_Int_Normal, U_Plazo, U_Tipo_Cuota) values ('" & _
                                                 intPrestTemporal & "','" & intPrestTemporal & "','" & strCodCliente & "','" & dtFechaInicio.ToString("yyyyMMdd") & "','" & strEnteFinanciero & "','" & strMoneda & "','" & decSaldo.ToString(n) & "','" & decIntNormal.ToString(n) & "','" & intPlazo & "','" & strNombreTipo & "')", m_oCompany.CompanyDB, m_oCompany.Server)

                    strCodePlanTemp = Utilitarios.EjecutarConsulta("Select COUNT(*) from [@SCGD_PLAN_TEMP]", m_oCompany.CompanyDB, m_oCompany.Server)

                    If Not String.IsNullOrEmpty(strCodePlanTemp) Then

                        intCodePlanTemp = Integer.Parse(strCodePlanTemp)

                    Else

                        intCodePlanTemp = 0

                    End If

                    For i As Integer = 0 To intPlazo - 1

                        intNumPago = i + 1

                        intCodePlanTempIns = intCodePlanTemp + intNumPago

                        strInsertaLineaPlan = "Insert into [@SCGD_PLAN_TEMP] (Code, Name, U_Fecha_Pago, U_Sal_Ini, U_Cuota, U_Capital, U_Interes, U_Sal_Fin, U_Pres_Temp, U_Numero) values ('" & _
                                                 intCodePlanTempIns & "','" & intCodePlanTempIns & "','" & m_formPlanPlagos.g_dtFechaPago(i).ToString("yyyyMMdd") & "','" & m_formPlanPlagos.g_decSaldoInicial(i).ToString(n) & "','" & m_formPlanPlagos.g_decCuota(i).ToString(n) & "','" & m_formPlanPlagos.g_decCapital(i).ToString(n) & "','" & m_formPlanPlagos.g_decInteres(i).ToString(n) & "','" & m_formPlanPlagos.g_decSaldoFinal(i).ToString(n) & "','" & intPrestTemporal & "','" & intNumPago & "')"

                        If i = 0 Then

                            strInsertPlanTemporal = strInsertaLineaPlan

                        Else

                            strInsertPlanTemporal = strInsertPlanTemporal & ";" & strInsertaLineaPlan

                        End If

                    Next

                    Utilitarios.EjecutarConsulta(strInsertPlanTemporal, m_oCompany.CompanyDB, m_oCompany.Server)

                End If

            End If

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

#Region "BALANCES"

    ''''''''''''''''''''''
    'Agregado por rcamacho 
    '17/05/2012
    ''''''''''''''''''''''
    'Metodo para la carga de Balance de contratos de ventas
    Public Sub GeneraBalance(ByVal oForm As SAPbouiCOM.Form)

        Dim strConectionString = ""
        'direccion de la pantalla [XML]
        Dim strPath As String
        'Campos en formulario
        Dim strCliente As String
        Dim strCodeCliente As String
        Dim strTipoCl As String
        Dim strNumContrato As String
        Dim strFechaCt As String
        Dim strVendedor As String
        Dim strEstado As String
        Dim strMonedaCV As String
        Dim strTipoCambioCV As String

        Dim strMontoNetoAseguradora As String
        Dim strMontoNetoFinanciera As String
        Dim decMontoNetoAseguradora As Decimal
        Dim decMontoNetoFinanciera As Decimal
        Dim strOtrosCostos As String
        Dim decOtrosCostos As Decimal
        Dim strDescuento As String
        Dim decDescuento As Decimal

        'manejo del costo proyectado
        Dim strCosPro As String = ""
        Dim intMens As Integer

        'STRING MONEDAS
        Dim objGlobal As DMSOneFramework.BLSBO.GlobalFunctionsSBO
        Dim strMonedaSistema As String
        Dim strMonedaLocal As String
        Dim strTipoCambioSistema As String

        'controla existencia en matrices
        Dim bVehiculos As Boolean = False
        Dim bAccesorios As Boolean = False
        Dim bTramites As Boolean = False

        'decimales
        Dim n As Globalization.NumberFormatInfo
        Try
            'deimales
            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            'objeto form balance
            m_formBalance = New BalanceFormulario(m_SBO_Application, m_oCompany)
            'objeto gesto de formulario
            m_gestorBalance = New GestorFormularios(m_SBO_Application)
            'Manejo del form
            m_formBalance.FormType = "SCGD_Balance"
            m_formBalance.Titulo = My.Resources.Resource.TituloBalances
            Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, strConectionString)
            m_formBalance.StrConexion = strConectionString
            strPath = System.Windows.Forms.Application.StartupPath & My.Resources.Resource.XMLBalances
            m_formBalance.NombreXml = strPath

            'comprueba si el form esta abierto o no
            If Not m_gestorBalance.FormularioAbierto(m_formBalance, activarSiEstaAbierto:=True) Then
                'verifica el tipo de costo que desea observar en el balance

                intMens = m_SBO_Application.MessageBox(My.Resources.Resource.PreguntaBalanceCV, 1, My.Resources.Resource.CostoReal, My.Resources.Resource.CostoProyectado, My.Resources.Resource.btnCancelar)

                If intMens = 1 Then
                    strCosPro = "N"
                ElseIf intMens = 2 Then
                    strCosPro = "Y"
                End If

                If Not String.IsNullOrEmpty(strCosPro) Then
                    'carga el formulacio
                    m_formBalance.FormularioSBO = m_gestorBalance.CargaFormulario(m_formBalance)

                    'cargar datos de editText
                    strCliente = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_CardName", 0)
                    strCliente = strCliente.Trim()
                    strCodeCliente = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_CardCode", 0)
                    strCodeCliente = strCodeCliente.Trim()
                    strTipoCl = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Tipo", 0)
                    strTipoCl = strTipoCl.Trim()
                    strNumContrato = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("DocNum", 0)
                    strNumContrato = strNumContrato.Trim()
                    strFechaCt = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_DocDate", 0)
                    strFechaCt = strFechaCt.Trim()
                    strVendedor = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_SlpName", 0)
                    strVendedor = strVendedor.Trim()
                    strMonedaCV = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Moneda", 0)
                    strMonedaCV = strMonedaCV.Trim()
                    strTipoCambioCV = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_SCGD_TipoCambio", 0)
                    strTipoCambioCV = strTipoCambioCV.Trim()
                    strEstado = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Estado", 0)
                    strEstado = strEstado.Trim()
                    strMontoNetoAseguradora = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_MoNAs", 0)
                    decMontoNetoAseguradora = Utilitarios.ConvierteDecimal(strMontoNetoAseguradora, n)
                    strMontoNetoFinanciera = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_MoNFi", 0)
                    decMontoNetoFinanciera = Utilitarios.ConvierteDecimal(strMontoNetoFinanciera, n)
                    strOtrosCostos = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_OtrCos", 0)
                    decOtrosCostos = Utilitarios.ConvierteDecimal(strOtrosCostos, n)
                    strDescuento = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Nota_Cre", 0)
                    decDescuento = Utilitarios.ConvierteDecimal(strDescuento, n)


                    'verifica que exista una fecha y un numero de contrato
                    If Not String.IsNullOrEmpty(strFechaCt) And Not String.IsNullOrEmpty(strNumContrato) Then
                        'monedas
                        objGlobal = New DMSOneFramework.BLSBO.GlobalFunctionsSBO

                        Dim fecha As Date
                        fecha = Date.ParseExact(strFechaCt, "yyyyMMdd", Nothing)
                        fecha = New Date(fecha.Year, fecha.Month, fecha.Day, 0, 0, 0)

                        strMonedaLocal = objGlobal.RetornarMonedaLocal
                        strMonedaSistema = objGlobal.RetornarMonedaSistema
                        strTipoCambioSistema = objGlobal.RetornarTipoCambioMonedaRS(strMonedaSistema, fecha)

                        'Envio de parametros para cargar lso edittext
                        Call m_formBalance.CargaBalance(strCliente, strTipoCl, strNumContrato, strFechaCt,
                                                        strCodeCliente, strVendedor, strMonedaCV, strEstado,
                                                        strCosPro, decMontoNetoAseguradora, decMontoNetoFinanciera,
                                                        decOtrosCostos, decDescuento)

                        'carga los vectores con la informacion tanto para vehiculos como para accesorios
                        bVehiculos = CargaVectoresVehiculos(n)

                        bAccesorios = CargaVectoresAccesorios(n)

                        bTramites = CargaVectoresTramites(n)

                        'cargar el datatable con la matriz de vehiculos y la de accesorios
                        If bVehiculos = True Then
                            Call m_formBalance.CargaDetallesVehiculos(DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix).RowCount,
                                                                      strCosPro,
                                                                      strMonedaSistema, strMonedaLocal, strMonedaCV,
                                                                      strTipoCambioCV, strTipoCambioSistema, fecha)
                        End If
                        If bAccesorios = True Then

                            Call m_formBalance.CargaDetallesAccesorios(DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix).RowCount)

                        End If
                        'manejo de tramites
                        If bTramites = True Then

                            Call m_formBalance.CargaDetallesTramites(DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix).RowCount)

                        End If

                        'carga los totales 
                        m_formBalance.CargaTotalesGenerales(m_formBalance.TGeneral, m_formBalance.CGeneral, m_formBalance.UGeneral, True, m_formBalance.BGeneral)
                    Else
                        'manejo del error
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorBalance, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                    End If
                End If
            End If
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    'metodo para cargar la sucursal al contrto de ventas
    Public Sub CargaSucursalAlContrato()
        Dim strSucursal As String = ""
        Dim strCSucu As String = ""
        Dim strUser As String = ""

        Try
            strUser = m_SBO_Application.Company.UserName

            If Not String.IsNullOrEmpty(strUser) Then

                'asigna la sucursal
                strSucursal = Utilitarios.EjecutarConsulta("SELECT SUC.Name FROM OUBR AS SUC  with (nolock)" & _
                                                                                 "INNER JOIN OUSR AS SR  with (nolock) ON SUC.Code = SR.Branch " & _
                                                                                 "WHERE SR.USER_CODE = '" & strUser & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                If Not String.IsNullOrEmpty(strSucursal) Then
                    oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").SetValue("U_Sucu", 0, strSucursal)
                End If

                'asigna el codigo de la sucursal
                strCSucu = Utilitarios.EjecutarConsulta("SELECT SUC.Code FROM OUBR AS SUC  with (nolock)" & _
                                                                                 "INNER JOIN OUSR AS SR  with (nolock) ON SUC.Code = SR.Branch " & _
                                                                                 "WHERE SR.USER_CODE = '" & strUser & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                If Not String.IsNullOrEmpty(strCSucu) Then
                    oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").SetValue("U_CSucu", 0, strCSucu)
                End If

            End If

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    'Metodo para cargar el data table vehiculos
    Private Function CargaVectoresVehiculos(ByVal n As System.Globalization.NumberFormatInfo) As Boolean
        'matrices locales 
        Dim oMVehiculos As SAPbouiCOM.Matrix


        oMVehiculos = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

        'string locales
        If oMVehiculos IsNot Nothing Then
            Dim strUnidad(0 To oMVehiculos.RowCount - 1) As String
            Dim strMarca(0 To oMVehiculos.RowCount - 1) As String
            Dim strModelo(0 To oMVehiculos.RowCount - 1) As String
            Dim strEstilo(0 To oMVehiculos.RowCount - 1) As String
            Dim dcPreVenta(0 To oMVehiculos.RowCount - 1) As Decimal
            Dim dcPreLista(0 To oMVehiculos.RowCount - 1) As Decimal
            Dim dcDescuento(0 To oMVehiculos.RowCount - 1) As Decimal
            Dim strPrecio As String
            Dim dcBono(0 To oMVehiculos.RowCount - 1) As Decimal
            Dim strBono As String

            Dim strDescuentoBono As String
            Dim dcDescuentoBono As Decimal

            Dim strConsultaDescBono As String = "select Code from [@SCGD_TIPOBONO] with (nolock) where U_CobraBo = 'N' or U_CobraBo is null"

            Dim strBonoConfig As String
            Dim strBonoCV As String

            dtBonosNoCobra = oForm.DataSources.DataTables.Item("dtNoCobBon")
            dtBonosNoCobra.ExecuteQuery(strConsultaDescBono)

            'recorrer matriz de vehiculos 
            If oMVehiculos.RowCount > 0 _
            And Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim()) Then
                For i As Integer = 0 To oMVehiculos.RowCount - 1
                    'Obtiene los valores de la matriz y los carga en las listas
                    strUnidad(i) = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).Trim()
                    strMarca(i) = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Des_Marc", i).Trim()
                    strModelo(i) = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Des_Mode", i).Trim()
                    strEstilo(i) = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Des_Esti", i).Trim()
                    strBono = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Bono", i).Trim()

                    dcDescuentoBono = 0

                    For x As Integer = 0 To oForm.DataSources.DBDataSources.Item("@SCGD_BONOXCONT").Size - 1
                        strBonoCV = oForm.DataSources.DBDataSources.Item("@SCGD_BONOXCONT").GetValue("U_Bono", x).Trim()

                        For y As Integer = 0 To dtBonosNoCobra.Rows.Count - 1
                            strBonoConfig = dtBonosNoCobra.GetValue("Code", y).ToString

                            If strBonoCV = strBonoConfig Then
                                strDescuentoBono = oForm.DataSources.DBDataSources.Item("@SCGD_BONOXCONT").GetValue("U_Monto", x).Trim()
                                dcDescuentoBono = dcDescuentoBono + Decimal.Parse(strDescuentoBono, n)
                            End If
                        Next

                    Next

                    'verifica si el precio total de vehiculo es nulo o 0
                    If Not String.IsNullOrEmpty(strBono) Then
                        dcBono(i) = Decimal.Parse(strBono, n) - dcDescuentoBono
                    Else
                        dcBono(i) = Decimal.Parse(0, n) - dcDescuentoBono
                    End If
                    strPrecio = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Pre_Tot", i).Trim()

                    'verifica si el precio total de vehiculo es nulo o 0
                    If Not String.IsNullOrEmpty(strPrecio) Then
                        dcPreVenta(i) = Decimal.Parse(strPrecio, n) - dcBono(i) - dcDescuentoBono
                    Else
                        dcPreVenta(i) = Decimal.Parse(0, n) - dcBono(i) - dcDescuentoBono
                    End If

                    'Cargo el precio de lista para cada vehiculo
                    dcPreLista(i) = Decimal.Parse(oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Pre_Vta", i).Trim(), n)
                    dcDescuento(i) = Decimal.Parse(oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Desc_Veh", i).Trim(), n)
                Next i

                m_formBalance.LlenaVectoresVehiculos(strUnidad, strMarca, strModelo, strEstilo, dcPreVenta, dcBono, dcPreLista, dcDescuento)
                Return True
            Else
                Return False
            End If

        End If
    End Function

    'metodo para cargar el datatable de acccesorios
    Private Function CargaVectoresAccesorios(ByVal n As System.Globalization.NumberFormatInfo) As Boolean
        'matriz local
        Dim oMAccesorios As SAPbouiCOM.Matrix

        oMAccesorios = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

        'string locales
        Dim strCodigo(0 To oMAccesorios.RowCount - 1) As String
        Dim strDescripcion(0 To oMAccesorios.RowCount - 1) As String
        Dim dcPrecio(0 To oMAccesorios.RowCount - 1) As Decimal

        'manejo de costos 
        Dim dcCosto(0 To oMAccesorios.RowCount - 1) As Decimal
        Dim dcDescuento(0 To oMAccesorios.RowCount - 1) As Decimal
        Dim dcPreList(0 To oMAccesorios.RowCount - 1) As Decimal
        Dim strCosto As String
        Dim strCantidad As String
        Dim strPrecio As String

        Dim strMultiplesFact As String
        Dim strGenFactAccs As String
        Dim oMatrixVeh As SAPbouiCOM.Matrix

        'recorrer matriz de accesorios
        If oMAccesorios.RowCount > 0 _
            And Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Acc", 0).Trim()) Then

            strMultiplesFact = oDataTableConfiguracionesDMS.GetValue("U_Mul_Fac", 0)

            strGenFactAccs = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GenFaAcc", 0).Trim

            oMatrixVeh = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

            For i As Integer = 0 To oMAccesorios.RowCount - 1
                'carga listas de accesorios
                strCodigo(i) = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Acc", i).Trim
                strDescripcion(i) = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_N_Acc", i).Trim
                strPrecio = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_PrTo_Acc", i).Trim

                'verifica si el precio total de accesorios es nulo o 0
                If Not String.IsNullOrEmpty(strPrecio) Then
                    dcPrecio(i) = Decimal.Parse(strPrecio, n)
                Else
                    dcPrecio(i) = Decimal.Parse(0, n)
                End If


                strCosto = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Cost_Acc", i).Trim
                strCantidad = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Cant_Acc", i).Trim
                dcDescuento(i) = Decimal.Parse(oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Desc_Acc", i), n)

                'verifica si el costo total de accesorios es nulo o 0
                If Not String.IsNullOrEmpty(strCosto) And
                    Not String.IsNullOrEmpty(strCantidad) Then
                    'costo = cantidad * costounitario
                    dcCosto(i) = (Decimal.Parse(strCosto, n) * Integer.Parse(strCantidad))
                Else
                    dcCosto(i) = Decimal.Parse(0, n)
                End If

                If strMultiplesFact = "Y" AndAlso oMatrixVeh.RowCount > 1 AndAlso Not strGenFactAccs = "Y" Then
                    dcPrecio(i) = dcPrecio(i) * oMatrixVeh.RowCount
                    dcCosto(i) = dcCosto(i) * oMatrixVeh.RowCount
                End If

                dcPreList(i) = Decimal.Parse(oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_SCGD_AccPrecio", i), n)

            Next i

            'llena los vectores para accesorios 
            m_formBalance.LlenaVectoresAccesorios(strCodigo, strDescripcion, dcPrecio, dcCosto, dcPreList, dcDescuento)

            'lleno vectores
            Return True
        Else
            'vectores vacios 
            Return False
        End If
    End Function

    ''' <summary>
    ''' Carga el datatable de trámites
    ''' </summary>
    ''' <param name="n">Number format info</param>
    ''' <returns>True si cargo informacion, para determinar que existen trámites para procesar</returns>
    ''' <remarks></remarks>
    Private Function CargaVectoresTramites(ByVal n As System.Globalization.NumberFormatInfo) As Boolean
        'matriz local
        Dim oMTramites As SAPbouiCOM.Matrix

        oMTramites = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

        'string locales
        Dim strCodigo(0 To oMTramites.RowCount - 1) As String
        Dim strDescripcion(0 To oMTramites.RowCount - 1) As String
        Dim dcPrecio(0 To oMTramites.RowCount - 1) As Decimal

        'manejo de costos 
        Dim dcCosto(0 To oMTramites.RowCount - 1) As Decimal
        Dim strCosto As String
        Dim strCantidad As String

        Dim strPrecio As String

        'recorrer matriz de accesorios
        'verificar cantidad de tramites y que la primera linea no se nula 
        If oMTramites.RowCount > 0 _
            And Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Cod_Tram", 0).Trim()) Then

            For i As Integer = 0 To oMTramites.RowCount - 1
                'carga listas de trámites
                strCodigo(i) = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Cod_Tram", i)
                strCodigo(i) = strCodigo(i).Trim()
                strDescripcion(i) = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Des_Tram", i)
                strDescripcion(i) = strDescripcion(i).Trim()
                strPrecio = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Pre_Tot", i)
                strPrecio = strPrecio.Trim()
                'verifica si el precio total de tramites es nulo o 0
                If Not String.IsNullOrEmpty(strPrecio) Then
                    dcPrecio(i) = Decimal.Parse(strPrecio, n)
                Else
                    dcPrecio(i) = Decimal.Parse(0, n)
                End If
                'costo unitario por tramites
                strCosto = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Costo", i)
                strCosto = strCosto.Trim()
                'cantidad de tramites
                strCantidad = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Cant", i)
                strCantidad = strCantidad.Trim()

                'verifica si el costo total de tramite es nulo o 0
                If Not String.IsNullOrEmpty(strCosto) And
                    Not String.IsNullOrEmpty(strCantidad) Then
                    'costo = cantidad * costounitario
                    dcCosto(i) = (Decimal.Parse(strCosto, n) * Integer.Parse(strCantidad))
                Else
                    dcCosto(i) = Decimal.Parse(0, n)
                End If

            Next i

            'llena los vectores para tramites 
            'Activar
            m_formBalance.LlenaVectoresTramites(strCodigo, strDescripcion, dcPrecio, dcCosto)

            'lleno vectores
            Return True
        Else
            'vectores vacios 
            Return False
        End If
    End Function

#End Region

    Private Function Plazo(ByVal oForm As SAPbouiCOM.Form) As Integer

        Dim strPlazo As String
        Dim intPlazo As Integer

        Dim n As NumberFormatInfo

        Try

            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            strPlazo = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Plazo", 0)
            strPlazo = strPlazo.Trim()

            If Not String.IsNullOrEmpty(strPlazo) Then

                intPlazo = Integer.Parse(strPlazo)

            Else

                intPlazo = 0

            End If

            Return intPlazo

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Function

    Private Function EditarUsado(ByVal p_strFormID As String) As Boolean

        Dim oform As SAPbouiCOM.Form
        Dim oMatriz As SAPbouiCOM.Matrix
        Dim intPosicion As Integer
        Dim oCombo As SAPbouiCOM.ComboBox
        Dim strMarca As String
        Dim strEstilo As String
        Dim strColor As String
        Dim strTipo As String
        Dim strGravamen As String
        Dim strPrecioUsado As String
        Dim strImpuestoUsado As String
        Dim strTImpuestoUsado As String

        Dim decPrecioUsado As Decimal
        Dim decImpuestoUsado As Decimal
        Dim decGeneralImpuestoUsado As Decimal

        Dim decTotalUsado As Decimal
        Dim strPrecioVentaUsado As String
        Dim decPrecioVentaUsado As Decimal
        Dim decTotalVentaUsado As Decimal
        Dim decTImpuestoUsado As Decimal
        Dim decGeneralTImpuestoUsado As Decimal

        Dim strTransmisionUsado As String
        Dim strKilometrajeUsado As String
        Dim strModeloUsado As String
        Dim strCombustibleUsado As String
        Dim strCodeModeloUsado As String
        Dim strCodeTransmisionUsado As String
        Dim strCodeCombUsado As String
        Dim StrCodeClasif As String
        Dim strDescClasif As String
        Dim strCategoriaUsado As String
        'Dim strTipoContrato As String = String.Empty
        Dim strCodeMarca As String
        Dim strCodeEstilo As String
        Dim strCodeColor As String
        Dim strCodeTipo As String
        Dim strUnidad As String
        Dim strVIN As String
        Dim strPlaca As String
        Dim strUnidadUsado As String
        Dim strVINUsado As String
        Dim strPlacaUsado As String
        Dim blnUnidadRepetida As Boolean = False
        Dim strValidaDMUsado As String
        Dim strValidaCantidadVIN As String

        Try
            oform = m_SBO_Application.Forms.Item(p_strFormID)

            strValidaCantidadVIN = oDataTableConfiguracionesDMS.GetValue("U_ValongVIN", 0)
            strValidaDMUsado = oDataTableConfiguracionesDMS.GetValue("U_NewDMUCV", 0)

            oMatriz = DirectCast(oform.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)
            intPosicion = oMatriz.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_RowOrder)



            If Not String.IsNullOrEmpty(strValidaDMUsado) AndAlso strValidaDMUsado = "Y" Then
                If Utilitarios.EjecutarConsulta(String.Format(" SELECT COUNT(code) FROM [@SCGD_VEHICULO] WITH (nolock) WHERE U_Cod_Unid = '{0}' ", oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Unid_Us", 0).Trim),
                                                m_oCompany.CompanyDB, m_oCompany.Server) > 0 Then
                    m_SBO_Application.SetStatusBarMessage(My.Resources.Resource.UnidaYaExiste, BoMessageTime.bmt_Short, False)
                    Exit Function
                End If
            End If

            'validacion para numero de VIN mayor a 17 caracteres
            If Not String.IsNullOrEmpty(strValidaCantidadVIN) AndAlso strValidaCantidadVIN = "Y" Then
                If Utilitarios.ValidarLongitudVIN(oform, m_oCompany, TablaContrato, "U_Vin_Us") Then
                    m_SBO_Application.SetStatusBarMessage(My.Resources.Resource.ErrorLongitudVIN, BoMessageTime.bmt_Short)
                    Exit Function
                End If
            End If

            strUnidad = oform.Items.Item("txtUnid_Us").Specific.String
            strUnidad = strUnidad.Trim()
            strVIN = oform.Items.Item("txtVIN_Us").Specific.String
            strVIN = strVIN.Trim()
            strPlaca = oform.Items.Item("txtPlac_Us").Specific.String
            strPlaca = strPlaca.Trim()

            If Not String.IsNullOrEmpty(strUnidad) Then

                If Not String.IsNullOrEmpty(strVIN) AndAlso Not String.IsNullOrEmpty(strPlaca) Then

                    For i As Integer = 0 To oMatriz.RowCount - 1

                        If i <> intPosicion - 1 Then
                            strUnidadUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", i).Trim
                            strVINUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_VIN", i).Trim
                            strPlacaUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Placa", i).Trim

                            If (strUnidad = strUnidadUsado AndAlso Not String.IsNullOrEmpty(strUnidad)) OrElse (strVIN = strVINUsado AndAlso Not String.IsNullOrEmpty(strVIN)) OrElse (strPlaca = strPlacaUsado AndAlso Not String.IsNullOrEmpty(strPlaca)) Then
                                blnUnidadRepetida = True
                                Exit For
                            End If

                        End If

                    Next

                    If blnUnidadRepetida = False Then

                        strCodeMarca = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Marc_US", 0).Trim
                        strMarca = Utilitarios.EjecutarConsulta("Select Name From [@SCGD_MARCA]  with (nolock) where Code = '" & strCodeMarca & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Marca_Us", intPosicion - 1, strCodeMarca)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Marca", intPosicion - 1, strMarca)

                        strCodeEstilo = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Esti_Us", 0).Trim
                        strEstilo = Utilitarios.EjecutarConsulta("Select Name From [@SCGD_ESTILO]  with (nolock) where Code = '" & strCodeEstilo & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Estilo_Us", intPosicion - 1, strCodeEstilo) '///////////////////
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Estilo", intPosicion - 1, strEstilo)

                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Motor", intPosicion - 1, oform.Items.Item("txtMoto_Us").Specific.String)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_VIN", intPosicion - 1, oform.Items.Item("txtVIN_Us").Specific.String)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Anio", intPosicion - 1, oform.Items.Item("txtAno_Us").Specific.String)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Placa", intPosicion - 1, oform.Items.Item("txtPlac_Us").Specific.String)

                        strCodeColor = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Col_Us", 0).Trim
                        strColor = Utilitarios.EjecutarConsulta("Select Name From [@SCGD_COLOR]  with (nolock) where Code = '" & strCodeColor & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Col_Us", intPosicion - 1, strCodeColor)  '///////////////////
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Color", intPosicion - 1, strColor)

                        strCodeTipo = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tip_Us", 0).Trim
                        strTipo = Utilitarios.EjecutarConsulta("Select Name From [@SCGD_TIPOVEHICULO]  with (nolock) where Code = '" & strCodeTipo & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Tipo", intPosicion - 1, strTipo)

                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Fec_Av", intPosicion - 1, oform.Items.Item("txtAvaluo").Specific.Value)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Der_Cir", intPosicion - 1, oform.Items.Item("txtDer_Cir").Specific.Value)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_RTV_MM", intPosicion - 1, oform.Items.Item("txtRTV_MM").Specific.String)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_RTV_AA", intPosicion - 1, oform.Items.Item("txtRTV_AA").Specific.String)
                        oCombo = DirectCast(oform.Items.Item("cboGrav").Specific, SAPbouiCOM.ComboBox)
                        strGravamen = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gravo", 0).Trim
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Gravamen", intPosicion - 1, strGravamen)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Gra_Fec", intPosicion - 1, oform.Items.Item("txtFec_gra").Specific.Value)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Val_Rec", intPosicion - 1, oform.Items.Item("txtVal_Inv").Specific.Value)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_ImpUsado", intPosicion - 1, oform.Items.Item("txtValImp").Specific.Value)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_TotalCImpuest", intPosicion - 1, oform.Items.Item("txtValorTI").Specific.Value)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Aj_Cos", intPosicion - 1, oform.Items.Item("txtValorCo").Specific.Value)

                        strKilometrajeUsado = oform.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_KmU", 0).Trim
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_KmUs", intPosicion - 1, strKilometrajeUsado.Trim)

                        strCodeModeloUsado = oform.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_ModU", 0).Trim
                        strModeloUsado = Utilitarios.EjecutarConsulta("SELECT U_Descripcion FROM [@SCGD_MODELO]  with (nolock) WHERE CODE = '" & strCodeModeloUsado & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Mod_Us", intPosicion - 1, strCodeModeloUsado)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_MoUs", intPosicion - 1, strModeloUsado)

                        StrCodeClasif = oform.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_CodClasifUs", 0).Trim
                        strDescClasif = Utilitarios.EjecutarConsulta("SELECT U_Desc FROM [@SCGD_CLASIFICACION]  with (nolock) WHERE Code = '" & StrCodeClasif & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Clasif_Us", intPosicion - 1, StrCodeClasif)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Des_Clasif_Us", intPosicion - 1, strDescClasif)

                        strCodeTransmisionUsado = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_TranU", 0).Trim
                        strTransmisionUsado = Utilitarios.EjecutarConsulta("Select Name From [@SCGD_TRANSMISION]  with (nolock) where Code = '" & strCodeTransmisionUsado & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_TraUs", intPosicion - 1, strTransmisionUsado.Trim)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Trans_Us", intPosicion - 1, strCodeTransmisionUsado)

                        strCategoriaUsado = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CatVeUs", 0)
                        strCategoriaUsado = strCategoriaUsado.Trim()
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_CatUs", intPosicion - 1, strCategoriaUsado.Trim)

                        'strTipoContrato = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_TipoCo", 0)
                        'strTipoContrato = strTipoContrato.Trim()
                        'oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_TipoCo", intPosicion - 1, strTipoContrato)

                        strCodeCombUsado = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ComU", 0).Trim
                        strCombustibleUsado = Utilitarios.EjecutarConsulta("Select Name From [@SCGD_COMBUSTIBLE]  with (nolock) where Code = '" & strCodeCombUsado & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_CoUs", intPosicion - 1, strCombustibleUsado.Trim)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Comb_Us", intPosicion - 1, strCodeCombUsado)

                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Val_Venta", intPosicion - 1, oform.Items.Item("txtValVent").Specific.Value)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Prov", intPosicion - 1, oform.Items.Item("txtCodProv").Specific.Value)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Nom_Prov", intPosicion - 1, oform.Items.Item("txtNomProv").Specific.Value)
                        oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Unid", intPosicion - 1, strUnidad)

                        oMatriz.LoadFromDataSource()

                        For i As Integer = 0 To oMatriz.RowCount - 1
                            strPrecioUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Val_Rec", i).Trim
                            If Not String.IsNullOrEmpty(strPrecioUsado) Then
                                decPrecioUsado = Decimal.Parse(strPrecioUsado, n)
                            Else
                                decPrecioUsado = 0
                            End If
                            decTotalUsado += decPrecioUsado

                            'Calculo del impuesto sobre el usado
                            strImpuestoUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_ImpUsado", i).Trim
                            If Not String.IsNullOrEmpty(strImpuestoUsado) Then
                                decImpuestoUsado = Decimal.Parse(strImpuestoUsado, n)
                            Else
                                decImpuestoUsado = 0
                            End If
                            decGeneralImpuestoUsado += decImpuestoUsado

                            'Calculo del total con impuestos sobre el usado
                            strTImpuestoUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_TotalCImpuest", i).Trim
                            If Not String.IsNullOrEmpty(strTImpuestoUsado) Then
                                decTImpuestoUsado = Decimal.Parse(strTImpuestoUsado, n)
                            Else
                                decTImpuestoUsado = 0
                            End If
                            decGeneralTImpuestoUsado += decTImpuestoUsado


                        Next i

                        oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Mon_Usa", 0, decTotalUsado.ToString(n))
                        oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ImpUsado", 0, decGeneralImpuestoUsado.ToString(n))
                        oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TotalCImpuest", 0, decGeneralTImpuestoUsado.ToString(n))

                        For i As Integer = 0 To oMatriz.RowCount - 1
                            strPrecioVentaUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Val_Venta", i).Trim

                            If Not String.IsNullOrEmpty(strPrecioVentaUsado) Then
                                decPrecioVentaUsado = Decimal.Parse(strPrecioVentaUsado, n)
                            Else
                                decPrecioVentaUsado = 0
                            End If

                            decTotalVentaUsado += decPrecioVentaUsado
                        Next i

                        oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ValVeh_Us", 0, decTotalVentaUsado.ToString(n))

                        Call FormateaPreciosBase(oform)
                        Call LimpiarUsadoTemporal(oform)

                        oform.Items.Item("btnEditUs").Enabled = False
                        oform.Items.Item("btnAgregaU").Enabled = True
                        oform.Items.Item("btnBuscaUs").Enabled = True
                        oform.ActiveItem = "txtCl"

                        If oform.Mode = BoFormMode.fm_OK_MODE Then
                            oform.Mode = BoFormMode.fm_UPDATE_MODE
                        End If

                    Else
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.UnidadRepetida, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        Return False
                    End If

                Else
                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorUsado, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                    Return False
                End If

            Else
                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorUsadoUnidad, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                Return False
            End If

            Return True

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Function

    Private Sub EliminarUsado(ByVal p_strFormID As String)

        Try

            Dim oform As SAPbouiCOM.Form
            Dim oMatriz As SAPbouiCOM.Matrix
            Dim intRegistoEliminar As Integer
            Dim blnLineasEliminadas As Boolean = False

            Dim strPrecioUsado As String
            Dim strImpuestoUsado As String
            Dim strTImpuestoUsado As String

            Dim decImpuestoUsado As Decimal
            Dim decPrecioUsado As Decimal
            Dim decTotalUsado As Decimal
            Dim decTImpuestoUsado As Decimal
            Dim decGeneralImpuestoUsado As Decimal
            Dim decGeneralTImpuestoUsado As Decimal

            Dim strPrecioVentaUsado As String
            Dim decPrecioVentaUsado As Decimal
            Dim decTotalVentaUsado As Decimal

            oform = m_SBO_Application.Forms.Item(p_strFormID)
            oform.Freeze(True)
            oMatriz = DirectCast(oform.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)
            intRegistoEliminar = oMatriz.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_RowOrder)

            If intRegistoEliminar > -1 Then

                oMatriz.FlushToDataSource()
                oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").RemoveRecord(intRegistoEliminar - 1)
                blnLineasEliminadas = True
                intRegistoEliminar = oMatriz.GetNextSelectedRow(intRegistoEliminar, SAPbouiCOM.BoOrderType.ot_RowOrder)

            End If

            If oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").Size = 0 Then
                oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").InsertRecord(0)
                oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Aj_Cos", 0, "0")
                blnLineasEliminadas = True
            End If

            If blnLineasEliminadas Then
                oMatriz.LoadFromDataSource()

                For i As Integer = 0 To oMatriz.RowCount - 1
                    strPrecioUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Val_Rec", i).Trim

                    If Not String.IsNullOrEmpty(strPrecioUsado) Then
                        decPrecioUsado = Decimal.Parse(strPrecioUsado, n)
                    Else
                        decPrecioUsado = 0
                    End If
                    decTotalUsado += decPrecioUsado


                    'Calculo del impuesto sobre el usado
                    strImpuestoUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_ImpUsado", i).Trim
                    If Not String.IsNullOrEmpty(strImpuestoUsado) Then
                        decImpuestoUsado = Decimal.Parse(strImpuestoUsado, n)
                    Else
                        decImpuestoUsado = 0
                    End If
                    decGeneralImpuestoUsado += decImpuestoUsado

                    'Calculo del total con impuestos sobre el usado
                    strTImpuestoUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_TotalCImpuest", i).Trim
                    If Not String.IsNullOrEmpty(strTImpuestoUsado) Then
                        decTImpuestoUsado = Decimal.Parse(strTImpuestoUsado, n)
                    Else
                        decTImpuestoUsado = 0
                    End If
                    decGeneralTImpuestoUsado += decTImpuestoUsado

                Next i

                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Mon_Usa", 0, decTotalUsado.ToString(n))
                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ImpUsado", 0, decGeneralImpuestoUsado.ToString(n))
                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TotalCImpuest", 0, decGeneralTImpuestoUsado.ToString(n))

                For i As Integer = 0 To oMatriz.RowCount - 1
                    strPrecioVentaUsado = oform.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Val_Venta", i).Trim

                    If Not String.IsNullOrEmpty(strPrecioVentaUsado) Then
                        decPrecioVentaUsado = Decimal.Parse(strPrecioVentaUsado, n)
                    Else
                        decPrecioVentaUsado = 0
                    End If

                    decTotalVentaUsado += decPrecioVentaUsado
                Next i

                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ValVeh_Us", 0, decTotalVentaUsado.ToString(n))

                Call FormateaPreciosBase(oform)

                Call LimpiarUsadoTemporal(oform)

                oform.Items.Item("btnEditUs").Enabled = False
                oform.Items.Item("btnAgregaU").Enabled = True
                oform.Items.Item("btnBuscaUs").Enabled = True
                oform.ActiveItem = "txtCl"

                If oform.Mode = BoFormMode.fm_OK_MODE Then
                    oform.Mode = BoFormMode.fm_UPDATE_MODE
                End If

            End If

            oform.Freeze(False)

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Private Function AgregarUsado(ByVal oForm As SAPbouiCOM.Form) As Boolean

        Dim oMatrix As SAPbouiCOM.Matrix
        Dim strUnidad As String
        Dim strMarca As String
        Dim strEstilo As String
        Dim strColor As String
        Dim strTipo As String
        Dim intNuevoRegistro As Integer
        Dim strUsado As String
        Dim oCombo As SAPbouiCOM.ComboBox
        Dim strGravamen As String

        Dim strPrecioUsado As String
        Dim decPrecioUsado As Decimal
        Dim strImpuestoUsado As String
        Dim decImpuestoUsado As Decimal
        Dim strTImpuestoUsado As String
        Dim decTImpuestoUsado As Decimal

        Dim decTotalUsado As Decimal
        Dim decGeneralImpuestoUsado As Decimal
        Dim decGeneralTImpuestoUsado As Decimal

        Dim strCliente As String
        Dim strTransmision As String
        Dim strCombustible As String
        Dim strModelo As String
        Dim strKm As String
        Dim strCategoria As String
        'Dim strTipoContrato As String

        Dim strPrecioVentaUsado As String
        Dim decPrecioVentaUsado As Decimal
        Dim decTotalVentaUsado As Decimal

        Dim strCodeMarca As String
        Dim strCodeEstilo As String
        Dim strCodeColor As String
        Dim strCodeTipo As String
        Dim strCodeTransmision As String
        Dim strCodeCombustible As String
        Dim strCodeModelo As String
        Dim strCodeClasif As String
        Dim strDescClasif As String

        Dim strUnidadUsado As String
        Dim blnUnidadRepetida As Boolean = False

        Dim strTipoUnidad As String
        Dim strVIN As String
        Dim strPlaca As String
        Dim strVINUsado As String
        Dim strPlacaUsado As String
        Dim strValidacionAnoUsado As String
        Dim strValidaDMUsado As String
        Dim strValidaCantidadVIN As String
        Dim strAnoUsado As String
        Dim intAnoUsado As Integer = -1
        Dim strUsaSerieUsado As String
        Dim intExisteUnidad As Integer
        Dim count As Integer
        Dim oCABYS As CABYS
        Dim strIndicadorImpuesto As String = String.Empty
        Try

            strValidaDMUsado = oDataTableConfiguracionesDMS.GetValue("U_NewDMUCV", 0)
            strValidaCantidadVIN = oDataTableConfiguracionesDMS.GetValue("U_ValongVIN", 0)
            strValidacionAnoUsado = oDataTableConfiguracionesDMS.GetValue("U_SCGD_AnoUs", 0)
            strUsaSerieUsado = oDataTableConfiguracionesDMS.GetValue("U_Serie_U", 0)

            strCliente = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0).Trim
            If Not String.IsNullOrEmpty(strCliente) Then
                oCABYS = New CABYS()
                oMatrix = DirectCast(oForm.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)

                oCombo = DirectCast(oForm.Items.Item("cboGrav").Specific, SAPbouiCOM.ComboBox)

                strUnidad = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Unid_Us", 0).Trim
                strVIN = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Vin_Us", 0).Trim
                strPlaca = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Plac_Us", 0).Trim

                If Not String.IsNullOrEmpty(strValidaCantidadVIN) AndAlso strValidaCantidadVIN = "Y" Then
                    If Utilitarios.ValidarLongitudVIN(oForm, m_oCompany, TablaContrato, "U_Vin_Us") Then
                        m_SBO_Application.SetStatusBarMessage(My.Resources.Resource.ErrorLongitudVIN, BoMessageTime.bmt_Short)
                        Return False
                    End If

                End If

                If Not String.IsNullOrEmpty(strValidacionAnoUsado) AndAlso strValidacionAnoUsado = "Y" Then
                    strAnoUsado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Anio_Us", 0)

                    If Not String.IsNullOrEmpty(strAnoUsado) Then
                        intAnoUsado = CInt(strAnoUsado)
                    End If

                    If intAnoUsado > 0 Then
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorValidacionAUS, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        Return False
                    End If
                End If

                'Genera el codigo de unidad segun configuracion // IF se genera con la serie definida, ELSE se genera con lo que el usuario digite
                If Not String.IsNullOrEmpty(strUsaSerieUsado) Then
                    count = 0
                    Do
                        strUnidad = GenerarNoUnidadUsado(oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim, count)
                        intExisteUnidad = ValidaExisteCodUnidad(strUnidad, False, oForm)
                        count += 1
                    Loop While intExisteUnidad > 0
                Else
                    If Not String.IsNullOrEmpty(strValidaDMUsado) AndAlso strValidaDMUsado = "Y" Then
                        If Utilitarios.EjecutarConsulta(String.Format(" SELECT COUNT(code) FROM [@SCGD_VEHICULO] WITH (nolock) WHERE U_Cod_Unid = '{0}' ", oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Unid_Us", 0).Trim),
                                                        m_oCompany.CompanyDB, m_oCompany.Server) > 0 Then
                            m_SBO_Application.SetStatusBarMessage(My.Resources.Resource.UnidaYaExiste, BoMessageTime.bmt_Short, False)
                            Return False
                        End If
                    End If
                End If

                'Valida si el codigo de unidad esta vacio segun configuracion
                If Not String.IsNullOrEmpty(strUnidad) Then

                    'Validacion de que exista o el VIN o la Placa
                    If Not String.IsNullOrEmpty(strVIN) AndAlso Not String.IsNullOrEmpty(strPlaca) Then

                        strTipoUnidad = oForm.Items.Item("cboTipo_Us").Specific.Value.trim

                        'Valida el Tipo de Invenario
                        If Not String.IsNullOrEmpty(strTipoUnidad) Then

                            For i As Integer = 0 To oMatrix.RowCount - 1
                                strUnidadUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", i).Trim
                                strVINUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_VIN", i).Trim
                                strPlacaUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Placa", i).Trim

                                If (strUnidad = strUnidadUsado AndAlso Not String.IsNullOrEmpty(strUnidad)) OrElse (strVIN = strVINUsado AndAlso Not String.IsNullOrEmpty(strVIN)) OrElse (strPlaca = strPlacaUsado AndAlso Not String.IsNullOrEmpty(strPlaca)) Then
                                    blnUnidadRepetida = True
                                    Exit For
                                End If
                            Next

                            If blnUnidadRepetida = False Then

                                intNuevoRegistro = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").Size
                                If intNuevoRegistro = 1 Then
                                    strUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", 0).Trim
                                    If Not String.IsNullOrEmpty(strUsado) Then
                                        oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").InsertRecord(intNuevoRegistro)
                                        intNuevoRegistro += 1
                                    Else
                                        intNuevoRegistro = 1
                                    End If
                                Else
                                    oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").InsertRecord(intNuevoRegistro)
                                    intNuevoRegistro += 1
                                End If

                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Unid", intNuevoRegistro - 1, strUnidad)

                                strCodeMarca = oForm.Items.Item("cboMarc_Us").Specific.Value.ToString.Trim()
                                strMarca = Utilitarios.EjecutarConsulta("Select Name From [@SCGD_MARCA]  with (nolock) where Code = '" & strCodeMarca & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Marca_Us", intNuevoRegistro - 1, strCodeMarca)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Marca", intNuevoRegistro - 1, strMarca)

                                strCodeEstilo = oForm.Items.Item("cboEsti_Us").Specific.Value.ToString.Trim
                                strEstilo = Utilitarios.EjecutarConsulta("Select Name From [@SCGD_ESTILO]  with (nolock) where Code = '" & strCodeEstilo & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Estilo_Us", intNuevoRegistro - 1, strCodeEstilo)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Estilo", intNuevoRegistro - 1, strEstilo)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Motor", intNuevoRegistro - 1, oForm.Items.Item("txtMoto_Us").Specific.String)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_VIN", intNuevoRegistro - 1, oForm.Items.Item("txtVIN_Us").Specific.String)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Anio", intNuevoRegistro - 1, oForm.Items.Item("txtAno_Us").Specific.String)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Placa", intNuevoRegistro - 1, oForm.Items.Item("txtPlac_Us").Specific.String)

                                strCodeColor = oForm.Items.Item("cboCol_Us").Specific.Value.ToString.Trim
                                strColor = Utilitarios.EjecutarConsulta("Select Name From [@SCGD_COLOR]  with (nolock) where Code = '" & strCodeColor & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Col_Us", intNuevoRegistro - 1, strCodeColor)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Color", intNuevoRegistro - 1, strColor)

                                strCodeTipo = oForm.Items.Item("cboTipo_Us").Specific.Value.ToString.Trim

                                strTipo = Utilitarios.EjecutarConsulta("Select Name From [@SCGD_TIPOVEHICULO]  with (nolock) where Code = '" & strCodeTipo & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Tipo", intNuevoRegistro - 1, strTipo)

                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Fec_Av", intNuevoRegistro - 1, oForm.Items.Item("txtAvaluo").Specific.Value)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Der_Cir", intNuevoRegistro - 1, oForm.Items.Item("txtDer_Cir").Specific.Value)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_RTV_MM", intNuevoRegistro - 1, oForm.Items.Item("txtRTV_MM").Specific.String)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_RTV_AA", intNuevoRegistro - 1, oForm.Items.Item("txtRTV_AA").Specific.String)

                                strGravamen = oCombo.Selected.Description.ToString.Trim
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Gravamen", intNuevoRegistro - 1, strGravamen)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Gra_Fec", intNuevoRegistro - 1, oForm.Items.Item("txtFec_gra").Specific.Value)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Val_Rec", intNuevoRegistro - 1, oForm.Items.Item("txtVal_Inv").Specific.Value)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_ImpUsado", intNuevoRegistro - 1, oForm.Items.Item("txtValImp").Specific.Value)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_TotalCImpuest", intNuevoRegistro - 1, oForm.Items.Item("txtValorTI").Specific.Value)


                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Aj_Cos", intNuevoRegistro - 1, oForm.Items.Item("txtValorCo").Specific.Value)

                                strCodeTransmision = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_TranU", 0).Trim
                                strTransmision = Utilitarios.EjecutarConsulta("Select Name From [@SCGD_TRANSMISION]  with (nolock) where Code = '" & strCodeTransmision & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_TraUs", intNuevoRegistro - 1, strTransmision.Trim())
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Trans_Us", intNuevoRegistro - 1, strCodeTransmision)

                                strCategoria = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CatVeUs", 0)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_CatUs", intNuevoRegistro - 1, strCategoria.Trim())

                                'strTipoContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_TipoCo", 0)
                                'oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_TipoCo", intNuevoRegistro - 1, strTipoContrato.Trim())

                                strCodeModelo = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ModU", 0).Trim
                                strModelo = Utilitarios.EjecutarConsulta("Select U_Descripcion From [@SCGD_MODELO]  with (nolock) where Code = '" & strCodeModelo & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_MoUs", intNuevoRegistro - 1, strModelo.Trim())
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Mod_Us", intNuevoRegistro - 1, strCodeModelo)

                                strCodeCombustible = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ComU", 0).Trim
                                strCombustible = Utilitarios.EjecutarConsulta("Select Name From [@SCGD_COMBUSTIBLE]  with (nolock) where Code = '" & strCodeCombustible & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_CoUs", intNuevoRegistro - 1, strCombustible.Trim())
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Comb_Us", intNuevoRegistro - 1, strCodeCombustible)

                                strKm = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_KmU", 0).Trim
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_KmUs", intNuevoRegistro - 1, strKm.Trim())

                                strCodeClasif = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CodClasifUS", 0).Trim
                                strDescClasif = Utilitarios.EjecutarConsulta("SELECT U_Desc FROM [@SCGD_CLASIFICACION]  with (nolock) WHERE Code = '" & strCodeClasif & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Clasif_Us", intNuevoRegistro - 1, strCodeClasif)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Des_Clasif_Us", intNuevoRegistro - 1, strDescClasif)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Val_Venta", intNuevoRegistro - 1, oForm.Items.Item("txtValVent").Specific.Value)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Prov", intNuevoRegistro - 1, oForm.Items.Item("txtCodProv").Specific.Value)
                                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Nom_Prov", intNuevoRegistro - 1, oForm.Items.Item("txtNomProv").Specific.Value)

                                If Not oForm.Items.Item("txtUnid_Us").Enabled Then
                                    oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Existe", intNuevoRegistro - 1, "Y")
                                Else
                                    oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Existe", intNuevoRegistro - 1, "N")
                                End If

                                '*******************INICIO| Manejo CABYS****************
                                If DMS_Connector.Configuracion.ParamGenAddon.U_CABYS_CR = "Y" Then
                                    oCABYS.CodigoUnidad = strUnidad
                                    oCABYS.TipoInventario = strTipoUnidad
                                    If DMS_Connector.Configuracion.ParamGenAddon.Admin3.Any(Function(admin3) admin3.U_Tipo.Trim().Equals(oCABYS.TipoInventario.Trim) AndAlso admin3.U_Cod_Item.Trim().Equals("2")) Then
                                        strIndicadorImpuesto = DMS_Connector.Configuracion.ParamGenAddon.Admin3.First(Function(admin3) admin3.U_Tipo.Trim().Equals(oCABYS.TipoInventario.Trim) AndAlso admin3.U_Cod_Item.Trim().Equals("2")).U_Cod_Imp
                                    End If
                                    oCABYS.IndicadorIVA = strIndicadorImpuesto
                                    If String.IsNullOrEmpty(oCABYS.CodigoArticulo) Then
                                        If DMS_Connector.Configuracion.ParamGenAddon.Admin1.Any(Function(admin1) admin1.U_Tipo.Trim.Equals(oCABYS.TipoInventario)) Then
                                            oCABYS.CodigoArticulo = DMS_Connector.Configuracion.ParamGenAddon.Admin1.FirstOrDefault(Function(admin1) admin1.U_Tipo.Trim.Equals(oCABYS.TipoInventario)).U_ItemCode
                                        End If
                                    End If
                                    Call ManejaCABYS(oCABYS)
                                    If Not String.IsNullOrEmpty(oCABYS.CABYS_AE) Then oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_CABYS_AE", intNuevoRegistro - 1, oCABYS.CABYS_AE)
                                    If Not String.IsNullOrEmpty(oCABYS.CABYS_TI) Then oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_CABYS_TI", intNuevoRegistro - 1, oCABYS.CABYS_TI)
                                    If Not String.IsNullOrEmpty(oCABYS.CABYS_CH) Then oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_CABYS_CH", intNuevoRegistro - 1, oCABYS.CABYS_CH)
                                End If
                                '*******************FINAL| Manejo CABYS****************
                                oMatrix.LoadFromDataSource()

                                For i As Integer = 0 To oMatrix.RowCount - 1
                                    'Calculo del total sobre el usado
                                    strPrecioUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Val_Rec", i).Trim
                                    If Not String.IsNullOrEmpty(strPrecioUsado) Then
                                        decPrecioUsado = Decimal.Parse(strPrecioUsado, n)
                                    Else
                                        decPrecioUsado = 0
                                    End If
                                    decTotalUsado += decPrecioUsado

                                    'Calculo del impuesto sobre el usado
                                    strImpuestoUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_ImpUsado", i).Trim
                                    If Not String.IsNullOrEmpty(strImpuestoUsado) Then
                                        decImpuestoUsado = Decimal.Parse(strImpuestoUsado, n)
                                    Else
                                        decImpuestoUsado = 0
                                    End If
                                    decGeneralImpuestoUsado += decImpuestoUsado

                                    'Calculo del total con impuestos sobre el usado
                                    strTImpuestoUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_TotalCImpuest", i).Trim
                                    If Not String.IsNullOrEmpty(strTImpuestoUsado) Then
                                        decTImpuestoUsado = Decimal.Parse(strTImpuestoUsado, n)
                                    Else
                                        decTImpuestoUsado = 0
                                    End If
                                    decGeneralTImpuestoUsado += decTImpuestoUsado


                                Next i

                                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Mon_Usa", 0, decTotalUsado.ToString(n))
                                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ImpUsado", 0, decGeneralImpuestoUsado.ToString(n))
                                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TotalCImpuest", 0, decGeneralTImpuestoUsado.ToString(n))

                                For i As Integer = 0 To oMatrix.RowCount - 1
                                    strPrecioVentaUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Val_Venta", i).Trim

                                    If Not String.IsNullOrEmpty(strPrecioVentaUsado) Then
                                        decPrecioVentaUsado = Decimal.Parse(strPrecioVentaUsado, n)
                                    Else
                                        decPrecioVentaUsado = 0
                                    End If

                                    decTotalVentaUsado += decPrecioVentaUsado
                                Next i

                                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ValVeh_Us", 0, decTotalVentaUsado.ToString(n))

                                Call FormateaPreciosBase(oForm)
                                Call LimpiarUsadoTemporal(oForm)

                                If oForm.Mode = BoFormMode.fm_OK_MODE Then
                                    oForm.Mode = BoFormMode.fm_UPDATE_MODE
                                End If

                            Else
                                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.UnidadRepetida, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                                Return False
                            End If

                        ElseIf String.IsNullOrEmpty(strTipoUnidad) Then
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorTipoUsado, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                            Return False
                        End If

                    Else
                        'Condicion para placas y numeros de VIN
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorUsado, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        Return False
                    End If

                Else
                    'condicion para unidades
                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorUsadoUnidad, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                    Return False
                End If

            Else
                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCliente, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                Return False
            End If

            Return True

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Function

    Private Function ValidaExisteCodUnidad(p_strCodUnidad As String, p_blnEliminarUnid As Boolean, p_oForm As Form) As Integer

        Dim intResultado As Integer = Utilitarios.EjecutarConsulta(String.Format("SELECT Count(code) FROM [@SCGD_VEHICULO] with(nolock) WHERE U_Cod_Unid = '{0}'", p_strCodUnidad), m_oCompany.CompanyDB, m_oCompany.Server)

        If intResultado = 0 AndAlso p_blnEliminarUnid = False Then
            For index As Integer = p_oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").Size - 1 To 0 Step -1
                If p_oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", index).Trim.Equals(p_strCodUnidad) Then
                    intResultado = 1
                    Exit For
                End If
            Next
        End If

        Return intResultado

    End Function

    ''' <summary>
    ''' Valida que no exista un vehículo ligado al accesorio en el contrato de ventas
    ''' </summary>
    ''' <param name="p_strCodUnidad">Código del vehículo/unidad</param>
    ''' <param name="p_oForm">Formulario desde el cual se llama al método</param>
    ''' <returns>True = Si hay vehículos ligados en el contrato de ventas, False = no hay vehículos ligados en el contrato de ventas</returns>
    ''' <remarks></remarks>
    Private Function ValidaAccesoriosUnidad(ByVal p_strCodUnidad As String, ByVal p_oForm As Form) As Boolean
        Dim boolResultado As Boolean = False
        Dim intTamano As Integer = 0

        Try
            intTamano = p_oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size

            If intTamano > 0 Then
                For i As Integer = 0 To intTamano - 1
                    If p_oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).Trim.Equals(p_strCodUnidad) Then
                        boolResultado = True
                        Exit For
                    End If
                Next
            End If

            Return boolResultado

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Private Sub CargarUnidadVendida(ByVal oForm As SAPbouiCOM.Form, ByVal oDataTable As SAPbouiCOM.DataTable)

        Dim strUnidad As String = String.Empty
        Dim strMarca As String = String.Empty
        Dim strEstilo As String = String.Empty
        Dim strModelo As String = String.Empty
        Dim strMotor As String = String.Empty
        Dim strVIN As String = String.Empty
        Dim strAño As String = String.Empty
        Dim strPlaca As String = String.Empty
        Dim strColor As String = String.Empty
        Dim strTransmicion As String = String.Empty
        Dim strKilometros As String = String.Empty
        Dim strClasificasion As String = String.Empty
        Dim strCombustible As String = String.Empty
        Dim strCategoria As String = String.Empty

        Try

            strUnidad = oDataTable.Columns.Item("U_Cod_Unid").Cells.Item(0).Value

            strMarca = oDataTable.Columns.Item("U_Cod_Marc").Cells.Item(0).Value
            strEstilo = oDataTable.Columns.Item("U_Cod_Esti").Cells.Item(0).Value
            strModelo = oDataTable.Columns.Item("U_Cod_Mode").Cells.Item(0).Value

            'Se cargan los combos de Estilo y Marca del Vehiculo Usado
            Call CargarValidValuesEnCombos(oForm, String.Format("Select Code, Name From [@SCGD_ESTILO] with (nolock) where U_Cod_Marc = '{0}'", strMarca.Trim()), mc_strEstiloUS)
            Call CargarValidValuesEnCombos(oForm, String.Format("Select Code, U_Descripcion From [@SCGD_MODELO] with (nolock) where U_Cod_Esti = '{0}'", strEstilo.Trim()), mc_strModeloUS)

            strMotor = oDataTable.Columns.Item("U_Num_Mot").Cells.Item(0).Value
            strVIN = oDataTable.Columns.Item("U_Num_VIN").Cells.Item(0).Value
            strAño = oDataTable.Columns.Item("U_Ano_Vehi").Cells.Item(0).Value
            strPlaca = oDataTable.Columns.Item("U_Num_Plac").Cells.Item(0).Value
            strColor = oDataTable.Columns.Item("U_Cod_Col").Cells.Item(0).Value

            strTransmicion = oDataTable.Columns.Item("U_Transmis").Cells.Item(0).Value
            strKilometros = oDataTable.Columns.Item("U_Km_Unid").Cells.Item(0).Value
            strClasificasion = oDataTable.Columns.Item("U_Clasificacion").Cells.Item(0).Value
            strCombustible = oDataTable.Columns.Item("U_Combusti").Cells.Item(0).Value
            strCategoria = oDataTable.Columns.Item("U_Categori").Cells.Item(0).Value

            If Not String.IsNullOrEmpty(strUnidad) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Unid_Us", 0, strUnidad)
            End If
            If Not String.IsNullOrEmpty(strMarca) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Marc_US", 0, strMarca)
            End If
            If Not String.IsNullOrEmpty(strEstilo) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Esti_Us", 0, strEstilo)
            End If
            If Not String.IsNullOrEmpty(strModelo) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ModU", 0, strModelo)
            End If
            If Not String.IsNullOrEmpty(strMotor) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Mot_Us", 0, strMotor)
            End If
            If Not String.IsNullOrEmpty(strVIN) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_VIN_Us", 0, strVIN)
            End If
            If Not String.IsNullOrEmpty(strAño) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Anio_Us", 0, strAño)
            End If
            If Not String.IsNullOrEmpty(strPlaca) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Plac_Us", 0, strPlaca)
            End If
            If Not String.IsNullOrEmpty(strColor) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Col_Us", 0, strColor)
            End If
            If Not String.IsNullOrEmpty(strTransmicion) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TranU", 0, strTransmicion)
            End If
            If Not String.IsNullOrEmpty(strKilometros) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_KmU", 0, strKilometros)
            End If
            If Not String.IsNullOrEmpty(strClasificasion) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CodClasifUs", 0, strClasificasion)
            End If
            If Not String.IsNullOrEmpty(strCombustible) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ComU", 0, strCombustible)
            End If
            If Not String.IsNullOrEmpty(strCategoria) Then
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CatVeUs", 0, strCategoria)
            End If

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Private Sub LimpiarUsadoTemporal(ByVal oForm As SAPbouiCOM.Form)

        Try

            oForm.Freeze(True)

            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Unid_Us", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Marc_Us", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Esti_Us", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Mot_Us", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_VIN_Us", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Anio_Us", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Plac_Us", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Col_Us", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Tip_Us", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Aval_us", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Der_Cir", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_RTV_MM", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_RTV_AAAA", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Us", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Val_Inv", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Gravo", 0, "2")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Gra_Fec", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TranU", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_KmU", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ModU", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ComU", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CodClasifUs", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ValVeh_Us", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CatVeUs", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Cod_ProvUS", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Nom_ProvUS", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ImpUsa", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TImpusa", 0, "")
            'oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TipoCo", 0, "")

            oForm.Freeze(False)

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Private Sub LimpiarVehiculoTemporal(ByVal oForm As SAPbouiCOM.Form)

        Try

            oForm.Freeze(True)

            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Cod_Unid", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Marc", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Esti", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Mode", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Des_Col", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Num_Mot", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Num_VIN", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Ano_Vehi", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Num_Plac", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Transmis", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Vh", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Imp_Vh", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Por_Temp", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pago_Vh", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_GL_Temp", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_OG_Temp", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_BonoVV", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_PreNet", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Km_Venta", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_DescUni", 0, "")

            oForm.Freeze(False)

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    'Agregado 24/01/2011: Calcula el precio de venta del contrato de venta según las unidades cargadas
    Private Sub CalculaPrecioVenta(ByRef oform As SAPbouiCOM.Form)

        Dim oMatrix As SAPbouiCOM.Matrix
        Dim decPrecioVenta As Decimal
        Dim decPrecioUnidad As Decimal = 0
        Dim decPrecioLista As Decimal = 0
        Dim strPrecioUnidad As String
        Dim n As NumberFormatInfo

        Dim strImpuesto As String
        Dim strRate As String
        Dim decRate As Decimal = 0
        Dim decPrecioImp As Decimal
        Dim decImpuestoTotal As Decimal
        Dim strPorcDescuento As String
        Dim decPorcDescuento As Decimal
        Dim decDescuento As Decimal

        Dim strMultiplesFact As String
        Dim strFacturacionMultiple As String
        Dim strGastosLocales As String
        Dim decGastosLocales As Decimal

        'nuevo
        Dim decPrecioUnidad_total As Decimal
        Dim strPrecioUnidad_total As String

        Dim strPrecioDS As String
        Dim decPrecioDS As Decimal
        Dim dtFechaContrato As DateTime
        Try

            m_objBLSBO.Set_Compania(m_oCompany)
            m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            strMultiplesFact = oDataTableConfiguracionesDMS.GetValue("U_Mul_Fac", 0)
            strFacturacionMultiple = oDataTableConfiguracionesDMS.GetValue("U_SCGD_ModPrecio", 0)
            If Nothing <> oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0) Then
                dtFechaContrato = Date.ParseExact(oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0), "yyyyMMdd", Nothing)
            ElseIf Nothing <> oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0) Then
                dtFechaContrato = Date.ParseExact(oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)
            Else
                dtFechaContrato = DateTime.Now
            End If
            If Not strMultiplesFact = "Y" Then

                strGastosLocales = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Loc", 0).Trim

                If Not String.IsNullOrEmpty(strGastosLocales) Then
                    decGastosLocales = Decimal.Parse(strGastosLocales, n)
                Else
                    decGastosLocales = 0
                End If

            End If

            oMatrix = DirectCast(oform.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

            oMatrix.FlushToDataSource()

            For i As Integer = 0 To oMatrix.RowCount - 1

                strPrecioUnidad = oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Pre_Vta", i).Trim

                decPrecioUnidad = Decimal.Parse(strPrecioUnidad, n)

                decPrecioLista = decPrecioLista + decPrecioUnidad

                If strMultiplesFact = "Y" Then

                    strGastosLocales = oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Gas_Loc", i).Trim

                    If Not String.IsNullOrEmpty(strGastosLocales) Then
                        decGastosLocales = Decimal.Parse(strGastosLocales, n)
                    Else
                        decGastosLocales = 0
                    End If

                End If

                strPorcDescuento = oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Desc_Veh", i).Trim
                If Not String.IsNullOrEmpty(strPorcDescuento) Then
                    decPorcDescuento = Decimal.Parse(strPorcDescuento, n)
                    decPorcDescuento = decPorcDescuento / 100
                Else
                    decPorcDescuento = 0
                End If
                decDescuento = decPrecioUnidad * decPorcDescuento

                decPrecioUnidad = decPrecioUnidad - decDescuento

                'nuevo
                If decGastosLocales >= 0 And decPrecioUnidad <> 0 Then
                    decPrecioUnidad_total = decPrecioUnidad - decGastosLocales
                End If

                oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pre_Tot", i, decPrecioUnidad_total.ToString(n))

                decPrecioVenta += decPrecioUnidad

                strImpuesto = oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Impuesto", i).Trim

                If Not String.IsNullOrEmpty(strImpuesto) Then
                    decRate = Utilitarios.RetornaImpuestoVenta(strImpuesto, dtFechaContrato) / 100
                Else
                    decRate = 0
                End If

                decPrecioImp = decPrecioUnidad * decRate
                decImpuestoTotal += decPrecioImp

            Next i

            oMatrix.LoadFromDataSource()

            If Not strFacturacionMultiple = "Y" And decPrecioVenta = 0 Then

                strPrecioDS = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0).Trim()
                If Not String.IsNullOrEmpty(strPrecioDS) Then
                    decPrecioDS = Decimal.Parse(strPrecioDS, n)
                Else
                    decPrecioDS = 0
                End If

                decPrecioVenta = decPrecioDS

            End If

            oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Vta", 0, decPrecioVenta.ToString(n))
            SumaImpAccesorios(decImpuestoTotal)
            oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Imp", 0, decImpuestoTotal.ToString(n))
            oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_PreLis", 0, decPrecioLista.ToString(n))

            Call FormateaPreciosBase(oform)

            If oform.Mode = BoFormMode.fm_OK_MODE Then

                oform.Mode = BoFormMode.fm_UPDATE_MODE

            End If

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    'Agregado 19/01/2011: Calcula el precio total en accesorios del contrato de venta según cantidad
    Private Sub CalculaPrecioAccesorios(ByRef oform As SAPbouiCOM.Form)

        Dim oMatrix As SAPbouiCOM.Matrix
        Dim strPrecioAccLinea As String
        Dim decPrecioAccLinea As Decimal
        Dim strPorcDescuentoLinea As String
        Dim decPorcDescuentoLinea As Decimal
        Dim intCantidadAccLinea As Integer
        Dim strCantAccLinea As String
        Dim decTotalPrecioLinea As Decimal
        Dim decDescuentoLinea As Decimal
        Dim decPrecioLineaDescuCV As Decimal
        Dim decPrecioLineaDescuLinea As Decimal
        Dim decPrecioLineaDescuentos As Decimal

        Dim strPorcDescuentoCV As String
        Dim decPorcDescuentoCV As Decimal
        Dim decDescuentoCV As Decimal

        Dim decTotalAcumuladoConDesc As Decimal
        Dim decTotalAcumuladoImpuesto As Decimal
        Dim decTotalAcumuladoConImp As Decimal
        Dim decTotalAcumuladoSinDesc As Decimal

        Dim strImpuestoLinea As String
        Dim strImpSAPLinea As String
        Dim decImpSAPLinea As Decimal
        Dim decMontoImpLinea As Decimal

        Dim n As NumberFormatInfo

        Dim strGenFactAccesorios As String
        Dim decPorDesc As Decimal = 0
        Dim strManejoDescuentoFact As String
        Dim decImpAccs As Decimal = 0
        Dim strDescuento As String

        Dim strMultiplesFact As String
        Dim oMatrixVeh As SAPbouiCOM.Matrix
        Dim decTotalGeneralAccs As Decimal
        Dim dtFechaContrato As DateTime
        Try

            m_objBLSBO.Set_Compania(m_oCompany)
            m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            oform.Freeze(True)

            oMatrix = DirectCast(oform.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

            oMatrix.FlushToDataSource()

            If Nothing <> oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0) Then
                dtFechaContrato = Date.ParseExact(oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0), "yyyyMMdd", Nothing)
            ElseIf Nothing <> oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0) Then
                dtFechaContrato = Date.ParseExact(oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)
            Else
                dtFechaContrato = DateTime.Now
            End If
            For i As Integer = 0 To oMatrix.RowCount - 1

                strCantAccLinea = oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Cant_Acc", i).Trim()
                If String.IsNullOrEmpty(strCantAccLinea) Then
                    intCantidadAccLinea = 0
                Else
                    intCantidadAccLinea = CInt(strCantAccLinea.Trim())
                End If

                strPrecioAccLinea = oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_SCGD_AccPrecio", i).Trim()
                If Not String.IsNullOrEmpty(strPrecioAccLinea) Then
                    decPrecioAccLinea = Decimal.Parse(strPrecioAccLinea, n)
                Else
                    decPrecioAccLinea = 0
                End If

                decTotalPrecioLinea = decPrecioAccLinea * intCantidadAccLinea

                strPorcDescuentoCV = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Por_Desc", 0).Trim()
                If Not String.IsNullOrEmpty(strPorcDescuentoCV) Then
                    decPorcDescuentoCV = Decimal.Parse(strPorcDescuentoCV, n)
                    decPorcDescuentoCV = decPorcDescuentoCV / 100
                Else
                    decPorcDescuentoCV = 0
                End If

                decDescuentoCV = decTotalPrecioLinea * decPorcDescuentoCV

                strPorcDescuentoLinea = oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Desc_Acc", i).Trim()
                If Not String.IsNullOrEmpty(strPorcDescuentoLinea) Then
                    decPorcDescuentoLinea = Decimal.Parse(strPorcDescuentoLinea, n)
                    decPorcDescuentoLinea = decPorcDescuentoLinea / 100
                Else
                    decPorcDescuentoLinea = 0
                End If
                decDescuentoLinea = decTotalPrecioLinea * decPorcDescuentoLinea

                decPrecioLineaDescuLinea = decTotalPrecioLinea - decDescuentoLinea


                If oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GenFaAcc", 0).Trim() = "N" Then
                    decPrecioLineaDescuCV = decTotalPrecioLinea - decDescuentoCV
                    decPrecioLineaDescuentos = decTotalPrecioLinea - decDescuentoCV - decDescuentoLinea
                Else

                    decPrecioLineaDescuentos = decTotalPrecioLinea - decDescuentoLinea
                End If



                oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_PrTo_Acc", i, decPrecioLineaDescuentos.ToString(n))

                strImpuestoLinea = oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Imp_Acc", i).Trim()
                If Not String.IsNullOrEmpty(strImpuestoLinea) Then
                    decImpSAPLinea = Utilitarios.RetornaImpuestoVenta(strImpuestoLinea, dtFechaContrato) / 100
                Else
                    decImpSAPLinea = 0
                End If

                decMontoImpLinea = (decPrecioLineaDescuentos) * decImpSAPLinea

                decTotalAcumuladoSinDesc += decPrecioLineaDescuentos + decDescuentoLinea
                decTotalAcumuladoConDesc += decPrecioLineaDescuentos
                decTotalAcumuladoImpuesto += decMontoImpLinea

            Next i

            decTotalAcumuladoConImp = decTotalAcumuladoConDesc + decTotalAcumuladoImpuesto

            oMatrix.LoadFromDataSource()

            strManejoDescuentoFact = oDataTableConfiguracionesDMS.GetValue("U_Desc_Fac", 0)
            strGenFactAccesorios = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GenFaAcc", 0).Trim()

            If strGenFactAccesorios = "Y" Then

                Call CalculaDescuentoGeneral("U_AcDescPo", decTotalAcumuladoConDesc, "U_Acc_Desc", strManejoDescuentoFact, decPorDesc)

            End If

            If strManejoDescuentoFact = "Y" Then

                If Not decPorDesc = 0 Then

                    Call CalcularImpuestoConDescuento(decPorDesc, False, True, decImpAccs)

                    oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Acc_Imp", 0, decImpAccs.ToString(n))

                    strDescuento = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Acc_Desc", 0).Trim()
                    If Not String.IsNullOrEmpty(strDescuento) Then
                        decDescuentoLinea = Decimal.Parse(strDescuento, n)
                    Else
                        decDescuentoLinea = 0
                    End If

                    decTotalAcumuladoConImp = decTotalAcumuladoConDesc - decDescuentoLinea + decImpAccs
                    decTotalAcumuladoConDesc = decTotalAcumuladoConDesc - decDescuentoLinea
                    oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Ext_Adi", 0, decTotalAcumuladoConImp.ToString(n))

                End If

            End If

            strMultiplesFact = oDataTableConfiguracionesDMS.GetValue("U_Mul_Fac", 0)

            oMatrixVeh = DirectCast(oform.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

            If Not strGenFactAccesorios = "Y" AndAlso strMultiplesFact = "Y" AndAlso oMatrixVeh.RowCount > 1 Then

                decTotalGeneralAccs = decTotalAcumuladoSinDesc * oMatrixVeh.RowCount

                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TotalAcc", 0, decTotalAcumuladoConImp.ToString(n))

                decTotalAcumuladoConDesc = decTotalAcumuladoConDesc * oMatrixVeh.RowCount
                decTotalAcumuladoImpuesto = decTotalAcumuladoImpuesto * oMatrixVeh.RowCount
                decTotalAcumuladoConImp = decTotalAcumuladoConImp * oMatrixVeh.RowCount

                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_AcSinDes", 0, decTotalAcumuladoConDesc.ToString(n))
                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Acc_Imp", 0, decTotalAcumuladoImpuesto.ToString(n))
                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Ext_Adi", 0, decTotalAcumuladoConImp.ToString(n))

            ElseIf strGenFactAccesorios = "Y" Then

                decTotalGeneralAccs = decTotalAcumuladoSinDesc * oMatrixVeh.RowCount

                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TotalAcc", 0, decTotalAcumuladoConImp.ToString(n))

                decTotalAcumuladoConDesc = decTotalAcumuladoConDesc * oMatrixVeh.RowCount
                decTotalAcumuladoImpuesto = decTotalAcumuladoImpuesto * oMatrixVeh.RowCount
                decTotalAcumuladoConImp = decTotalAcumuladoConImp * oMatrixVeh.RowCount

                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_AcSinDes", 0, decTotalAcumuladoConDesc.ToString(n))
                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Acc_Imp", 0, decTotalAcumuladoImpuesto.ToString(n))
                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Ext_Adi", 0, decTotalAcumuladoConImp.ToString(n))

            Else
                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_AcSinDes", 0, decTotalAcumuladoConDesc.ToString(n))
                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Acc_Imp", 0, decTotalAcumuladoImpuesto.ToString(n))
                oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Ext_Adi", 0, decTotalAcumuladoConImp.ToString(n))

            End If


            oform.Freeze(False)

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        Finally
            oform.Freeze(False)
        End Try

    End Sub

    Private Sub CalculaDescuentoGeneral(ByVal strUDFPorcentaje As String, ByVal decTotal As Decimal, ByVal strUDFDescuento As String, ByVal strManejoDescuentoFact As String, ByRef decPorDesc As Decimal)

        Dim strPorcDesc As String
        Dim decDescuento As Decimal
        Dim strDescuento As String
        Dim strCheckDes As String = String.Empty

        Try

            strCheckDes = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue(mc_strU_PorDes, 0).Trim()
            strPorcDesc = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue(strUDFPorcentaje, 0).Trim()

            If Not String.IsNullOrEmpty(strPorcDesc) Then
                decPorDesc = Decimal.Parse(strPorcDesc, n)
            ElseIf String.IsNullOrEmpty(strPorcDesc) Then
                decPorDesc = 0
            End If

            strDescuento = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue(strUDFDescuento, 0).Trim()

            If Not String.IsNullOrEmpty(strDescuento) Then
                decDescuento = Decimal.Parse(strDescuento, n)
            Else
                decDescuento = 0
            End If

            If strCheckDes = "Y" Then
                If decPorDesc = 0 Or decTotal = 0 Then
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue(strUDFDescuento, 0, "0")
                Else
                    decPorDesc = decPorDesc / 100
                    decDescuento = decTotal * decPorDesc
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue(strUDFDescuento, 0, decDescuento.ToString(n))
                    decPorDesc = decPorDesc * 100
                End If
            Else
                If decDescuento = 0 Or decTotal = 0 Then
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue(strUDFPorcentaje, 0, "0")
                Else
                    decDescuento = decDescuento * 100
                    decPorDesc = decDescuento / decTotal
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue(strUDFPorcentaje, 0, decPorDesc.ToString(n))

                End If
            End If

            'If strManejoDescuentoFact = "Y" Then

            'End If

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Private Sub ManejoControlesOtrosL(ByVal p_StrIdForm As String)

        Dim oform As SAPbouiCOM.Form
        Dim blnLineasFactura As Boolean

        oform = m_SBO_Application.Forms.Item(p_StrIdForm)
        oform.Freeze(True)
        oform.Items.Item("txtCodeVen").Click(SAPbouiCOM.BoCellClickType.ct_Regular)

        If oform.Items.Item("txtEnte_Fi").Visible = True Then

            oform.Items.Item("mtx_1").Specific.FlushToDataSource()
            oform.Items.Item("txtPre_Ven").Click(SAPbouiCOM.BoCellClickType.ct_Regular)
            Call CalcularLineasFacturas(p_StrIdForm)

            oform.Items.Item("mtx_1").Visible = False
            oform.Items.Item("btnOcultaL").Visible = False
            oform.Items.Item("picLineas").Visible = Not blnLineasFactura
            oform.Items.Item("picLineas").Visible = False
        Else

            oform.Items.Item("mtx_1").Specific.LoadFromDataSource()
            oform.Items.Item("txtPre_Ven").Click(SAPbouiCOM.BoCellClickType.ct_Regular)
            Call CargarLineasFacura(p_StrIdForm)

            oform.Items.Item("mtx_1").Visible = True
            oform.Items.Item("btnOcultaL").Visible = True
            oform.Items.Item("picLineas").Visible = True
        End If

        oform.Freeze(False)

    End Sub

    Private Sub ManejoControlesOtrosC(ByVal p_StrIdForm As String)

        Dim oform As SAPbouiCOM.Form

        oform = m_SBO_Application.Forms.Item(p_StrIdForm)
        oform.Freeze(True)

        oform.Items.Item("txtPre_Ven").Click(SAPbouiCOM.BoCellClickType.ct_Regular)



        If oform.Items.Item("txtEnte_Fi").Visible = True Then
            oform.Items.Item("mtx_2").Specific.FlushToDataSource()
            Call CalcularDesgloseCobro(p_StrIdForm)

            oform.Items.Item("picLineas").Visible = False
            oform.Items.Item("mtx_2").Visible = vbFalse
            oform.Items.Item("txtObserv").Visible = True

            oform.Items.Item("lblDesglos").Visible = False
            oform.Items.Item("btnOcultaC").Visible = False
            oform.Items.Item("lblLineasF").Visible = False

        Else
            oform.Items.Item("mtx_2").Specific.LoadFromDataSource()
            Call CargarLineasDesgloseCobro(p_StrIdForm)

            oform.Items.Item("picLineas").Visible = True
            oform.Items.Item("mtx_2").Visible = True
            oform.Items.Item("txtObserv").Visible = False
            oform.Items.Item("mtx_2").Visible = True

            oform.Items.Item("lblDesglos").Visible = True
            oform.Items.Item("btnOcultaC").Visible = True
            oform.Items.Item("lblLineasF").Visible = True
        End If

        oform.Freeze(False)
    End Sub

    Private Sub ManejoControlesOtrosCostos(ByVal p_StrIdForm As String)
        Dim oform As SAPbouiCOM.Form

        oform = m_SBO_Application.Forms.Item(p_StrIdForm)
        oform.Freeze(True)

        oform.Items.Item("txtPre_Ven").Click(SAPbouiCOM.BoCellClickType.ct_Regular)

        If oform.Items.Item("txtEnte_Fi").Visible = True Then
            oform.Items.Item("mtx_OtrCos").Specific.FlushToDataSource()
            oform.Items.Item("mtx_OtrCos").Visible = False
            oform.Items.Item("btnOcOtCo").Visible = False
            oform.Items.Item("picLineas").Visible = False
            oform.Items.Item("lblOtCos").Visible = False
        Else
            oform.Items.Item("mtx_OtrCos").Specific.LoadFromDataSource()
            oform.Items.Item("mtx_OtrCos").Visible = True
            oform.Items.Item("btnOcOtCo").Visible = True
            oform.Items.Item("picLineas").Visible = True
            oform.Items.Item("lblOtCos").Visible = True
        End If

        oform.Freeze(False)
    End Sub

    Private Sub CargarLineasDesgloseCobro(ByVal p_strIDform As String)

        Dim oMatriz As SAPbouiCOM.Matrix
        Dim drdResultadoConsulta As SqlClient.SqlDataReader
        Dim cmdEjecutarConsulta As New SqlClient.SqlCommand
        Dim strConectionString As String = ""
        Dim cn_Coneccion As New SqlClient.SqlConnection
        Dim strValorItem As String = ""
        Dim intCantidadFilas As Integer
        Dim oForma As SAPbouiCOM.Form
        Dim blnRealizarCarga As Boolean = False
        'variable para validacion de que existan lineas en la matriz
        Dim blnHabilitar As Boolean = False

        oForma = m_SBO_Application.Forms.Item(p_strIDform)
        oMatriz = DirectCast(oForma.Items.Item("mtx_2").Specific, SAPbouiCOM.Matrix)
        If oMatriz.RowCount <= 0 Then
            blnRealizarCarga = True
        ElseIf oMatriz.RowCount = 1 Then
            oMatriz.FlushToDataSource()
            strValorItem = oForma.DataSources.DBDataSources.Item("@" & TablaLineasResta).GetValue("U_Cod_Item", 0)
            If String.IsNullOrEmpty(strValorItem) Then
                blnRealizarCarga = True
            End If

        End If
        If blnRealizarCarga Then
            Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, strConectionString)
            cn_Coneccion.ConnectionString = strConectionString
            cn_Coneccion.Open()

            cmdEjecutarConsulta.Connection = cn_Coneccion

            cmdEjecutarConsulta.CommandType = CommandType.Text
            cmdEjecutarConsulta.CommandText = "SELECT Code, Name FROM [@SCGD_CONFLINEASRES]  with (nolock) where Canceled = 'N'"

            drdResultadoConsulta = cmdEjecutarConsulta.ExecuteReader()
            intCantidadFilas = 1
            Do While drdResultadoConsulta.Read
                'existen lineas
                blnHabilitar = True

                intCantidadFilas = oForma.DataSources.DBDataSources.Item("@" & TablaLineasResta).Size
                If intCantidadFilas = 1 Then
                    strValorItem = oForma.DataSources.DBDataSources.Item("@" & TablaLineasResta).GetValue("U_Cod_Item", 0)
                    If Not String.IsNullOrEmpty(strValorItem) Then

                        oForma.DataSources.DBDataSources.Item("@" & TablaLineasResta).InsertRecord(intCantidadFilas)
                        intCantidadFilas += 1
                    Else
                        intCantidadFilas = 1
                    End If
                Else
                    oForma.DataSources.DBDataSources.Item("@" & TablaLineasResta).InsertRecord(intCantidadFilas)
                    intCantidadFilas += 1
                End If

                oForma.DataSources.DBDataSources.Item("@" & TablaLineasResta).SetValue("U_Cod_Item", intCantidadFilas - 1, drdResultadoConsulta.GetString(0))
                oForma.DataSources.DBDataSources.Item("@" & TablaLineasResta).SetValue("U_Nom_Item", intCantidadFilas - 1, drdResultadoConsulta.GetString(1))
            Loop


            drdResultadoConsulta.Close()
            cmdEjecutarConsulta.Connection.Close()

            oMatriz.LoadFromDataSource()

            If blnHabilitar = False Then
                oMatriz.Columns.Item("col_3").Editable = False
                oMatriz.Columns.Item("col_5").Editable = False
            End If

        End If

    End Sub

    Private Sub CargarLineasFacura(ByVal p_strIDform As String)

        Dim oMatriz As SAPbouiCOM.Matrix
        Dim drdResultadoConsulta As SqlClient.SqlDataReader
        Dim cmdEjecutarConsulta As New SqlClient.SqlCommand
        Dim strConectionString As String
        Dim cn_Coneccion As New SqlClient.SqlConnection
        Dim strValorItem As String
        Dim intCantidadFilas As Integer
        Dim oForma As SAPbouiCOM.Form
        Dim blnRealizarCarga As Boolean = False
        'variable para validacion de que existan lineas en la matriz
        Dim blnHabilitar As Boolean = False

        Dim strMultiplesFact As String

        oForma = m_SBO_Application.Forms.Item(p_strIDform)

        strMultiplesFact = oDataTableConfiguracionesDMS.GetValue("U_Mul_Fac", 0)

        oMatriz = DirectCast(oForma.Items.Item("mtx_1").Specific, SAPbouiCOM.Matrix)

        If oMatriz.RowCount <= 0 Then
            blnRealizarCarga = True
        ElseIf oMatriz.RowCount = 1 Then

            strValorItem = oForma.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Cod_Item", 0)
            strValorItem = strValorItem.Trim()
            If String.IsNullOrEmpty(strValorItem) Then
                blnRealizarCarga = True
            End If

        End If
        If blnRealizarCarga Then
            Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, strConectionString)
            cn_Coneccion.ConnectionString = strConectionString
            cn_Coneccion.Open()

            cmdEjecutarConsulta.Connection = cn_Coneccion

            cmdEjecutarConsulta.CommandType = CommandType.Text

            If Not strMultiplesFact = "Y" Then
                cmdEjecutarConsulta.CommandText = "SELECT Code, Name, U_Impuesto FROM [@SCGD_CONFLINEASSUM]  with (nolock) where Canceled = 'N'"
            ElseIf strMultiplesFact = "Y" Then
                cmdEjecutarConsulta.CommandText = "SELECT Code, Name, U_Impuesto FROM [@SCGD_CONFLINEASSUM]  with (nolock) where Canceled = 'N' AND (U_Gas_Veh = 'N' OR U_Gas_Veh IS NULL)"
            End If

            drdResultadoConsulta = cmdEjecutarConsulta.ExecuteReader()
            intCantidadFilas = 1
            Do While drdResultadoConsulta.Read

                'existen lineas
                blnHabilitar = True

                intCantidadFilas = oForma.DataSources.DBDataSources.Item("@" & TablaLineasSuma).Size
                If intCantidadFilas = 1 Then
                    strValorItem = oForma.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Cod_Item", 0)
                    If Not String.IsNullOrEmpty(strValorItem) Then

                        oForma.DataSources.DBDataSources.Item("@" & TablaLineasSuma).InsertRecord(intCantidadFilas)
                        intCantidadFilas += 1
                    Else
                        intCantidadFilas = 1
                    End If
                Else
                    oForma.DataSources.DBDataSources.Item("@" & TablaLineasSuma).InsertRecord(intCantidadFilas)
                    intCantidadFilas += 1
                End If

                oForma.DataSources.DBDataSources.Item("@" & TablaLineasSuma).SetValue("U_Cod_Item", intCantidadFilas - 1, drdResultadoConsulta.GetString(0))
                oForma.DataSources.DBDataSources.Item("@" & TablaLineasSuma).SetValue("U_Nom_Item", intCantidadFilas - 1, drdResultadoConsulta.GetString(1))
                If Not IsDBNull(drdResultadoConsulta.GetValue(2)) Then
                    oForma.DataSources.DBDataSources.Item("@" & TablaLineasSuma).SetValue("U_CodImp", intCantidadFilas - 1, drdResultadoConsulta.GetValue(2))
                End If

            Loop

            drdResultadoConsulta.Close()
            cmdEjecutarConsulta.Connection.Close()
            oMatriz.Clear()
            oMatriz.LoadFromDataSource()

            If blnHabilitar = False Then
                oMatriz.Columns.Item("col_2").Editable = False
                oMatriz.Columns.Item("col_3").Editable = False
            End If

        End If
    End Sub

    Private Sub CalcularLineasFacturas(ByVal p_StrIdForm As String)

        Dim strMontoLineasFactura As String
        Dim decMontoLineasFactura As Decimal
        Dim decDescuento As Decimal
        Dim decTotalLineas As Decimal
        Dim oForma As SAPbouiCOM.Form
        Dim intCantidadLineas As Integer
        Dim intLineaFactura As Integer

        oForma = m_SBO_Application.Forms.Item(p_StrIdForm)

        intCantidadLineas = oForma.DataSources.DBDataSources.Item("@" & TablaLineasSuma).Size



        decMontoLineasFactura = 0
        decDescuento = 0
        For intLineaFactura = 0 To intCantidadLineas - 1

            strMontoLineasFactura = oForma.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Monto", intLineaFactura)
            strMontoLineasFactura = strMontoLineasFactura.Trim()
            decDescuento = Utilitarios.ConvierteDecimal(oForma.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Monto", intLineaFactura), n) * (Utilitarios.ConvierteDecimal(oForma.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Descuent", intLineaFactura), n) / 100)
            If Not String.IsNullOrEmpty(strMontoLineasFactura) Then
                decMontoLineasFactura = Decimal.Parse(strMontoLineasFactura, n)
            Else
                decMontoLineasFactura = 0
            End If

            decTotalLineas += (decMontoLineasFactura - decDescuento)

        Next

        oForma.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Otros_L", 0, decTotalLineas.ToString(n))

        Call CalcularPrecioModPrecioVenta(oForma)
        Call CalculaPrecioAccesorios(oForma)
        Call CalculaPrecioTramites(oForma)
        Call CalcularCostos(p_StrIdForm)

    End Sub

    Private Sub CalcularDesgloseCobro(ByVal p_StrIdForm As String)

        Dim decMontoLineasFactura As Decimal
        Dim oForma As SAPbouiCOM.Form
        Dim intCantidadLineas As Integer
        Dim intLineaFactura As Integer
        Dim objDocumentosSuma As New Generic.List(Of String)
        Dim strCodigoLinea As String

        Dim drdDocumentosSuma As SqlClient.SqlDataReader
        Dim cmdDocumentosSuma As New SqlClient.SqlCommand
        Dim strConectionString As String = String.Empty
        Dim cn_Coneccion As New SqlClient.SqlConnection
        Dim strConsulta As String

        strConsulta = "Select Code from [@SCGD_CONFLINEASRES]  with (nolock) where U_Tipo = 2"

        Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, strConectionString)
        cn_Coneccion.ConnectionString = strConectionString
        cn_Coneccion.Open()

        cmdDocumentosSuma.Connection = cn_Coneccion

        cmdDocumentosSuma.CommandType = CommandType.Text
        cmdDocumentosSuma.CommandText = strConsulta
        drdDocumentosSuma = cmdDocumentosSuma.ExecuteReader()
        Do While drdDocumentosSuma.Read
            objDocumentosSuma.Add(drdDocumentosSuma.Item("Code").ToString.Trim)
        Loop
        drdDocumentosSuma.Close()
        cmdDocumentosSuma.Connection.Close()

        oForma = m_SBO_Application.Forms.Item(p_StrIdForm)
        intCantidadLineas = oForma.DataSources.DBDataSources.Item("@" & TablaLineasResta).Size
        decMontoLineasFactura = 0
        For intLineaFactura = 0 To intCantidadLineas - 1
            strCodigoLinea = oForma.DataSources.DBDataSources.Item("@" & TablaLineasResta).GetValue("U_Cod_Item", intLineaFactura)
            strCodigoLinea = strCodigoLinea.Trim()
            If objDocumentosSuma.IndexOf(strCodigoLinea) > -1 Then
                decMontoLineasFactura -= Utilitarios.ConvierteDecimal(oForma.DataSources.DBDataSources.Item("@" & TablaLineasResta).GetValue("U_Monto", intLineaFactura), n)
            Else
                decMontoLineasFactura += Utilitarios.ConvierteDecimal(oForma.DataSources.DBDataSources.Item("@" & TablaLineasResta).GetValue("U_Monto", intLineaFactura), n)
            End If

        Next
        oForma.Items.Item("txtOtros_C").Specific.string = CStr(decMontoLineasFactura).Replace(System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, g_strSeparadorDecimalesSAP)
        Call CalcularPrecioModPrecioVenta(oForma)
        Call CalculaPrecioAccesorios(oForma)
        Call CalculaPrecioTramites(oForma)
        Call CalcularCostos(p_StrIdForm)

    End Sub

    Private Sub EnviarMensajesAprobacion(ByVal p_intEstado As Integer, _
                                         ByVal p_blnAprobado As Boolean, _
                                         ByVal p_strIDContrato As String, _
                                         ByVal p_strCliente As String, _
                                         ByVal p_strVendedor As String, _
                                         ByVal p_strNombreVendedor As String, _
                                         ByVal p_strLista As List(Of String), _
                                         Optional ByVal p_blnCancelar As Boolean = False)

        Dim strMensaje As String
        Dim strUsuarioVendedor As String
        Dim oMsg As SAPbobsCOM.Messages
        Dim intResultado As Integer
        Dim strError As String
        Dim strUsuarioMensaje As String
        Dim strEstado As String
        Dim hashUsuarios As Hashtable

        Try
            strEstado = Utilitarios.EjecutarConsulta(String.Format("SELECT U_Estado FROM [@SCGD_ADMIN9] WITH (nolock) WHERE U_Prio = '{0}'", p_intEstado), _
                                                     m_oCompany.CompanyDB, m_oCompany.Server)

            ''2'
            If p_strVendedor <> "" Then
                strUsuarioVendedor = Utilitarios.ObtieneUserId(m_SBO_Application, p_strVendedor)

                If p_blnCancelar = False Then

                    If p_blnAprobado Then
                        strMensaje = My.Resources.Resource.ElContratoVenta & p_strIDContrato & My.Resources.Resource.ContratoVendedor & p_strNombreVendedor & " " & My.Resources.Resource.Contratode & p_strCliente & My.Resources.Resource.AprobadoSeEncuentra & strEstado
                    Else
                        strMensaje = My.Resources.Resource.ElContratoVenta & p_strIDContrato & My.Resources.Resource.ContratoVendedor & p_strNombreVendedor & " " & My.Resources.Resource.Contratode & p_strCliente & " fue rechazado. Se encuentra " & strEstado
                    End If

                ElseIf p_blnCancelar = True Then

                    strMensaje = My.Resources.Resource.ElContratoVenta & p_strIDContrato & My.Resources.Resource.ContratoVendedor & p_strNombreVendedor & " " & My.Resources.Resource.Contratode & p_strCliente & My.Resources.Resource.ContratoEstado & strEstado

                End If


                'Usuarios para revisión de contratos en este estado
                If Not String.IsNullOrEmpty(strUsuarioVendedor) Then
                    oMsg = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oMessages)
                    oMsg.Priority = SAPbobsCOM.BoMsgPriorities.pr_High
                    oMsg.MessageText = strMensaje
                    oMsg.Subject = My.Resources.Resource.ContratoModificado
                    oMsg.Recipients.Add()

                    oMsg.Recipients.UserCode = strUsuarioVendedor
                    oMsg.Recipients.NameTo = strUsuarioVendedor
                    oMsg.Recipients.SendInternal = SAPbobsCOM.BoYesNoEnum.tYES
                    intResultado = oMsg.Add
                    If (intResultado <> 0) Then
                        m_oCompany.GetLastError(intResultado, strError)
                        Throw New ExceptionsSBO(intResultado, strError)
                    End If
                End If
            End If
            'verifica que se seleccionaron usuarios para emsnajeria
            If p_strLista.Count > 0 Then

                If p_blnCancelar = False Then

                    If p_blnAprobado Then
                        strMensaje = My.Resources.Resource.ElContratoVenta & p_strIDContrato & My.Resources.Resource.ContratoVendedor & p_strNombreVendedor & " " & My.Resources.Resource.Contratode & p_strCliente & My.Resources.Resource.RequiereRevision
                    Else
                        strMensaje = My.Resources.Resource.ElContratoVenta & p_strIDContrato & My.Resources.Resource.ContratoVendedor & p_strNombreVendedor & " " & My.Resources.Resource.Contratode & p_strCliente & My.Resources.Resource.RechazadoPor & m_oCompany.UserName
                    End If

                ElseIf p_blnCancelar = True Then

                    strMensaje = My.Resources.Resource.ElContratoVenta & p_strIDContrato & My.Resources.Resource.ContratoVendedor & p_strNombreVendedor & " " & My.Resources.Resource.Contratode & p_strCliente & My.Resources.Resource.ContratoEstado & strEstado

                End If

                hashUsuarios = New Hashtable()

                oMsg = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oMessages)
                oMsg.Priority = SAPbobsCOM.BoMsgPriorities.pr_High
                oMsg.MessageText = strMensaje
                oMsg.Subject = My.Resources.Resource.MensajeContratoAprobado

                'a_strOtrosUsuarios = strOtrosUsuarios.Split(",")

                For Each strUsuarioMensaje In p_strLista

                    If Not hashUsuarios.ContainsKey(strUsuarioMensaje) Then

                        hashUsuarios.Add(strUsuarioMensaje, strUsuarioMensaje)

                        oMsg.Recipients.Add()
                        oMsg.Recipients.UserCode = strUsuarioMensaje
                        oMsg.Recipients.NameTo = strUsuarioMensaje
                        oMsg.Recipients.SendInternal = SAPbobsCOM.BoYesNoEnum.tYES

                    End If

                Next


                intResultado = oMsg.Add
                If (intResultado <> 0) Then
                    m_oCompany.GetLastError(intResultado, strError)
                    Throw New ExceptionsSBO(intResultado, strError)
                End If
            End If

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    <System.CLSCompliant(False)> _
    Public Sub ManejadorEventoChooseFromList(ByRef pval As SAPbouiCOM.ItemEvent, _
                                             ByVal FormUID As String, _
                                             ByRef BubbleEvent As Boolean)


        Dim oCFLEvento As SAPbouiCOM.IChooseFromListEvent
        oCFLEvento = CType(pval, SAPbouiCOM.IChooseFromListEvent)
        Dim sCFL_ID As String
        sCFL_ID = oCFLEvento.ChooseFromListUID
        Dim oForm As SAPbouiCOM.Form
        oForm = m_SBO_Application.Forms.Item(FormUID)
        Dim oCFL As SAPbouiCOM.ChooseFromList
        oCFL = oForm.ChooseFromLists.Item(sCFL_ID)

        Dim oDataTable As SAPbouiCOM.DataTable

        Dim oCondition As SAPbouiCOM.Condition
        Dim oConditions As SAPbouiCOM.Conditions

        Dim strEtapaFinal As String
        Dim strInventarioTaller As String
        Dim strEstadoNoDisponible As String

        Dim dispRes As String = String.Empty
        Dim valReVen As String = String.Empty
        Dim strEstadoReservado As String
        Dim strEstadoDisponible As String
        Dim strTipoVendido As String

        Dim oMatrix As SAPbouiCOM.Matrix
        Dim strUnidad As String
        Dim blnCargaCliente As Boolean = True
        Dim strCliente As String
        Dim dtImpuesto As SAPbouiCOM.DataTable
        Dim oMatrixAcc As SAPbouiCOM.Matrix
        Dim strAccesorio As String
        Dim oMatrixVehiculos As SAPbouiCOM.Matrix
        Dim oMatrixAccesorios As SAPbouiCOM.Matrix
        Dim oMatrixTramites As SAPbouiCOM.Matrix

        Dim strContrato As String

        If oForm.Items.Item("btnActVeh").Enabled = True Then
            g_blnCambiaBoton = True
        End If

        If oCFLEvento.ActionSuccess Then

            oDataTable = oCFLEvento.SelectedObjects

            Select Case pval.ItemUID
                Case mc_strBuscar
                    Dim val As New ContratoVentasCls.CVentaUDT

                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        Call AsignaValoresVehiculo(val, oDataTable)
                        Call AsignaValoresEditTextUICliente(val, oForm, True)

                    End If
                Case mc_strClienteConsignado
                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        'Asigna el valor "CardCode" del cliente consignado a facturar al EditText, pestaña Consignado.
                        If Not oDataTable Is Nothing Then
                            If Not oDataTable.GetValue("CardCode", 0) Is System.Convert.DBNull Then
                                oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").SetValue("U_CodClCon", 0, oDataTable.GetValue("CardCode", 0))
                            End If
                            If Not oDataTable.GetValue("CardName", 0) Is System.Convert.DBNull Then
                                oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").SetValue("U_NomClCns", 0, oDataTable.GetValue("CardName", 0))
                            End If
                            If Not oDataTable.GetValue("LicTradNum", 0) Is System.Convert.DBNull Then
                                oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").SetValue("U_RUTCmsCns", 0, oDataTable.GetValue("LicTradNum", 0))
                            End If
                        End If
                    End If
                Case mc_strIndicadorIVAConsignado
                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        'Asigna el valor del indicador de impuestos para la factura por comisión consignado
                        If Not oDataTable.GetValue("Code", 0) Is System.Convert.DBNull Then
                            oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").SetValue("U_ImpCmsCns", 0, oDataTable.GetValue("Code", 0))
                        End If
                    End If
                Case mc_strCliente
                    Dim val As New ContratoVentasCls.CVentaUDT

                    If Not oCFLEvento.SelectedObjects Is Nothing Then

                        oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                        oMatrixAcc = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

                        If oMatrix.RowCount > 0 Or oMatrixAcc.RowCount > 0 Then

                            strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0)

                            strAccesorio = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Acc", 0)

                            If Not String.IsNullOrEmpty(strUnidad) Or Not String.IsNullOrEmpty(strAccesorio) Then

                                If m_SBO_Application.MessageBox(Text:=My.Resources.Resource.PreguntaCliente, DefaultBtn:=2, Btn1Caption:=My.Resources.Resource.Si, Btn2Caption:="No") = 2 Then
                                    blnCargaCliente = False
                                End If

                            End If

                        End If

                        If blnCargaCliente = True Then

                            Call AsignaValoresVehiculo(val, oDataTable)
                            Call AsignaValoresEditTextUICliente(val, oForm, True)
                            strCliente = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0)
                            strCliente = strCliente.Trim()
                            strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0)
                            strUnidad = strUnidad.Trim()
                            dtImpuesto = CargarImpuesto(strCliente, "'" & strUnidad & "'")

                            If oMatrix.RowCount > 0 Or oMatrixAcc.RowCount > 0 Then

                                strAccesorio = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Acc", 0)

                                If Not String.IsNullOrEmpty(strUnidad) Then

                                    For i As Integer = 0 To oMatrix.RowCount - 1

                                        oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Impuesto", i, dtImpuesto.GetValue("U_Cod_Imp", 0))

                                    Next i

                                    oMatrix.LoadFromDataSource()

                                End If

                                If Not String.IsNullOrEmpty(strAccesorio) Then

                                    For i As Integer = 0 To oMatrixAcc.RowCount - 1

                                        oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Imp_Acc", i, dtImpuesto.GetValue("U_Cod_Imp", 0))

                                    Next i

                                    oMatrixAcc.LoadFromDataSource()

                                End If

                            End If

                        End If

                    End If

                Case "txtCl_Vehi"
                    Dim val As New ContratoVentasCls.CVentaUDT

                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        Call AsignaValoresVehiculo(val, oDataTable)
                        Call AsignaValoresEditTextUICliente(val, oForm, False)
                    End If

                Case mc_strtxtVendedor
                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        Dim IDempleado As Integer = 0
                        Dim strEmpActivo As String = String.Empty

                        IDempleado = oDataTable.GetValue("SlpCode", 0)

                        strEmpActivo = Utilitarios.EjecutarConsulta(String.Format("SELECT Active FROM OHEM with (nolock) WHERE salesPrson = {0}", IDempleado), m_oCompany.CompanyDB, m_oCompany.Server).Trim()

                        If Not String.IsNullOrEmpty(strEmpActivo) AndAlso strEmpActivo = "Y" Then
                            Call AsignaValoresEditTextUIVendedor(oDataTable.GetValue("SlpCode", 0), oDataTable.GetValue("SlpName", 0), oForm)
                            Call AsignaValoresEditTextUIPropietario(oDataTable.GetValue("SlpCode", 0), oDataTable.GetValue("SlpName", 0), oForm)
                        Else
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorVendedorInactivo, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        End If
                    End If

                Case "btnAddUnid"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then

                        Dim strConectionString As String = ""
                        Dim cnConeccionBD As SqlClient.SqlConnection
                        Dim dstInventario As New TipoVehUsuario
                        Dim dtaInventario As New TipoVehUsuarioTableAdapters._SCGD_CONFEMPXVEHTableAdapter
                        Dim drwInventario As TipoVehUsuario.__SCGD_CONFEMPXVEHRow
                        Dim strInventario As String
                        Dim strUsuarioSBO As String
                        Dim strTipoUnidad As String
                        Dim blnInventarioPerm As Boolean = False
                        Dim strValidaPagos As String
                        Dim strItemInventario As String
                        Dim strValidaItem As String = ""

                        Configuracion.CrearCadenaDeconexion(m_oCompany.Server, _
                                                 m_oCompany.CompanyDB, _
                                                 strConectionString)

                        cnConeccionBD = New SqlClient.SqlConnection
                        cnConeccionBD.ConnectionString = strConectionString
                        cnConeccionBD.Open()
                        dtaInventario.Connection = New SqlClient.SqlConnection(strConectionString)
                        dtaInventario.Connection = cnConeccionBD

                        strUsuarioSBO = m_SBO_Application.Company.UserName

                        dtaInventario.Fill(dstInventario.__SCGD_CONFEMPXVEH, strUsuarioSBO)

                        If Not dstInventario.__SCGD_CONFEMPXVEH.Rows.Count = 0 Then
                            drwInventario = dstInventario.__SCGD_CONFEMPXVEH.Rows(0)
                        Else
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorPermisosUsuario, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                            Exit Sub
                        End If

                        strUnidad = oDataTable.Columns.Item("U_Cod_Unid").Cells.Item(0).Value

                        strTipoUnidad = Utilitarios.EjecutarConsulta("Select U_Tipo from [@SCGD_VEHICULO]  with (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                        For Each drwInventario In dstInventario.__SCGD_CONFEMPXVEH

                            strInventario = drwInventario.U_Tipo_Inv

                            If strTipoUnidad = strInventario Then

                                blnInventarioPerm = True
                                Exit For

                            End If

                        Next

                        If blnInventarioPerm = False Then

                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorPermisoInvUnidad, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                            Exit Sub

                        End If

                        cnConeccionBD.Close()

                        oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                        For i As Integer = 0 To oMatrix.RowCount - 1

                            strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i)
                            strUnidad = strUnidad.Trim()

                            If Not String.IsNullOrEmpty(strUnidad) Then

                                If strUnidad = oDataTable.Columns.Item("U_Cod_Unid").Cells.Item(0).Value Then

                                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorUnidadExiste, SAPbouiCOM.BoMessageTime.bmt_Short, BoStatusBarMessageType.smt_Error)
                                    Exit Sub

                                End If

                            End If

                        Next i

                        strUnidad = oDataTable.Columns.Item("U_Cod_Unid").Cells.Item(0).Value

                        strItemInventario = Utilitarios.EjecutarConsulta("SELECT [@SCGD_CONF_ART_VENTA].U_ArtVent FROM [@SCGD_VEHICULO]  with (nolock) INNER JOIN [@SCGD_CONF_ART_VENTA]  with (nolock) ON [@SCGD_VEHICULO].U_ArtVent = [@SCGD_CONF_ART_VENTA].Code WHERE [@SCGD_VEHICULO].U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                        If String.IsNullOrEmpty(strItemInventario) Then

                            strItemInventario = Utilitarios.EjecutarConsulta("Select U_ItemCode from [@SCGD_ADMIN1]  with (nolock) where U_Tipo = '" & strTipoUnidad & "' and U_Cod_Item = '1'", m_oCompany.CompanyDB, m_oCompany.Server)

                        End If

                        If Not String.IsNullOrEmpty(strItemInventario) Then

                            strValidaItem = Utilitarios.EjecutarConsulta("Select ItemCode from [OITM]  with (nolock) where ItemCode = '" & strItemInventario & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                        End If

                        If String.IsNullOrEmpty(strValidaItem) Then
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorArticuloVenta & strItemInventario & My.Resources.Resource.ArtConfig & strUnidad & My.Resources.Resource.NoExiste, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                            Exit Sub
                        End If

                        oForm.Freeze(True)
                        Call AsignaValoresEditTextUIVehiculoNuevo(oDataTable, oForm)
                        oForm.Freeze(False)

                    End If

                Case "txtAcreedo"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        Call AsignaValoresEnteFinancieroDeuda(oDataTable, oForm)
                    End If

                Case mc_strtxtTitular
                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        Call AsignaValoresEditTextUIPropietario(oDataTable.GetValue("SlpCode", 0), oDataTable.GetValue("SlpName", 0), oForm)

                    End If

                Case "txtEntFinE", "txtETFin"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CEnt_Fi", 0, oDataTable.GetValue("BankCode", 0))
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_EntFinE", 0, oDataTable.GetValue("BankName", 0))
                    End If

                Case "txtEnte_Fi", "txtEnt_Fin"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        Call AsignaValoresEnteFinanciero(oDataTable, oForm)
                    End If

                Case "txtCod_OV"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        Call AsignaValoresOportunidadVenta(oDataTable, oForm)
                    End If

                Case "btpCot", "txtCod_Cot"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        Call AsignaValoresCotizacion(oDataTable, oForm)
                    End If

                Case "add"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then

                        Call AsignarComponente(oDataTable, FormUID, TipoItem.Accesorio)

                    End If

                Case "txtImpVeh"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then

                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Imp_Vh", 0, oDataTable.GetValue("Code", 0))

                        'Call CalculaPrecioVenta(oForm)

                        If g_blnCambiaBoton = True Then
                            oForm.Items.Item("btnActVeh").Enabled = True
                        End If

                    End If

                Case "mtx_0"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then

                        oMatrix = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

                        If pval.ColUID = "col_ImpAcc" Then

                            oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Imp_Acc", pval.Row - 1, oDataTable.GetValue("Code", 0))

                            oMatrix.LoadFromDataSource()

                            Call CalculaPrecioAccesorios(oForm)

                            Call CalcularCostos(pval.FormUID)

                            Call FormateaPreciosBase(oForm)

                        ElseIf pval.ColUID = "col_Prov" Then

                            oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Prov_Acc", pval.Row - 1, oDataTable.GetValue("CardCode", 0))

                            oMatrix.LoadFromDataSource()

                        ElseIf pval.ColUID = "col_IC" Then

                            oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Imp_Com", pval.Row - 1, oDataTable.GetValue("Code", 0))

                            oMatrix.LoadFromDataSource()

                        End If

                    End If

                Case "btnBuscaUs"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then

                        Call LimpiarUsadoTemporal(oForm)

                        Call CargarUnidadVendida(oForm, oDataTable)

                        oForm.Items.Item("txtUnid_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                        oForm.Items.Item("txtVIN_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                        If oDataTableConfiguracionesDMS.GetValue("U_SCGD_Pla", 0).ToString.Trim = "Y" Then
                            oForm.Items.Item("txtPlac_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                        End If

                    End If
                    oForm.Items.Item("btnEditUs").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnAgregaU").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)

                Case "btnFacts"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then

                        oForm.Items.Item("txtNofac").Specific.string = oDataTable.GetValue("DocEntry", 0)

                    End If

                Case "btnAgrTra"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then

                        Call AsignarComponente(oDataTable, FormUID, TipoItem.Tramite)

                    End If

                Case "mtx_Tram"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then

                        oMatrix = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

                        If pval.ColUID = "col_ProvTr" Then

                            oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_ProvTram", pval.Row - 1, oDataTable.GetValue("CardCode", 0))

                            oMatrix.LoadFromDataSource()

                        ElseIf pval.ColUID = "col_ImpCom" Then

                            oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Imp_Com", pval.Row - 1, oDataTable.GetValue("Code", 0))

                            oMatrix.LoadFromDataSource()

                        ElseIf pval.ColUID = "col_ImpVta" Then
                            oMatrix.FlushToDataSource()
                            oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Imp_Vent", pval.Row - 1, oDataTable.GetValue("Code", 0))

                            oMatrix.LoadFromDataSource()

                        End If

                    End If

                Case "txtCodProv"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        Call AsignaValoresProveedores(oDataTable, oForm)
                    End If
                Case "txtCliCont"
                    If Not oCFLEvento.SelectedObjects Is Nothing Then
                        AsignaValoresClienteContratante(oDataTable, oForm)
                    End If
            End Select

        Else

            oMatrixVehiculos = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)
            oMatrixAccesorios = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)
            oMatrixTramites = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

            oMatrixVehiculos.FlushToDataSource()
            oMatrixAccesorios.FlushToDataSource()
            oMatrixTramites.FlushToDataSource()

            Dim strUnidadVeh As String

            strUnidadVeh = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim()

            Select Case pval.ItemUID
                Case "txtAcreedo"
                    oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                    oCondition = oConditions.Add

                    oCondition.BracketOpenNum = 1
                    oCondition.Alias = "CardType"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                    oCondition.CondVal = "S"
                    oCondition.BracketCloseNum = 1
                    oCFL.SetConditions(oConditions)

                Case "txtCl_Vehi", mc_strCliente
                    oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = 1
                    oCondition.Alias = "CardType"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                    oCondition.CondVal = "C"
                    oCondition.BracketCloseNum = 1

                    oCondition.Relationship = BoConditionRelationship.cr_AND

                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = 1
                    oCondition.Alias = "frozenFor"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_NOT_EQUAL
                    oCondition.CondVal = "Y"
                    oCondition.BracketCloseNum = 1

                    oCFL.SetConditions(oConditions)

                Case "txtCod_OV"
                    strEtapaFinal = objConfiguracionGeneral.EtapaFinalCRM

                    oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = 1
                    oCondition.Alias = "StepLast"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_NOT_EQUAL
                    oCondition.CondVal = strEtapaFinal
                    oCondition.BracketCloseNum = 1

                    oCFL.SetConditions(oConditions)

                Case "btnAddUnid"
                    Dim intBracket As Integer = 0
                    Dim strDisponibilidad As String = String.Empty

                    strEstadoNoDisponible = objConfiguracionGeneral.DisponibilidadVehiculoVendido
                    strInventarioTaller = objConfiguracionGeneral.InventarioVehiculoVendido
                    strEstadoReservado = oDataTableConfiguracionesDMS.GetValue("U_Disp_Res", 0)

                    dtDisponibilidad = oForm.DataSources.DataTables.Item("dtDisponibilidad")
                    dtDisponibilidad.ExecuteQuery(" select code from [@SCGD_DISPONIBILIDAD]  with (nolock) where U_AgContV = 'Y' ")

                    oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                    intBracket += 1
                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = intBracket
                    oCondition.Alias = "U_Tipo"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_NOT_EQUAL
                    oCondition.CondVal = strInventarioTaller
                    oCondition.BracketCloseNum = intBracket
                    oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                    intBracket += 1
                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = intBracket
                    oCondition.Alias = "U_Tipo"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_NOT_NULL
                    oCondition.BracketCloseNum = intBracket
                    oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                    intBracket += 1
                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = intBracket
                    oCondition.Alias = "U_Dispo"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_NOT_NULL
                    oCondition.BracketCloseNum = intBracket

                    For i As Integer = 0 To dtDisponibilidad.Rows.Count - 1

                        strDisponibilidad = dtDisponibilidad.GetValue("code", i).ToString().Trim()

                        oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND
                        intBracket += 1
                        oCondition = oConditions.Add
                        oCondition.BracketOpenNum = intBracket
                        oCondition.Alias = "U_Dispo"
                        oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                        oCondition.CondVal = strDisponibilidad
                        oCondition.BracketCloseNum = intBracket
                    Next

                    'oDataTableConfiguracionesDMS = oForm.DataSources.DataTables.Item("ConfigsDMS")
                    If oDataTableConfiguracionesDMS.Rows.Count >= 0 Then
                        dispRes = oDataTableConfiguracionesDMS.GetValue("U_Disp_Res", 0)
                        valReVen = oDataTableConfiguracionesDMS.GetValue("U_ValReVen", 0)

                        If valReVen = "Y" Then
                            'intBracket += 1
                            oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_OR
                            oCondition = oConditions.Add
                            oCondition.BracketOpenNum = 2
                            oCondition.Alias = "U_Dispo"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.CondVal = dispRes
                            oCondition.BracketCloseNum = 1

                            oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND
                            oCondition = oConditions.Add
                            oCondition.BracketOpenNum = 1
                            oCondition.Alias = "U_VENRES"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.CondVal = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SlpName", 0).Trim()
                            oCondition.BracketCloseNum = 2
                        End If
                    End If
                    oCFL.SetConditions(oConditions)

                Case "add"
                    If oMatrixVehiculos.RowCount = 0 OrElse (oMatrixVehiculos.RowCount = 1 AndAlso String.IsNullOrEmpty(strUnidadVeh)) Then
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorAccsVeh, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        BubbleEvent = False
                        Exit Sub
                    End If

                    oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = 1
                    oCondition.Alias = "U_SCGD_TipoArticulo"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                    oCondition.CondVal = "7"
                    oCondition.BracketCloseNum = 1
                    oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = 2
                    oCondition.Alias = "SellItem"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                    oCondition.CondVal = "Y"
                    oCondition.BracketCloseNum = 2
                    oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                    'validacion para que sean articulos de compra
                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = 3
                    oCondition.Alias = "PrchseItem"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                    oCondition.CondVal = "Y"
                    oCondition.BracketCloseNum = 3

                    oCFL.SetConditions(oConditions)

                Case "btnBuscaUs"
                    strEstadoReservado = oDataTableConfiguracionesDMS.GetValue("U_Disp_Res", 0)
                    'strEstadoReservado = Utilitarios.EjecutarConsulta("Select U_Disp_Res from [@SCGD_ADMIN] where Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)
                    strEstadoDisponible = oDataTableConfiguracionesDMS.GetValue("U_Disp_R", 0)
                    'strEstadoDisponible = Utilitarios.EjecutarConsulta("Select U_Disp_R from [@SCGD_ADMIN] where Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)
                    strTipoVendido = oDataTableConfiguracionesDMS.GetValue("U_Inven_V", 0)

                    oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = 1
                    oCondition.Alias = "U_Dispo"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_NOT_EQUAL
                    oCondition.CondVal = strEstadoDisponible
                    oCondition.BracketCloseNum = 1
                    oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = 2
                    oCondition.Alias = "U_Dispo"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_NOT_EQUAL
                    oCondition.CondVal = strEstadoReservado
                    oCondition.BracketCloseNum = 2
                    oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = 3
                    oCondition.Alias = "U_Tipo"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                    oCondition.CondVal = strTipoVendido
                    oCondition.BracketCloseNum = 3

                    oCFL.SetConditions(oConditions)

                Case "btnFacts"
                    strContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0)
                    strContrato = strContrato.Trim()

                    oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = 1
                    oCondition.Alias = "U_SCGD_NoContrato"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                    oCondition.CondVal = strContrato
                    oCondition.BracketCloseNum = 1

                    oCFL.SetConditions(oConditions)

                Case "mtx_0"

                    If pval.ColUID = "col_Prov" Then

                        oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                        oCondition = oConditions.Add
                        oCondition.BracketOpenNum = 1
                        oCondition.Alias = "CardType"
                        oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                        oCondition.CondVal = "S"
                        oCondition.BracketCloseNum = 1
                        oCFL.SetConditions(oConditions)

                    ElseIf pval.ColUID = "col_ImpAcc" Then

                        oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                        oCondition = oConditions.Add
                        If (DMS_Connector.Configuracion.ParamGenAddon.U_UsaVATGroup = "Y") Then
                            oCondition.BracketOpenNum = 1
                            oCondition.Alias = "Category"
                            oCondition.CondVal = "O"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.BracketCloseNum = 1

                            oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                            oCondition = oConditions.Add
                            oCondition.BracketOpenNum = 2
                            oCondition.Alias = "Locked"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.CondVal = "N"
                            oCondition.BracketCloseNum = 2
                        Else
                            oCondition.BracketOpenNum = 1
                            oCondition.Alias = "ValidForAR"
                            oCondition.CondVal = "Y"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.BracketCloseNum = 1

                            oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                            oCondition = oConditions.Add
                            oCondition.BracketOpenNum = 2
                            oCondition.Alias = "Lock"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.CondVal = "N"
                            oCondition.BracketCloseNum = 2
                        End If
                        oCFL.SetConditions(oConditions)

                    ElseIf pval.ColUID = "col_IC" Then

                        oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                        oCondition = oConditions.Add
                        If (DMS_Connector.Configuracion.ParamGenAddon.U_UsaVATGroup = "Y") Then
                            oCondition.BracketOpenNum = 1
                            oCondition.Alias = "Category"
                            oCondition.CondVal = "I"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.BracketCloseNum = 1

                            oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                            oCondition = oConditions.Add
                            oCondition.BracketOpenNum = 2
                            oCondition.Alias = "Locked"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.CondVal = "N"
                            oCondition.BracketCloseNum = 2
                        Else
                            oCondition.BracketOpenNum = 1
                            oCondition.Alias = "ValidForAP"
                            oCondition.CondVal = "Y"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.BracketCloseNum = 1

                            oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                            oCondition = oConditions.Add
                            oCondition.BracketOpenNum = 2
                            oCondition.Alias = "Lock"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.CondVal = "N"
                            oCondition.BracketCloseNum = 2
                        End If
                        oCFL.SetConditions(oConditions)

                    End If

                Case "btnAgrTra"
                    If oMatrixVehiculos.RowCount = 0 OrElse (oMatrixVehiculos.RowCount = 1 AndAlso String.IsNullOrEmpty(strUnidadVeh)) Then

                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorAccsVeh, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
                        BubbleEvent = False
                        Exit Sub

                    End If

                    oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                    oCondition = oConditions.Add

                    oCondition.BracketOpenNum = 1
                    oCondition.Alias = "U_SCGD_TipoArticulo"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                    oCondition.CondVal = "9"
                    oCondition.BracketCloseNum = 1
                    oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = 2
                    oCondition.Alias = "SellItem"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                    oCondition.CondVal = "Y"
                    oCondition.BracketCloseNum = 2
                    oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                    'validacion para que sean articulos de compra
                    oCondition = oConditions.Add
                    oCondition.BracketOpenNum = 3
                    oCondition.Alias = "PrchseItem"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                    oCondition.CondVal = "Y"
                    oCondition.BracketCloseNum = 3

                    oCFL.SetConditions(oConditions)

                Case "mtx_Tram"
                    If pval.ColUID = "col_ProvTr" Then

                        oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                        oCondition = oConditions.Add

                        oCondition.BracketOpenNum = 1
                        oCondition.Alias = "CardType"
                        oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                        oCondition.CondVal = "S"
                        oCondition.BracketCloseNum = 1
                        oCFL.SetConditions(oConditions)

                    ElseIf pval.ColUID = "col_ImpCom" Then

                        oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                        oCondition = oConditions.Add()
                        If (DMS_Connector.Configuracion.ParamGenAddon.U_UsaVATGroup = "Y") Then
                            oCondition.BracketOpenNum = 1
                            oCondition.Alias = "Category"
                            oCondition.CondVal = "I"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.BracketCloseNum = 1

                            oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                            oCondition = oConditions.Add
                            oCondition.BracketOpenNum = 2
                            oCondition.Alias = "Locked"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.CondVal = "N"
                            oCondition.BracketCloseNum = 2
                        Else
                            oCondition.BracketOpenNum = 1
                            oCondition.Alias = "ValidForAP"
                            oCondition.CondVal = "Y"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.BracketCloseNum = 1

                            oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                            oCondition = oConditions.Add
                            oCondition.BracketOpenNum = 2
                            oCondition.Alias = "Lock"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.CondVal = "N"
                            oCondition.BracketCloseNum = 2
                        End If
                        oCFL.SetConditions(oConditions)

                    ElseIf pval.ColUID = "col_ImpVta" Then

                        oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                        oCondition = oConditions.Add()
                        If (DMS_Connector.Configuracion.ParamGenAddon.U_UsaVATGroup = "Y") Then
                            oCondition.BracketOpenNum = 1
                            oCondition.Alias = "Category"
                            oCondition.CondVal = "O"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.BracketCloseNum = 1

                            oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                            oCondition = oConditions.Add
                            oCondition.BracketOpenNum = 2
                            oCondition.Alias = "Locked"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.CondVal = "N"
                            oCondition.BracketCloseNum = 2
                        Else
                            oCondition.BracketOpenNum = 1
                            oCondition.Alias = "ValidForAR"
                            oCondition.CondVal = "Y"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.BracketCloseNum = 1

                            oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                            oCondition = oConditions.Add
                            oCondition.BracketOpenNum = 1
                            oCondition.Alias = "Lock"
                            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                            oCondition.CondVal = "N"
                            oCondition.BracketCloseNum = 1
                        End If
                        oCFL.SetConditions(oConditions)

                    End If

                Case "txtCodProv"
                    oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                    oCondition = oConditions.Add

                    oCondition.BracketOpenNum = 1
                    oCondition.Alias = "CardType"
                    oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                    oCondition.CondVal = "S"
                    oCondition.BracketCloseNum = 1

                    If blnUsaFacturaProveedoresVehiculoUsado Then
                        oCondition.Relationship = SAPbouiCOM.BoConditionRelationship.cr_AND

                        oCondition = oConditions.Add
                        oCondition.BracketOpenNum = 2
                        oCondition.Alias = "U_TipSoc"
                        oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_NOT_EQUAL
                        oCondition.CondVal = "O"
                        oCondition.BracketCloseNum = 2
                    End If

                    oCFL.SetConditions(oConditions)

                Case "txtVend"
                    Dim versionSap As Integer = m_oCompany.Version
                    If versionSap >= 900000 Then
                        oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

                        oCondition = oConditions.Add

                        oCondition.BracketOpenNum = 1
                        oCondition.Alias = "Active"
                        oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
                        oCondition.CondVal = "Y"
                        oCondition.BracketCloseNum = 1
                        oCFL.SetConditions(oConditions)
                    End If
            End Select

        End If

    End Sub

    Private Overloads Sub AsignarComponente(ByRef oDataTable As SAPbouiCOM.DataTable, ByVal p_strFormID As String, ByVal intTipoItem As Integer)

        Dim oform As SAPbouiCOM.Form
        Dim oMatriz As SAPbouiCOM.Matrix = Nothing
        Dim intNuevoRegisto As Integer
        Dim strItemCode As String

        Dim strItem As String
        Dim strCliente As String
        Dim strListaPrecio As String
        Dim decPrecio As Decimal
        'moneda de lista d precios
        Dim strMoneda_LP As String
        'moneda de contrato de ventas
        Dim strMoneda_CV As String
        'tipo cambio del cv
        Dim decTipoCambio_CV As Decimal
        'tipo cambio del sistema y local
        Dim strTipoCambioSistema As String
        Dim decTipoCambioSistema As Decimal
        'fecha del cv
        Dim strFechaCV As String

        Dim dtImpuesto As SAPbouiCOM.DataTable

        Dim strCosto As String
        Dim decCosto As Decimal
        Dim strGestStockAlm As String
        Dim strBodega As String = ""
        Dim strUnidad As String
        Dim strTipoVeh As String

        Dim strImpuesto As String = String.Empty

        oform = m_SBO_Application.Forms.Item(p_strFormID)

        strCliente = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CardCode", 0).Trim

        If Not String.IsNullOrEmpty(strCliente) Then

            'tipo de cambio del contrato de ventas 
            decTipoCambio_CV = Utilitarios.ConvierteDecimal(oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0), n)
            If decTipoCambio_CV = 0 Then
                decTipoCambio_CV = 1
            End If

            strFechaCV = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0).Trim

            'moneda del contrato de ventas
            strMoneda_CV = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim
            m_objBLSBO.Set_Compania(m_oCompany)
            m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
            m_strMonedaSistema = m_objBLSBO.RetornarMonedaSistema()

            Dim fecha As Date
            fecha = Date.ParseExact(strFechaCV, "yyyyMMdd", Nothing)
            fecha = New Date(fecha.Year, fecha.Month, fecha.Day, 0, 0, 0)

            strTipoCambioSistema = m_objBLSBO.RetornarTipoCambioMonedaRS(m_strMonedaSistema, fecha)

            decTipoCambioSistema = Utilitarios.ConvierteDecimal(strTipoCambioSistema, n)

            strUnidad = oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim

            strTipoVeh = Utilitarios.EjecutarConsulta("Select U_Tipo from dbo.[@SCGD_Vehiculo]  with (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            If intTipoItem = TipoItem.Accesorio Then

                oMatriz = DirectCast(oform.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

                strBodega = objConfiguracionGeneral.AccesoriosXAlmacen(strTipoVeh)
                If String.IsNullOrEmpty(strBodega) Then
                    strBodega = oDataTableConfiguracionesDMS.GetValue("U_SCGD_BodAcc", 0)
                End If

            ElseIf intTipoItem = TipoItem.Tramite Then

                oMatriz = DirectCast(oform.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

                strBodega = Utilitarios.EjecutarConsulta("Select U_Bod_Tram from dbo.[@SCGD_ADMIN4]  with (nolock) where U_Tipo = '" & strTipoVeh & "' and Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)
                If String.IsNullOrEmpty(strBodega) Then
                    strBodega = oDataTableConfiguracionesDMS.GetValue("U_AlmGeTra", 0)
                End If

            End If

            strItem = oDataTable.GetValue("ItemCode", 0)

            'Carga precio de cada item

            If Not String.IsNullOrEmpty(strCliente) Then
                strListaPrecio = Utilitarios.EjecutarConsulta("Select ListNum from OCRD with (nolock) where CardCode = '" & strCliente & "'", m_oCompany.CompanyDB, m_oCompany.Server)
            Else
                strListaPrecio = "1"
            End If

            'tipo de moneda de la lista de precios
            strMoneda_LP = Utilitarios.EjecutarConsulta("Select Currency from ITM1 with (nolock) where ItemCode = '" & strItem & "' and PriceList = '" & strListaPrecio & "'", m_oCompany.CompanyDB, m_oCompany.Server).Trim

            If String.IsNullOrEmpty(strMoneda_LP) Then strMoneda_LP = m_strMonedaLocal

            decPrecio = Utilitarios.EjecutarConsultaPrecios("Select Price from ITM1  with (nolock) where ItemCode = '" & strItem & "' and PriceList = '" & strListaPrecio & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            'Modificado 21/11/2012: Roiner Camacho Esquivel: Carga de costo de items segun tipo de gestión de stock
            strGestStockAlm = oDataTable.GetValue("ByWh", 0)

            If Not strGestStockAlm = "Y" Then

                decCosto = oDataTable.GetValue("AvgPrice", 0)

            ElseIf strGestStockAlm = "Y" Then

                strCosto = Utilitarios.EjecutarConsultaPrecios("Select AvgPrice from OITW  with (nolock) where ItemCode = '" & strItem & "' And WhsCode = '" & strBodega & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                If Not String.IsNullOrEmpty(strCosto) Then
                    decCosto = Decimal.Parse(strCosto)
                End If

            End If

            'retorna el precio gestionado de acuerdo al tipo de cambio
            'y las monedas 
            If Not String.IsNullOrEmpty(strMoneda_CV) _
                And Not String.IsNullOrEmpty(strMoneda_LP) Then

                decPrecio = GestionaPrecio(strMoneda_CV, strMoneda_LP, decPrecio, decTipoCambio_CV, decTipoCambioSistema, m_strMonedaLocal, m_strMonedaSistema)

                decCosto = GestionaPrecio(strMoneda_CV, m_strMonedaLocal, decCosto, decTipoCambio_CV, decTipoCambioSistema, m_strMonedaLocal, m_strMonedaSistema)

            End If

            If intTipoItem = TipoItem.Accesorio Then

                intNuevoRegisto = oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").Size
                If intNuevoRegisto = 1 Then
                    strItemCode = oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Acc", 0)
                    strItemCode = strItemCode.Trim()
                    If Not String.IsNullOrEmpty(strItemCode) Then
                        oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").InsertRecord(intNuevoRegisto)
                        intNuevoRegisto += 1
                    Else
                        intNuevoRegisto = 1
                    End If
                Else
                    oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").InsertRecord(intNuevoRegisto)
                    intNuevoRegisto += 1
                End If

                oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Acc", intNuevoRegisto - 1, oDataTable.GetValue("ItemCode", 0))
                oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_N_Acc", intNuevoRegisto - 1, oDataTable.GetValue("ItemName", 0))
                oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_SCGD_AccPrecio", intNuevoRegisto - 1, decPrecio.ToString(n))
                oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Cant_Acc", intNuevoRegisto - 1, "1")
                oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_AccPr_I", intNuevoRegisto - 1, decPrecio.ToString(n))
                oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Cost_Acc", intNuevoRegisto - 1, decCosto.ToString(n))
                If DMS_Connector.Configuracion.ParamGenAddon.U_LocCR = "Y" Then
                    strImpuesto = DMS_Connector.Business_Logic.ImpuestoBL.ObtenerImpuesto(oform, strCliente, strItemCode)
                    If Not String.IsNullOrEmpty(strImpuesto) Then
                        oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Imp_Acc", intNuevoRegisto - 1, strImpuesto)
                    Else
                        dtImpuesto = CargarImpuesto(strCliente, "'" & strUnidad & "'")
                        oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Imp_Acc", intNuevoRegisto - 1, dtImpuesto.GetValue("U_Cod_Imp", 0))
                    End If
                Else
                    dtImpuesto = CargarImpuesto(strCliente, "'" & strUnidad & "'")
                    oform.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Imp_Acc", intNuevoRegisto - 1, dtImpuesto.GetValue("U_Cod_Imp", 0))
                End If
                

            ElseIf intTipoItem = TipoItem.Tramite Then

                intNuevoRegisto = oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").Size
                If intNuevoRegisto = 1 Then
                    strItemCode = oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Cod_Tram", 0)
                    strItemCode = strItemCode.Trim()
                    If Not String.IsNullOrEmpty(strItemCode) Then
                        oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").InsertRecord(intNuevoRegisto)
                        intNuevoRegisto += 1
                    Else
                        intNuevoRegisto = 1
                    End If
                Else
                    oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").InsertRecord(intNuevoRegisto)
                    intNuevoRegisto += 1
                End If

                oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Cod_Tram", intNuevoRegisto - 1, oDataTable.GetValue("ItemCode", 0))
                oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Des_Tram", intNuevoRegisto - 1, oDataTable.GetValue("ItemName", 0))
                oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Pre_Uni", intNuevoRegisto - 1, decPrecio.ToString(n))
                oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Cant", intNuevoRegisto - 1, "1")
                oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Costo", intNuevoRegisto - 1, decCosto.ToString(n))
                If DMS_Connector.Configuracion.ParamGenAddon.U_LocCR = "Y" Then
                    strImpuesto = DMS_Connector.Business_Logic.ImpuestoBL.ObtenerImpuesto(oform, strCliente, strItemCode)
                    If Not String.IsNullOrEmpty(strImpuesto) Then
                        oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Imp_Vent", intNuevoRegisto - 1, strImpuesto)
                    Else
                        dtImpuesto = CargarImpuesto(strCliente, "'" & strUnidad & "'")
                        oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Imp_Vent", intNuevoRegisto - 1, dtImpuesto.GetValue("U_Cod_Imp", 0))
                    End If
                Else
                    dtImpuesto = CargarImpuesto(strCliente, "'" & strUnidad & "'")
                    oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Imp_Vent", intNuevoRegisto - 1, dtImpuesto.GetValue("U_Cod_Imp", 0))
                End If
               
                oform.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_SCGD_Fct", intNuevoRegisto - 1, oDataTable.GetValue("U_SCGD_TrFc", 0))

            End If

            oMatriz.LoadFromDataSource()

            If intTipoItem = TipoItem.Accesorio Then

                Call CalculaPrecioAccesorios(oform)

            ElseIf intTipoItem = TipoItem.Tramite Then

                Call CalculaPrecioTramites(oform)

            End If

            Call CalcularCostos(p_strFormID)
            Call FormateaPreciosBase(oform)
            If oform.Mode = BoFormMode.fm_OK_MODE Then
                oform.Mode = BoFormMode.fm_UPDATE_MODE
            End If

        Else

            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCliente, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)

        End If

    End Sub

    ''' <summary>
    ''' Gestiona el precio con relacion en la moneda 
    ''' del contrato de ventas y la de la lista de precios 
    ''' </summary>
    ''' <param name="strMoneda_CV">Tipo de moneda del contrato de ventas</param>
    ''' <param name="strMoneda_LP">Tipo de moneda de la lista de precios</param>
    ''' <param name="decPrecio">Precio</param>
    ''' <param name="decTipoCambio_CV">Tipo de cambio del contrato de ventas</param>
    ''' <returns>Precio ya gestionado</returns>
    ''' <remarks></remarks>
    Private Function GestionaPrecio(ByVal strMoneda_CV As String,
                                    ByVal strMoneda_LP As String,
                                    ByVal decPrecio As Decimal,
                                    ByVal decTipoCambio_CV As Decimal,
                                    ByVal decTipoCambio_Sist As Decimal,
                                    ByVal m_strMonedaLocal As String,
                                    ByVal m_strMonedaSistema As String) As Decimal
        Try
            Dim dcPrecioGestionado As Decimal = 0

            Select Case strMoneda_CV
                Case m_strMonedaLocal
                    If strMoneda_LP = m_strMonedaLocal Then
                        dcPrecioGestionado = decPrecio
                    ElseIf strMoneda_LP = m_strMonedaSistema Then
                        dcPrecioGestionado = decPrecio * decTipoCambio_Sist
                    Else
                        dcPrecioGestionado = decPrecio * decTipoCambio_CV
                    End If
                Case m_strMonedaSistema
                    If strMoneda_LP = m_strMonedaLocal Then
                        dcPrecioGestionado = decPrecio / decTipoCambio_CV
                    ElseIf strMoneda_LP = m_strMonedaSistema Then
                        dcPrecioGestionado = decPrecio
                    Else
                        dcPrecioGestionado = (decPrecio / decTipoCambio_Sist) * decTipoCambio_CV
                    End If
                Case Else
                    If strMoneda_LP = m_strMonedaLocal Then
                        dcPrecioGestionado = decPrecio / decTipoCambio_CV
                    ElseIf strMoneda_LP = m_strMonedaSistema Then
                        dcPrecioGestionado = (decPrecio * decTipoCambio_Sist) / decTipoCambio_CV
                    Else
                        dcPrecioGestionado = decPrecio
                    End If
            End Select

            Return dcPrecioGestionado
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function


    Private Sub CalculaPrecioTramites(ByVal oForm As SAPbouiCOM.Form)

        Dim oMatrix As SAPbouiCOM.Matrix
        Dim strCantidad As String
        Dim intCantidad As Integer = 0
        Dim strPrecioUnitario As String
        Dim decPrecioUnitario As Decimal = 0
        Dim decPrecioTotal As Decimal
        Dim decTotalTramites As Decimal = 0

        Try

            oForm.Freeze(True)

            oMatrix = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

            oMatrix.FlushToDataSource()

            For i As Integer = 0 To oMatrix.RowCount - 1

                strCantidad = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Cant", i)
                strCantidad = strCantidad.Trim()
                If Not String.IsNullOrEmpty(strCantidad) Then
                    intCantidad = Integer.Parse(strCantidad)
                End If

                strPrecioUnitario = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Pre_Uni", i)
                strPrecioUnitario = strPrecioUnitario.Trim()
                If Not String.IsNullOrEmpty(strPrecioUnitario) Then
                    decPrecioUnitario = Decimal.Parse(strPrecioUnitario, n)
                End If

                decPrecioTotal = decPrecioUnitario * intCantidad

                oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Pre_Tot", i, decPrecioTotal.ToString(n))

                decTotalTramites += decPrecioTotal

            Next

            oMatrix.LoadFromDataSource()

            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Tot_Tram", 0, decTotalTramites.ToString(n))

            oForm.Freeze(False)

        Catch ex As Exception

            Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try

    End Sub

    Public Sub AgregaLineaHistorial(ByVal strCode As String, ByVal nivAnt As Integer, ByVal nivNue As Integer, Optional ByVal boolReversa As Boolean = False)

        Dim oCompanyService As SAPbobsCOM.CompanyService
        Dim oGeneralService As SAPbobsCOM.GeneralService
        Dim oGeneralData As SAPbobsCOM.GeneralData
        Dim oGeneralDataChilds As SAPbobsCOM.GeneralDataCollection
        Dim oGDChild As SAPbobsCOM.GeneralData
        Dim oGeneralParams As SAPbobsCOM.GeneralDataParams
        Dim oEditComentarios As SAPbouiCOM.EditText

        Dim strNivCode As String
        Dim strCom As String
        Dim strNombreNivelNuevo As String
        Dim strNombreNivelAnterior As String

        Dim dtFecha As Date

        Try

            'Datos para formar fecha
            dtFecha = Date.Now

            If Not boolReversa Then
                For i As Integer = 0 To oDataTableEstados.Rows.Count - 1
                    If oDataTableEstados.GetValue("U_Prio", i).ToString().Trim() = Convert.ToString(nivNue) Then
                        strNivCode = oDataTableEstados.GetValue("U_Codigo", i).ToString().Trim()
                        strNombreNivelNuevo = oDataTableEstados.GetValue("U_Name", i).ToString().Trim()
                        Exit For
                    ElseIf oDataTableEstados.GetValue("U_Prio", i).ToString().Trim() = Convert.ToString(nivAnt) Then
                        strNombreNivelAnterior = oDataTableEstados.GetValue("U_Name", i).ToString().Trim()
                    End If
                Next
                If nivNue.ToString() = oDataTableEstadosLimites.GetValue("Superior", 0) Then
                    'Factura
                    strCom = My.Resources.Resource.TXTContratoFacturado
                ElseIf nivNue.ToString() = oDataTableEstadosLimites.GetValue("Inferior", 0) Then
                    'cancela
                    strCom = My.Resources.Resource.TXTContratoCancelado
                Else
                    'Aprueba
                    If nivAnt < nivNue Then
                        strCom = String.Format(My.Resources.Resource.TXTContratoAprobado, strNombreNivelAnterior, strNombreNivelNuevo)
                    Else
                        'rechaza
                        oEditComentarios = DirectCast(oForm.Items.Item("txtH_RC").Specific, SAPbouiCOM.EditText)
                        strCom = String.Format(My.Resources.Resource.TXTContratoRechazado, oEditComentarios.Value.Trim())
                        If strCom.Length > 254 Then
                            strCom = strCom.Substring(0, 254)
                        End If
                    End If
                End If
            Else
                'Reversion de contrato
                strCom = My.Resources.Resource.TXTContratoReversado
                strNivCode = My.Resources.Resource.TXTContratoReversado
            End If

            oCompanyService = m_oCompany.GetCompanyService()
            oGeneralService = oCompanyService.GetGeneralService("SCGD_CVT")
            oGeneralParams = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
            oGeneralParams.SetProperty("DocEntry", strCode)
            oGeneralData = oGeneralService.GetByParams(oGeneralParams)

            Select Case nivNue

                Case m_intEstadoSuperior
                    oGeneralData.SetProperty("U_Usu_Fac", m_SBO_Application.Company.UserName)
                    oGeneralData.SetProperty("U_Fec_Fac", dtFecha)

                Case m_intEstadoInferior
                    oGeneralData.SetProperty("U_Usu_Can", m_SBO_Application.Company.UserName)
                    oGeneralData.SetProperty("U_Fec_Can", dtFecha)

                Case Else
                    oGeneralData.SetProperty("U_Usu_Tra", m_SBO_Application.Company.UserName)
                    oGeneralData.SetProperty("U_Fec_Tra", dtFecha)

            End Select

            oGeneralData.SetProperty("U_Estado", nivNue)
            oGeneralDataChilds = oGeneralData.Child("SCGD_HIST_CV")

            oGDChild = oGeneralDataChilds.Add()

            'Asignación de los valores
            oGDChild.SetProperty("U_Usuario", m_SBO_Application.Company.UserName)
            oGDChild.SetProperty("U_Fecha", DateTime.Now)
            oGDChild.SetProperty("U_Hora", DateTime.Now)
            oGDChild.SetProperty("U_Comentario", strCom)
            oGDChild.SetProperty("U_Nivel", Convert.ToString(nivNue))
            oGDChild.SetProperty("U_Niv_Code", strNivCode)

            oGeneralService.Update(oGeneralData)

        Catch ex As Exception

            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)

        End Try
    End Sub

    'Agregado 14/01/2011: Elimina vehiculos del contrato de venta
    Public Sub EliminarVehiculo(ByVal p_strFormID As String)
        Dim oform As SAPbouiCOM.Form
        Dim oMatriz As SAPbouiCOM.Matrix
        Dim intRegistoEliminar As Integer
        Dim blnLineasEliminadas As Boolean = False

        Dim strUnidad As String = ""
        Dim strDispUnidad As String
        Dim strEstadoReservado As String
        Dim strEstadoDisponible As String
        Dim strIDVehiculo As String
        Dim oCompanyService As SAPbobsCOM.CompanyService
        Dim oGeneralService As SAPbobsCOM.GeneralService
        Dim oGeneralData As SAPbobsCOM.GeneralData
        Dim oGeneralParams As SAPbobsCOM.GeneralDataParams
        Dim strUsaControlAccesorios As String = String.Empty
        Dim strUnidadDataTable As String

        oform = m_SBO_Application.Forms.Item(p_strFormID)
        oform.Freeze(True)
        oMatriz = DirectCast(oform.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)
        intRegistoEliminar = oMatriz.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_RowOrder)
        Do While intRegistoEliminar > -1
            oMatriz.FlushToDataSource()

            strUnidad = oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", intRegistoEliminar - 1)
            strUnidad = strUnidad.Trim()

            oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").RemoveRecord(intRegistoEliminar - 1)
            blnLineasEliminadas = True
            intRegistoEliminar = oMatriz.GetNextSelectedRow(intRegistoEliminar, SAPbouiCOM.BoOrderType.ot_RowOrder)

        Loop

        If oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size = 0 Then

            oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").InsertRecord(0)
            oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pagos", 0, "0")
            blnLineasEliminadas = True

        End If

        If blnLineasEliminadas Then

            oMatriz.LoadFromDataSource()

            Call CalculaPrecioVenta(oform)

            Call CargarPagosRealizados(oform)

            Call CalcularCostos(p_strFormID)

            Call FormateaPreciosBase(oform)

            Call LimpiarVehiculoTemporal(oform)

            oform.Items.Item("btnAgreVeh").Enabled = False
            oform.Items.Item("btnActVeh").Enabled = False

            ReDim Preserve g_strUnidadEliminada(g_intCantUnidadesEli)

            g_strUnidadEliminada(g_intCantUnidadesEli) = strUnidad

            g_intCantUnidadesEli += 1

            strEstadoReservado = oDataTableConfiguracionesDMS.GetValue("U_Disp_Res", 0)
            'strEstadoReservado = Utilitarios.EjecutarConsulta("Select U_Disp_Res from [@SCGD_ADMIN] where Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)

            strEstadoDisponible = oDataTableConfiguracionesDMS.GetValue("U_Disp_R", 0)
            'strEstadoDisponible = Utilitarios.EjecutarConsulta("Select U_Disp_R from [@SCGD_ADMIN] where Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)

            strDispUnidad = Utilitarios.EjecutarConsulta("Select U_Dispo from [@SCGD_VEHICULO]  with (nolock) where U_Cod_Unid='" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            If strDispUnidad = strEstadoReservado Then

                strIDVehiculo = Utilitarios.EjecutarConsulta("Select Code from [@SCGD_VEHICULO]  with (nolock) where U_Cod_Unid='" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                oCompanyService = m_oCompany.GetCompanyService()
                oGeneralService = oCompanyService.GetGeneralService("SCGD_VEH")
                oGeneralParams = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
                oGeneralParams.SetProperty("Code", strIDVehiculo)
                oGeneralData = oGeneralService.GetByParams(oGeneralParams)
                oGeneralData.SetProperty("U_Dispo", strEstadoDisponible)
                oGeneralData.SetProperty("U_ContratoV", String.Empty)
                'Erick Sanabria Bravo Eliminar Fecha de Reserva
                oGeneralData.SetProperty("U_FchRsva", "")
                oGeneralData.SetProperty("U_VENRES", "")
                oGeneralService.Update(oGeneralData)

            End If

            '13/06/2012 - Diego Herrera: Eliminar lineas de data table de gastos de unidad

            If oDataTableGastosUnidad.Rows.Count > 0 Then

                For i As Integer = oDataTableGastosUnidad.Rows.Count - 1 To 0 Step -1

                    strUnidadDataTable = oDataTableGastosUnidad.GetValue("unidad", i)

                    If strUnidadDataTable = strUnidad Then

                        oDataTableGastosUnidad.Rows.Remove(i)

                    End If

                Next

            End If

            If oform.Mode = BoFormMode.fm_OK_MODE Then
                oform.Mode = BoFormMode.fm_UPDATE_MODE
            End If

            EliminarBonosPorUnidad(oform, strUnidad)

            strUsaControlAccesorios = DMS_Connector.Configuracion.ParamGenAddon.U_CtrlAcc
            If strUsaControlAccesorios.ToUpper() = "Y" Then
                EliminarAccesoriosPorUnidad(oform, strUnidad)
            End If

            EliminarOtrosCostosPorUnidad(oform, strUnidad)
            'AgregaLineaMatrizBonos(oform)

        End If
        oform.Freeze(False)
    End Sub

    Private Sub EliminarBonosPorUnidad(ByRef p_oForm As SAPbouiCOM.Form, ByVal p_strUnidad As String)

        Dim m_lsintPosEliminar As New List(Of Integer)

        Dim intTamanoMatriz As Integer
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim oEditText As SAPbouiCOM.EditText

        Try
            oMatrix = DirectCast(p_oForm.Items.Item(g_str_mtxBonos).Specific, SAPbouiCOM.Matrix)

            intTamanoMatriz = oMatrix.RowCount

            For i As Integer = intTamanoMatriz To 1 Step -1

                oEditText = DirectCast(oMatrix.Columns.Item("Col_Unidad").Cells.Item(i).Specific, SAPbouiCOM.EditText)

                If oEditText.Value = p_strUnidad Then

                    oMatrix.DeleteRow(i)

                End If
            Next

            oMatrix.FlushToDataSource()
            oMatrix.LoadFromDataSource()

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    ''' <summary>
    ''' Eliminar los accesorios que estén ligados a un vehículo al momento de eliminar el vehículo
    ''' </summary>
    ''' <param name="p_oForm">Formulario desde el cual se ejecuta el método</param>
    ''' <param name="p_strUnidad">Código del vehículo/unidad en formato texto</param>
    ''' <remarks></remarks>
    Private Sub EliminarAccesoriosPorUnidad(ByRef p_oForm As SAPbouiCOM.Form, ByVal p_strUnidad As String)

        Dim intTamanoMatriz As Integer
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim oEditText As SAPbouiCOM.EditText

        Try
            oMatrix = DirectCast(p_oForm.Items.Item(g_str_mtxAccesorios).Specific, SAPbouiCOM.Matrix)

            intTamanoMatriz = oMatrix.RowCount

            For i As Integer = intTamanoMatriz To 1 Step -1

                oEditText = DirectCast(oMatrix.Columns.Item("col_CodU").Cells.Item(i).Specific, SAPbouiCOM.EditText)

                If oEditText.Value = p_strUnidad Then

                    oMatrix.DeleteRow(i)

                End If
            Next

            oMatrix.FlushToDataSource()
            oMatrix.LoadFromDataSource()

            'Recalcula montos y costos en el contrato de ventas
            Call CalculaPrecioAccesorios(oForm)

            Call CalcularCostos(oForm.UniqueID)

            Call FormateaPreciosBase(oForm)

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub


    Private Sub EliminarOtrosCostosPorUnidad(ByRef p_oForm As SAPbouiCOM.Form, ByVal p_strUnidad As String)

        Dim m_lsintPosEliminar As New List(Of Integer)

        Dim intTamanoMatriz As Integer
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim oEditText As SAPbouiCOM.EditText

        Try
            oMatrix = DirectCast(p_oForm.Items.Item(g_str_mtxOtrosCostos).Specific, SAPbouiCOM.Matrix)

            intTamanoMatriz = oMatrix.RowCount

            For i As Integer = intTamanoMatriz To 1 Step -1

                oEditText = DirectCast(oMatrix.Columns.Item("Col_Unidad").Cells.Item(i).Specific, SAPbouiCOM.EditText)

                If oEditText.Value = p_strUnidad Then

                    oMatrix.DeleteRow(i)

                End If
            Next

            oMatrix.FlushToDataSource()
            oMatrix.LoadFromDataSource()

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Public Sub EliminarItem(ByVal p_strFormID As String, ByVal intTipoItem As Integer)

        Dim oform As SAPbouiCOM.Form
        Dim oMatriz As SAPbouiCOM.Matrix = Nothing
        Dim intRegistoEliminar As Integer
        Dim blnLineasEliminadas As Boolean = False
        Dim strTabla As String = ""
        Dim strUDF As String = ""

        oform = m_SBO_Application.Forms.Item(p_strFormID)

        oform.Freeze(True)

        If intTipoItem = TipoItem.Accesorio Then
            oMatriz = DirectCast(oform.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)
            strTabla = "@SCGD_ACCXCONT"
            strUDF = "U_SCGD_AccPrecio"
        ElseIf intTipoItem = TipoItem.Tramite Then
            oMatriz = DirectCast(oform.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)
            strTabla = "@SCGD_TRAMXCONT"
            strUDF = "U_Pre_Uni"
        End If

        intRegistoEliminar = oMatriz.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_RowOrder)

        If intRegistoEliminar > -1 Then

            oMatriz.FlushToDataSource()

            oform.DataSources.DBDataSources.Item(strTabla).RemoveRecord(intRegistoEliminar - 1)
            blnLineasEliminadas = True

        End If

        If oform.DataSources.DBDataSources.Item(strTabla).Size = 0 Then

            oform.DataSources.DBDataSources.Item(strTabla).InsertRecord(0)
            oform.DataSources.DBDataSources.Item(strTabla).SetValue(strUDF, 0, "0")
            blnLineasEliminadas = True

        End If

        If blnLineasEliminadas Then

            oMatriz.LoadFromDataSource()

            If intTipoItem = TipoItem.Accesorio Then
                Call CalculaPrecioAccesorios(oform)
            ElseIf intTipoItem = TipoItem.Tramite Then
                Call CalculaPrecioTramites(oform)
            End If

            Call CalcularCostos(p_strFormID)

            Call FormateaPreciosBase(oform)

            If oform.Mode = BoFormMode.fm_OK_MODE Then
                oform.Mode = BoFormMode.fm_UPDATE_MODE
            End If

        End If

        oform.Freeze(False)

    End Sub

    'Public Sub EliminarAccesoriosBD()

    '    Dim a_strLineasEliminadas() As String
    '    Dim strlineaEliminada As String
    '    Dim strConsulta As String
    '    Dim blnPrimeraLinea As Boolean = True

    '    If Not String.IsNullOrEmpty(m_strLineasEliminadas) Then
    '        a_strLineasEliminadas = m_strLineasEliminadas.Split(",")
    '        strConsulta = "Delete from [@SCGD_ACCXCONT] where DocEntry = '" & m_strCodigoVehiculo.Trim() & "' and (LineId = "
    '        For Each strlineaEliminada In a_strLineasEliminadas
    '            If Not String.IsNullOrEmpty(strlineaEliminada) Then
    '                If blnPrimeraLinea Then
    '                    strConsulta &= strlineaEliminada
    '                    blnPrimeraLinea = False
    '                Else
    '                    strConsulta &= " or LineId = " & strlineaEliminada

    '                End If
    '            End If
    '        Next
    '        strConsulta &= ")"
    '        Utilitarios.EjecutarConsulta(strConsulta, m_oCompany.CompanyDB, m_oCompany.Server)
    '        Call CambiasOrdenVisualLineas(m_strCodigoVehiculo.Trim())
    '    End If

    '    m_strLineasEliminadas = ""
    '    m_strCodigoVehiculo = ""

    'End Sub

    Private Sub CambiasOrdenVisualLineas(ByVal p_strDocEntry As String)

        Dim drdResultadoConsulta As SqlClient.SqlDataReader
        Dim cmdEjecutarConsulta As New SqlClient.SqlCommand
        Dim strConectionString As String = String.Empty
        Dim cn_Coneccion As New SqlClient.SqlConnection

        Dim strConsultaSeleccionarLineas As String
        Dim intLineID As Integer
        Dim strConsultaActualizacion As String = String.Empty

        Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, strConectionString)
        cn_Coneccion.ConnectionString = strConectionString
        cn_Coneccion.Open()

        strConsultaSeleccionarLineas = "SELECT  LineId FROM [@SCGD_ACCXCONT]  with (nolock) where DocEntry = " & p_strDocEntry

        cmdEjecutarConsulta.Connection = cn_Coneccion

        cmdEjecutarConsulta.CommandType = CommandType.Text
        cmdEjecutarConsulta.CommandText = strConsultaSeleccionarLineas
        drdResultadoConsulta = cmdEjecutarConsulta.ExecuteReader()
        intLineID = 1
        Do While drdResultadoConsulta.Read

            If String.IsNullOrEmpty(strConsultaActualizacion) Then
                strConsultaActualizacion = "Update [@SCGD_ACCXCONT] VisOrder = 1 where DocEntry = " & p_strDocEntry & " and LineId " & drdResultadoConsulta.Item(0)
            Else
                strConsultaActualizacion &= " Update [@SCGD_ACCXCONT] VisOrder = 1 where DocEntry = " & p_strDocEntry & " and LineId " & drdResultadoConsulta.Item(0)
            End If
            intLineID += 1
        Loop
        drdResultadoConsulta.Close()

        cmdEjecutarConsulta.CommandType = CommandType.Text
        cmdEjecutarConsulta.CommandText = strConsultaSeleccionarLineas
        cmdEjecutarConsulta.ExecuteNonQuery()

        cmdEjecutarConsulta.Connection.Close()


    End Sub

    Private Sub AsignaValoresOportunidadVenta(ByVal oDataTable As SAPbouiCOM.DataTable, _
                                             ByVal oForm As SAPbouiCOM.Form)
        Dim strCodigoVendedor As String
        Dim strNombreVendedor As String
        Dim strEtapaCot As String
        Dim strEtapaConfigurada As String
        Dim strTipoDoc As String
        Dim strNumeroDoc As String
        Dim strNombreCotizacion As String
        Dim strCodigoCliente As String
        Dim strNombreCliente As String
        Dim oOportunidad As SalesOpportunities
        Dim noOportunidad As Integer
        Dim blCotizacion As Boolean = False

        Dim strCot As String

        Dim oCotizacion As Documents
        Dim intNumCotizacion As Integer

        Dim strArticulo As String
        Dim strNombreArticulo As String
        Dim strTipoArticulo As String
        Dim decPrecioArticulo As Decimal
        Dim intCantArticulo As Integer

        Dim decPrecioTotal As Decimal = 0

        Dim intContAcc As Integer = 0
        Dim blAgregaAcc As Boolean = False

        Dim strMoneda As String
        Dim oRecordset As SAPbobsCOM.Recordset
        Dim oSBObob As SAPbobsCOM.SBObob

        Dim strPrecioVenta As String
        Dim decPrecioVenta As Decimal

        Dim decTipoCambio As Decimal

        Dim dtImpuesto As SAPbouiCOM.DataTable

        Dim strGestStockAlm As String
        Dim strCostoAcc As String
        Dim decCostoAcc As Decimal
        Dim strBodegaAcc As String
        Dim strUnidad As String
        Dim strTipoVeh As String

        Dim oMatrixTramites As SAPbouiCOM.Matrix
        Dim intContTram As Integer = 0
        Dim blnAgregaTram As Boolean = False
        Dim strCostoTram As String
        Dim decCostoTram As Decimal
        Dim strBodegaTram As String

        Dim n As NumberFormatInfo

        Dim service As CompanyService = m_oCompany.GetCompanyService()

        Dim info As AdminInfo = service.GetAdminInfo()
        n = DIHelper.GetNumberFormatInfo(m_oCompany)

        Dim oMatrixAccs As SAPbouiCOM.Matrix
        oMatrixAccs = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

        If oMatrixAccs.RowCount > 0 Then
            oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").Clear()
            oMatrixAccs.Clear()
        End If

        oMatrixTramites = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

        If oMatrixTramites.RowCount > 0 Then
            oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").Clear()
            oMatrixTramites.Clear()
        End If

        noOportunidad = CInt(oDataTable.GetValue("OpprId", 0))

        oOportunidad = m_oCompany.GetBusinessObject(BoObjectTypes.oSalesOpportunities)
        oOportunidad.GetByKey(noOportunidad)

        For i As Integer = 0 To oOportunidad.Lines.Count - 1
            oOportunidad.Lines.SetCurrentLine(i)

            strEtapaCot = CStr(oOportunidad.Lines.StageKey)
            strTipoDoc = CStr(oOportunidad.Lines.DocumentType)
            strNumeroDoc = CStr(oOportunidad.Lines.DocumentNumber)

            strEtapaConfigurada = oDataTableConfiguracionesDMS.GetValue("U_SCGD_EtapaCV", 0)

            If strTipoDoc = "23" AndAlso strEtapaCot = strEtapaConfigurada AndAlso Not strNumeroDoc = "0" Then

                strPrecioVenta = oForm.Items.Item("txtPre_Ven").Specific.value
                decPrecioVenta = Decimal.Parse(strPrecioVenta, n)

                intNumCotizacion = CInt(strNumeroDoc)

                oCotizacion = m_oCompany.GetBusinessObject(BoObjectTypes.oQuotations)
                oCotizacion.GetByKey(intNumCotizacion)

                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").Clear()

                decTipoCambio = oCotizacion.DocRate

                strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0)
                strUnidad = strUnidad.Trim()

                strTipoVeh = Utilitarios.EjecutarConsulta("Select U_Tipo from dbo.[@SCGD_Vehiculo]  with (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                strBodegaAcc = objConfiguracionGeneral.AccesoriosXAlmacen(strTipoVeh)
                If String.IsNullOrEmpty(strBodegaAcc) Then
                    strBodegaAcc = oDataTableConfiguracionesDMS.GetValue("U_SCGD_BodAcc", 0)
                End If

                strBodegaTram = Utilitarios.EjecutarConsulta("Select U_Bod_Tram from dbo.[@SCGD_ADMIN4]  with (nolock) where U_Tipo = '" & strTipoVeh & "' and Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)

                For iCot As Integer = 0 To oCotizacion.Lines.Count - 1

                    oCotizacion.Lines.SetCurrentLine(iCot)

                    strArticulo = oCotizacion.Lines.ItemCode

                    strNombreArticulo = oCotizacion.Lines.ItemDescription

                    intCantArticulo = oCotizacion.Lines.Quantity

                    If decTipoCambio = 0 Or decTipoCambio = 1 Then
                        decPrecioArticulo = oCotizacion.Lines.Price
                    Else
                        decPrecioArticulo = oCotizacion.Lines.Price / decTipoCambio
                    End If

                    strTipoArticulo = Utilitarios.EjecutarConsulta("Select U_SCGD_TipoArticulo from OITM  with (nolock) where ItemCode = '" & strArticulo & "'", SAPCompany.CompanyDB, SAPCompany.Server)

                    If strTipoArticulo = "8" Then

                        If decTipoCambio = 0 Or decTipoCambio = 1 Then
                            decPrecioTotal += CDec(oCotizacion.Lines.LineTotal)
                        Else
                            decPrecioTotal += CDec(oCotizacion.Lines.RowTotalFC)
                        End If

                    ElseIf strTipoArticulo = "7" Then

                        intContAcc = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").Offset

                        'Agregado 17/05/2012 - Diego Herrera: Carga de costo de accesorios segun tipo de gestión de stock

                        strGestStockAlm = Utilitarios.EjecutarConsulta("Select ByWh from OITM  with (nolock) where ItemCode = '" & strArticulo & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                        If Not strGestStockAlm = "Y" Then

                            strCostoAcc = Utilitarios.EjecutarConsultaPrecios("Select AvgPrice from OITM  with (nolock) where ItemCode = '" & strArticulo & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                            If Not String.IsNullOrEmpty(strCostoAcc) Then
                                decCostoAcc = Decimal.Parse(strCostoAcc)
                            End If

                        ElseIf strGestStockAlm = "Y" Then

                            strCostoAcc = Utilitarios.EjecutarConsultaPrecios("Select AvgPrice from OITW  with (nolock) where ItemCode = '" & strArticulo & "' And WhsCode = '" & strBodegaAcc & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                            If Not String.IsNullOrEmpty(strCostoAcc) Then
                                decCostoAcc = Decimal.Parse(strCostoAcc)
                            End If

                        End If

                        If Not (decTipoCambio = 0 Or decTipoCambio = 1) Then

                            decCostoAcc = decCostoAcc / decTipoCambio

                        End If

                        oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").InsertRecord(intContAcc)
                        oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Acc", intContAcc, strArticulo)
                        oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_N_Acc", intContAcc, strNombreArticulo)
                        oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_SCGD_AccPrecio", intContAcc, decPrecioArticulo.ToString(n))
                        oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Cant_Acc", intContAcc, intCantArticulo)
                        oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_AccPr_I", intContAcc, decPrecioArticulo.ToString(n))
                        oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Cost_Acc", intContAcc, decCostoAcc.ToString(n))

                        dtImpuesto = CargarImpuesto(oDataTable.GetValue("CardCode", 0).ToString(), "'" & strUnidad & "'")
                        oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Imp_Acc", intContAcc, dtImpuesto.GetValue("U_Cod_Imp", 0))

                        blAgregaAcc = True

                    ElseIf strTipoArticulo = "9" Then

                        intContTram = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").Offset

                        'Agregado 17/05/2012 - Diego Herrera: Carga de costo de accesorios segun tipo de gestión de stock

                        strGestStockAlm = Utilitarios.EjecutarConsulta("Select ByWh from OITM  with (nolock) where ItemCode = '" & strArticulo & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                        If Not strGestStockAlm = "Y" Then

                            strCostoTram = Utilitarios.EjecutarConsultaPrecios("Select AvgPrice from OITM  with (nolock) where ItemCode = '" & strArticulo & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                            If Not String.IsNullOrEmpty(strCostoTram) Then
                                decCostoTram = Decimal.Parse(strCostoTram)
                            End If

                        ElseIf strGestStockAlm = "Y" Then

                            strCostoTram = Utilitarios.EjecutarConsultaPrecios("Select AvgPrice from OITW  with (nolock) where ItemCode = '" & strArticulo & "' And WhsCode = '" & strBodegaTram & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                            If Not String.IsNullOrEmpty(strCostoTram) Then
                                decCostoTram = Decimal.Parse(strCostoTram)
                            End If

                        End If

                        If Not (decTipoCambio = 0 Or decTipoCambio = 1) Then

                            decCostoTram = decCostoTram / decTipoCambio

                        End If

                        oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").InsertRecord(intContTram)
                        oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Cod_Tram", intContTram, strArticulo)
                        oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Des_Tram", intContTram, strNombreArticulo)
                        oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Pre_Uni", intContTram, decPrecioArticulo.ToString(n))
                        oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Cant", intContTram, intCantArticulo)
                        oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Costo", intContTram, decCostoTram.ToString(n))

                        blnAgregaTram = True

                    End If

                Next iCot

                If blAgregaAcc = True Then
                    oMatrixAccs.LoadFromDataSource()
                End If

                If blnAgregaTram = True Then
                    oMatrixTramites.LoadFromDataSource()
                End If

                strCodigoCliente = Utilitarios.EjecutarConsulta("Select CardCode from OQUT  with (nolock) where DocEntry = '" & strNumeroDoc & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                strNombreCliente = Utilitarios.EjecutarConsulta("Select CardName from OQUT  with (nolock) where DocEntry = '" & strNumeroDoc & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                strCot = Utilitarios.EjecutarConsulta("Select DocNum from OQUT  with (nolock) where DocEntry = '" & strNumeroDoc & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                strNombreCotizacion = My.Resources.Resource.NumeroCotizacion & strCot

                dataTable.SetValue(Column:="NumCot", rowIndex:=0, Value:=strCot)

                Dim txtItem As Item = oForm.Items.Item("txtNumCot")
                Dim txtSpecific As EditText = DirectCast(txtItem.Specific, EditText)

                txtSpecific.DataBind.Bind(UID:="COT", columnUid:="NumCot")

                If decTipoCambio = 0 Or decTipoCambio = 1 Then
                    oSBObob = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoBridge)
                    oRecordset = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset)

                    oRecordset = oSBObob.GetLocalCurrency()
                    oRecordset.MoveFirst()
                    If oRecordset.EoF Then
                        Throw New Exception(My.Resources.Resource.MonedaLocalNoConfig)
                    Else
                        strMoneda = oRecordset.Fields.Item(0).Value
                    End If

                    oForm.Items.Item("txtTipoCam").Visible = False

                Else
                    strMoneda = oCotizacion.DocCurrency

                    oForm.Items.Item("txtTipoCam").Visible = True

                End If

                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Name_OV", 0, oDataTable.GetValue("Name", 0))
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_CodCotiz", 0, strNumeroDoc)
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_NameCotiz", 0, strNombreCotizacion)
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CardCode", 0, strCodigoCliente)
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CardName", 0, strNombreCliente)
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CCl_Veh", 0, strCodigoCliente)
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_NCl_Veh", 0, strNombreCliente)

                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Mon_Cot", 0, decPrecioTotal.ToString(n))

                Call CalculaPrecioAccesorios(oForm)

                Call CalculaPrecioTramites(oForm)

                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Moneda", 0, strMoneda)
                If decTipoCambio = 0 Then
                    decTipoCambio = 1
                End If
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_TipoCambio", 0, decTipoCambio)

                strCodigoVendedor = Utilitarios.EjecutarConsulta("Select SlpCode from OQUT  with (nolock) where DocEntry = '" & strNumeroDoc & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                If strCodigoVendedor <> "-1" Then
                    strNombreVendedor = Utilitarios.EjecutarConsulta("Select SlpName from OSLP  with (nolock) where SlpCode = " & strCodigoVendedor, m_oCompany.CompanyDB, m_oCompany.Server)

                    Call AsignaValoresEditTextUIVendedor(strCodigoVendedor, strNombreVendedor, oForm)
                    Call AsignaValoresEditTextUIPropietario(strCodigoVendedor, strNombreVendedor, oForm)

                End If
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Cod_OV", 0, oDataTable.GetValue("OpprId", 0))

                Call FormateaPreciosBase(oForm)

                blCotizacion = True

                Exit For

            End If

        Next i

        If blCotizacion = False Then

            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Name_OV", 0, oDataTable.GetValue("Name", 0))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CardCode", 0, oDataTable.GetValue("CardCode", 0))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CardName", 0, oDataTable.GetValue("CardName", 0))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CCl_Veh", 0, oDataTable.GetValue("CardCode", 0))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_NCl_Veh", 0, oDataTable.GetValue("CardName", 0))

            strCodigoVendedor = oDataTable.GetValue("SlpCode", 0)
            If strCodigoVendedor <> "-1" Then
                strNombreVendedor = Utilitarios.EjecutarConsulta("Select SlpName from OSLP  with (nolock) where SlpCode = " & strCodigoVendedor, m_oCompany.CompanyDB, m_oCompany.Server)

                Call AsignaValoresEditTextUIVendedor(strCodigoVendedor, strNombreVendedor, oForm)
                Call AsignaValoresEditTextUIPropietario(strCodigoVendedor, strNombreVendedor, oForm)

            End If
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Cod_OV", 0, oDataTable.GetValue("OpprId", 0))

        End If

    End Sub

    'Agregado 30/09/2010: Asigna valores de Cotización
    Private Sub AsignaValoresCotizacion(ByVal oDataTable As SAPbouiCOM.DataTable, ByVal oForm As SAPbouiCOM.Form)

        Dim strNombreCotizacion As String
        Dim strCodigoVendedor As String
        Dim strNombreVendedor As String

        Dim oCotizacion As Documents
        Dim intNumCotizacion As Integer

        Dim strCot As String

        Dim strArticulo As String
        Dim strNombreArticulo As String
        Dim strTipoArticulo As String
        Dim decPrecioArticulo As Decimal
        Dim intCantArticulo As Integer

        Dim decPrecioTotal As Decimal = 0

        Dim intContAcc As Integer = 0
        Dim blnAgregaAcc As Boolean = False

        Dim strMoneda As String
        Dim oRecordset As SAPbobsCOM.Recordset
        Dim oSBObob As SAPbobsCOM.SBObob

        Dim strPrecioVenta As String
        Dim decPrecioVenta As Decimal

        Dim decTipoCambio As Decimal

        Dim oMatrixAccs As SAPbouiCOM.Matrix

        Dim dtImpuesto As SAPbouiCOM.DataTable

        Dim strGestStockAlm As String = ""
        Dim strCostoAcc As String
        Dim decCostoAcc As Decimal
        Dim strBodegaAcc As String
        Dim strUnidad As String
        Dim strTipoVeh As String

        Dim oMatrixTramites As SAPbouiCOM.Matrix
        Dim intContTram As Integer = 0
        Dim blnAgregaTram As Boolean = False
        Dim strCostoTram As String
        Dim decCostoTram As Decimal
        Dim strBodegaTram As String

        Dim n As NumberFormatInfo

        Dim service As CompanyService = m_oCompany.GetCompanyService()

        Dim info As AdminInfo = service.GetAdminInfo()
        n = DIHelper.GetNumberFormatInfo(m_oCompany)

        strPrecioVenta = oForm.Items.Item("txtPre_Ven").Specific.value
        decPrecioVenta = Decimal.Parse(strPrecioVenta, n)

        oMatrixAccs = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

        If oMatrixAccs.RowCount > 0 Then
            oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").Clear()
            oMatrixAccs.Clear()
        End If

        oMatrixTramites = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

        If oMatrixTramites.RowCount > 0 Then
            oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").Clear()
            oMatrixTramites.Clear()
        End If

        intNumCotizacion = CInt(oDataTable.GetValue("DocEntry", 0))

        oCotizacion = m_oCompany.GetBusinessObject(BoObjectTypes.oQuotations)
        oCotizacion.GetByKey(intNumCotizacion)

        decTipoCambio = oCotizacion.DocRate

        If decTipoCambio = 0 Or decTipoCambio = 1 Then
            oSBObob = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoBridge)
            oRecordset = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.BoRecordset)

            oRecordset = oSBObob.GetLocalCurrency()
            oRecordset.MoveFirst()
            If oRecordset.EoF Then
                Throw New Exception(My.Resources.Resource.MonedaLocalNoConfig)
            Else
                strMoneda = oRecordset.Fields.Item(0).Value
            End If

            oForm.Items.Item("txtTipoCam").Visible = False

        Else
            strMoneda = oCotizacion.DocCurrency
            oForm.Items.Item("txtTipoCam").Visible = True
        End If

        strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0)
        strUnidad = strUnidad.Trim()

        strTipoVeh = Utilitarios.EjecutarConsulta("Select U_Tipo from dbo.[@SCGD_Vehiculo]  with (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

        strBodegaAcc = objConfiguracionGeneral.AccesoriosXAlmacen(strTipoVeh)
        If String.IsNullOrEmpty(strBodegaAcc) Then
            strBodegaAcc = oDataTableConfiguracionesDMS.GetValue("U_SCGD_BodAcc", 0)
        End If

        strBodegaTram = Utilitarios.EjecutarConsulta("Select U_Bod_Tram from dbo.[@SCGD_ADMIN4]  with (nolock) where U_Tipo = '" & strTipoVeh & "' and Code = 'DMS'", m_oCompany.CompanyDB, m_oCompany.Server)

        For i As Integer = 0 To oCotizacion.Lines.Count - 1

            oCotizacion.Lines.SetCurrentLine(i)

            strArticulo = oCotizacion.Lines.ItemCode

            strNombreArticulo = oCotizacion.Lines.ItemDescription

            intCantArticulo = oCotizacion.Lines.Quantity

            If decTipoCambio = 0 Or decTipoCambio = 1 Then
                decPrecioArticulo = oCotizacion.Lines.Price
            Else
                decPrecioArticulo = oCotizacion.Lines.Price / decTipoCambio
            End If

            strTipoArticulo = Utilitarios.EjecutarConsulta("Select U_SCGD_TipoArticulo from OITM  with (nolock) where ItemCode = '" & strArticulo & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            If strTipoArticulo = "8" Then

                If decTipoCambio = 0 Or decTipoCambio = 1 Then
                    decPrecioTotal += CDec(oCotizacion.Lines.LineTotal)
                Else
                    decPrecioTotal += CDec(oCotizacion.Lines.RowTotalFC)
                End If

            ElseIf strTipoArticulo = "7" Then

                intContAcc = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").Offset

                'Agregado 17/05/2012 - Diego Herrera: Carga de costo de accesorios segun tipo de gestión de stock

                strGestStockAlm = Utilitarios.EjecutarConsulta("Select ByWh from OITM  with (nolock) where ItemCode = '" & strArticulo & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                If Not strGestStockAlm = "Y" Then

                    strCostoAcc = Utilitarios.EjecutarConsultaPrecios("Select AvgPrice from OITM  with (nolock) where ItemCode = '" & strArticulo & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                    If Not String.IsNullOrEmpty(strCostoAcc) Then
                        decCostoAcc = Decimal.Parse(strCostoAcc)
                    End If

                ElseIf strGestStockAlm = "Y" Then

                    strCostoAcc = Utilitarios.EjecutarConsultaPrecios("Select AvgPrice from OITW  with (nolock) where ItemCode = '" & strArticulo & "' And WhsCode = '" & strBodegaAcc & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                    If Not String.IsNullOrEmpty(strCostoAcc) Then
                        decCostoAcc = Decimal.Parse(strCostoAcc)
                    End If

                End If

                If Not (decTipoCambio = 0 Or decTipoCambio = 1) Then

                    decCostoAcc = decCostoAcc / decTipoCambio

                End If

                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").InsertRecord(intContAcc)
                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Acc", intContAcc, strArticulo)
                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_N_Acc", intContAcc, strNombreArticulo)
                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_SCGD_AccPrecio", intContAcc, decPrecioArticulo.ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Cant_Acc", intContAcc, intCantArticulo)
                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_AccPr_I", intContAcc, decPrecioArticulo.ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Cost_Acc", intContAcc, decCostoAcc.ToString(n))

                dtImpuesto = CargarImpuesto(oDataTable.GetValue("CardCode", 0).ToString(), "'" & strUnidad & "'")
                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Imp_Acc", intContAcc, dtImpuesto.GetValue("U_Cod_Imp", 0))

                blnAgregaAcc = True

            ElseIf strTipoArticulo = "9" Then

                intContTram = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").Offset

                'Agregado 17/05/2012 - Diego Herrera: Carga de costo de accesorios segun tipo de gestión de stock

                strGestStockAlm = Utilitarios.EjecutarConsulta("Select ByWh from OITM  with (nolock) where ItemCode = '" & strArticulo & "'", m_oCompany.CompanyDB, m_oCompany.Server)

                If Not strGestStockAlm = "Y" Then

                    strCostoTram = Utilitarios.EjecutarConsultaPrecios("Select AvgPrice from OITM  with (nolock) where ItemCode = '" & strArticulo & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                    If Not String.IsNullOrEmpty(strCostoTram) Then
                        decCostoTram = Decimal.Parse(strCostoTram)
                    End If

                ElseIf strGestStockAlm = "Y" Then

                    strCostoTram = Utilitarios.EjecutarConsultaPrecios("Select AvgPrice from OITW  with (nolock) where ItemCode = '" & strArticulo & "' And WhsCode = '" & strBodegaTram & "'", m_oCompany.CompanyDB, m_oCompany.Server)
                    If Not String.IsNullOrEmpty(strCostoTram) Then
                        decCostoTram = Decimal.Parse(strCostoTram)
                    End If

                End If

                If Not (decTipoCambio = 0 Or decTipoCambio = 1) Then

                    decCostoTram = decCostoTram / decTipoCambio

                End If

                oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").InsertRecord(intContTram)
                oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Cod_Tram", intContTram, strArticulo)
                oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Des_Tram", intContTram, strNombreArticulo)
                oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Pre_Uni", intContTram, decPrecioArticulo.ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Cant", intContTram, intCantArticulo)
                oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Costo", intContTram, decCostoTram.ToString(n))

                blnAgregaTram = True

            End If

        Next i

        If blnAgregaAcc = True Then
            oMatrixAccs.LoadFromDataSource()
        End If

        If blnAgregaTram = True Then
            oMatrixTramites.LoadFromDataSource()
        End If

        strNombreCotizacion = My.Resources.Resource.NumeroCotizacion & oDataTable.GetValue("DocNum", 0)

        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_NameCotiz", 0, strNombreCotizacion)
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CardCode", 0, oDataTable.GetValue("CardCode", 0))
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CardName", 0, oDataTable.GetValue("CardName", 0))
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CCl_Veh", 0, oDataTable.GetValue("CardCode", 0))
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_NCl_Veh", 0, oDataTable.GetValue("CardName", 0))

        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Mon_Cot", 0, decPrecioTotal.ToString(n))

        Call CalculaPrecioAccesorios(oForm)

        Call CalculaPrecioTramites(oForm)

        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Moneda", 0, strMoneda)
        If decTipoCambio = 0 Then
            decTipoCambio = 1
        End If
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_TipoCambio", 0, decTipoCambio)

        strCodigoVendedor = oDataTable.GetValue("SlpCode", 0)
        If strCodigoVendedor <> "-1" Then
            strNombreVendedor = Utilitarios.EjecutarConsulta("Select SlpName from OSLP  with (nolock) where SlpCode = " & strCodigoVendedor, m_oCompany.CompanyDB, m_oCompany.Server)

            Call AsignaValoresEditTextUIVendedor(strCodigoVendedor, strNombreVendedor, oForm)
            Call AsignaValoresEditTextUIPropietario(strCodigoVendedor, strNombreVendedor, oForm)

        End If
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_CodCotiz", 0, oDataTable.GetValue("DocEntry", 0))

        strCot = Convert.ToString((oDataTable.GetValue("DocNum", 0)))

        dataTable.SetValue(Column:="NumCot", rowIndex:=0, Value:=strCot)

        Dim txtItem As Item = oForm.Items.Item("txtNumCot")
        Dim txtSpecific As EditText = DirectCast(txtItem.Specific, EditText)

        txtSpecific.DataBind.Bind(UID:="COT", columnUid:="NumCot")

        Call FormateaPreciosBase(oForm)

    End Sub

    Private Sub AsignaValoresEnteFinancieroDeuda(ByVal oDataTable As SAPbouiCOM.DataTable, _
                                             ByVal oForm As SAPbouiCOM.Form)

        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Cod_Acre", 0, oDataTable.GetValue("CardCode", 0))
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Nam_Acre", 0, oDataTable.GetValue("CardName", 0))

    End Sub

    Private Sub AsignaValoresProveedores(ByVal oDataTable As SAPbouiCOM.DataTable, _
                                             ByVal oForm As SAPbouiCOM.Form)

        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Cod_ProvUS", 0, oDataTable.GetValue("CardCode", 0))
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Nom_ProvUS", 0, oDataTable.GetValue("CardName", 0))

    End Sub

    Public Sub AsignaValoresClienteContratante(ByVal oDataTable As SAPbouiCOM.DataTable, ByVal oForm As SAPbouiCOM.Form)
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CliConCod", 0, oDataTable.GetValue("CardCode", 0))
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CliConNom", 0, oDataTable.GetValue("CardName", 0))
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CliConRUT", 0, oDataTable.GetValue("LicTradNum", 0))
    End Sub

    Private Sub AsignaValoresEnteFinanciero(ByVal oDataTable As SAPbouiCOM.DataTable, _
                                             ByVal oForm As SAPbouiCOM.Form)

        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_CEnt_FP", 0, oDataTable.GetValue("BankCode", 0))
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Ent_Fin", 0, oDataTable.GetValue("BankName", 0))

    End Sub

    Public Sub FormateaPreciosBase(ByRef oForm As SAPbouiCOM.Form)

        Dim oItem As SAPbouiCOM.Item
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim oEditText As SAPbouiCOM.EditText

        Dim strPrecioListaBase As String
        Dim strPrecioVentaBase As String
        Dim strPrecioAccsBase As String
        Dim strGastosBase As String
        Dim strGastosPrendaBase As String
        Dim strPrimaBase As String
        Dim strUsadoBase As String
        Dim strDeudaUBase As String
        Dim strCreditoBase As String
        Dim strDebitoBase As String
        Dim strFinanciaBase As String
        Dim strFinanciaExternoBase As String
        Dim strAjusteBase As String
        Dim strPrendaBase As String
        Dim strAbonoMensBase As String
        Dim strCuotaTotalBase As String
        Dim strGastosLocBase As String
        Dim strPagosBase As String
        Dim strCotizacionBase As String
        Dim strTemporalUsadoBase As String
        Dim strImpuestoBase As String
        Dim strPrecioVehBase As String
        Dim strPagoVehBase As String
        Dim strGasLocVehTempBase As String
        Dim strOtrosTempVehBase As String
        Dim strUsadoValVentaBase As String
        Dim strBonoVehBase As String
        Dim strMontoNetoFinanciera As String
        Dim strMontoNetoAseguradora As String
        Dim strPrecioNetoBase As String
        Dim strOtrosCostos As String
        Dim strImpUsado As String
        Dim strTotalUsadocimp As String
        'Consignados
        Dim strCnsMontoNetoFacturar As String = String.Empty
        Dim strCnsMontoNeto As String = String.Empty
        Dim strCnsMontoIVA As String = String.Empty
        Dim strCnsMontoTotal As String = String.Empty

        Dim n As NumberFormatInfo



        Try
            oForm.Freeze(True)

            Dim service As CompanyService = m_oCompany.GetCompanyService()

            Dim info As AdminInfo = service.GetAdminInfo()
            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            m_objBLSBO.Set_Compania(m_oCompany)
            m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()

            strMonedaOrigen = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0)
            'oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_MonedaBase", 0, strMonedaOrigen)
            If Trim(strMonedaOrigen) = m_strMonedaLocal Then
                strTipoCambioMoneda = 1
            Else
                strTipoCambioMoneda = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0)
            End If
            If strTipoCambioMoneda = 0 Or String.IsNullOrEmpty(strTipoCambioMoneda) Then
                strTipoCambioMoneda = 1
            End If


            strPrecioListaBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0)
            strPrecioVentaBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0)
            strPrecioAccsBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Ext_Adi", 0)
            strGastosBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Ins", 0)
            strGastosPrendaBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Pre", 0)
            strPrimaBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deposito", 0)
            strUsadoBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Mon_Usa", 0)
            strImpUsado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ImpUsado", 0)
            strTotalUsadocimp = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_TotalCImpuest", 0)
            strDeudaUBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deu_Usa", 0)
            strCreditoBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Cre", 0)
            strDebitoBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Deb", 0)
            strFinanciaBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Financia", 0)
            strFinanciaExternoBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinanciaE", 0)
            strAjusteBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Val_Inv", 0)
            strPrendaBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Mon_pre", 0)
            strAbonoMensBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Abo_Men", 0)
            strCuotaTotalBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cuo_Tot", 0)
            strGastosLocBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Loc", 0)
            strPagosBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pagos", 0)
            strCotizacionBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Mon_Cot", 0)
            strTemporalUsadoBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Us", 0)
            strImpuestoBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Imp", 0)
            strPrecioVehBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vh", 0)
            strPagoVehBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pago_Vh", 0)
            strGasLocVehTempBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GL_Temp", 0)
            strOtrosTempVehBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_OG_Temp", 0)
            strUsadoValVentaBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ValVeh_Us", 0)
            strBonoVehBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_BonoVV", 0)
            strMontoNetoAseguradora = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MoNAs", 0)
            strMontoNetoFinanciera = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MoNFi", 0)
            strPrecioNetoBase = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_PreNet", 0)
            strOtrosCostos = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_OtrCos", 0)
            strCnsMontoNetoFacturar = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MNetoFC", 0)
            strCnsMontoNeto = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MNetoCns", 0)
            strCnsMontoIVA = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MIVACons", 0)
            strCnsMontoTotal = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MTotalCs", 0)

            oItem = oForm.Items.Item("mtx_0")

            oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            oMatrix.LoadFromDataSource()

            For i As Integer = 0 To oMatrix.RowCount - 1

                oEditText = DirectCast(oMatrix.Columns.Item("col_P").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decAccBase(i)
                decAccBase(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("col_PI").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decAccBaseIni(i)
                decAccBaseIni(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("Col_Cost").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decAccCostoBase(i)
                decAccCostoBase(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("col_Tot").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decAccTotalBase(i)
                decAccTotalBase(i) = Decimal.Parse(oEditText.Value, n)

            Next i

            oItem = oForm.Items.Item("mtx_1")

            oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            For i As Integer = 0 To oMatrix.RowCount - 1

                oEditText = DirectCast(oMatrix.Columns.Item("col_2").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decLineasSumMontoBase(i)
                decLineasSumMontoBase(i) = Decimal.Parse(oEditText.Value, n)

            Next i

            oItem = oForm.Items.Item("mtx_2")

            oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            For i As Integer = 0 To oMatrix.RowCount - 1

                oEditText = DirectCast(oMatrix.Columns.Item("col_3").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decLineasResMontoBase(i)
                decLineasResMontoBase(i) = Decimal.Parse(oEditText.Value, n)

            Next i

            'Guarda monto del Grid de Otros Costos, 08/07/2014
            oItem = oForm.Items.Item("mtx_OtrCos")

            oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            For i As Integer = 0 To oMatrix.RowCount - 1

                oEditText = DirectCast(oMatrix.Columns.Item("Col_Monto").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decOtrosCostosBase(i)
                decOtrosCostosBase(i) = Decimal.Parse(oEditText.Value, n)

            Next i

            oItem = oForm.Items.Item("mtx_Vehi")

            oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            For i As Integer = 0 To oMatrix.RowCount - 1

                oEditText = DirectCast(oMatrix.Columns.Item("Col_Prec").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decPrecioUnidadBase(i)
                decPrecioUnidadBase(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("Col_PreTot").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decPrecioTotalUnidadBase(i)
                decPrecioTotalUnidadBase(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("Col_Bono").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decBonos(i)
                decBonos(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("Col_PreNet").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decTotalNeto(i)
                decTotalNeto(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("Col_Pagos").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decPagoUnidadBase(i)
                decPagoUnidadBase(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("Col_GL").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decGasLocUnidadBase(i)
                decGasLocUnidadBase(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("Col_OG").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decOtrosUnidadBase(i)
                decOtrosUnidadBase(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("Col_Unidad").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve strCodUnid(i)
                strCodUnid(i) = oEditText.Value.ToString.Trim()

            Next i

            oItem = oForm.Items.Item("mtx_Usado")

            oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            For i As Integer = 0 To oMatrix.RowCount - 1

                oEditText = DirectCast(oMatrix.Columns.Item("col_VaReUs").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decValorReciboBase(i)
                decValorReciboBase(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("col_ImpUs").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decValorImpuestoBase(i)
                decValorImpuestoBase(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("col_TImpU").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decValorTCImpuestoBase(i)
                decValorTCImpuestoBase(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("col_ValVen").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decUsadosValVentaBase(i)
                decUsadosValVentaBase(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("col_AjCoUs").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decAjusteCostoBase(i)
                decAjusteCostoBase(i) = Decimal.Parse(oEditText.Value, n)

            Next i

            oItem = oForm.Items.Item("mtx_Pagos")

            oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            For i As Integer = 0 To oMatrix.RowCount - 1

                oEditText = DirectCast(oMatrix.Columns.Item("col_Mon").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decMontoPago(i)
                decMontoPago(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("col_Fecha").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve strFechaPago(i)

                Dim dt As Date

                dt = Date.ParseExact(oEditText.Value.ToString, "yyyyMMdd", Nothing)

                strFechaPago(i) = Utilitarios.RetornaFechaFormatoDB(dt, m_oCompany.Server, False)

                'strFechaPago(i) = oEditText.Value.ToString("yyyyMMdd")

                oEditText = DirectCast(oMatrix.Columns.Item("col_Unidad").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve strCodUnidPago(i)
                strCodUnidPago(i) = oEditText.Value.ToString.Trim()

                oEditText = DirectCast(oMatrix.Columns.Item("col_Doc").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve strDocNumPago(i)
                strDocNumPago(i) = oEditText.Value.ToString.Trim()

            Next i

            oItem = oForm.Items.Item("mtx_Tram")

            oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            For i As Integer = 0 To oMatrix.RowCount - 1

                oEditText = DirectCast(oMatrix.Columns.Item("col_PreUni").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decPrecioTramiteBase(i)
                decPrecioTramiteBase(i) = Decimal.Parse(oEditText.Value, n)

                oEditText = DirectCast(oMatrix.Columns.Item("col_Cost").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)
                ReDim Preserve decCostoTramiteBase(i)
                decCostoTramiteBase(i) = Decimal.Parse(oEditText.Value, n)

            Next i

            Call GuardaValoresBase(strMonedaOrigen, strTipoCambioMoneda, strPrecioVentaBase, strPrecioAccsBase, strGastosBase, strGastosPrendaBase, strPrimaBase, strUsadoBase, strDeudaUBase, strCreditoBase, strDebitoBase, strFinanciaBase, _
                                 strAjusteBase, strPrendaBase, strAbonoMensBase, strCuotaTotalBase, strGastosLocBase, strPagosBase, strCotizacionBase, strTemporalUsadoBase, strImpuestoBase, strPrecioVehBase, strPagoVehBase, _
                                 strGasLocVehTempBase, strOtrosTempVehBase, strUsadoValVentaBase, strBonoVehBase, strPrecioListaBase, strMontoNetoAseguradora, strMontoNetoFinanciera, strPrecioNetoBase, strOtrosCostos, strFinanciaExternoBase, strImpUsado, strTotalUsadocimp, strCnsMontoNetoFacturar, strCnsMontoNeto, strCnsMontoIVA, strCnsMontoTotal)
            oForm.Freeze(False)

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        Finally
            oForm.Freeze(False)
        End Try

    End Sub

    <System.CLSCompliant(False)> _
    Public Sub ManejoEventosCombo(ByRef oTmpForm As SAPbouiCOM.Form, _
                                  ByVal pval As SAPbouiCOM.ItemEvent, _
                                  ByVal FormUID As String, _
                                  ByRef BubbleEvent As Boolean, ByVal strMonedaOrigen As String, ByVal strTipoCambioMoneda As String)

        Try

            Dim strValorSeleccionado As String = String.Empty
            Dim cboCombo As SAPbouiCOM.ComboBox
            Dim oItem As SAPbouiCOM.Item
            Dim intRecIndex As Integer = 0
            Dim strUnidadUsado As String

            Dim strFechaContrato As String
            Dim dtFechaContrato As Date
            Dim blFecha As Boolean = True

            If pval.ItemUID = "cbFormPag" Then
                oItem = oTmpForm.Items.Item("cbFormPag")
                cboCombo = CType(oItem.Specific, SAPbouiCOM.ComboBox)
                If cboCombo.Selected Is Nothing Then
                    strValorSeleccionado = String.Empty
                Else
                    strValorSeleccionado = CStr(cboCombo.Selected.Value)
                End If
                If strValorSeleccionado = "2" Then
                    oTmpForm.Items.Item("cbFPNFin").Visible = True
                Else
                    oTmpForm.Items.Item("cbFPNFin").Visible = False
                    oItem = oTmpForm.Items.Item("cbFPNFin")
                    oTmpForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Seg_FPSF", 0, String.Empty)
                End If
            ElseIf pval.ItemUID = "cbFP_PC" Then
                oItem = oTmpForm.Items.Item("cbFP_PC")
                cboCombo = CType(oItem.Specific, SAPbouiCOM.ComboBox)
                If cboCombo.Selected Is Nothing Then
                    strValorSeleccionado = String.Empty
                Else
                    strValorSeleccionado = CStr(cboCombo.Selected.Value)
                End If
                If strValorSeleccionado = "2" Then
                    oTmpForm.Items.Item("st_Banc").Visible = True
                    oTmpForm.Items.Item("txt_Banc").Visible = True
                    oTmpForm.Items.Item("stNumChk").Visible = True
                    oTmpForm.Items.Item("txtNumChk").Visible = True
                Else
                    oTmpForm.Items.Item("st_Banc").Visible = False
                    oTmpForm.Items.Item("txt_Banc").Visible = False
                    oTmpForm.Items.Item("stNumChk").Visible = False
                    oTmpForm.Items.Item("txtNumChk").Visible = False
                    oForm.Items.Item("txt_Banc").Specific.value = String.Empty
                    oForm.Items.Item("txtNumChk").Specific.value = String.Empty
                End If
            ElseIf pval.ItemUID = mc_strMarcaUS Then
                oItem = oTmpForm.Items.Item(mc_strMarcaUS)
                cboCombo = CType(oItem.Specific, SAPbouiCOM.ComboBox)
                oItem.Enabled = True

                strValorSeleccionado = CStr(cboCombo.Selected.Value)

                Call CargarValidValuesEnCombos(oTmpForm, "Select Code,Name From [@SCGD_ESTILO]  with (nolock) Where U_Cod_Marc ='" & strValorSeleccionado & "' order by Name", mc_strEstiloUS)

                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Esti_us", 0, String.Empty)
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ModU", 0, String.Empty)

                oItem = oForm.Items.Item("cboModU")
                cboCombo = CType(oItem.Specific, SAPbouiCOM.ComboBox)

                'Borra los ValidValues
                If cboCombo.ValidValues.Count > 0 Then
                    For intRecIndex = 0 To cboCombo.ValidValues.Count - 1
                        cboCombo.ValidValues.Remove(cboCombo.ValidValues.Item(0).Value, SAPbouiCOM.BoSearchKey.psk_ByValue)
                    Next
                End If

            End If

            'Agregado 20/10/2010: Manejo de combo de moneda en CV para revisar tipo de cambio
            If pval.ItemUID = "cboModena" Then

                oItem = oTmpForm.Items.Item("cboModena")
                cboCombo = CType(oItem.Specific, SAPbouiCOM.ComboBox)

                strValorSeleccionado = CStr(cboCombo.Selected.Value)

                strFechaContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0)
                If strFechaContrato = "" Then
                    m_SBO_Application.MessageBox(My.Resources.Resource.MensajeFecha)
                    blFecha = False
                End If

                If blFecha = True Then
                    dtFechaContrato = Date.ParseExact(strFechaContrato, "yyyyMMdd", Nothing)
                    dtFechaContrato = New Date(dtFechaContrato.Year, dtFechaContrato.Month, dtFechaContrato.Day, 0, 0, 0)

                    m_objBLSBO.Set_Compania(m_oCompany)
                    m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
                    Configuracion.CrearCadenaDeconexion(m_oCompany.Server, m_oCompany.CompanyDB, m_strConectionString)
                    If m_strMonedaLocal <> Trim(strValorSeleccionado) Then
                        oForm.Items.Item("txtTipoCam").Visible = True
                        m_decTipoCambio = m_objBLSBO.RetornarTipoCambioMoneda(strValorSeleccionado, dtFechaContrato, m_strConectionString, False)
                        oForm.Items.Item("txtTipoCam").Enabled = m_BloqueaTipoCambio
                    Else
                        oForm.Items.Item("txtTipoCam").Visible = False
                        m_decTipoCambio = 1
                    End If

                    If strValorSeleccionado = strMonedaOrigen Then
                        m_decTipoCambio = Decimal.Parse(strTipoCambioMoneda, n)
                    End If

                    If m_decTipoCambio = -1 Then
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_TipoCambio", 0, 0)
                        m_SBO_Application.MessageBox(My.Resources.Resource.TipoCambioNoActualizado)
                        Call CalculaPreciosMoneda(oForm, strValorSeleccionado, strMonedaOrigen, strTipoCambioMoneda, dtFechaContrato)

                    Else
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_TipoCambio", 0, m_decTipoCambio.ToString(n))
                        Call CalculaPreciosMoneda(oForm, strValorSeleccionado, strMonedaOrigen, strTipoCambioMoneda, dtFechaContrato)
                    End If

                End If

            End If

            If pval.ItemUID = "cboTipo_Us" Then
                Dim strTipoInventario As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tip_Us", 0)
                calculaImpuestodeusado(BubbleEvent, strTipoInventario)
            End If

            If pval.ItemUID = "cboEsti_Us" Then

                oItem = oTmpForm.Items.Item("cboEsti_Us")
                cboCombo = CType(oItem.Specific, SAPbouiCOM.ComboBox)
                oItem.Enabled = True

                strValorSeleccionado = CStr(cboCombo.Selected.Value)

                Call CargarValidValuesEnCombos(oTmpForm, _
                                               "Select Code,U_Descripcion From [@SCGD_MODELO]  with (nolock) Where U_Cod_Esti ='" & strValorSeleccionado & "' order by U_Descripcion", _
                                               "cboModU")

            End If

            If pval.ItemUID = g_str_mtxBonos Then
                If pval.ColUID = g_str_ColBono And
                    pval.EventType = SAPbouiCOM.BoEventTypes.et_COMBO_SELECT Then
                End If
            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Public Sub ManejoEventoGotFocus(ByVal oForm As SAPbouiCOM.Form, ByVal pval As SAPbouiCOM.ItemEvent)

        Dim oItem As SAPbouiCOM.Item
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim oEditTextMonto As SAPbouiCOM.EditText

        Dim n As NumberFormatInfo

        Try

            Dim service As CompanyService = m_oCompany.GetCompanyService()

            Dim info As AdminInfo = service.GetAdminInfo()
            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            If pval.ItemUID = "txtTipoCam" Then

                g_decTipoCambioAntes = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0)

            End If

            If pval.ItemUID = "txtPre_Ven" Or pval.ItemUID = "238" Or pval.ItemUID = "txtExtras" Or pval.ItemUID = "txtGastos" Or pval.ItemUID = "txtGas_Pre" Or pval.ItemUID = "txtDeposit" Or pval.ItemUID = "txtUsado" _
             Or pval.ItemUID = "txtDeu_Usa" Or pval.ItemUID = "txtNota_Cr" Or pval.ItemUID = "txtNotaDeb" Or pval.ItemUID = "txtFinanci" Or pval.ItemUID = "txtMon_Fin" Or pval.ItemUID = "txtMon_Pre" _
             Or pval.ItemUID = "txtAbo_Men" Or pval.ItemUID = "txtCuo_Tot" Or pval.ItemUID = "txtGas_Loc" Or pval.ItemUID = "mtx_1" Or pval.ItemUID = "mtx_2" Then

                g_decPrecioVentaAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0), n)
                g_decTotalAccAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Ext_Adi", 0), n)
                g_decGastosAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Ins", 0), n)
                g_decGastosPrendaAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Pre", 0), n)
                g_decPrimaAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deposito", 0), n)
                g_decUsadoAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Mon_Usa", 0), n)
                g_decDeudaUAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deu_Usa", 0), n)
                g_decCreditoAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Cre", 0), n)
                g_decCreditoAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Cre", 0), n)
                g_decDebitoAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Deb", 0), n)
                g_decFinanciaAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Financia", 0), n)
                g_dbFinanciaExternoAntes = Double.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinanciaE", 0), n)
                g_decAjusteAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Val_Inv", 0), n)
                g_decPrendaAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Mon_pre", 0), n)
                g_decAbonoMensualAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Abo_Men", 0), n)
                g_decCuotaTotalAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cuo_Tot", 0), n)
                g_decGastosLocAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Loc", 0), n)
                g_decVentaUsadoAntes = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ValVeh_Us", 0), n)

                oItem = oForm.Items.Item("mtx_1")

                oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

                For i As Integer = 0 To oMatrix.RowCount - 1

                    oEditTextMonto = DirectCast(oMatrix.Columns.Item("col_2").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)

                    ReDim Preserve g_decLineasSumMontoAntes(i)
                    g_decLineasSumMontoAntes(i) = Decimal.Parse(oEditTextMonto.Value, n)

                Next i

                oItem = oForm.Items.Item("mtx_2")

                oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

                For i As Integer = 0 To oMatrix.RowCount - 1

                    oEditTextMonto = DirectCast(oMatrix.Columns.Item("col_3").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)

                    ReDim Preserve g_decLineasResMontoAntes(i)
                    g_decLineasResMontoAntes(i) = Decimal.Parse(oEditTextMonto.Value, n)

                Next i

            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub


    'Agregado 25/10/2010: Maneja eventos de modificacion en edit text
    Public Sub ManejoEventoValidate(ByVal oForm As SAPbouiCOM.Form, ByVal pval As SAPbouiCOM.ItemEvent)

        Dim decTipoCambioDespues As Decimal

        Dim precision As Decimal

        Dim decPrecioVenta As Decimal
        Dim decTotalAcc As Decimal
        Dim decGastos As Decimal
        Dim decGastosPrenda As Decimal
        Dim decPrima As Decimal
        Dim decUsado As Decimal
        Dim decVentaUsado As Decimal
        Dim decDeudaUsado As Decimal
        Dim decCredito As Decimal
        Dim decDebito As Decimal
        Dim decFinancia As Decimal
        Dim dbFinanciaExterno As Double
        Dim decAjuste As Decimal
        Dim decPrenda As Decimal
        Dim decAbonoMens As Decimal
        Dim decCuotaTotal As Decimal
        Dim decGastosLoc As Decimal

        'Campos de la pestaña consignados
        Dim decCnsMontoNetoFacturar As Decimal = 0
        Dim decCnsMontoNeto As Decimal = 0
        Dim decCnsIVA As Decimal = 0
        Dim decCnsTotal As Decimal = 0

        Dim decLineasSumMonto() As Decimal
        Dim decLineasResMonto() As Decimal

        Dim oMatrixAccesorios As SAPbouiCOM.Matrix

        Dim oItem As SAPbouiCOM.Item
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim oEditTextMonto As SAPbouiCOM.EditText
        Dim n As NumberFormatInfo
        Try

            Dim service As CompanyService = m_oCompany.GetCompanyService()

            Dim info As AdminInfo = service.GetAdminInfo()
            n = DIHelper.GetNumberFormatInfo(m_oCompany)
            precision = info.PriceAccuracy

            If pval.ItemUID = "txtTipoCam" AndAlso Not pval.BeforeAction Then

                decTipoCambioDespues = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0), n)

                If Math.Abs(decTipoCambioDespues - g_decTipoCambioAntes) > Math.Pow(10, -1 * precision) Then

                    Call FormateaPreciosBase(oForm)

                End If

            ElseIf (pval.ItemUID = "txtPre_Ven" Or pval.ItemUID = "238" Or pval.ItemUID = "txtExtras" Or pval.ItemUID = "txtGastos" Or pval.ItemUID = "txtGas_Pre" Or pval.ItemUID = "txtDeposit" Or pval.ItemUID = "txtUsado" _
             Or pval.ItemUID = "txtDeu_Usa" Or pval.ItemUID = "txtNota_Cr" Or pval.ItemUID = "txtNotaDeb" Or pval.ItemUID = "txtFinanci" Or pval.ItemUID = "txtMon_Fin" Or pval.ItemUID = "txtMon_Pre" _
             Or pval.ItemUID = "txtAbo_Men" Or pval.ItemUID = "txtCuo_Tot" Or pval.ItemUID = "txtGas_Loc" Or pval.ItemUID = "mtx_1" Or pval.ItemUID = "mtx_2" Or pval.ItemUID = "txtNetFa" Or pval.ItemUID = "txtNetoC" _
             Or pval.ItemUID = "txtIVAC" Or pval.ItemUID = "txtTotaC" Or pval.ItemUID = "txtClCon" Or pval.ItemUID = "txtInIVA") AndAlso Not pval.BeforeAction Then

                decPrecioVenta = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0), n)
                decTotalAcc = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Ext_Adi", 0), n)
                decGastos = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Ins", 0), n)
                decGastosPrenda = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Pre", 0), n)
                decPrima = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deposito", 0), n)
                decUsado = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Mon_Usa", 0), n)
                decDeudaUsado = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Deu_Usa", 0), n)
                decCredito = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Cre", 0), n)
                decDebito = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Nota_Deb", 0), n)
                decFinancia = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Financia", 0), n)
                dbFinanciaExterno = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinanciaE", 0), n)
                decAjuste = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Val_Inv", 0), n)
                decPrenda = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Mon_pre", 0), n)
                decAbonoMens = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Abo_Men", 0), n)
                decCuotaTotal = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cuo_Tot", 0), n)
                decGastosLoc = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Gas_Loc", 0), n)
                decVentaUsado = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ValVeh_Us", 0), n)
                decCnsMontoNetoFacturar = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MNetoFC", 0), n)
                decCnsMontoNeto = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MNetoCns", 0), n)
                decCnsIVA = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MIVACons", 0), n)
                decCnsTotal = Decimal.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MTotalCs", 0), n)
                oItem = oForm.Items.Item("mtx_1")

                oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

                For i As Integer = 0 To oMatrix.RowCount - 1

                    oEditTextMonto = DirectCast(oMatrix.Columns.Item("col_2").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)

                    ReDim Preserve decLineasSumMonto(i)
                    decLineasSumMonto(i) = Decimal.Parse(oEditTextMonto.Value, n)

                    ReDim Preserve g_decLineasSumMontoAntes(i)

                    If Math.Abs(decLineasSumMonto(i) - g_decLineasSumMontoAntes(i)) > Math.Pow(10, -1 * precision) Then

                        Call FormateaPreciosBase(oForm)

                    End If

                Next i

                oItem = oForm.Items.Item("mtx_2")

                oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

                For i As Integer = 0 To oMatrix.RowCount - 1

                    oEditTextMonto = DirectCast(oMatrix.Columns.Item("col_3").Cells.Item(i + 1).Specific, SAPbouiCOM.EditText)

                    ReDim Preserve decLineasResMonto(i)
                    decLineasResMonto(i) = Decimal.Parse(oEditTextMonto.Value, n)

                    ReDim Preserve g_decLineasResMontoAntes(i)

                    If Math.Abs(decLineasResMonto(i) - g_decLineasResMontoAntes(i)) > Math.Pow(10, -1 * precision) Then

                        Call FormateaPreciosBase(oForm)

                    End If

                Next i

                If Math.Abs(decPrecioVenta - g_decPrecioVentaAntes) > Math.Pow(10, -1 * precision) Or Math.Abs(decTotalAcc - g_decTotalAccAntes) > Math.Pow(10, -1 * precision) Or Math.Abs(decGastos - g_decGastosAntes) > Math.Pow(10, -1 * precision) _
                 Or Math.Abs(decGastosPrenda - g_decGastosPrendaAntes) > Math.Pow(10, -1 * precision) Or Math.Abs(decPrima - g_decPrimaAntes) > Math.Pow(10, -1 * precision) Or Math.Abs(decUsado - g_decUsadoAntes) > Math.Pow(10, -1 * precision) _
                 Or Math.Abs(decDeudaUsado - g_decDeudaUAntes) > Math.Pow(10, -1 * precision) Or Math.Abs(decCredito - g_decCreditoAntes) > Math.Pow(10, -1 * precision) Or Math.Abs(decDebito - g_decDebitoAntes) > Math.Pow(10, -1 * precision) _
                 Or Math.Abs(decFinancia - g_decFinanciaAntes) > Math.Pow(10, -1 * precision) Or Math.Abs(decAjuste - g_decAjusteAntes) > Math.Pow(10, -1 * precision) Or Math.Abs(decPrenda - g_decPrendaAntes) > Math.Pow(10, -1 * precision) _
                 Or Math.Abs(decAbonoMens - g_decAbonoMensualAntes) > Math.Pow(10, -1 * precision) Or Math.Abs(decCuotaTotal - g_decCuotaTotalAntes) > Math.Pow(10, -1 * precision) Or Math.Abs(decGastosLoc - g_decGastosLocAntes) > Math.Pow(10, -1 * precision) _
                 Or Math.Abs(decVentaUsado - g_decVentaUsadoAntes) > Math.Pow(10, -1 * precision) OrElse Math.Abs(dbFinanciaExterno - g_dbFinanciaExternoAntes) > Math.Pow(10, -1 * precision) Then

                    Call FormateaPreciosBase(oForm)

                End If

                If pval.ItemUID = "txtNetFa" Or pval.ItemUID = "txtNetoC" Or pval.ItemUID = "txtIVAC" Or pval.ItemUID = "txtTotaC" Or pval.ItemUID = "txtInIVA" Then
                    If decCnsMontoNetoFacturar > 0 Or decCnsMontoNeto > 0 Or decCnsIVA > 0 Or decCnsTotal > 0 Then
                        RecalcularTotalesConsignado(oForm)
                        Call FormateaPreciosBase(oForm)
                    End If
                End If

                'Valida que el campo Codigo cliente de la pestaña Consignados no este en blanco, en caso de estar en blanco limpia el campo
                'RUT y el nombre del cliente para consignado.
                If pval.ItemUID = "txtClCon" Then
                    Dim strCodigoCliente As String = String.Empty
                    strCodigoCliente = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_CodClCon", 0)
                    If String.IsNullOrEmpty(strCodigoCliente) Then
                        oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").SetValue("U_NomClCns", 0, String.Empty)
                        oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").SetValue("U_RUTCmsCns", 0, String.Empty)
                    End If

                End If



                'Agregado 18/01/2011: Maneja que si se modifica el precio de venta del contrato entonces pregunta modificado se ponga true
                If Math.Abs(decPrecioVenta - g_decPrecioVentaAntes) > Math.Pow(10, -1 * precision) Then

                    blnPreguntaPrecio = True

                End If

            End If

            If pval.BeforeAction = True Then

                oMatrixAccesorios = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

                oMatrixAccesorios.FlushToDataSource()

            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    Private Sub GuardaValoresBase(ByVal strMoneda As String, ByVal strTipoCambio As String, ByVal strPrecioVenta As String, ByVal strPrecioAccs As String, ByVal strGastos As String, ByVal strGastosPrenda As String, ByVal strPrima As String, _
                                 ByVal strUsado As String, ByVal strDeudaUsado As String, ByVal strCredito As String, ByVal strDebito As String, ByVal strFinancia As String, ByVal strAjuste As String, ByVal strPrenda As String, _
                                 ByVal strAbonoMensual As String, ByVal strCuotaTotal As String, ByVal strGastosLocales As String, ByVal strPagos As String, ByVal strCotizacion As String, ByVal strTempUsado As String, _
                                 ByVal strImpuesto As String, ByVal strPrecioVeh As String, ByVal strPagoVeh As String, ByVal strGasLocVeh As String, ByVal strOtrosVeh As String, ByVal strValVentaUs As String, ByVal strBono As String, ByVal strPrecioLista As String, _
                                 ByVal strMontoNetoAseguradora As String, ByVal strMontoNetoFinanciera As String, ByVal strPrecioNeto As String, _
                                 ByVal strOtrosCostos As String, ByVal strFinanciaExternoBase As String, ByVal strImpUsado As String, ByVal strTotalUsadocimp As String, _
                                 ByVal strCnsMontoNetoFacturar As String, ByVal strCnsMontoNeto As String, ByVal strCnsMontoIVA As String, ByVal strCnsMontoTotal As String)


        Dim decTipoCambio As Decimal
        Dim decPrecioLista As Decimal
        Dim decPrecioVenta As Decimal
        Dim decPrecioAccs As Decimal
        Dim decGastos As Decimal
        Dim decGastosPrenda As Decimal
        Dim decPrima As Decimal
        Dim decUsado As Decimal
        Dim decDeudaUsado As Decimal
        Dim decCredito As Decimal
        Dim decDebito As Decimal
        Dim decFinancia As Decimal
        Dim dbFinanciaExterno As Double
        Dim decAjuste As Decimal
        Dim decPrenda As Decimal
        Dim decAbonoMensual As Decimal
        Dim decCuotaTotal As Decimal
        Dim decGastosLocales As Decimal
        Dim decPagos As Decimal
        Dim decCotizacion As Decimal
        Dim decTemUsado As Decimal
        Dim decTempImpUsado As Decimal
        Dim decTempTotalCImpUsa As Decimal
        Dim decImpuesto As Decimal
        Dim decPrecioVeh As Decimal
        Dim decPagoVeh As Decimal
        Dim decAccVeh As Decimal
        Dim decGasLocVeh As Decimal
        Dim decOtrosVeh As Decimal
        Dim decUsadoValVenta As Decimal
        Dim decBonoVeh As Decimal
        Dim decMontoNetoAseguradora As Decimal
        Dim decMontoNetoFinanciera As Decimal
        Dim decPrecioNeto As Decimal
        Dim decOtroCostos As Decimal
        Dim decCnsMontoNetoFacturar As Decimal = 0
        Dim decCnsMontoNeto As Decimal = 0
        Dim decCnsMontoIVA As Decimal = 0
        Dim decCnsMontoTotal As Decimal = 0


        Dim n As NumberFormatInfo

        Try
            Dim service As CompanyService = m_oCompany.GetCompanyService()

            Dim info As AdminInfo = service.GetAdminInfo()
            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            If Not String.IsNullOrEmpty(strTipoCambio) Then
                decTipoCambio = Decimal.Parse(strTipoCambio, n)
            Else
                decTipoCambio = 0
            End If
            If Not String.IsNullOrEmpty(strPrecioVenta) Then
                decPrecioVenta = Decimal.Parse(strPrecioVenta, n)
            Else
                decPrecioVenta = 0
            End If
            If Not String.IsNullOrEmpty(strPrecioAccs) Then
                decPrecioAccs = Decimal.Parse(strPrecioAccs, n)
            Else
                decPrecioAccs = 0
            End If
            If Not String.IsNullOrEmpty(strGastos) Then
                decGastos = Decimal.Parse(strGastos, n)
            Else
                decGastos = 0
            End If
            If Not String.IsNullOrEmpty(strGastosPrenda) Then
                decGastosPrenda = Decimal.Parse(strGastosPrenda, n)
            Else
                decGastosPrenda = 0
            End If
            If Not String.IsNullOrEmpty(strPrima) Then
                decPrima = Decimal.Parse(strPrima, n)
            Else
                decPrima = 0
            End If
            If Not String.IsNullOrEmpty(strUsado) Then
                decUsado = Decimal.Parse(strUsado, n)
            Else
                decUsado = 0
            End If
            If Not String.IsNullOrEmpty(strDeudaUsado) Then
                decDeudaUsado = Decimal.Parse(strDeudaUsado, n)
            Else
                decDeudaUsado = 0
            End If
            If Not String.IsNullOrEmpty(strCredito) Then
                decCredito = Decimal.Parse(strCredito, n)
            Else
                decCredito = 0
            End If
            If Not String.IsNullOrEmpty(strDebito) Then
                decDebito = Decimal.Parse(strDebito, n)
            Else
                decDebito = 0
            End If
            If Not String.IsNullOrEmpty(strFinancia) Then
                decFinancia = Decimal.Parse(strFinancia, n)
            Else
                decFinancia = 0
            End If
            If Not String.IsNullOrEmpty(strFinanciaExternoBase) Then
                dbFinanciaExterno = Double.Parse(strFinanciaExternoBase, n)
            Else
                dbFinanciaExterno = 0
            End If
            If Not String.IsNullOrEmpty(strAjuste) Then
                decAjuste = Decimal.Parse(strAjuste, n)
            Else
                decAjuste = 0
            End If
            If Not String.IsNullOrEmpty(strPrenda) Then
                decPrenda = Decimal.Parse(strPrenda, n)
            Else
                decPrenda = 0
            End If
            If Not String.IsNullOrEmpty(strAbonoMensual) Then
                decAbonoMensual = Decimal.Parse(strAbonoMensual, n)
            Else
                decAbonoMensual = 0
            End If
            If Not String.IsNullOrEmpty(strCuotaTotal) Then
                decCuotaTotal = Decimal.Parse(strCuotaTotal, n)
            Else
                decCuotaTotal = 0
            End If
            If Not String.IsNullOrEmpty(strGastosLocales) Then
                decGastosLocales = Decimal.Parse(strGastosLocales, n)
            Else
                decGastosLocales = 0
            End If
            If Not String.IsNullOrEmpty(strPagos) Then
                decPagos = Decimal.Parse(strPagos, n)
            Else
                decPagos = 0
            End If
            If Not String.IsNullOrEmpty(strCotizacion) Then
                decCotizacion = Decimal.Parse(strCotizacion, n)
            Else
                decCotizacion = 0
            End If
            If Not String.IsNullOrEmpty(strTempUsado) Then
                decTemUsado = Decimal.Parse(strTempUsado, n)
            Else
                decTemUsado = 0
            End If
            If Not String.IsNullOrEmpty(strImpuesto) Then
                decImpuesto = Decimal.Parse(strImpuesto, n)
            Else
                decImpuesto = 0
            End If
            If Not String.IsNullOrEmpty(strPrecioVeh) Then
                decPrecioVeh = Decimal.Parse(strPrecioVeh, n)
            Else
                decPrecioVeh = 0
            End If
            If Not String.IsNullOrEmpty(strPagoVeh) Then
                decPagoVeh = Decimal.Parse(strPagoVeh, n)
            Else
                decPagoVeh = 0
            End If
            If Not String.IsNullOrEmpty(strGasLocVeh) Then
                decGasLocVeh = Decimal.Parse(strGasLocVeh, n)
            Else
                decGasLocVeh = 0
            End If
            If Not String.IsNullOrEmpty(strOtrosVeh) Then
                decOtrosVeh = Decimal.Parse(strOtrosVeh, n)
            Else
                decOtrosVeh = 0
            End If
            If Not String.IsNullOrEmpty(strValVentaUs) Then
                decUsadoValVenta = Decimal.Parse(strValVentaUs, n)
            Else
                decUsadoValVenta = 0
            End If
            If Not String.IsNullOrEmpty(strBono) Then
                decBonoVeh = Decimal.Parse(strBono, n)
            Else
                decBonoVeh = 0
            End If
            If Not String.IsNullOrEmpty(strPrecioLista) Then
                decPrecioLista = Decimal.Parse(strPrecioLista, n)
            Else
                decPrecioLista = 0
            End If
            If Not String.IsNullOrEmpty(strMontoNetoAseguradora) Then
                decMontoNetoAseguradora = Decimal.Parse(strMontoNetoAseguradora, n)
            Else
                decMontoNetoAseguradora = 0
            End If
            If Not String.IsNullOrEmpty(strMontoNetoFinanciera) Then
                decMontoNetoFinanciera = Decimal.Parse(strMontoNetoFinanciera, n)
            Else
                decMontoNetoFinanciera = 0
            End If
            If Not String.IsNullOrEmpty(strPrecioNeto) Then
                decPrecioNeto = Decimal.Parse(strPrecioNeto, n)
            Else
                decPrecioNeto = 0
            End If

            If Not String.IsNullOrEmpty(strOtrosCostos) Then
                decOtroCostos = Decimal.Parse(strOtrosCostos, n)
            Else
                decOtroCostos = 0
            End If

            If Not String.IsNullOrEmpty(strImpUsado) Then
                decTempImpUsado = Decimal.Parse(strImpUsado, n)
            Else
                decTempImpUsado = 0
            End If

            If Not String.IsNullOrEmpty(strTotalUsadocimp) Then
                decTempTotalCImpUsa = Decimal.Parse(strTotalUsadocimp, n)
            Else
                decTempTotalCImpUsa = 0
            End If

            'Campos de la pestaña consignado

            If Not String.IsNullOrEmpty(strCnsMontoNetoFacturar) Then
                decCnsMontoNetoFacturar = Decimal.Parse(strCnsMontoNetoFacturar, n)
            Else
                decCnsMontoNetoFacturar = 0
            End If

            If Not String.IsNullOrEmpty(strCnsMontoNeto) Then
                decCnsMontoNeto = Decimal.Parse(strCnsMontoNeto, n)
            Else
                decCnsMontoNeto = 0
            End If

            If Not String.IsNullOrEmpty(strCnsMontoIVA) Then
                decCnsMontoIVA = Decimal.Parse(strCnsMontoIVA, n)
            Else
                decCnsMontoIVA = 0
            End If

            If Not String.IsNullOrEmpty(strCnsMontoTotal) Then
                decCnsMontoTotal = Decimal.Parse(strCnsMontoTotal, n)
            Else
                decCnsMontoTotal = 0
            End If


            ItemsValoresBase.g_strMonedaBase = strMoneda
            ItemsValoresBase.g_decTipoCambioBase = decTipoCambio
            ItemsValoresBase.g_decPrecioVentaBase = decPrecioVenta
            ItemsValoresBase.g_decPrecioAccesorios = decPrecioAccs
            ItemsValoresBase.g_decGastosBase = decGastos
            ItemsValoresBase.g_decGastosPrendaBase = decGastosPrenda
            ItemsValoresBase.g_decPrimaBase = decPrima
            ItemsValoresBase.g_decUsadoBase = decUsado
            ItemsValoresBase.g_decDeudaUBase = decDeudaUsado
            ItemsValoresBase.g_decCreditoBase = decCredito
            ItemsValoresBase.g_decDebitoBase = decDebito
            ItemsValoresBase.g_decFinanciaBase = decFinancia
            ItemsValoresBase.g_decFinanciaExternoBase = dbFinanciaExterno
            ItemsValoresBase.g_decAjusteBase = decAjuste
            ItemsValoresBase.g_decPrendaBase = decPrenda
            ItemsValoresBase.g_decAbonoMensBase = decAbonoMensual
            ItemsValoresBase.g_decCuotaTotalBase = decCuotaTotal
            ItemsValoresBase.g_decGastosLocBase = decGastosLocales
            ItemsValoresBase.g_decPagosBase = decPagos
            ItemsValoresBase.g_decCotizacionBase = decCotizacion
            ItemsValoresBase.g_decTempUsadoBase = decTemUsado
            ItemsValoresBase.g_decTempImpUsado = decTempImpUsado
            ItemsValoresBase.g_decTempTotalCImpUsa = decTempTotalCImpUsa
            ItemsValoresBase.g_decImpuestoBase = decImpuesto
            ItemsValoresBase.g_decPrecioVehBase = decPrecioVeh
            ItemsValoresBase.g_decPagoVehBase = decPagoVeh
            ItemsValoresBase.g_decGasLocVehBase = decGasLocVeh
            ItemsValoresBase.g_decOtrosVehBase = decOtrosVeh
            ItemsValoresBase.g_decUsadoValVenta = decUsadoValVenta
            ItemsValoresBase.g_decBonoVehBase = decBonoVeh
            ItemsValoresBase.g_decPrecioListaBase = decPrecioLista
            ItemsValoresBase.g_decMontoNetoAseguradoraBase = decMontoNetoAseguradora
            ItemsValoresBase.g_decMontoNetoFinancieraBase = decMontoNetoFinanciera
            ItemsValoresBase.g_decPrecioNetoBase = decPrecioNeto
            ItemsValoresBase.g_decOtrosCostos = decOtroCostos
            ItemsValoresBase.g_decCnsMontoNetoFacturar = decCnsMontoNetoFacturar
            ItemsValoresBase.g_decCnsMontoNeto = decCnsMontoNeto
            ItemsValoresBase.g_decCnsMontoIVA = decCnsMontoIVA
            ItemsValoresBase.g_decCnsMontoTotal = decCnsMontoTotal

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    Private Function ObtenerMontoPago(ByVal p_NoPago As String, ByVal p_TCContrato As String, ByVal p_Moneda As String) As Decimal
        Try
            Dim strConsulta As String = ""
            Dim decMonto As Decimal = 0



            strConsulta = "Declare @TCContrato as numeric " & _
                        " Declare @MonedaContrato as varchar(10) " & _
                        " Declare @MainCurrncy as varchar(10) " & _
                        " Declare @DocNum as int " & _
                        " Select @MainCurrncy = MainCurncy  from OADM " & _
                        " set @TCContrato= " & p_TCContrato & " " & _
                        " set @MonedaContrato ='" & p_Moneda & "' " & _
                        " set @DocNum = " & p_NoPago & "" & _
                        " Select Top 1  " & _
                        " Isnull((Case  " & _
                        " when @MainCurrncy=  @MonedaContrato then DocTotal  " & _
                        " when @MainCurrncy= DocCurr  then (DocTotal/@TCContrato) " & _
                        " when DocCurr=  @MonedaContrato then DocTotalFC  " & _
                        " else (DocTotal/rate)  " & _
                        " end),0) as DocTotal  " & _
                        " from ORCT  with (nolock) LEFT OUTER JOIN ORTT  with (nolock) ON Currency = @MonedaContrato AND RateDate = DocDate " & _
                        " where DocNum = @DocNum "


            decMonto = Utilitarios.EjecutarConsultaDecimal(strConsulta, m_oCompany.CompanyDB, m_oCompany.Server)

            If decMonto = -1 Then
                decMonto = 0
            End If

            Return decMonto
        Catch ex As Exception

        End Try
    End Function

    'Metodo para calcular los precios a mostrar en el contrato al cambiar el combo de moneda
    Private Sub CalculaPreciosMoneda(ByVal oForm As SAPbouiCOM.Form, ByVal strMoneda As String, ByVal strMonedaOrigen As String, ByVal strTipoCambioMoneda As String, ByVal dtFecha As Date)

        Dim strMonedaBase As String
        Dim decPrecioListaBase As Decimal
        Dim decPrecioVentaBase As Decimal
        Dim decTotalAccBase As Decimal
        Dim decGastosBase As Decimal
        Dim decGastosPrendaBase As Decimal
        Dim decPrimaBase As Decimal
        Dim decUsadoBase As Decimal
        Dim decUsadoValVentaBase As Decimal
        Dim decDeudaUBase As Decimal
        Dim decCreditoBase As Decimal
        Dim decDebitoBase As Decimal
        Dim decFinanciaBase As Decimal
        Dim decFinanciaExternoBase As Double
        Dim decAjusteBase As Decimal
        Dim decPrendaBase As Decimal
        Dim decAbonoMensBase As Decimal
        Dim decCuotaTotalBase As Decimal
        Dim decGastosLocBase As Decimal
        Dim decPagosBase As Decimal
        Dim decCotizacionBase As Decimal
        Dim decTempUsadoBase As Decimal
        Dim decTempImpUsado As Decimal
        Dim decTempTotalCImpUsa As Decimal
        Dim decImpuestoBase As Decimal
        Dim decPrecioVehBase As Decimal
        Dim decPagoVehBase As Decimal
        Dim decGasLocVehBase As Decimal
        Dim decOtrosVehBase As Decimal
        Dim decBonoVehBase As Decimal
        Dim decPrecioNetoBase As Decimal
        Dim decOtrosCostos As Decimal

        Dim decMonNFiBase As Decimal
        Dim decMonNAsBase As Decimal

        Dim decTipoCambioOrigen As Decimal

        Dim strFecha As String
        Dim strNumeroCV As String
        Dim decTipoCambio As Decimal
        Dim decTipoCambioDestino As Decimal
        Dim strTCDestino As String

        Dim decPrecioListaCV As Decimal
        Dim decPrecioVentaCV As Decimal
        Dim decTotalAccCV As Decimal
        Dim decGastosCV As Decimal
        Dim decGastosPrendaCV As Decimal
        Dim decPrimaCV As Decimal
        Dim decUsadoCV As Decimal
        Dim decUsadoValVentaCV As Decimal
        Dim decDeudaUCV As Decimal
        Dim decCreditoCV As Decimal
        Dim decDebitoCV As Decimal
        Dim decFinanciaCV As Decimal
        Dim dbFinanciaExternoCV As Decimal
        Dim decAjusteCV As Decimal
        Dim decPrendaCV As Decimal
        Dim decAbonoMensCV As Decimal
        Dim decCuotaTotalCV As Decimal
        Dim decGastosLocCV As Decimal
        Dim decPagosCV As Decimal
        Dim decCotizacionCV As Decimal
        Dim decTempUsadoCV As Decimal
        Dim decTempImpUsadoCV As Decimal
        Dim decTempTotalCImpUsaCV As Decimal
        Dim decImpuestoCV As Decimal
        Dim decPrecioVehCV As Decimal
        Dim decPagoVehCV As Decimal
        Dim decGasLocVehCV As Decimal
        Dim decOtrosVehCV As Decimal
        Dim decBonoVehCV As Decimal
        Dim decPrecioNetoCV As Decimal
        Dim decOtrosCostosCV As Decimal

        Dim decMonNFi As Decimal
        Dim decMonNAs As Decimal

        'Campos pestaña consignados
        Dim decCnsMontoNetoFacturarCV As Decimal = 0
        Dim decCnsMontoNetoCV As Decimal = 0
        Dim decCnsMontoIVACV As Decimal = 0
        Dim decCnsMontoTotalCV As Decimal = 0
        Dim decCnsMontoNetoFacturarBase As Decimal = 0
        Dim decCnsMontoNetoBase As Decimal = 0
        Dim decCnsMontoIVABase As Decimal = 0
        Dim decCnsMontoTotalBase As Decimal = 0

        Dim oItem As SAPbouiCOM.Item
        Dim oMatrix As SAPbouiCOM.Matrix
        Dim oMatrixSum As SAPbouiCOM.Matrix
        Dim oMatrixRes As SAPbouiCOM.Matrix
        Dim oMatrixUnidades As SAPbouiCOM.Matrix
        Dim oMatrixUsados As SAPbouiCOM.Matrix
        Dim oMatrixPagos As SAPbouiCOM.Matrix
        Dim oMatrixTramites As SAPbouiCOM.Matrix
        Dim oMatrixOtrosCostos As SAPbouiCOM.Matrix

        Dim UsaTCContrato As String = String.Empty
        Dim dtFechaContabilizacionCV As Date

        Dim n As NumberFormatInfo


        Try
            m_objBLSBO.Set_Compania(m_oCompany)
            m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()
            n = DIHelper.GetNumberFormatInfo(m_oCompany)

            strFecha = dtFecha
            decTipoCambioOrigen = Utilitarios.EjecutarConsultaPrecios("Select Rate from [ORTT]  with (nolock) where Currency = '" & strMonedaOrigen & "' and RateDate = '" & CDate(strFecha).ToString("yyyyMMdd") & "'", m_oCompany.CompanyDB, m_oCompany.Server)
            If decTipoCambioOrigen = 0 Or decTipoCambioOrigen = -1 Then
                decTipoCambioOrigen = 1
            End If

            dtFechaContabilizacionCV = Date.Now

            UsaTCContrato = oDataTableConfiguracionesDMS.GetValue("U_TCCont", 0).trim

            If UsaTCContrato = "Y" Then
                decTipoCambioDestino = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0), n)
            Else
                decTipoCambioDestino = m_objBLSBO.RetornarTipoCambioMoneda(strMoneda, dtFechaContabilizacionCV, m_strConectionString, False)
            End If

            If decTipoCambioDestino = 0 Or decTipoCambioDestino = -1 Then
                decTipoCambioDestino = 1
            End If

            strTCDestino = decTipoCambioDestino.ToString().Trim()
            strTCDestino = strTCDestino.Replace(",", ".")


            strNumeroCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0)

            If Not ItemsValoresBase.g_decTipoCambioBase = 0 Then
                decTipoCambio = ItemsValoresBase.g_decTipoCambioBase
            Else
                decTipoCambio = 1
            End If

            '************************************************************
            decPrecioListaBase = ItemsValoresBase.g_decPrecioListaBase
            decPrecioVentaBase = ItemsValoresBase.g_decPrecioVentaBase
            decTotalAccBase = ItemsValoresBase.g_decPrecioAccesorios
            decGastosBase = ItemsValoresBase.g_decGastosBase
            decGastosPrendaBase = ItemsValoresBase.g_decGastosPrendaBase
            decPrimaBase = ItemsValoresBase.g_decPrimaBase
            decUsadoBase = ItemsValoresBase.g_decUsadoBase
            decDeudaUBase = ItemsValoresBase.g_decDeudaUBase
            decCreditoBase = ItemsValoresBase.g_decCreditoBase
            decDebitoBase = ItemsValoresBase.g_decDebitoBase
            decFinanciaBase = ItemsValoresBase.g_decFinanciaBase
            decFinanciaExternoBase = ItemsValoresBase.g_decFinanciaExternoBase
            decAjusteBase = ItemsValoresBase.g_decAjusteBase
            decPrendaBase = ItemsValoresBase.g_decPrendaBase
            decAbonoMensBase = ItemsValoresBase.g_decAbonoMensBase
            decCuotaTotalBase = ItemsValoresBase.g_decCuotaTotalBase
            decGastosLocBase = ItemsValoresBase.g_decGastosLocBase
            decPagosBase = ItemsValoresBase.g_decPagosBase
            decCotizacionBase = ItemsValoresBase.g_decCotizacionBase
            decTempUsadoBase = ItemsValoresBase.g_decTempUsadoBase
            decTempImpUsado = ItemsValoresBase.g_decTempImpUsado
            decTempTotalCImpUsa = ItemsValoresBase.g_decTempTotalCImpUsa
            decImpuestoBase = ItemsValoresBase.g_decImpuestoBase
            decPrecioVehBase = ItemsValoresBase.g_decPrecioVehBase
            decPagoVehBase = ItemsValoresBase.g_decPagoVehBase
            decGasLocVehBase = ItemsValoresBase.g_decGasLocVehBase
            decOtrosVehBase = ItemsValoresBase.g_decOtrosVehBase
            decUsadoValVentaBase = ItemsValoresBase.g_decUsadoValVenta
            decBonoVehBase = ItemsValoresBase.g_decBonoVehBase
            decMonNAsBase = ItemsValoresBase.g_decMontoNetoAseguradoraBase
            decMonNFiBase = ItemsValoresBase.g_decMontoNetoFinancieraBase
            decPrecioNetoBase = ItemsValoresBase.g_decPrecioNetoBase
            decOtrosCostos = ItemsValoresBase.g_decOtrosCostos
            decCnsMontoNetoFacturarBase = ItemsValoresBase.g_decCnsMontoNetoFacturar
            decCnsMontoNetoBase = ItemsValoresBase.g_decCnsMontoNeto
            decCnsMontoIVABase = ItemsValoresBase.g_decCnsMontoIVA
            decCnsMontoTotalBase = ItemsValoresBase.g_decCnsMontoTotal

            oItem = oForm.Items.Item("mtx_0")
            oMatrix = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            Dim decAccPrecioBase(oMatrix.RowCount - 1) As Decimal
            Dim decAccPrecioCV(oMatrix.RowCount - 1) As Decimal

            Dim decAccPrecioIniBase(oMatrix.RowCount - 1) As Decimal
            Dim decAccPrecioIniCV(oMatrix.RowCount - 1) As Decimal

            Dim decCostoAccBase(oMatrix.RowCount - 1) As Decimal
            Dim decCostoAccCV(oMatrix.RowCount - 1) As Decimal

            Dim decTotalLineaAccBase(oMatrix.RowCount - 1) As Decimal
            Dim decTotalLineaAccCV(oMatrix.RowCount - 1) As Decimal

            For i As Integer = 0 To oMatrix.RowCount - 1

                decAccPrecioBase(i) = decAccBase(i)

                decAccPrecioIniBase(i) = decAccBaseIni(i)

                decCostoAccBase(i) = decAccCostoBase(i)

                decTotalLineaAccBase(i) = decAccTotalBase(i)

            Next i

            oItem = oForm.Items.Item("mtx_1")
            oMatrixSum = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            Dim decLineasSumMontoB(oMatrixSum.RowCount - 1) As Decimal
            Dim decLineasSumMontoCV(oMatrixSum.RowCount - 1) As Decimal

            For i As Integer = 0 To oMatrixSum.RowCount - 1
                decLineasSumMontoB(i) = decLineasSumMontoBase(i)
            Next i

            'Otros Costos 08/07/2014
            oItem = oForm.Items.Item("mtx_OtrCos")
            oMatrixOtrosCostos = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            Dim decLineasOtrosCostosB(oMatrixOtrosCostos.RowCount - 1) As Decimal
            Dim decLineasOtrosCostosCV(oMatrixOtrosCostos.RowCount - 1) As Decimal

            For i As Integer = 0 To oMatrixOtrosCostos.RowCount - 1
                decLineasOtrosCostosB(i) = decOtrosCostosBase(i)
            Next i

            oItem = oForm.Items.Item("mtx_2")
            oMatrixRes = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            Dim decLineasResMontoB(oMatrixRes.RowCount - 1) As Decimal
            Dim decLineasResMontoCV(oMatrixRes.RowCount - 1) As Decimal

            For i As Integer = 0 To oMatrixRes.RowCount - 1
                decLineasResMontoB(i) = decLineasResMontoBase(i)
            Next i

            oItem = oForm.Items.Item("mtx_Vehi")
            oMatrixUnidades = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            Dim decUnidadesMontoB(oMatrixUnidades.RowCount - 1) As Decimal
            Dim decUnidadesMontoCV(oMatrixUnidades.RowCount - 1) As Decimal

            Dim decUnidadesTotalB(oMatrixUnidades.RowCount - 1) As Decimal
            Dim decUnidadesTotalCV(oMatrixUnidades.RowCount - 1) As Decimal

            Dim decUnidadesPagoB(oMatrixUnidades.RowCount - 1) As Decimal
            Dim decUnidadesPagoCV(oMatrixUnidades.RowCount - 1) As Decimal

            Dim decUnidadesAccB(oMatrixUnidades.RowCount - 1) As Decimal
            Dim decUnidadesAccCV(oMatrixUnidades.RowCount - 1) As Decimal

            Dim decUnidadesGasLocB(oMatrixUnidades.RowCount - 1) As Decimal
            Dim decUnidadesGasLocCV(oMatrixUnidades.RowCount - 1) As Decimal

            Dim decUnidadesOtrosB(oMatrixUnidades.RowCount - 1) As Decimal
            Dim decUnidadesOtrosCV(oMatrixUnidades.RowCount - 1) As Decimal

            Dim decUnidadesBonosB(oMatrixUnidades.RowCount - 1) As Decimal
            Dim decUnidadesBonosCV(oMatrixUnidades.RowCount - 1) As Decimal

            Dim decUnidadesTotalNetB(oMatrixUnidades.RowCount - 1) As Decimal
            Dim decUnidadesTotalNetCV(oMatrixUnidades.RowCount - 1) As Decimal


            For i As Integer = 0 To oMatrixUnidades.RowCount - 1
                decUnidadesMontoB(i) = decPrecioUnidadBase(i)
                decUnidadesTotalB(i) = decPrecioTotalUnidadBase(i)
                decUnidadesPagoB(i) = decPagoUnidadBase(i)

                decUnidadesGasLocB(i) = decGasLocUnidadBase(i)
                decUnidadesOtrosB(i) = decOtrosUnidadBase(i)

                decUnidadesBonosB(i) = decBonos(i)
                decUnidadesTotalNetB(i) = decTotalNeto(i)
            Next i

            oItem = oForm.Items.Item("mtx_Usado")
            oMatrixUsados = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            Dim decUsadosValorB(oMatrixUsados.RowCount - 1) As Decimal
            Dim decUsadosValorCV(oMatrixUsados.RowCount - 1) As Decimal
            Dim decUsadosValorImpuestoCV(oMatrixUsados.RowCount - 1) As Decimal
            Dim decUsadosValorTotalCImpCV(oMatrixUsados.RowCount - 1) As Decimal
            Dim decUsadosValVentaB(oMatrixUsados.RowCount - 1) As Decimal

            Dim decUsadosAjusteB(oMatrixUsados.RowCount - 1) As Decimal
            Dim decUsadosAjusteCV(oMatrixUsados.RowCount - 1) As Decimal
            Dim decUsadosAjusteImpuestoCV(oMatrixUsados.RowCount - 1) As Decimal
            Dim decUsadosAjusteTotalCImpCV(oMatrixUsados.RowCount - 1) As Decimal
            Dim decUsadosAjusteValVentaCV(oMatrixUsados.RowCount - 1) As Decimal

            For i As Integer = 0 To oMatrixUsados.RowCount - 1
                decUsadosValorB(i) = decValorReciboBase(i)
                decUsadosValorImpuestoCV(i) = decValorImpuestoBase(i)
                decUsadosValorTotalCImpCV(i) = decValorTCImpuestoBase(i)
                decUsadosAjusteB(i) = decAjusteCostoBase(i)
                decUsadosValVentaB(i) = decUsadosValVentaBase(i)
            Next i

            oItem = oForm.Items.Item("mtx_Pagos")
            oMatrixPagos = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            Dim decMontoPagosB(oMatrixPagos.RowCount - 1) As Decimal
            Dim decMontoPagosCV(oMatrixPagos.RowCount - 1) As Decimal

            For i As Integer = 0 To oMatrixPagos.RowCount - 1
                decMontoPagosB(i) = decMontoPago(i)

            Next i

            oItem = oForm.Items.Item("mtx_Tram")
            oMatrixTramites = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)

            Dim decPrecioTramB(oMatrixTramites.RowCount - 1) As Decimal
            Dim decPrecioTramCV(oMatrixTramites.RowCount - 1) As Decimal

            Dim decCostoTramB(oMatrixTramites.RowCount - 1) As Decimal
            Dim decCostoTramCV(oMatrixTramites.RowCount - 1) As Decimal

            For i As Integer = 0 To oMatrixTramites.RowCount - 1
                decPrecioTramB(i) = decPrecioTramiteBase(i)
                decCostoTramB(i) = decCostoTramiteBase(i)
            Next i

            strMonedaBase = ItemsValoresBase.g_strMonedaBase

            If Trim(strMoneda) = Trim(strMonedaBase) Then

                decPrecioListaCV = decPrecioListaBase
                decPrecioVentaCV = decPrecioVentaBase
                decTotalAccCV = decTotalAccBase
                decGastosCV = decGastosBase
                decGastosPrendaCV = decGastosPrendaBase
                decPrimaCV = decPrimaBase
                decUsadoCV = decUsadoBase
                decDeudaUCV = decDeudaUBase
                decCreditoCV = decCreditoBase
                decDebitoCV = decDebitoBase
                decFinanciaCV = decFinanciaBase
                dbFinanciaExternoCV = decFinanciaExternoBase
                decAjusteCV = decAjusteBase
                decPrendaCV = decPrendaBase
                decAbonoMensCV = decAbonoMensBase
                decCuotaTotalCV = decCuotaTotalBase
                decGastosLocCV = decGastosLocBase
                decPagosCV = decPagosBase
                decCotizacionCV = decCotizacionBase
                decTempUsadoCV = decTempUsadoBase
                decImpuestoCV = decImpuestoBase
                decTempImpUsadoCV = decTempImpUsado
                decTempTotalCImpUsaCV = decTempTotalCImpUsa
                decPrecioVehCV = decPrecioVehBase
                decPagoVehCV = decPagoVehBase
                decGasLocVehCV = decGasLocVehBase
                decOtrosVehCV = decOtrosVehBase
                decUsadoValVentaCV = decUsadoValVentaBase
                decBonoVehCV = decBonoVehBase
                decMonNAs = decMonNAsBase
                decMonNFi = decMonNFiBase
                decPrecioNetoCV = decPrecioNetoBase
                decOtrosCostosCV = decOtrosCostos
                decCnsMontoNetoFacturarCV = decCnsMontoNetoFacturarBase
                decCnsMontoNetoCV = decCnsMontoNetoBase
                decCnsMontoIVACV = decCnsMontoIVABase
                decCnsMontoTotalCV = decCnsMontoTotalBase

                For i As Integer = 0 To oMatrix.RowCount - 1
                    decAccPrecioCV(i) = decAccPrecioBase(i)
                    decAccPrecioIniCV(i) = decAccPrecioIniBase(i)
                    decCostoAccCV(i) = decCostoAccBase(i)
                    decTotalLineaAccCV(i) = decTotalLineaAccBase(i)
                Next i
                For i As Integer = 0 To oMatrixSum.RowCount - 1
                    decLineasSumMontoCV(i) = decLineasSumMontoB(i)
                Next i

                For i As Integer = 0 To oMatrixOtrosCostos.RowCount - 1
                    decLineasOtrosCostosCV(i) = decLineasOtrosCostosB(i)
                Next i
                For i As Integer = 0 To oMatrixRes.RowCount - 1
                    decLineasResMontoCV(i) = decLineasResMontoB(i)
                Next i
                For i As Integer = 0 To oMatrixUnidades.RowCount - 1
                    decUnidadesMontoCV(i) = decUnidadesMontoB(i)
                    decUnidadesTotalCV(i) = decUnidadesTotalB(i)
                    decUnidadesPagoCV(i) = decUnidadesPagoB(i)
                    decUnidadesGasLocCV(i) = decUnidadesGasLocB(i)
                    decUnidadesOtrosCV(i) = decUnidadesOtrosB(i)
                    decUnidadesBonosCV(i) = decUnidadesBonosB(i)
                    decUnidadesTotalNetCV(i) = decUnidadesTotalNetB(i)
                Next i
                For i As Integer = 0 To oMatrixUsados.RowCount - 1
                    decUsadosValorCV(i) = decUsadosValorB(i)
                    decUsadosValorImpuestoCV(i) = decUsadosValorImpuestoCV(i)
                    decUsadosValorTotalCImpCV(i) = decUsadosValorTotalCImpCV(i)
                    decUsadosAjusteCV(i) = decUsadosAjusteB(i)
                    decUsadosAjusteValVentaCV(i) = decUsadosValVentaB(i)
                Next i
                For i As Integer = 0 To oMatrixPagos.RowCount - 1
                    decMontoPagosCV(i) = decMontoPagosB(i)
                Next i
                For i As Integer = 0 To oMatrixTramites.RowCount - 1
                    decPrecioTramCV(i) = decPrecioTramB(i)
                    decCostoTramCV(i) = decCostoTramB(i)
                Next i
                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_TipoCambio", 0, decTipoCambio.ToString(n))

            ElseIf Trim(strMoneda) <> Trim(strMonedaBase) Then

                If decTipoCambio = 0 Then
                    decTipoCambio = 1
                End If
                If decTipoCambioDestino = 0 Then
                    decTipoCambioDestino = 1
                End If
                If decTipoCambioOrigen = 0 Then
                    decTipoCambioOrigen = 1
                End If

                If Trim(strMonedaBase) = m_strMonedaLocal Then

                    decPrecioListaCV = decPrecioListaBase / decTipoCambioDestino
                    decPrecioVentaCV = decPrecioVentaBase / decTipoCambioDestino
                    decTotalAccCV = decTotalAccBase / decTipoCambioDestino
                    decGastosCV = decGastosBase / decTipoCambioDestino
                    decGastosPrendaCV = decGastosPrendaBase / decTipoCambioDestino
                    decPrimaCV = decPrimaBase / decTipoCambioDestino
                    decUsadoCV = decUsadoBase / decTipoCambioDestino
                    decDeudaUCV = decDeudaUBase / decTipoCambioDestino
                    decCreditoCV = decCreditoBase / decTipoCambioDestino
                    decDebitoCV = decDebitoBase / decTipoCambioDestino
                    decFinanciaCV = decFinanciaBase / decTipoCambioDestino
                    dbFinanciaExternoCV = decFinanciaExternoBase / decTipoCambioDestino
                    decAjusteCV = decAjusteBase / decTipoCambioDestino
                    decPrendaCV = decPrendaBase / decTipoCambioDestino
                    decAbonoMensCV = decAbonoMensBase / decTipoCambioDestino
                    decCuotaTotalCV = decCuotaTotalBase / decTipoCambioDestino
                    decGastosLocCV = decGastosLocBase / decTipoCambioDestino
                    decPagosCV = decPagosBase / decTipoCambioDestino
                    decCotizacionCV = decCotizacionBase / decTipoCambioDestino
                    decTempUsadoCV = decTempUsadoBase / decTipoCambioDestino
                    decImpuestoCV = decImpuestoBase / decTipoCambioDestino
                    decTempImpUsadoCV = decTempImpUsado / decTipoCambioDestino
                    decTempTotalCImpUsaCV = decTempTotalCImpUsa / decTipoCambioDestino
                    decPrecioVehCV = decPrecioVehBase / decTipoCambioDestino
                    decPagoVehCV = decPagoVehBase / decTipoCambioDestino
                    decGasLocVehCV = decGasLocVehBase / decTipoCambioDestino
                    decOtrosVehCV = decOtrosVehBase / decTipoCambioDestino
                    decUsadoValVentaCV = decUsadoValVentaBase / decTipoCambioDestino
                    decBonoVehCV = decBonoVehBase / decTipoCambioDestino
                    decMonNAs = decMonNAsBase / decTipoCambioDestino
                    decMonNFi = decMonNFiBase / decTipoCambioDestino
                    decPrecioNetoCV = decPrecioNetoBase / decTipoCambioDestino
                    decOtrosCostosCV = decOtrosCostos / decTipoCambioDestino
                    decCnsMontoNetoFacturarCV = decCnsMontoNetoFacturarBase / decTipoCambioDestino
                    decCnsMontoNetoCV = decCnsMontoNetoBase / decTipoCambioDestino
                    decCnsMontoIVACV = decCnsMontoIVABase / decTipoCambioDestino
                    decCnsMontoTotalCV = decCnsMontoTotalBase / decTipoCambioDestino


                    For i As Integer = 0 To oMatrix.RowCount - 1
                        decAccPrecioCV(i) = decAccPrecioBase(i) / decTipoCambioDestino
                        decAccPrecioIniCV(i) = decAccPrecioIniBase(i) / decTipoCambioDestino
                        decCostoAccCV(i) = decCostoAccBase(i) / decTipoCambioDestino
                        decTotalLineaAccCV(i) = decTotalLineaAccBase(i) / decTipoCambioDestino
                    Next i
                    For i As Integer = 0 To oMatrixSum.RowCount - 1
                        decLineasSumMontoCV(i) = decLineasSumMontoB(i) / decTipoCambioDestino
                    Next i

                    For i As Integer = 0 To oMatrixOtrosCostos.RowCount - 1
                        decLineasOtrosCostosCV(i) = decLineasOtrosCostosB(i) / decTipoCambioDestino
                    Next i

                    For i As Integer = 0 To oMatrixRes.RowCount - 1
                        decLineasResMontoCV(i) = decLineasResMontoB(i) / decTipoCambioDestino
                    Next i
                    For i As Integer = 0 To oMatrixUnidades.RowCount - 1
                        decUnidadesMontoCV(i) = decUnidadesMontoB(i) / decTipoCambioDestino
                        decUnidadesTotalCV(i) = decUnidadesTotalB(i) / decTipoCambioDestino
                        'decUnidadesPagoCV(i) = decUnidadesPagoB(i) / decTipoCambioDestino
                        decUnidadesGasLocCV(i) = decUnidadesGasLocB(i) / decTipoCambioDestino
                        decUnidadesOtrosCV(i) = decUnidadesOtrosB(i) / decTipoCambioDestino
                        decUnidadesBonosCV(i) = decUnidadesBonosB(i) / decTipoCambioDestino
                        decUnidadesTotalNetCV(i) = decUnidadesTotalNetB(i) / decTipoCambioDestino
                    Next i
                    For i As Integer = 0 To oMatrixUsados.RowCount - 1
                        decUsadosValorCV(i) = decUsadosValorB(i) / decTipoCambioDestino
                        decUsadosAjusteCV(i) = decUsadosAjusteB(i) / decTipoCambioDestino
                        decUsadosAjusteImpuestoCV(i) = decUsadosValorImpuestoCV(i) / decTipoCambioDestino
                        decUsadosAjusteTotalCImpCV(i) = decUsadosValorTotalCImpCV(i) / decTipoCambioDestino
                        decUsadosAjusteValVentaCV(i) = decUsadosValVentaB(i) / decTipoCambioDestino
                    Next i


                    'Carga de pagos recibidos para la matriz de vehiculos
                    Dim strCodUnidadMatrixVehiculo As String = ""
                    Dim strCodUnidadPagoRecibido As String = ""
                    Dim decPagoReciboTemp As Decimal = 0

                    For k As Integer = 0 To oMatrixUnidades.RowCount - 1
                        decPagoReciboTemp = 0

                        strCodUnidadMatrixVehiculo = strCodUnid(k)

                        For i As Integer = 0 To oMatrixPagos.RowCount - 1
                            strCodUnidadPagoRecibido = strCodUnidPago(i)

                            If strCodUnidadMatrixVehiculo = strCodUnidadPagoRecibido Then

                                decPagoReciboTemp += CDec(ObtenerMontoPago(strDocNumPago(i), strTCDestino, strMoneda))

                            End If
                        Next
                        decUnidadesPagoCV(k) = decPagoReciboTemp
                    Next

                    decPagosCV = 0

                    Dim decPagoRecibido As Decimal
                    Dim decPagoRecibidoTotal As Decimal = 0

                    For i As Integer = 0 To oMatrixPagos.RowCount - 1
                        decPagoRecibido = CDec(ObtenerMontoPago(strDocNumPago(i), strTCDestino, strMoneda))

                        decMontoPagosCV(i) = decPagoRecibido

                        decPagoRecibidoTotal += decPagoRecibido
                    Next i

                    decPagosCV = decPagoRecibidoTotal

                    For i As Integer = 0 To oMatrixTramites.RowCount - 1
                        decPrecioTramCV(i) = decPrecioTramB(i) / decTipoCambioDestino
                        decCostoTramCV(i) = decCostoTramB(i) / decTipoCambioDestino
                    Next i
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_TipoCambio", 0, decTipoCambioDestino.ToString(n))

                ElseIf Trim(strMoneda) = m_strMonedaLocal Then

                    decPrecioListaCV = decPrecioListaBase * decTipoCambio
                    decPrecioVentaCV = decPrecioVentaBase * decTipoCambio
                    decTotalAccCV = decTotalAccBase * decTipoCambio
                    decGastosCV = decGastosBase * decTipoCambio
                    decGastosPrendaCV = decGastosPrendaBase * decTipoCambio
                    decPrimaCV = decPrimaBase * decTipoCambio
                    decUsadoCV = decUsadoBase * decTipoCambio
                    decDeudaUCV = decDeudaUBase * decTipoCambio
                    decCreditoCV = decCreditoBase * decTipoCambio
                    decDebitoCV = decDebitoBase * decTipoCambio
                    decFinanciaCV = decFinanciaBase * decTipoCambio
                    dbFinanciaExternoCV = decFinanciaExternoBase * decTipoCambio
                    decAjusteCV = decAjusteBase * decTipoCambio
                    decPrendaCV = decPrendaBase * decTipoCambio
                    decAbonoMensCV = decAbonoMensBase * decTipoCambio
                    decCuotaTotalCV = decCuotaTotalBase * decTipoCambio
                    decGastosLocCV = decGastosLocBase * decTipoCambio
                    decPagosCV = decPagosBase * decTipoCambio
                    decCotizacionCV = decCotizacionBase * decTipoCambio
                    decTempUsadoCV = decTempUsadoBase * decTipoCambio
                    decImpuestoCV = decImpuestoBase * decTipoCambio
                    decTempImpUsadoCV = decTempImpUsado * decTipoCambio
                    decTempTotalCImpUsaCV = decTempTotalCImpUsa * decTipoCambio
                    decPrecioVehCV = decPrecioVehBase * decTipoCambio
                    decPagoVehCV = decPagoVehBase * decTipoCambio
                    decGasLocVehCV = decGasLocVehBase * decTipoCambio
                    decOtrosVehCV = decOtrosVehBase * decTipoCambio
                    decUsadoValVentaCV = decUsadoValVentaBase * decTipoCambio
                    decBonoVehCV = decBonoVehBase * decTipoCambio
                    decMonNAs = decMonNAsBase * decTipoCambio
                    decMonNFi = decMonNFiBase * decTipoCambio
                    decPrecioNetoCV = decPrecioNetoBase * decTipoCambio
                    decOtrosCostosCV = decOtrosCostos * decTipoCambio
                    decCnsMontoNetoFacturarCV = decCnsMontoNetoFacturarBase * decTipoCambio
                    decCnsMontoNetoCV = decCnsMontoNetoBase * decTipoCambio
                    decCnsMontoIVACV = decCnsMontoIVABase * decTipoCambio
                    decCnsMontoTotalCV = decCnsMontoTotalBase * decTipoCambio

                    For i As Integer = 0 To oMatrix.RowCount - 1
                        decAccPrecioCV(i) = decAccPrecioBase(i) * decTipoCambio
                        decAccPrecioIniCV(i) = decAccPrecioIniBase(i) * decTipoCambio
                        decCostoAccCV(i) = decCostoAccBase(i) * decTipoCambio
                        decTotalLineaAccCV(i) = decTotalLineaAccBase(i) * decTipoCambio
                    Next i
                    For i As Integer = 0 To oMatrixSum.RowCount - 1
                        decLineasSumMontoCV(i) = decLineasSumMontoB(i) * decTipoCambio
                    Next i
                    For i As Integer = 0 To oMatrixRes.RowCount - 1
                        decLineasResMontoCV(i) = decLineasResMontoB(i) * decTipoCambio
                    Next i

                    For i As Integer = 0 To oMatrixOtrosCostos.RowCount - 1
                        decLineasOtrosCostosCV(i) = decLineasOtrosCostosB(i) * decTipoCambio
                    Next i

                    For i As Integer = 0 To oMatrixUnidades.RowCount - 1
                        decUnidadesMontoCV(i) = decUnidadesMontoB(i) * decTipoCambio
                        decUnidadesTotalCV(i) = decUnidadesTotalB(i) * decTipoCambio
                        decUnidadesGasLocCV(i) = decUnidadesGasLocB(i) * decTipoCambio
                        decUnidadesOtrosCV(i) = decUnidadesOtrosB(i) * decTipoCambio
                        decUnidadesBonosCV(i) = decUnidadesBonosB(i) * decTipoCambio
                        decUnidadesTotalNetCV(i) = decUnidadesTotalNetB(i) * decTipoCambio
                    Next i
                    For i As Integer = 0 To oMatrixUsados.RowCount - 1
                        decUsadosValorCV(i) = decUsadosValorB(i) * decTipoCambio
                        decUsadosAjusteImpuestoCV(i) = decUsadosValorImpuestoCV(i) * decTipoCambio
                        decUsadosAjusteTotalCImpCV(i) = decUsadosValorTotalCImpCV(i) * decTipoCambio
                        decUsadosAjusteCV(i) = decUsadosAjusteB(i) * decTipoCambio
                        decUsadosAjusteValVentaCV(i) = decUsadosValVentaB(i) * decTipoCambio
                    Next i

                    'Carga de pagos recibidos para la matriz de vehiculos
                    Dim strCodUnidadMatrixVehiculo As String = ""
                    Dim strCodUnidadPagoRecibido As String = ""
                    Dim decPagoReciboTemp As Decimal = 0

                    For k As Integer = 0 To oMatrixUnidades.RowCount - 1
                        decPagoReciboTemp = 0

                        strCodUnidadMatrixVehiculo = strCodUnid(k)

                        For i As Integer = 0 To oMatrixPagos.RowCount - 1
                            strCodUnidadPagoRecibido = strCodUnidPago(i)

                            If strCodUnidadMatrixVehiculo = strCodUnidadPagoRecibido Then
                                decPagoReciboTemp += CDec(ObtenerMontoPago(strDocNumPago(i), strTCDestino, strMoneda))

                            End If
                        Next
                        decUnidadesPagoCV(k) = decPagoReciboTemp
                    Next

                    decPagosCV = 0
                    Dim decPagoRecibido As Decimal
                    Dim decPagoRecibidoTotal As Decimal = 0

                    For i As Integer = 0 To oMatrixPagos.RowCount - 1
                        decPagoRecibido = CDec(ObtenerMontoPago(strDocNumPago(i), strTCDestino, strMoneda))

                        decMontoPagosCV(i) = decPagoRecibido

                        decPagoRecibidoTotal += decPagoRecibido
                    Next i

                    decPagosCV = decPagoRecibidoTotal

                    For i As Integer = 0 To oMatrixTramites.RowCount - 1
                        decPrecioTramCV(i) = decPrecioTramB(i) * decTipoCambio
                        decCostoTramCV(i) = decCostoTramB(i) * decTipoCambio
                    Next i
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_TipoCambio", 0, decTipoCambio.ToString(n))

                Else

                    decPrecioListaCV = (decPrecioListaBase * decTipoCambio) / decTipoCambioDestino
                    decPrecioVentaCV = (decPrecioVentaBase * decTipoCambio) / decTipoCambioDestino
                    decTotalAccCV = (decTotalAccBase * decTipoCambio) / decTipoCambioDestino
                    decGastosCV = (decGastosBase * decTipoCambio) / decTipoCambioDestino
                    decGastosPrendaCV = (decGastosPrendaBase * decTipoCambio) / decTipoCambioDestino
                    decPrimaCV = (decPrimaBase * decTipoCambio) / decTipoCambioDestino
                    decUsadoCV = (decUsadoBase * decTipoCambio) / decTipoCambioDestino
                    decDeudaUCV = (decDeudaUBase * decTipoCambio) / decTipoCambioDestino
                    decCreditoCV = (decCreditoBase * decTipoCambio) / decTipoCambioDestino
                    decDebitoCV = (decDebitoBase * decTipoCambio) / decTipoCambioDestino
                    decFinanciaCV = (decFinanciaBase * decTipoCambio) / decTipoCambioDestino
                    dbFinanciaExternoCV = (decFinanciaExternoBase * decTipoCambio) / decTipoCambioDestino
                    decAjusteCV = (decAjusteBase * decTipoCambio) / decTipoCambioDestino
                    decPrendaCV = (decPrendaBase * decTipoCambio) / decTipoCambioDestino
                    decAbonoMensCV = (decAbonoMensBase * decTipoCambio) / decTipoCambioDestino
                    decCuotaTotalCV = (decCuotaTotalBase * decTipoCambio) / decTipoCambioDestino
                    decGastosLocCV = (decGastosLocBase * decTipoCambio) / decTipoCambioDestino
                    decPagosCV = (decPagosBase * decTipoCambio) / decTipoCambioDestino
                    decCotizacionCV = (decCotizacionBase * decTipoCambio) / decTipoCambioDestino
                    decTempUsadoCV = (decTempUsadoBase * decTipoCambio) / decTipoCambioDestino
                    decImpuestoCV = (decImpuestoBase * decTipoCambio) / decTipoCambioDestino
                    decTempImpUsadoCV = (decTempImpUsado * decTipoCambio) / decTipoCambioDestino
                    decTempTotalCImpUsaCV = (decTempTotalCImpUsa * decTipoCambio) / decTipoCambioDestino
                    decPrecioVehCV = (decPrecioVehBase * decTipoCambio) / decTipoCambioDestino
                    decPagoVehCV = (decPagoVehBase * decTipoCambio) / decTipoCambioDestino
                    decGasLocVehCV = (decGasLocVehBase * decTipoCambio) / decTipoCambioDestino
                    decOtrosVehCV = (decOtrosVehBase * decTipoCambio) / decTipoCambioDestino
                    decUsadoValVentaCV = (decUsadoValVentaBase * decTipoCambio) / decTipoCambioDestino
                    decBonoVehCV = (decBonoVehBase * decTipoCambio) / decTipoCambioDestino
                    decMonNAs = (decMonNAsBase * decTipoCambio) / decTipoCambioDestino
                    decMonNFi = (decMonNFiBase * decTipoCambio) / decTipoCambioDestino
                    decPrecioNetoCV = (decPrecioNetoBase * decTipoCambio) / decTipoCambioDestino
                    decOtrosCostosCV = (decOtrosCostos * decTipoCambio) / decTipoCambioDestino
                    decCnsMontoNetoFacturarCV = (decCnsMontoNetoFacturarBase * decTipoCambio) / decTipoCambioDestino
                    decCnsMontoNetoCV = (decCnsMontoNetoBase * decTipoCambio) / decTipoCambioDestino
                    decCnsMontoIVACV = (decCnsMontoIVABase * decTipoCambio) / decTipoCambioDestino
                    decCnsMontoTotalCV = (decCnsMontoTotalBase * decTipoCambio) / decTipoCambioDestino

                    For i As Integer = 0 To oMatrix.RowCount - 1
                        decAccPrecioCV(i) = (decAccPrecioBase(i) * decTipoCambio) / decTipoCambioDestino
                        decAccPrecioIniCV(i) = (decAccPrecioIniBase(i) * decTipoCambio) / decTipoCambioDestino
                        decCostoAccCV(i) = (decCostoAccBase(i) * decTipoCambio) / decTipoCambioDestino
                        decTotalLineaAccCV(i) = (decTotalLineaAccBase(i) * decTipoCambio) / decTipoCambioDestino
                    Next i
                    For i As Integer = 0 To oMatrixSum.RowCount - 1
                        decLineasSumMontoCV(i) = (decLineasSumMontoB(i) * decTipoCambio) / decTipoCambioDestino
                    Next i

                    For i As Integer = 0 To oMatrixOtrosCostos.RowCount - 1
                        decLineasOtrosCostosCV(i) = (decLineasOtrosCostosB(i) * decTipoCambio) / decTipoCambioDestino
                    Next i

                    For i As Integer = 0 To oMatrixRes.RowCount - 1
                        decLineasResMontoCV(i) = (decLineasResMontoB(i) * decTipoCambio) / decTipoCambioDestino
                    Next i
                    For i As Integer = 0 To oMatrixUnidades.RowCount - 1
                        decUnidadesMontoCV(i) = (decUnidadesMontoB(i) * decTipoCambio) / decTipoCambioDestino
                        decUnidadesTotalCV(i) = (decUnidadesTotalB(i) * decTipoCambio) / decTipoCambioDestino
                        'decUnidadesPagoCV(i) = (decUnidadesPagoB(i) * decTipoCambio) / decTipoCambioDestino
                        decUnidadesGasLocCV(i) = (decUnidadesGasLocB(i) * decTipoCambio) / decTipoCambioDestino
                        decUnidadesOtrosCV(i) = (decUnidadesOtrosB(i) * decTipoCambio) / decTipoCambioDestino
                        decUnidadesBonosCV(i) = (decUnidadesBonosB(i) * decTipoCambio) / decTipoCambioDestino
                        decUnidadesTotalNetCV(i) = (decUnidadesTotalNetB(i) * decTipoCambio) / decTipoCambioDestino
                    Next i
                    For i As Integer = 0 To oMatrixUsados.RowCount - 1
                        decUsadosValorCV(i) = (decUsadosValorB(i) * decTipoCambio) / decTipoCambioDestino
                        decUsadosAjusteCV(i) = (decUsadosAjusteB(i) * decTipoCambio) / decTipoCambioDestino
                        decUsadosAjusteValVentaCV(i) = (decUsadosValVentaB(i) * decTipoCambio) / decTipoCambioDestino
                    Next i

                    'Carga de pagos recibidos para la matriz de vehiculos
                    Dim strCodUnidadMatrixVehiculo As String = ""
                    Dim strCodUnidadPagoRecibido As String = ""
                    Dim decPagoReciboTemp As Decimal = 0

                    For k As Integer = 0 To oMatrixUnidades.RowCount - 1
                        decPagoReciboTemp = 0

                        strCodUnidadMatrixVehiculo = strCodUnid(k)

                        For i As Integer = 0 To oMatrixPagos.RowCount - 1
                            strCodUnidadPagoRecibido = strCodUnidPago(i)

                            If strCodUnidadMatrixVehiculo = strCodUnidadPagoRecibido Then
                                decPagoReciboTemp += CDec(ObtenerMontoPago(strDocNumPago(i), strTCDestino, strMoneda))

                            End If
                        Next
                        decUnidadesPagoCV(k) = decPagoReciboTemp

                    Next

                    decPagosCV = 0
                    Dim decPagoRecibido As Decimal
                    Dim decPagoRecibidoTotal As Decimal = 0


                    For i As Integer = 0 To oMatrixPagos.RowCount - 1
                        decPagoRecibido = CDec(ObtenerMontoPago(strDocNumPago(i), strTCDestino, strMoneda))

                        decMontoPagosCV(i) = decPagoRecibido

                        decPagoRecibidoTotal += decPagoRecibido
                    Next i

                    decPagosCV = decPagoRecibidoTotal
                    For i As Integer = 0 To oMatrixTramites.RowCount - 1
                        decPrecioTramCV(i) = (decPrecioTramB(i) * decTipoCambio) / decTipoCambioDestino
                        decCostoTramCV(i) = (decCostoTramB(i) * decTipoCambio) / decTipoCambioDestino
                    Next i
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SCGD_TipoCambio", 0, decTipoCambioDestino.ToString(n))

                End If

            End If

            oForm.Freeze(True)

            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_PreLis", 0, decPrecioListaCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Vta", 0, decPrecioVentaCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Ext_Adi", 0, decTotalAccCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Gas_Ins", 0, decGastosCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Gas_Pre", 0, decGastosPrendaCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Deposito", 0, decPrimaCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Mon_Usa", 0, decUsadoCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Deu_Usa", 0, decDeudaUCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Nota_Cre", 0, decCreditoCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Nota_Deb", 0, decDebitoCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Financia", 0, decFinanciaCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_FinanciaE", 0, dbFinanciaExternoCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Val_Inv", 0, decAjusteCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Mon_pre", 0, decPrendaCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Abo_Men", 0, decAbonoMensCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Cuo_Tot", 0, decCuotaTotalCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Gas_Loc", 0, decGastosLocCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pagos", 0, decPagosCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Mon_Cot", 0, decCotizacionCV.ToString(n))
            'oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Us", 0, decTemUsadoCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Imp", 0, decImpuestoCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pre_Vh", 0, decPrecioVehCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pago_Vh", 0, decPagoVehCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_GL_Temp", 0, decGasLocVehCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_OG_Temp", 0, decOtrosVehCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ValVeh_Us", 0, decUsadoValVentaCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_BonoVV", 0, decBonoVehCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MoNAs", 0, decMonNAs.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MoNFi", 0, decMonNFi.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_PreNet", 0, decPrecioNetoCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_OtrCos", 0, decOtrosCostosCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ImpUsado", 0, decTempImpUsadoCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TotalCImpuest", 0, decTempTotalCImpUsaCV.ToString(n))

            'Campos pestaña Consignados
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoFC", 0, decCnsMontoNetoFacturarCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoCns", 0, decCnsMontoNetoCV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MIVACons", 0, decCnsMontoIVACV.ToString(n))
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MTotalCs", 0, decCnsMontoTotalCV.ToString(n))

            For i As Integer = 0 To oMatrix.RowCount - 1

                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_SCGD_AccPrecio", i, decAccPrecioCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_AccPr_I", i, decAccPrecioIniCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_Cost_Acc", i, decCostoAccCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").SetValue("U_PrTo_Acc", i, decTotalLineaAccCV(i).ToString(n))
            Next i
            oMatrix.LoadFromDataSource()

            oMatrixSum.FlushToDataSource()
            For i As Integer = 0 To oMatrixSum.RowCount - 1
                oForm.DataSources.DBDataSources.Item("@" & TablaLineasSuma).SetValue("U_Monto", i, decLineasSumMontoCV(i).ToString(n))
            Next i
            oMatrixSum.LoadFromDataSource()

            oMatrixOtrosCostos.FlushToDataSource()
            For i As Integer = 0 To oMatrixOtrosCostos.RowCount - 1
                oForm.DataSources.DBDataSources.Item(g_str_OTROCXCV).SetValue("U_Monto", i, decLineasOtrosCostosCV(i).ToString(n))
            Next i
            oMatrixOtrosCostos.LoadFromDataSource()

            oMatrixRes.FlushToDataSource()
            For i As Integer = 0 To oMatrixRes.RowCount - 1
                oForm.DataSources.DBDataSources.Item("@" & TablaLineasResta).SetValue("U_Monto", i, decLineasResMontoCV(i).ToString(n))
            Next i
            oMatrixRes.LoadFromDataSource()

            oMatrixUnidades.FlushToDataSource()
            For i As Integer = 0 To oMatrixUnidades.RowCount - 1
                oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pre_Vta", i, decUnidadesMontoCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pre_Tot", i, decUnidadesTotalCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pagos", i, decUnidadesPagoCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Gas_Loc", i, decUnidadesGasLocCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Otro_Gas", i, decUnidadesOtrosCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Bono", i, decUnidadesBonosCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_PreNet", i, decUnidadesTotalNetCV(i).ToString(n))
            Next i
            oMatrixUnidades.LoadFromDataSource()
            oMatrixUsados.FlushToDataSource()
            For i As Integer = 0 To oMatrixUsados.RowCount - 1
                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Val_Rec", i, decUsadosValorCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_ImpUsado", i, decUsadosAjusteImpuestoCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_TotalCImpuest", i, decUsadosAjusteTotalCImpCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Aj_Cos", i, decUsadosAjusteCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Val_Venta", i, decUsadosAjusteValVentaCV(i).ToString(n))
            Next i
            oMatrixUsados.LoadFromDataSource()
            oMatrixPagos.FlushToDataSource()
            For i As Integer = 0 To oMatrixPagos.RowCount - 1
                oDataTablePagosRealizados = oForm.DataSources.DataTables.Item("Pagos")
                oDataTablePagosRealizados.SetValue("monto", i, decMontoPagosCV(i).ToString(n))
            Next i
            oMatrixPagos.LoadFromDataSource()
            oMatrixTramites.FlushToDataSource()
            For i As Integer = 0 To oMatrixTramites.RowCount - 1
                oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Pre_Uni", i, decPrecioTramCV(i).ToString(n))
                oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").SetValue("U_Costo", i, decCostoTramCV(i).ToString(n))
            Next i
            oMatrixTramites.LoadFromDataSource()

            oForm.Freeze(False)

            Call CalcularPrecioModPrecioVenta(oForm)

            Call CalculaPrecioAccesorios(oForm)

            Call CalculaPrecioTramites(oForm)

            Call CalcularCostos(oForm.UniqueID)

            Call CalcularLineasFacturas(oForm.UniqueID)

            Call CalcularDesgloseCobro(oForm.UniqueID)

            Call CalculaPreciosBonos(oForm,
                                     strMonedaOrigen.Trim(),
                                     oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim(),
                                     dtFecha,
                                    decTipoCambioDestino,
                                     n)

            If oForm.Mode = BoFormMode.fm_OK_MODE Then
                oForm.Mode = BoFormMode.fm_UPDATE_MODE
            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    Private Sub SumaImpAccesorios(ByRef p_dcImpuestos As Decimal)
        Dim strImpuestosAccesorios As String
        Dim dcImpuestosAccesorios As Decimal
        Dim strGenFactAccesorios As String
        Try
            strGenFactAccesorios = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GenFaAcc", 0)
            strGenFactAccesorios = strGenFactAccesorios.Trim()

            If strGenFactAccesorios = "N" Then

                strImpuestosAccesorios = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Acc_Imp", 0).Trim()

                If Not String.IsNullOrEmpty(strImpuestosAccesorios) Then

                    dcImpuestosAccesorios = Decimal.Parse(strImpuestosAccesorios, n)
                    p_dcImpuestos = p_dcImpuestos + dcImpuestosAccesorios

                End If
            End If
        Catch ex As Exception

        End Try
    End Sub

    Private Sub CalculaPreciosBonos(ByRef p_oForm As Form,
                                    ByVal p_strMonedaOrigen As String,
                                    ByVal p_strMonedaDestino As String,
                                    ByVal p_dtFecha As Date,
                                    ByVal p_strTCDestino As String,
                                    ByVal n As NumberFormatInfo)

        Dim oItem As SAPbouiCOM.Item
        Dim oMatrixBonos As SAPbouiCOM.Matrix
        Dim decMonto As Decimal
        Dim decMontoManipulado As Decimal
        Dim strMonto As String = String.Empty
        Dim strMonedaLocal As String
        Dim strMonedaSistema As String
        Dim strTipoCambioSistema As String

        'STRING MONEDAS
        Dim objGlobal As DMSOneFramework.BLSBO.GlobalFunctionsSBO

        Try

            'monedas
            objGlobal = New DMSOneFramework.BLSBO.GlobalFunctionsSBO

            oItem = oForm.Items.Item(g_str_mtxBonos)
            oMatrixBonos = DirectCast(oItem.Specific, SAPbouiCOM.Matrix)
            oMatrixBonos.FlushToDataSource()

            strMonedaLocal = objGlobal.RetornarMonedaLocal.Trim
            strMonedaSistema = objGlobal.RetornarMonedaSistema.Trim

            strTipoCambioSistema = objGlobal.RetornarTipoCambioMonedaRS(strMonedaSistema, p_dtFecha)

            For i As Integer = 0 To oMatrixBonos.RowCount - 1
                strMonto = oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).GetValue("U_Monto", i).Trim()
                If Not String.IsNullOrEmpty(strMonto) Then
                    decMonto = Utilitarios.ConvierteDecimal(strMonto, n)
                    decMontoManipulado = Utilitarios.ManejoMultimoneda(decMonto,
                                                                       strMonedaLocal,
                                                                       strMonedaSistema,
                                                                       p_strMonedaOrigen,
                                                                       p_strMonedaDestino,
                                                                       p_strTCDestino,
                                                                       p_dtFecha,
                                                                       n,
                                                                       m_oCompany)
                Else
                    decMonto = 0
                End If
                oForm.DataSources.DBDataSources.Item(g_str_BONOXCONT).SetValue("U_Monto", i, decMontoManipulado.ToString(n))

                FormateaPreciosBase(p_oForm)
            Next i

            oMatrixBonos.LoadFromDataSource()
            CalculaTotalBonos(oForm)

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    Private Sub CargaDialogo()
        Try
            Dim strConectionString As String = String.Empty
            Dim oform As SAPbouiCOM.Form
            '            Dim oItem As SAPbouiCOM.Item
            '            Dim edit As SAPbouiCOM.EditText
            Dim strNombreTaller As String = String.Empty
            Dim strCV As String = String.Empty

            Utilitarios.DevuelveNombreBDTaller(m_SBO_Application, strNombreTaller)
            Configuracion.CrearCadenaDeconexion(m_oCompany.Server, strNombreTaller, strConectionString)
            oform = m_SBO_Application.Forms.ActiveForm

            strCV = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0)
            Dim value As Integer = CInt(strCV)

            Dim tipoSkin As Integer = Utilitarios.CargarTipoSkin()

            Dim archivoDigital As FrmArchivoDigital = New FrmArchivoDigital(My.Resources.Resource.TituloDialogoArchivo, TablaContrato, value, mc_strTablaArchivosDigitales, strConectionString, 10, tipoSkin)
            archivoDigital.Tag = value

            Dim MyProcs() As Process
            MyProcs = Process.GetProcessesByName("SAP Business One")
            Dim currentProcess As Process = Process.GetCurrentProcess()

            If MyProcs.Length <> 0 Then
                For i As Integer = 0 To MyProcs.Length - 1
                    If MyProcs(i).SessionId = currentProcess.SessionId Then
                        Dim MyWindow As New WindowWrapper(MyProcs(i).MainWindowHandle)
                        archivoDigital.ShowInTaskbar = False
                        archivoDigital.ShowDialog(MyWindow)
                    End If
                Next
            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    <System.CLSCompliant(False)> _
    Public Sub ManejoEventosCombo(ByRef oTmpForm As SAPbouiCOM.Form, _
                                      ByRef ItemUID As String, _
                                      ByVal FormUID As String)
        Try

            Dim strValorSeleccionado As String

            If ItemUID = mc_strMarcaUS Then
                oTmpForm = m_SBO_Application.Forms.Item("SCGD_frmContVent")
                strValorSeleccionado = oTmpForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Marc_Us", 0).Trim

                If Not String.IsNullOrEmpty(strValorSeleccionado) Then

                    Call CargarValidValuesEnCombos(oTmpForm, _
                                                   "Select Code,Name From [@SCGD_ESTILO] with (nolock) Where U_Cod_Marc ='" & strValorSeleccionado & "' order By Name", _
                                                   mc_strEstiloUS)
                End If

            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    <System.CLSCompliant(False)> _
    Public Sub ImprimirReporte(ByVal oForm As SAPbouiCOM.Form, _
                               ByVal p_strReporte As String, _
                               ByVal p_strBarraTitulo As String, _
                               Optional ByVal p_blnUsaIDContrato As Boolean = False, _
                               Optional ByVal p_blnUsaNombreEmpleado As Boolean = False, _
                               Optional ByVal p_blnUsaNombreCompañia As Boolean = False)

        Dim strDireccionReporte As String
        Dim strDBDMSOne As String
        Dim strNombreEmpleado As String
        Dim strNombreCompañia As String
        Dim strPathExe As String

        Dim oMatrix As SAPbouiCOM.Matrix
        Dim intLineaUnidad As Integer
        Dim strUnidad As String
        Dim strIDVehiculo As String

        oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

        intLineaUnidad = oMatrix.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_RowOrder)

        Dim strParametros As String

        If intLineaUnidad <> -1 Then

            strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", intLineaUnidad - 1)
            strUnidad = strUnidad.Trim()

            strIDVehiculo = Utilitarios.EjecutarConsulta("Select Code from [@SCGD_VEHICULO]  with (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            strDBDMSOne = m_SBO_Application.Company.DatabaseName
            p_strBarraTitulo = p_strBarraTitulo.Replace(" ", "°")

            strDireccionReporte = p_strReporte

            If p_blnUsaIDContrato Then
                strParametros = oForm.Items.Item(mc_strNumContrato).Specific.String
                strParametros &= ","
            Else
                strParametros = ","
                strParametros &= strIDVehiculo

            End If

            If p_blnUsaNombreEmpleado Then
                strNombreEmpleado = "," & Utilitarios.ObtieneEmpname(m_SBO_Application)
                If String.IsNullOrEmpty(strNombreEmpleado) Then
                    strNombreEmpleado = ",*"
                End If
                strNombreEmpleado = strNombreEmpleado.Replace(" ", "°")
                strParametros &= strNombreEmpleado
            End If

            If p_blnUsaNombreCompañia Then

                If Not p_blnUsaIDContrato Then
                    strNombreCompañia = m_SBO_Application.Company.Name & ","
                    strNombreCompañia = strNombreCompañia.Replace(" ", "°")
                    strNombreCompañia &= strParametros
                Else
                    strNombreCompañia = "," & m_SBO_Application.Company.Name
                    strNombreCompañia = strNombreCompañia.Replace(" ", "°")
                    strParametros &= strNombreCompañia
                End If
            End If

            strDireccionReporte = objConfiguracionGeneral.DireccionReportes & strDireccionReporte

            strDireccionReporte = strDireccionReporte.Replace(" ", "°")
            strPathExe = My.Application.Info.DirectoryPath & "\SCG Visualizador de Reportes.exe "

            strPathExe &= p_strBarraTitulo & " " & strDireccionReporte & " " & CatchingEvents.DBUser & "," & CatchingEvents.DBPassword & "," & m_oCompany.Server & "," & m_oCompany.CompanyDB & " " & strParametros
            Shell(strPathExe, AppWinStyle.MaximizedFocus)

        Else

            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorImprimirFicha, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)

        End If

    End Sub

    <System.CLSCompliant(False)> _
    Public Sub ImprimirReporte(ByVal oForm As SAPbouiCOM.Form)

        Dim oMatriz As SAPbouiCOM.Matrix

        Dim strDireccionReporte As String
        Dim strDBDMSOne As String
        Dim strNombreEmpleado As String
        Dim strPathExe As String

        Dim strBarraTitulo As String
        Dim strReporte As String
        Dim blnUsaIDContrato As Boolean
        Dim blnUsaIDVehiculo As Boolean
        Dim blnUsaNombreEmpleado As Boolean
        Dim blnUsaTipo As Boolean
        Dim intReporteAImprimir As Integer
        Dim intParamReporte As Integer

        Dim oMatrix As SAPbouiCOM.Matrix
        Dim intLineaUnidad As Integer
        Dim strUnidad As String
        Dim strIDVehiculo As String

        oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

        intLineaUnidad = oMatrix.GetNextSelectedRow(0, SAPbouiCOM.BoOrderType.ot_RowOrder)

        Dim strParametros As String = String.Empty

        If intLineaUnidad <> -1 Then

            strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", intLineaUnidad - 1)
            strUnidad = strUnidad.Trim()

            strIDVehiculo = Utilitarios.EjecutarConsulta("Select Code from [@SCGD_VEHICULO] with (nolock) where U_Cod_Unid = '" & strUnidad & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            oMatriz = DirectCast(oForm.Items.Item("224").Specific, SAPbouiCOM.Matrix)

            For intReporteAImprimir = 1 To oMatriz.RowCount

                If oMatriz.Columns.Item(0).Cells.Item(intReporteAImprimir).Specific.Checked Then

                    strReporte = ""
                    intParamReporte = oMatriz.Columns.Item(1).Cells.Item(intReporteAImprimir).Specific.Value
                    Call CaracteristicasReporte(m_oCompany.Server, m_oCompany.CompanyDB, blnUsaIDVehiculo, blnUsaIDContrato, blnUsaNombreEmpleado, strReporte, blnUsaTipo, intParamReporte)

                    strDBDMSOne = m_SBO_Application.Company.DatabaseName

                    strBarraTitulo = oMatriz.Columns.Item(2).Cells.Item(intReporteAImprimir).Specific.String

                    strBarraTitulo = strBarraTitulo.Replace(" ", "°")


                    If blnUsaTipo Then
                        strReporte &= oForm.Items.Item(mc_strTipo).Specific.Selected.Value
                    End If

                    strReporte &= ".rpt"
                    strDireccionReporte = ""
                    strDireccionReporte &= strReporte
                    If blnUsaIDContrato Then
                        strParametros = oForm.Items.Item(mc_strNumContrato).Specific.String
                    End If
                    If blnUsaIDVehiculo Then
                        strParametros = strIDVehiculo
                    End If

                    If blnUsaIDVehiculo And blnUsaIDContrato And blnUsaTipo = False And blnUsaNombreEmpleado = False Then

                        strParametros = String.Format("{0},{1}", oForm.Items.Item(mc_strNumContrato).Specific.String, strIDVehiculo)

                    End If

                    If blnUsaNombreEmpleado Then
                        strNombreEmpleado = "," & Utilitarios.ObtieneEmpname(m_SBO_Application)
                        If String.IsNullOrEmpty(strNombreEmpleado) Then
                            strNombreEmpleado = ",*"
                        End If
                        strNombreEmpleado = strNombreEmpleado.Replace(" ", "°")
                        strParametros &= strNombreEmpleado
                    End If

                    strDireccionReporte = objConfiguracionGeneral.DireccionReportes & strDireccionReporte

                    strDireccionReporte = strDireccionReporte.Replace(" ", "°")
                    strPathExe = My.Application.Info.DirectoryPath & "\SCG Visualizador de Reportes.exe "

                    strPathExe &= strBarraTitulo & " " & strDireccionReporte & " " & CatchingEvents.DBUser & "," & CatchingEvents.DBPassword & "," & m_oCompany.Server & "," & m_oCompany.CompanyDB & " " & strParametros
                    Shell(strPathExe, AppWinStyle.MaximizedFocus)
                End If
            Next

        Else

            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorImprimirFicha, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)

        End If

    End Sub

    Public Sub CaracteristicasReporte(ByVal p_strServerName As String, ByVal p_strDatabaseName As String, _
                                             ByRef p_blnUsaIDVehiculo As Boolean, ByRef p_blnUsaIDContrato As Boolean, _
                                             ByRef p_blnUsaNombreEmpleado As Boolean, ByRef p_strNombreReporte As String, _
                                             ByRef p_blnUsaTipo As Boolean, ByVal p_intIDReporte As Integer)

        Dim drdResultadoConsulta As SqlClient.SqlDataReader
        Dim cmdEjecutarConsulta As New SqlClient.SqlCommand
        Dim strConectionString As String
        Dim cn_Coneccion As New SqlClient.SqlConnection

        Configuracion.CrearCadenaDeconexion(p_strServerName, p_strDatabaseName, strConectionString)
        cn_Coneccion.ConnectionString = strConectionString
        cn_Coneccion.Open()

        cmdEjecutarConsulta.Connection = cn_Coneccion

        cmdEjecutarConsulta.CommandType = CommandType.Text
        cmdEjecutarConsulta.CommandText = "SELECT Code, Name, U_Archivo, " & _
                                          "Case U_UsaEmpleado when 'Y' then 1 else 0 end U_UsaEmpleado,  " & _
                                          "Case U_UsaIDContrato when 'Y' then 1 else 0 end U_UsaIDContrato, " & _
                                          "Case U_UsaVehiculo when 'Y' then 1 else 0 end U_UsaVehiculo, " & _
                                          "Case U_UsaTipo when 'Y' then 1 else 0 end  U_UsaTipo " & _
                                          "FROM [@SCGD_RPT_PV]  with (nolock) WHERE(Code = " & p_intIDReporte & ")"

        drdResultadoConsulta = cmdEjecutarConsulta.ExecuteReader()

        Do While drdResultadoConsulta.Read

            p_blnUsaIDVehiculo = drdResultadoConsulta.GetInt32(5)
            p_blnUsaIDContrato = drdResultadoConsulta.GetInt32(4)
            p_blnUsaNombreEmpleado = drdResultadoConsulta.GetInt32(3)
            p_strNombreReporte = drdResultadoConsulta.GetString(2)
            p_blnUsaTipo = drdResultadoConsulta.GetInt32(6)

        Loop

        drdResultadoConsulta.Close()
        cmdEjecutarConsulta.Connection.Close()
    End Sub

    <System.CLSCompliant(False)> _
    Public Sub ManejoEventosTab(ByRef oTmpForm As SAPbouiCOM.Form, _
                                ByRef pval As SAPbouiCOM.ItemEvent)
        '*******************************************************************    
        'Nombre: ManejoEventosTab()
        'Propósito: Asigna el PanelLevel del Form, dependiendo de el Tab que se haya seleccionado 
        'Acepta:    ByRef oTmpForm As SAPbouiCOM.Form, 
        '           ByRef pval As SAPbouiCOM.ItemEvent
        'Retorna:   Ninguno
        'Desarrollador: Yeiner
        'Fecha: 29 Nov 2006
        '********************************************************************

        If pval.ItemUID = mc_strFolder1 Then
            oTmpForm.PaneLevel = 1
            If oTmpForm.Items.Item("mtx_1").Visible Then
                Call ManejoControlesOtrosL(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_2").Visible Then
                Call ManejoControlesOtrosC(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_OtrCos").Visible Then
                Call ManejoControlesOtrosCostos(oTmpForm.UniqueID)
            End If

        ElseIf pval.ItemUID = mc_strFolder2 Then

            oTmpForm.PaneLevel = 2
            If oTmpForm.Items.Item("mtx_1").Visible Then
                Call ManejoControlesOtrosL(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_2").Visible Then
                Call ManejoControlesOtrosC(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_OtrCos").Visible Then
                Call ManejoControlesOtrosCostos(oTmpForm.UniqueID)
            End If

        ElseIf pval.ItemUID = mc_strFolder3 Then

            oTmpForm.PaneLevel = 3

            If oTmpForm.Items.Item("mtx_1").Visible Then
                Call ManejoControlesOtrosL(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_2").Visible Then
                Call ManejoControlesOtrosC(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_OtrCos").Visible Then
                Call ManejoControlesOtrosCostos(oTmpForm.UniqueID)
            End If

        ElseIf pval.ItemUID = mc_strFolder4 Then

            oTmpForm.PaneLevel = 4

            If oTmpForm.Items.Item("mtx_1").Visible Then
                Call ManejoControlesOtrosL(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_2").Visible Then
                Call ManejoControlesOtrosC(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_OtrCos").Visible Then
                Call ManejoControlesOtrosCostos(oTmpForm.UniqueID)
            End If

        ElseIf pval.ItemUID = mc_strFolder5 Then

            oTmpForm.PaneLevel = 5
            If oTmpForm.Items.Item("mtx_1").Visible Then
                Call ManejoControlesOtrosL(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_2").Visible Then
                Call ManejoControlesOtrosC(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_OtrCos").Visible Then
                Call ManejoControlesOtrosCostos(oTmpForm.UniqueID)
            End If

        ElseIf pval.ItemUID = mc_strFolder6 Then

            oTmpForm.PaneLevel = 6
            If oTmpForm.Items.Item("mtx_1").Visible Then
                Call ManejoControlesOtrosL(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_2").Visible Then
                Call ManejoControlesOtrosC(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_OtrCos").Visible Then
                Call ManejoControlesOtrosCostos(oTmpForm.UniqueID)
            End If

        ElseIf pval.ItemUID = mc_strFolder7 Then

            oTmpForm.PaneLevel = 7
            If oTmpForm.Items.Item("mtx_1").Visible Then
                Call ManejoControlesOtrosL(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_2").Visible Then
                Call ManejoControlesOtrosC(oTmpForm.UniqueID)
            End If

            If oTmpForm.Items.Item("mtx_OtrCos").Visible Then
                Call ManejoControlesOtrosCostos(oTmpForm.UniqueID)
            End If

        ElseIf pval.ItemUID = mc_strFolder8 Then
            oTmpForm.PaneLevel = 8
        ElseIf pval.ItemUID = mc_strFolder10 Then
            oTmpForm.PaneLevel = 10
        ElseIf pval.ItemUID = mc_strFolder11 Then
            oTmpForm.PaneLevel = 11
        End If


    End Sub

    <System.CLSCompliant(False)> _
    Public Sub ManejadorEventoUnLoad(ByVal FormUID As String, _
                                    ByRef pVal As SAPbouiCOM.ItemEvent, _
                                    ByRef BubbleEvent As Boolean)

        oForm = Nothing

    End Sub

    Public Sub CargarFormularioActual()
        oForm = m_SBO_Application.Forms.Item("SCGD_frmContVent")
        oForm.Items.Item("txtNumCot").Specific.string = String.Empty
        oForm.Items.Item("txtTipoCam").Enabled = False
    End Sub

    Public Sub NuevoContrato()

        oForm = m_SBO_Application.Forms.Item("SCGD_frmContVent")
        Call AsignarValoresIniciales()
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_FinE", 0, "N")
        Call ManejoFinanciamientoExterno()
        Call ManejarEstados(oForm)
        Call CargarFormularioActual()
        Call CargaSucursalAlContrato()

    End Sub

    Public Sub EjecutaEvento(ByVal Novehicuolo As String)

        RaiseEvent AgregoVehiculo(Me, Novehicuolo)

    End Sub

    ''' <summary>
    ''' Maneja los checks de la pestaña Consignado y recalcula los montos según corresponda
    ''' </summary>
    ''' <param name="strCheck">UniqueID del check</param>
    ''' <remarks></remarks>
    Public Sub ManejadorChecksBoxConsignado(ByVal strCheckUniqueID As String, ByVal oForm As SAPbouiCOM.Form)

        Dim chkCheckBox As SAPbouiCOM.CheckBox

        Try
            If Not String.IsNullOrEmpty(strCheckUniqueID) Then
                DesmarcarChecksConsignado(strCheckUniqueID, oForm)
                chkCheckBox = oForm.Items.Item("chkAuto").Specific

                If strCheckUniqueID = "chkAuto" And chkCheckBox.Checked Then
                    RecalcularTotalesConsignado(oForm)
                Else
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoFC", 0, 0)
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoCns", 0, 0)
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MIVACons", 0, 0)
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MTotalCs", 0, 0)
                End If

            End If
        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    ' ''' <summary>
    ' ''' Recalcula todos los montos y totales de la pestaña consignado
    ' ''' </summary>
    ' ''' <param name="oForm">Formulario desde el cual se ejecuta el proceso</param>
    ' ''' <remarks></remarks>
    'Public Sub RecalcularTotalesConsignado(ByVal oForm As SAPbouiCOM.Form)
    '    Dim MontoComisionFacturar As Decimal = 0
    '    Dim strMontoComisionFacturar As String = String.Empty
    '    Dim decMontoTotal As Decimal = 0
    '    Dim strNumeroUnidad As String = String.Empty
    '    Dim strCodigoImpuesto As String = String.Empty
    '    Dim decPorcentajeImpuesto As Decimal = 0
    '    Dim decImpuesto As Decimal = 0
    '    Dim dtFechaContrato As DateTime
    '    Dim strCheckMarcado As String = String.Empty
    '    Dim chkCheckBox As SAPbouiCOM.CheckBox
    '    Dim chkCheckBoxManual As SAPbouiCOM.CheckBox

    '    Try
    '        chkCheckBox = oForm.Items.Item("chkAuto").Specific
    '        chkCheckBoxManual = oForm.Items.Item("chkManu").Specific

    '        'Obtiene la fecha del contrato de ventas
    '        If Nothing <> oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0) Then
    '            dtFechaContrato = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0), "yyyyMMdd", Nothing)
    '        ElseIf Nothing <> oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0) Then
    '            dtFechaContrato = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)
    '        Else
    '            dtFechaContrato = DateTime.Now
    '        End If

    '        If chkCheckBox.Checked Then
    '            If oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size > 0 Then
    '                strNumeroUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim()

    '                'Calcula el monto neto a facturar y el monto neto
    '                MontoComisionFacturar = CalcularMontoComisionConsignacion(strNumeroUnidad, oForm)

    '                'Obtiene el monto del porcentaje de impuesto
    '                'strCodigoImpuesto = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Impuesto", 0).Trim
    '                strCodigoImpuesto = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ImpCmsCns", 0).Trim
    '                If Not String.IsNullOrEmpty(strCodigoImpuesto) Then
    '                    decPorcentajeImpuesto = Utilitarios.RetornaImpuestoVenta(strCodigoImpuesto, dtFechaContrato) / 100
    '                    'Calcula el monto del impuesto
    '                    If decPorcentajeImpuesto > 0 Then
    '                        decImpuesto = MontoComisionFacturar * decPorcentajeImpuesto
    '                    End If

    '                    'Calcula el total con impuesto
    '                    decMontoTotal = decImpuesto + MontoComisionFacturar

    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoFC", 0, MontoComisionFacturar.ToString(n))
    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoCns", 0, MontoComisionFacturar.ToString(n))
    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MIVACons", 0, decImpuesto.ToString(n))
    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MTotalCs", 0, decMontoTotal.ToString(n))
    '                Else
    '                    'oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoFC", 0, 0)
    '                    'oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoCns", 0, 0)
    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MIVACons", 0, 0)
    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MTotalCs", 0, 0)
    '                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorIVAConsignado, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
    '                End If

    '            End If

    '        Else

    '            If Not chkCheckBoxManual.Checked Then
    '                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoFC", 0, 0)
    '                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoCns", 0, 0)
    '                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MIVACons", 0, 0)
    '                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MTotalCs", 0, 0)
    '            Else
    '                'Si el check manual esta seleccionado, se procede a recalcular el monto del impuesto y el total
    '                'cada vez que se modifica el valor del campo U_MNetoFC o del campo U_MNetoCns
    '                'Obtiene el monto del porcentaje de impuesto

    '                'strCodigoImpuesto = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Impuesto", 0).Trim
    '                strCodigoImpuesto = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ImpCmsCns", 0).Trim
    '                If Not String.IsNullOrEmpty(strCodigoImpuesto) Then
    '                    decPorcentajeImpuesto = Utilitarios.RetornaImpuestoVenta(strCodigoImpuesto, dtFechaContrato) / 100
    '                    strMontoComisionFacturar = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MNetoFC", 0)

    '                    If String.IsNullOrEmpty(strMontoComisionFacturar) Then
    '                        strMontoComisionFacturar = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MNetoCns", 0)
    '                    End If

    '                    strMontoComisionFacturar = strMontoComisionFacturar.Trim()

    '                    If String.IsNullOrEmpty(strMontoComisionFacturar) Then
    '                        MontoComisionFacturar = 0
    '                    Else
    '                        MontoComisionFacturar = Decimal.Parse(strMontoComisionFacturar, n)
    '                    End If

    '                    'Calcula el monto del impuesto
    '                    If decPorcentajeImpuesto > 0 Then
    '                        decImpuesto = MontoComisionFacturar * decPorcentajeImpuesto
    '                    End If

    '                    'Calcula el total con impuesto
    '                    decMontoTotal = decImpuesto + MontoComisionFacturar
    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoFC", 0, MontoComisionFacturar.ToString(n))
    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoCns", 0, MontoComisionFacturar.ToString(n))
    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MIVACons", 0, decImpuesto.ToString(n))
    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MTotalCs", 0, decMontoTotal.ToString(n))
    '                Else
    '                    'oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoFC", 0, 0)
    '                    'oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoCns", 0, 0)
    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MIVACons", 0, 0)
    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MTotalCs", 0, 0)
    '                    m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorIVAConsignado, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
    '                End If


    '            End If
    '        End If

    '    Catch ex As Exception
    '        Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
    '    End Try

    'End Sub

    ''' <summary>
    ''' Recalcula todos los montos y totales de la pestaña consignado
    ''' </summary>
    ''' <param name="oForm">Formulario desde el cual se ejecuta el proceso</param>
    ''' <remarks></remarks>
    Public Sub RecalcularTotalesConsignado(ByVal oForm As SAPbouiCOM.Form)
        Dim MontoComisionFacturar As Decimal = 0
        Dim strMontoComisionFacturar As String = String.Empty
        Dim decMontoTotal As Decimal = 0
        Dim strNumeroUnidad As String = String.Empty
        Dim strCodigoImpuesto As String = String.Empty
        Dim decPorcentajeImpuesto As Decimal = 0
        Dim decImpuesto As Decimal = 0
        Dim dtFechaContrato As DateTime
        Dim strCheckMarcado As String = String.Empty
        Dim chkCheckBox As SAPbouiCOM.CheckBox
        Dim chkCheckBoxManual As SAPbouiCOM.CheckBox

        Try
            chkCheckBox = oForm.Items.Item("chkAuto").Specific
            chkCheckBoxManual = oForm.Items.Item("chkManu").Specific

            'Obtiene la fecha del contrato de ventas
            If Nothing <> oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0) Then
                dtFechaContrato = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0), "yyyyMMdd", Nothing)
            ElseIf Nothing <> oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0) Then
                dtFechaContrato = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)
            Else
                dtFechaContrato = DateTime.Now
            End If

            If chkCheckBox.Checked Then
                If oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size > 0 Then
                    strNumeroUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim()

                    'Calcula el monto neto a facturar y el monto neto
                    decMontoTotal = CalcularMontoComisionConsignacion(strNumeroUnidad, oForm)

                    'Obtiene el monto del porcentaje de impuesto
                    'strCodigoImpuesto = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Impuesto", 0).Trim
                    strCodigoImpuesto = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ImpCmsCns", 0).Trim
                    If Not String.IsNullOrEmpty(strCodigoImpuesto) Then
                        decPorcentajeImpuesto = Utilitarios.RetornaImpuestoVenta(strCodigoImpuesto, dtFechaContrato) / 100
                        'Calcula el monto del impuesto
                        If decPorcentajeImpuesto > 0 Then
                            MontoComisionFacturar = decMontoTotal / (1 + (decPorcentajeImpuesto))
                            decImpuesto = decMontoTotal - MontoComisionFacturar
                        Else
                            MontoComisionFacturar = decMontoTotal
                            decImpuesto = 0
                        End If

                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoFC", 0, MontoComisionFacturar.ToString(n))
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoCns", 0, MontoComisionFacturar.ToString(n))
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MIVACons", 0, decImpuesto.ToString(n))
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MTotalCs", 0, decMontoTotal.ToString(n))
                    Else
                        'oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoFC", 0, 0)
                        'oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoCns", 0, 0)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MIVACons", 0, 0)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MTotalCs", 0, 0)
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorIVAConsignado, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                    End If

                End If

            Else

                If Not chkCheckBoxManual.Checked Then
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoFC", 0, 0)
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoCns", 0, 0)
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MIVACons", 0, 0)
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MTotalCs", 0, 0)
                Else
                    'Si el check manual esta seleccionado, se procede a recalcular el monto del impuesto y el total
                    'cada vez que se modifica el valor del campo U_MNetoFC o del campo U_MNetoCns
                    'Obtiene el monto del porcentaje de impuesto

                    'strCodigoImpuesto = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Impuesto", 0).Trim
                    strCodigoImpuesto = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_ImpCmsCns", 0).Trim
                    If Not String.IsNullOrEmpty(strCodigoImpuesto) Then
                        decPorcentajeImpuesto = Utilitarios.RetornaImpuestoVenta(strCodigoImpuesto, dtFechaContrato) / 100
                        strMontoComisionFacturar = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MNetoFC", 0)

                        If String.IsNullOrEmpty(strMontoComisionFacturar) Then
                            strMontoComisionFacturar = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_MNetoCns", 0)
                        End If

                        strMontoComisionFacturar = strMontoComisionFacturar.Trim()

                        If String.IsNullOrEmpty(strMontoComisionFacturar) Then
                            MontoComisionFacturar = 0
                        Else
                            MontoComisionFacturar = Decimal.Parse(strMontoComisionFacturar, n)
                        End If

                        'Calcula el monto del impuesto
                        If decPorcentajeImpuesto > 0 Then
                            decImpuesto = MontoComisionFacturar * decPorcentajeImpuesto
                        End If

                        'Calcula el total con impuesto
                        decMontoTotal = decImpuesto + MontoComisionFacturar
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoFC", 0, MontoComisionFacturar.ToString(n))
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoCns", 0, MontoComisionFacturar.ToString(n))
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MIVACons", 0, decImpuesto.ToString(n))
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MTotalCs", 0, decMontoTotal.ToString(n))
                    Else
                        'oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoFC", 0, 0)
                        'oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MNetoCns", 0, 0)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MIVACons", 0, 0)
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_MTotalCs", 0, 0)
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorIVAConsignado, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                    End If


                End If
            End If

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    ''' <summary>
    ''' Habilita o deshabilita todos los controles de la pestaña consignado para evitar modificaciones.
    ''' </summary>
    ''' <param name="oForm">Formulario desde el cual se ejecuta</param>
    ''' <param name="p_boolHabilitarForzado">True = Habilita los controles y omite otras validaciones. 
    ''' False = Se realizan las validaciones normales y se habilita o deshabilita según corresponda</param>
    ''' <remarks></remarks>
    Public Sub HabilitarDeshabilitarCtrlsConsignado(ByVal oForm As SAPbouiCOM.Form, ByVal p_boolHabilitarForzado As Boolean)
        Dim strEstadoContratoVentas As String = String.Empty
        Dim strEstadoFacturado As String = String.Empty
        Dim strQuery As String = String.Empty
        Dim boolHabilitar As Boolean = True
        Try
            If p_boolHabilitarForzado = True Then
                boolHabilitar = True
            Else
                If oForm.Mode = BoFormMode.fm_ADD_MODE Or oForm.Mode = BoFormMode.fm_UPDATE_MODE Then
                    boolHabilitar = True
                Else
                    strQuery = "SELECT TOP 1 ""U_Prio"" FROM ""@SCGD_ADMIN9"" Order By ""U_Prio"" DESC"
                    strEstadoFacturado = Utilitarios.EjecutarConsulta(strQuery, m_oCompany.CompanyDB, m_oCompany.Server).ToString().Trim
                    strEstadoContratoVentas = oForm.DataSources.DBDataSources.Item("@SCGD_CVENTA").GetValue("U_Estado", 0)

                    If strEstadoFacturado = strEstadoContratoVentas Then
                        boolHabilitar = False
                    End If

                End If
            End If

            oForm.Items.Item("chkAuto").Enabled = boolHabilitar
            oForm.Items.Item("chkManu").Enabled = boolHabilitar
            oForm.Items.Item("chkSinCo").Enabled = boolHabilitar
            oForm.Items.Item("txtClCon").Enabled = boolHabilitar
            oForm.Items.Item("txtNetFa").Enabled = boolHabilitar
            oForm.Items.Item("txtNetoC").Enabled = boolHabilitar
            'oForm.Items.Item("txtIVAC").Enabled = boolHabilitar
            oForm.Items.Item("txtTotaC").Enabled = boolHabilitar
            oForm.Items.Item("txtInIVA").Enabled = boolHabilitar

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    ''' <summary>
    ''' Calcula el monto neto por comisión de consignación
    ''' </summary>
    ''' <param name="p_strNumeroUnidad">Número de Unidad campo "U_Cod_Unid" de la tabla "@SCGD_VEHICULO"</param>
    ''' <param name="oForm">Formulario de SAP desde el cual se ejecuta</param>
    ''' <returns>Monto neto de la comisión por consignación en formato decimal</returns>
    ''' <remarks></remarks>
    Public Function CalcularMontoComisionConsignacion(ByVal p_strNumeroUnidad As String, ByVal oForm As SAPbouiCOM.Form) As Decimal
        Dim decMontoTotal As Decimal = 0
        Dim decCostoConsignado As Decimal = 0
        Dim decPrecioVenta As Decimal = 0

        'Monedas y tipos de cambio
        Dim strMonedaLocal As String
        Dim strMonedaSistema As String
        Dim strMonedaVehiculo As String
        Dim strMonedaCV As String
        Dim strTipoCambioSistema As String
        Dim strTipoCambioCV As String
        Dim strFechaCV As String
        Dim strFecha As String
        Dim dtFechaCV As Date
        Dim decTCDoc As Decimal
        Dim objGlobal As DMSOneFramework.BLSBO.GlobalFunctionsSBO
        Dim strQueryMoneda As String = "SELECT ""U_Moneda"" FROM ""@SCGD_VEHICULO"" WITH (nolock) where ""U_Cod_Unid"" = '{0}'"
        Dim strQueryCosto As String = "SELECT TOP 1 T0.""U_CosPro"" FROM ""@SCGD_VEHICULO"" T0 WITH (nolock) WHERE T0.""U_Cod_Unid"" = '{0}'"

        Try

            If Not String.IsNullOrEmpty(p_strNumeroUnidad) Then
                If EsConsignado(p_strNumeroUnidad) = True Then

                    objGlobal = New DMSOneFramework.BLSBO.GlobalFunctionsSBO
                    'Fechas de documento y del contrato de ventas
                    strFechaCV = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)
                    strFecha = Utilitarios.RetornaFechaFormatoRegional(strFechaCV)
                    dtFechaCV = Date.Parse(strFechaCV)
                    dtFechaCV = New Date(dtFechaCV.Year, dtFechaCV.Month, dtFechaCV.Day, 0, 0, 0)

                    'Monedas
                    strMonedaCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim()
                    strMonedaLocal = objGlobal.RetornarMonedaLocal
                    strMonedaSistema = objGlobal.RetornarMonedaSistema

                    'Tipos de cambio
                    strTipoCambioSistema = objGlobal.RetornarTipoCambioMonedaRS(strMonedaSistema, dtFechaCV)
                    strTipoCambioCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0)
                    decTCDoc = Decimal.Parse(strTipoCambioCV, n)

                    'Consulta la moneda del maestro del vehículo y realiza la conversión a la moneda del contrato de ventas
                    strQueryMoneda = String.Format(strQueryMoneda, p_strNumeroUnidad)
                    strMonedaVehiculo = Utilitarios.EjecutarConsulta(strQueryMoneda, m_oCompany.CompanyDB, m_oCompany.Server)

                    strQueryCosto = String.Format(strQueryCosto, p_strNumeroUnidad)
                    decCostoConsignado = Utilitarios.EjecutarConsultaPrecios(strQueryCosto, m_oCompany.CompanyDB, m_oCompany.Server)


                    decCostoConsignado = Utilitarios.ManejoMultimoneda(decCostoConsignado, strMonedaLocal, strMonedaSistema, strMonedaVehiculo, strMonedaCV,
                                                                                           decTCDoc.ToString(), Date.Parse(strFecha), n, m_oCompany)

                    If decCostoConsignado > 0 Then
                        'Dim strPrecioVenta As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocTotal", 0)

                        'Trae el precio de venta desde la pestaña datos de venta
                        'Dim strPrecioVenta As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_PreLis", 0)
                        Dim strPrecioVenta As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_AntImp", 0)

                        strPrecioVenta = strPrecioVenta.Trim()

                        If Not String.IsNullOrEmpty(strPrecioVenta) Then
                            decPrecioVenta = Decimal.Parse(strPrecioVenta, n)
                        End If

                        If decPrecioVenta > 0 Then
                            If decPrecioVenta > decCostoConsignado Then
                                decMontoTotal = decPrecioVenta - decCostoConsignado
                            Else
                                'Mensaje de error, el costo no puede ser mayor al precio de venta
                                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCostoVehiculoVsPrecio, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                            End If
                        Else
                            'Mensaje de error no hay precio de venta
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.PrecioVehículo, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)

                        End If
                    Else
                        'Mensaje de error no hay costo para el vehículo en consignación
                        m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ErrorCostoVehiculo, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
                    End If

                End If

            End If

            Return decMontoTotal

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Function

    ''' <summary>
    ''' Consulta si un vehículo es consignado o no
    ''' </summary>
    ''' <param name="p_strNumeroUnidad">Número de unidad, campo U_Cod_Unid de la tabla "@SCGD_VEHICULO"</param>
    ''' <returns>True = Es consignado, False = No es consignado</returns>
    ''' <remarks></remarks>
    Public Function EsConsignado(ByVal p_strNumeroUnidad As String) As Boolean
        Dim boolEsConsignado As Boolean = False
        Dim strResultado As String = String.Empty
        Dim strQuery As String = "SELECT T0.""U_Consig"" FROM ""@SCGD_VEHICULO"" T0 WITH (nolock) WHERE T0.""U_Cod_Unid"" = '{0}'"

        Try
            strQuery = String.Format(strQuery, p_strNumeroUnidad)
            strResultado = Utilitarios.EjecutarConsulta(strQuery, m_oCompany.CompanyDB, m_oCompany.Server).Trim()

            If strResultado.ToUpper() = "Y" Then
                boolEsConsignado = True
            End If

            Return boolEsConsignado

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Function

    ''' <summary>
    ''' Desmarca los otros checks de la pestaña consignado ya que solamente puede haber uno habilitado
    ''' </summary>
    ''' <remarks></remarks>
    Public Sub DesmarcarChecksConsignado(ByVal strCheckUniqueID As String, ByVal oForm As SAPbouiCOM.Form)

        Try

            Select Case strCheckUniqueID
                Case "chkAuto"
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ComManua", 0, "N")
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SinCom", 0, "N")
                Case "chkManu"
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ComAuto", 0, "N")
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_SinCom", 0, "N")
                Case "chkSinCo"
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ComAuto", 0, "N")
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ComManua", 0, "N")
            End Select

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    <System.CLSCompliant(False)> _
    Public Sub ManejarEstados(ByVal oForm As SAPbouiCOM.Form)

        Dim oCombo As SAPbouiCOM.ComboBox
        Dim oitem As SAPbouiCOM.Item
        Dim intEstado As Integer
        Dim oMatrizLineas As SAPbouiCOM.Matrix
        Dim oMatrizCobro As SAPbouiCOM.Matrix
        Dim decPrecio As Decimal
        Dim strValorSeleccionado As String
        Dim strFacturacionMultiple As String
        Dim strMoneda As String
        Dim strMultiplesFacts As String
        Dim oMatrizVehi As SAPbouiCOM.Matrix
        Dim oMatrixAcc As SAPbouiCOM.Matrix
        Dim blnDenegarCompraAccs As Boolean = False
        Dim strOrdenCompraAcc As String = ""
        Dim blnDenegarCompraTramites As Boolean = False
        Dim oMatrixTramites As SAPbouiCOM.Matrix
        Dim strOrdenCompraTramites As String = ""

        oCombo = DirectCast(oForm.Items.Item(mc_strEstado).Specific, SAPbouiCOM.ComboBox)

        oForm.Items.Item("txtNumCot").Specific.string = String.Empty

        If Not oCombo.Selected Is Nothing Then
            intEstado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Estado", 0)
        End If

        Dim oEdit1 As EditText
        oForm.Freeze(True)

        Dim oChekcRevers As CheckBox
        oChekcRevers = oForm.Items.Item("chkReversa").Specific

        Dim oEdit2 As EditText
        oEdit1 = oForm.Items.Item("txtCodeVen").Specific
        oEdit2 = oForm.Items.Item(mc_strtxtVendedor).Specific
        oEdit2.String = oEdit1.String

        oEdit1 = oForm.Items.Item(mc_strOwrCode).Specific
        oEdit2 = oForm.Items.Item(mc_strtxtTitular).Specific
        oEdit2.String = oEdit1.String

        'Hacar que los tabs no afecten el modo del formulario
        oitem = oForm.Items.Item(mc_strFolder1)
        oitem.AffectsFormMode = False
        oitem = oForm.Items.Item(mc_strFolder2)
        oitem.AffectsFormMode = False
        oitem = oForm.Items.Item(mc_strFolder3)
        oitem.AffectsFormMode = False
        oitem = oForm.Items.Item(mc_strFolder4)
        oitem.AffectsFormMode = False
        oitem = oForm.Items.Item(mc_strFolder5)
        oitem.AffectsFormMode = False
        oitem = oForm.Items.Item(mc_strFolder6)
        oitem.AffectsFormMode = False
        oitem = oForm.Items.Item(mc_strFolder7)
        oitem.AffectsFormMode = False
        oitem = oForm.Items.Item(mc_strFolder8)
        oitem.AffectsFormMode = False

        oMatrizLineas = DirectCast(oForm.Items.Item("mtx_1").Specific, SAPbouiCOM.Matrix)
        oMatrizCobro = DirectCast(oForm.Items.Item("mtx_2").Specific, SAPbouiCOM.Matrix)

        If oForm.Items.Item("mtx_1").Visible Then
            Call ManejoControlesOtrosL(oForm.UniqueID)
        End If

        If oForm.Items.Item("mtx_2").Visible Then
            Call ManejoControlesOtrosC(oForm.UniqueID)
        End If

        If oForm.Items.Item("mtx_OtrCos").Visible Then
            Call ManejoControlesOtrosCostos(oForm.UniqueID)
        End If

        strValorSeleccionado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vta", 0)
        decPrecio = Utilitarios.ConvierteDecimal(strValorSeleccionado, n)

        Call LimpiarUsadoTemporal(oForm)

        oForm.Items.Item("btnFacts").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
        strMultiplesFacts = oDataTableConfiguracionesDMS.GetValue("U_Mul_Fac", 0)
        oMatrixAcc = DirectCast(oForm.Items.Item("mtx_0").Specific, SAPbouiCOM.Matrix)

        If Utilitarios.MostrarMenu("SCGD_OCV", m_SBO_Application.Company.UserName) Then
            blnDenegarCompraAccs = True
        End If

        If blnDenegarCompraAccs = False Then
            For i As Integer = 0 To oMatrixAcc.RowCount - 1
                strOrdenCompraAcc = oForm.DataSources.DBDataSources.Item("@SCGD_ACCXCONT").GetValue("U_Ord_Acc", i)
                strOrdenCompraAcc = strOrdenCompraAcc.Trim()
                If Not String.IsNullOrEmpty(strOrdenCompraAcc) Then
                    blnDenegarCompraAccs = True
                    Exit For
                End If
            Next
        End If

        oMatrixTramites = DirectCast(oForm.Items.Item("mtx_Tram").Specific, SAPbouiCOM.Matrix)

        If Utilitarios.MostrarMenu("SCGD_OCT", m_SBO_Application.Company.UserName) Then
            blnDenegarCompraTramites = True
        End If

        If blnDenegarCompraTramites = False Then

            For i As Integer = 0 To oMatrixTramites.RowCount - 1

                strOrdenCompraTramites = oForm.DataSources.DBDataSources.Item("@SCGD_TRAMXCONT").GetValue("U_Ord_Comp", i)
                strOrdenCompraTramites = strOrdenCompraTramites.Trim()
                If Not String.IsNullOrEmpty(strOrdenCompraTramites) Then
                    blnDenegarCompraTramites = True
                    Exit For
                End If

            Next

        End If


        Select Case intEstado

            Case m_intEstadoInferior
                oForm.Items.Item("1").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnFactura").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False) '.Enabled = False
                oForm.Items.Item("btnReversa").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnQui_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("cboTipCo").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnCalcula").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnAct_Veh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("add").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("del").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnAddUnid").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnDelUnid").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnCalPrec").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnCalcAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnAgregaU").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnBuscaUs").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnAgreVeh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                'manejo de Agrega Masivos
                oForm.Items.Item("btnCargM").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnActVeh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("txtFecDocR").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("txtFecDoc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnComprar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnAgrTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnDelTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnCalTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnCompTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oMatrizLineas.Columns.Item("col_2").Editable = False
                oMatrizLineas.Columns.Item("col_3").Editable = False
                oMatrizCobro.Columns.Item("col_3").Editable = False
                oMatrizCobro.Columns.Item("col_5").Editable = False
                oForm.EnableMenu("1283", False)
                oForm.EnableMenu("1284", False)
                Utilitarios.FormularioSoloLectura(oForm, False)
            Case m_intEstadoSuperior

                If oChekcRevers.Checked Then
                    oForm.Items.Item("1").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnFactura").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnQui_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("cboTipCo").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnCalcula").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnAct_Veh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnReversa").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("add").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("del").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnAddUnid").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnDelUnid").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnCalPrec").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnCalcAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnAgregaU").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnBuscaUs").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnAgreVeh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    'manejo de Agrega Masivos
                    oForm.Items.Item("btnCargM").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnActVeh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("txtFecDocR").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("txtFecDoc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oMatrizLineas.Columns.Item("col_2").Editable = False
                    oMatrizLineas.Columns.Item("col_3").Editable = False
                    oMatrizCobro.Columns.Item("col_3").Editable = False
                    oMatrizCobro.Columns.Item("col_5").Editable = False
                    Utilitarios.FormularioSoloLectura(oForm, False)
                    oForm.EnableMenu("1283", False)
                    oForm.EnableMenu("1284", False)
                Else
                    oForm.Items.Item("1").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnFactura").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnQui_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("cboTipCo").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnCalcula").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnAct_Veh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                    oForm.Items.Item("btnReversa").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                    oForm.Items.Item("add").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("del").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnAddUnid").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnDelUnid").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnCalPrec").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnCalcAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnAgregaU").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnBuscaUs").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnAgreVeh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    'manejo de Agrega Masivos
                    oForm.Items.Item("btnCargM").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("btnActVeh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oForm.Items.Item("txtFecDocR").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                    oForm.Items.Item("txtFecDoc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    oMatrizLineas.Columns.Item("col_2").Editable = False
                    oMatrizLineas.Columns.Item("col_3").Editable = False
                    oMatrizCobro.Columns.Item("col_3").Editable = False
                    oMatrizCobro.Columns.Item("col_5").Editable = False
                    Utilitarios.FormularioSoloLectura(oForm, False)
                    oForm.EnableMenu("1283", False)
                    oForm.EnableMenu("1284", False)
                End If

                oForm.Items.Item("btnComprar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)

                oForm.Items.Item("btnAgrTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnDelTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnCalTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnCompTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)

                oMatrizVehi = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

                If strMultiplesFacts = "Y" AndAlso oMatrizVehi.RowCount > 1 Then
                    oForm.Items.Item("btnFacts").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                End If

            Case m_intEstadoPrefacturacion
                oForm.Items.Item("1").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnFactura").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnReversa").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnQui_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("cboTipCo").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnCalcula").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnAct_Veh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("add").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("del").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnAddUnid").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnDelUnid").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnCalPrec").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnCalcAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnAgregaU").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnBuscaUs").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnAgreVeh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                'manejo de Agrega Masivos
                oForm.Items.Item("btnCargM").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnActVeh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("txtFecDocR").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("txtFecDoc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnComprar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnAgrTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnDelTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnCalTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnCompTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oMatrizLineas.Columns.Item("col_2").Editable = True
                oMatrizLineas.Columns.Item("col_3").Editable = True
                oMatrizCobro.Columns.Item("col_3").Editable = True
                oMatrizCobro.Columns.Item("col_5").Editable = True
                oForm.EnableMenu("1283", False)
                oForm.EnableMenu("1284", True)

            Case Else
                oForm.Items.Item("1").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnFactura").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnReversa").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnQui_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("cboTipCo").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnCalcula").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnAct_Veh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("add").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("del").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnAddUnid").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnDelUnid").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnCalPrec").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnCalcAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnAgregaU").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnBuscaUs").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnAgreVeh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                'manejo de Agrega Masivos
                oForm.Items.Item("btnCargM").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnActVeh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("txtFecDocR").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("txtFecDoc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("btnComprar").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnAgrTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnDelTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("btnCalTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)

                oForm.Items.Item("btnCompTra").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oMatrizLineas.Columns.Item("col_2").Editable = True
                oMatrizLineas.Columns.Item("col_3").Editable = True
                oMatrizCobro.Columns.Item("col_3").Editable = True
                oMatrizCobro.Columns.Item("col_5").Editable = True
                If intEstado = (m_intEstadoInferior + 1) Then
                    oForm.EnableMenu("1283", False)
                Else
                    oForm.EnableMenu("1283", False)
                End If
                oForm.EnableMenu("1284", True)
        End Select

        Call CargarPagosRealizados(oForm)

        'Agregado 08/10/2010: Maneja si modificar el precio de venta del CV
        strFacturacionMultiple = oDataTableConfiguracionesDMS.GetValue("U_SCGD_ModPrecio", 0)

        Dim oMatrix As SAPbouiCOM.Matrix

        oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

        If strFacturacionMultiple = "N" Then
            oForm.Items.Item("txtPre_Ven").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
        ElseIf strFacturacionMultiple = "Y" Then
            oForm.Items.Item("txtPre_Ven").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
        End If

        Dim strUsaFinanc As String = oDataTableConfiguracionesDMS.GetValue("U_Usa_Fin", 0)

        If strUsaFinanc = "Y" Then
            oForm.Items.Item("ckbFinProp").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
        Else
            oForm.Items.Item("ckbFinProp").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
        End If

        strMoneda = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0)
        m_objBLSBO.Set_Compania(m_oCompany)
        m_strMonedaLocal = m_objBLSBO.RetornarMonedaLocal()

        If String.IsNullOrEmpty(strMoneda) Then
            strMoneda = m_strMonedaLocal
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Moneda", 0, strMoneda)
        End If

        If Trim(strMoneda) <> m_strMonedaLocal Then
            oForm.Items.Item("txtTipoCam").Visible = True
            oForm.Items.Item("txtTipoCam").Enabled = m_BloqueaTipoCambio
        Else
            oForm.Items.Item("txtTipoCam").Visible = False
        End If

        Call FormateaPreciosBase(oForm)

        'Agregado 06/01/2011: Manejo de editText de numero de cotizacion
        Dim strCot As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_CodCotiz", 0)
        strCot = Utilitarios.EjecutarConsulta("Select DocNum from [OQUT]  with (nolock) where DocEntry = '" & strCot.Trim() & "'", m_oCompany.CompanyDB, m_oCompany.Server)
        dataTable.SetValue(Column:="NumCot", rowIndex:=0, Value:=strCot)

        Dim txtItem As Item = oForm.Items.Item("txtNumCot")
        Dim txtSpecific As EditText = DirectCast(txtItem.Specific, EditText)

        txtSpecific.DataBind.Bind(UID:="COT", columnUid:="NumCot")

        blnPreguntaPrecio = True

        Dim strCreaNCparaVehiculoUsado As String = oDataTableConfiguracionesDMS.GetValue("U_NCSalNeg", 0)
        Dim strMoPreVta As String

        If strCreaNCparaVehiculoUsado = "Y" Then
            Dim oLink As SAPbouiCOM.LinkedButton
            oLink = DirectCast(oForm.Items.Item("lkNota_De").Specific, SAPbouiCOM.LinkedButton)
            oLink.LinkedObjectType = 14

            oLink = DirectCast(oForm.Items.Item("223").Specific, SAPbouiCOM.LinkedButton)
            oLink.LinkedObjectType = 14

        End If

        oMatrix = DirectCast(oForm.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)

        If oMatrix.RowCount > 1 Then

            oForm.Items.Item("lk_Entrada").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)

        End If

        Call LimpiarVehiculoTemporal(oForm)

        g_blnCambiaBoton = False

        g_intCantUnidadesEli = 0

        g_blnEventoCerrarAfecta = True

        g_blnEventoActualizarAfecta = True

        Dim strNivelAprobConf As String = oDataTableConfiguracionesDMS.GetValue("U_NivAprob", 0)

        strMoPreVta = oDataTableConfiguracionesDMS.GetValue("U_MoPreVta", 0).ToString().Trim()

        If IsNumeric(strNivelAprobConf) Then

            If intEstado >= CInt(strNivelAprobConf) Then

                oForm.Items.Item("txtPrecioV").SetAutoManagedAttribute(BoAutoManagedAttr.ama_Editable, 11, BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("txtPre_Ven").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            Else

                If strMoPreVta = "Y" Then
                    oForm.Items.Item("txtPrecioV").SetAutoManagedAttribute(BoAutoManagedAttr.ama_Editable, 11, BoModeVisualBehavior.mvb_True)
                Else
                    oForm.Items.Item("txtPrecioV").SetAutoManagedAttribute(BoAutoManagedAttr.ama_Editable, 11, BoModeVisualBehavior.mvb_False)
                End If
                If Not strFacturacionMultiple = "Y" Then
                    oForm.Items.Item("txtPre_Ven").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                End If
            End If

        End If

        Dim strGeneraFactAcc As String

        strGeneraFactAcc = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_GenFaAcc", 0)
        strGeneraFactAcc = strGeneraFactAcc.Trim()

        Dim strManejoDescuentoFact As String = oDataTableConfiguracionesDMS.GetValue("U_Desc_Fac", 0)

        If strManejoDescuentoFact = "Y" Then

            If strGeneraFactAcc = "Y" Then
                oForm.Items.Item("txtPoDeAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
                oForm.Items.Item("txtMonDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            Else
                oForm.Items.Item("txtPoDeAcc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                oForm.Items.Item("txtMonDesc").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            End If

        End If

        If strMultiplesFacts = "Y" Then
            oForm.Items.Item("txtGLTemp").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            oForm.Items.Item("btnOtrosVh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
        ElseIf Not strMultiplesFacts = "Y" Then
            oForm.Items.Item("txtGLTemp").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            oForm.Items.Item("btnOtrosVh").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
        End If

        'Diego Herrera - 14/06/2012: Limpiar Data Table de Gastos de Unidades y carga de datos de Base de Datos

        Dim strConsulta As String
        Dim strContrato As String

        If oDataTableGastosUnidad.Rows.Count > 0 Then

            oDataTableGastosUnidad.Rows.Clear()

        End If

        oDataTableConsultaGastos.Rows.Clear()
        oDataTableConsultaGastos = oForm.DataSources.DataTables.Item("ConsGast")

        strContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0)
        strContrato = strContrato.Trim()

        If Not String.IsNullOrEmpty(strContrato) Then

            strConsulta = "SELECT U_Cod_Item, U_Des_Item, U_Monto, U_Contrato, U_Unidad, U_Moneda FROM [@SCGD_GASTOS_VEH]  with (nolock) where U_Contrato = '" & strContrato & "'"

            oDataTableConsultaGastos.ExecuteQuery(strConsulta)

            If oDataTableConsultaGastos.Rows.Count > 0 Then

                If Not String.IsNullOrEmpty(oDataTableConsultaGastos.GetValue("U_Cod_Item", 0)) Then

                    For i As Integer = 0 To oDataTableConsultaGastos.Rows.Count - 1

                        oDataTableGastosUnidad.Rows.Add()
                        oDataTableGastosUnidad.SetValue("codItem", i, oDataTableConsultaGastos.GetValue("U_Cod_Item", i))
                        oDataTableGastosUnidad.SetValue("desItem", i, oDataTableConsultaGastos.GetValue("U_Des_Item", i))
                        oDataTableGastosUnidad.SetValue("monto", i, oDataTableConsultaGastos.GetValue("U_Monto", i))
                        oDataTableGastosUnidad.SetValue("cont", i, oDataTableConsultaGastos.GetValue("U_Contrato", i))
                        oDataTableGastosUnidad.SetValue("unidad", i, oDataTableConsultaGastos.GetValue("U_Unidad", i))
                        oDataTableGastosUnidad.SetValue("guarda", i, "Y")
                        oDataTableGastosUnidad.SetValue("depende", i, "N")
                        oDataTableGastosUnidad.SetValue("moneda", i, oDataTableConsultaGastos.GetValue("U_Moneda", i))
                    Next
                End If
            End If
        End If

        If SeguroPV Then
            oForm.Items.Item("1").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            For Each item As SAPbouiCOM.Item In oForm.Items
                If item.Type = BoFormItemTypes.it_EDIT OrElse item.Type = BoFormItemTypes.it_COMBO_BOX OrElse item.Type = BoFormItemTypes.it_MATRIX OrElse item.Type = BoFormItemTypes.it_EXTEDIT OrElse item.Type = BoFormItemTypes.it_CHECK_BOX Then
                    If item.FromPane = 10 And item.ToPane = 10 Then
                        item.AffectsFormMode = True
                    ElseIf item.FromPane <> 10 AndAlso item.ToPane <> 10 AndAlso item.UniqueID <> "txtOpcion" Then
                        oForm.Items.Item("txtOpcion").Click()
                        item.SetAutoManagedAttribute(BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                    End If
                End If
            Next

            Call oForm.EnableMenu("1281", False)
            Call oForm.EnableMenu("1282", False)
            Call oForm.EnableMenu("1291", False)
            Call oForm.EnableMenu("1288", False)
            Call oForm.EnableMenu("1289", False)
            Call oForm.EnableMenu("1290", False)

            oForm.Items.Item("Folder10").Click()
            oForm.Items.Item("txtCliCont").Click()
            oForm.Items.Item("txtOpcion").SetAutoManagedAttribute(BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
        End If

        oForm.Freeze(False)
    End Sub

    Private Sub ManejarVehículoUsado(ByRef p_UDOVehiculo As UDOVehiculos, ByVal oForm As SAPbouiCOM.Form, _
                                          ByVal p_strDisponibilidad As String,
                                          ByRef p_strComentariosVehiculoUsado As String,
                                          ByRef p_strUnidadUsado As String,
                                          ByVal intPosicion As Integer,
                                          ByVal strNotaCredUsado As String,
                                          ByVal strMonedaCont As String,
                                          ByVal p_lsValidacionUsados As List(Of ValidacionUsados),
                                          ByRef blnInsertado As Boolean,
                                          ByRef blnModificado As Boolean,
                                          ByRef p_strIDVehiculo As String)

        'Dim strIDVehiculo As String = String.Empty
        Dim strTipo As String
        Dim strAccesorios As String
        Dim strAñoVehiculo As String
        Dim strCategoria As String
        Dim strTipoContrato As String = String.Empty
        Dim strCodColor As String
        Dim strCodEstilo As String
        Dim strCodMarca As String
        Dim strCodUnidad As String
        Dim strDescEstilo As String
        Dim strDescMarca As String
        Dim strCodeModelo As String
        Dim strDescModelo As String
        Dim strCodeColor As String
        Dim strDescColor As String
        Dim strCodeTrasm As String
        Dim strKM As String
        Dim strCodeCombus As String
        Dim strNumMotor As String
        Dim strPlaca As String
        Dim strVIN As String
        Dim strNombreVendedor As String
        Dim strCodeClasif As String
        Dim strDescClasif As String
        Dim dblKmIngreso As Integer = 0

        Dim strFechaVenta As String
        Dim dtFechaVenta As Date
        Dim strContrato As String
        Dim strValorVenta As String
        Dim decValorVenta As Decimal = 0
        Dim strFechaIngreso As String
        Dim dtFechaIngreso As Date
        Dim strValorRecibo As String
        Dim decValorRecibo As Decimal = 0

        Dim blnVehiculoGenerado As Boolean = False

        Dim m_intONNMIdVehiculos As Integer
        Dim strCodProv As String
        Dim strNomProv As String

        Const l_strUsaXContr As String = "@SCGD_USADOXCONT"

        p_UDOVehiculo = Nothing
        strCodUnidad = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Cod_Unid", intPosicion).Trim()
        strDescMarca = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Marca", intPosicion).Trim()
        strDescEstilo = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Estilo", intPosicion).Trim()
        strNumMotor = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Motor", intPosicion).Trim()
        strVIN = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_VIN", intPosicion).Trim()
        strAñoVehiculo = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Anio", intPosicion).Trim()
        strPlaca = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Placa", intPosicion).Trim()
        strDescColor = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Color", intPosicion).Trim()
        strTipo = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Tipo", intPosicion).Trim()
        strCodeModelo = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Cod_Mod_Us", intPosicion).Trim()
        strDescModelo = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_MoUs", intPosicion).Trim()
        strCodeColor = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Cod_Col_Us", intPosicion).Trim()
        strDescColor = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Color", intPosicion).Trim()
        strCodeTrasm = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Cod_Trans_Us", intPosicion).Trim()
        strKM = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_KmUs", intPosicion).Trim()
        strCodeCombus = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Cod_Comb_Us", intPosicion).Trim()
        strCodeClasif = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Cod_Clasif_Us", intPosicion).Trim()
        strDescClasif = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Des_Clasif_us", intPosicion).Trim()
        strTipo = Utilitarios.EjecutarConsulta("Select Code from [@SCGD_TIPOVEHICULO] with (nolock) where Name = '" & strTipo & "'", m_oCompany.CompanyDB, m_oCompany.Server)
        strCodEstilo = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Cod_Estilo_Us", intPosicion).Trim()
        strCodMarca = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Cod_Marca_Us", intPosicion).Trim()
        strContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0).Trim()
        strNombreVendedor = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SlpName", 0).Trim()
        strFechaVenta = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0).Trim()
        strCodProv = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Cod_Prov", 0).Trim()
        strNomProv = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Nom_Prov", 0).Trim()
        dblKmIngreso = Double.Parse(strKM, n)

        If Not String.IsNullOrEmpty(strFechaVenta) Then
            dtFechaVenta = Date.ParseExact(strFechaVenta, "yyyyMMdd", Nothing)
            dtFechaVenta = New Date(dtFechaVenta.Year, dtFechaVenta.Month, dtFechaVenta.Day, 0, 0, 0)
        Else
            dtFechaVenta = Now.Date
        End If

        strFechaIngreso = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0).Trim()

        If Not String.IsNullOrEmpty(strFechaIngreso) Then
            dtFechaIngreso = Date.ParseExact(strFechaIngreso, "yyyyMMdd", Nothing)
            dtFechaIngreso = New Date(dtFechaIngreso.Year, dtFechaIngreso.Month, dtFechaIngreso.Day, 0, 0, 0)
        Else
            dtFechaIngreso = Now.Date
        End If

        strValorRecibo = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Val_Rec", intPosicion).Trim()

        If Not String.IsNullOrEmpty(strValorRecibo) Then
            decValorRecibo = Decimal.Parse(strValorRecibo, n)
        End If

        strValorVenta = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_Val_Venta", intPosicion).Trim()

        If Not String.IsNullOrEmpty(strValorVenta) Then
            decValorVenta = Decimal.Parse(strValorVenta, n)
        End If

        If Not String.IsNullOrEmpty(strTipo) Then
            strTipo = strTipo.Trim()
        Else
            strTipo = String.Empty
        End If

        strCategoria = oForm.DataSources.DBDataSources.Item(l_strUsaXContr).GetValue("U_CatUs", intPosicion).Trim()
        strTipoContrato = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_TipoCo", 0).Trim()


        If strPlaca <> "" Or strVIN <> "" Then

            If p_lsValidacionUsados(intPosicion).Existe Then

                ActualizarVehiculoUsado(p_lsValidacionUsados(intPosicion).IdVehiculo, strTipo, strAñoVehiculo, strCodeColor, strCodEstilo, strCodMarca, _
                                        strCodUnidad, strDescColor, strDescEstilo, strDescMarca, strNumMotor, strPlaca, strVIN, p_strDisponibilidad, _
                                        strNotaCredUsado, dtFechaDocumento, strContrato, dtFechaVenta, strNombreVendedor, decValorRecibo, String.Empty, _
                                        strMonedaCont, dblKmIngreso, strCodeClasif, decValorVenta, dtFechaIngreso, mc_strEstadoUsado, strCategoria, dblKmIngreso, strTipoContrato, strCodeModelo, strDescModelo, strCodeTrasm, strCodeCombus, strCodProv, strNomProv)

                blnModificado = True

                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ID_VehUs", 0, p_lsValidacionUsados(intPosicion).IdVehiculo)
            Else

                InsertarVehiculoUDO(p_strIDVehiculo, strTipo, String.Empty, strAñoVehiculo, strCodeColor, strCodEstilo, strCodMarca, strCodeModelo, _
                                                strCodUnidad, strCodeCombus, strDescColor, strDescEstilo, strDescMarca, strDescModelo, String.Empty, strNumMotor, strPlaca, _
                                                strVIN, strCodeTrasm, dblKmIngreso, p_strDisponibilidad, String.Empty, strCodeClasif, decValorVenta, dtFechaIngreso, strCategoria, _
                                                strNotaCredUsado, dtFechaDocumento, strContrato, dtFechaVenta, strNombreVendedor, decValorRecibo, String.Empty, strMonedaCont, dblKmIngreso, strTipoContrato, strCodProv, strNomProv)

                blnInsertado = True

                oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ID_VehUs", 0, p_strIDVehiculo)

                m_intONNMIdVehiculos = Integer.Parse(p_strIDVehiculo)
                m_intONNMIdVehiculos += 1

                p_strIDVehiculo = m_intONNMIdVehiculos.ToString()

            End If
            blnVehiculoGenerado = True
        End If

        'Crear Descripción del usado
        p_strUnidadUsado = strCodUnidad
        If Not String.IsNullOrEmpty(strDescMarca) Then
            strDescMarca = " " & strDescMarca
        Else
            strDescMarca = String.Empty
        End If
        If Not String.IsNullOrEmpty(strDescEstilo) Then
            strDescEstilo = " " & strDescEstilo
        Else
            strDescEstilo = ""
        End If
        If Not String.IsNullOrEmpty(strDescColor) Then
            strDescColor = " " & strDescColor
        Else
            strDescColor = ""
        End If
        If Not String.IsNullOrEmpty(strAñoVehiculo) Then
            strAñoVehiculo = " " & strAñoVehiculo
        Else
            strAñoVehiculo = ""
        End If
        If Not String.IsNullOrEmpty(strVIN) Then
            strVIN = " Serie " & strVIN
        Else
            strVIN = ""
        End If

        If Not String.IsNullOrEmpty(strPlaca) Then
            strPlaca = " Placa " & strPlaca
        Else
            strPlaca = ""
        End If

        If Not String.IsNullOrEmpty(strCodUnidad) Then
            strCodUnidad = " " & strCodUnidad
        Else
            strPlaca = ""
        End If

        p_strComentariosVehiculoUsado = strDescMarca & strDescEstilo & strAñoVehiculo & strDescColor & strCodUnidad & strVIN & strPlaca

    End Sub

    Private Sub InsertarVehiculoUDO(ByRef p_strIDVehiculo As String, _
                                         ByVal p_strTipo As String, _
                                         ByVal p_strCarroceria As String, _
                                         ByVal p_strAnoVehiculo As String, _
                                         ByVal p_strCodColor As String, _
                                         ByVal p_strCodEstilo As String, _
                                         ByVal p_strCodMarca As String, _
                                         ByVal p_strCodModelo As String, _
                                         ByVal p_strCodUnidad As String, _
                                         ByVal p_strCombustible As String, _
                                         ByVal p_strDescColor As String, _
                                         ByVal p_strDescEstilo As String, _
                                         ByVal p_strDescMarca As String, _
                                         ByVal p_strDescModelo As String, _
                                         ByVal p_strEstatus As String, _
                                         ByVal p_strNumMotor As String, _
                                         ByVal p_strPlaca As String, _
                                         ByVal p_strVIN As String, _
                                         ByVal p_strTransmision As String, _
                                         ByVal p_doubleKilometraje As Integer, _
                                         ByVal p_strDisponibilidad As String, _
                                         ByVal p_strTipoVenta As String, _
                                         ByVal p_strCodClasif As String, _
                                         ByVal p_DecValVenta As Decimal, _
                                         ByVal p_fhaIngresoInv As Date, _
                                         ByVal p_strCategoria As String, _
                                         ByVal p_strNumNotaCred As String, _
                                         ByVal p_dtFhaNotaCred As Date, _
                                         ByVal p_strNumContVenta As String, _
                                         ByVal p_dtFehaContVenta As Date, _
                                         ByVal p_strNombreVendedor As String, _
                                         ByVal p_DecValorRecibido As Decimal,
                                         ByVal p_strObservaciones As String, _
                                         ByVal p_strMonedaVeh As String, _
                                         ByVal p_dblKmIngreso As Double, _
                                         ByVal p_strTipoContrato As String, _
                                         Optional ByVal p_strCodProv As String = "", _
                                         Optional ByVal p_strNomProv As String = "")

        Dim UDOVehiculo As UDOVehiculos
        Dim UDOEncabezado As EncabezadoUDOVehiculos
        Dim UDTTrazabilidad As TrazabilidadUDOVehiculo
        Dim decTotalML As Decimal
        Dim decTotalMS As Decimal
        Dim strMonedaLocal As String
        Dim strMonedaSistema As String

        UDOVehiculo = New UDOVehiculos(m_oCompany)
        UDOEncabezado = New EncabezadoUDOVehiculos()

        UDOVehiculos.ListaTrazabilidad = New ListaTrazabilidadUDOVehiculo()
        UDOVehiculos.ListaTrazabilidad.LineasUDO = New List(Of ILineaUDO)()

        UDOEncabezado.Code = p_strIDVehiculo
        If Not String.IsNullOrEmpty(p_strAnoVehiculo) Then
            UDOEncabezado.Ano = p_strAnoVehiculo
        End If
        UDOEncabezado.Carroceria = p_strCarroceria
        UDOEncabezado.Categoria = p_strCategoria
        UDOEncabezado.U_TipoCo = p_strTipoContrato
        UDOEncabezado.CodigoColor = p_strCodColor
        UDOEncabezado.CodigoEstilo = p_strCodEstilo
        UDOEncabezado.CodigoMarca = p_strCodMarca
        UDOEncabezado.CodigoModelo = p_strCodModelo
        UDOEncabezado.NoUnidad = p_strCodUnidad
        UDOEncabezado.Combustible = p_strCombustible
        UDOEncabezado.Color = p_strDescColor
        UDOEncabezado.Estilo = p_strDescEstilo
        UDOEncabezado.Marca = p_strDescMarca
        UDOEncabezado.Modelo = p_strDescModelo
        UDOEncabezado.Estado = p_strEstatus
        UDOEncabezado.NumeroMotor = p_strNumMotor
        UDOEncabezado.Placa = p_strPlaca
        UDOEncabezado.Vin = p_strVIN
        UDOEncabezado.Transmision = p_strTransmision
        If Not String.IsNullOrEmpty(p_strDisponibilidad) Then
            UDOEncabezado.Disponibilidad = p_strDisponibilidad
        End If
        UDOEncabezado.Tipo = p_strTipo
        UDOEncabezado.Kilometraje = p_doubleKilometraje
        UDOEncabezado.Clasificacion = p_strCodClasif
        UDOEncabezado.CostoProyectado = p_DecValorRecibido
        UDOEncabezado.Moneda = p_strMonedaVeh
        UDOEncabezado.EstadoNuevo = p_strEstatus
        UDOEncabezado.FechaIngInventario = p_fhaIngresoInv
        UDOEncabezado.Categoria = p_strCategoria

        UDOEncabezado.Precio = p_DecValVenta

        UDOVehiculo.Encabezado = UDOEncabezado

        If Not String.IsNullOrEmpty(p_strCodProv) Then
            UDOEncabezado.CodigoProveedor = p_strCodProv
            UDOEncabezado.NombreProveedor = p_strNomProv
        End If

        UDTTrazabilidad = New TrazabilidadUDOVehiculo()

        UDTTrazabilidad.ContIng = p_strNumContVenta
        UDTTrazabilidad.FechaCVIng = p_dtFehaContVenta
        UDTTrazabilidad.NotaCred = p_strNumNotaCred
        UDTTrazabilidad.FechaNC = p_dtFhaNotaCred
        UDTTrazabilidad.VendIng = p_strNombreVendedor
        UDTTrazabilidad.ValorRecibo = p_DecValorRecibido
        UDTTrazabilidad.ObsIng = p_strObservaciones
        DMS_Connector.Helpers.GetCurrencies(strMonedaLocal, strMonedaSistema)

        If strMonedaLocal <> p_strMonedaVeh Then
            decTotalML = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaLocal, p_DecValorRecibido, p_strMonedaVeh, 1, dtFechaDocumento)
        Else
            decTotalML = p_DecValorRecibido
        End If

        If strMonedaSistema <> p_strMonedaVeh Then
            decTotalMS = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaSistema, p_DecValorRecibido, p_strMonedaVeh, 1, dtFechaDocumento)
        Else
            decTotalMS = p_DecValorRecibido
        End If

        UDTTrazabilidad.ValorVeh = decTotalML
        UDTTrazabilidad.ValorVehS = decTotalMS

        If Not String.IsNullOrEmpty(p_dblKmIngreso.ToString().Trim()) Then
            UDTTrazabilidad.KmIngreso = p_dblKmIngreso
        Else
            UDTTrazabilidad.KmIngreso = 0
        End If

        UDOVehiculo.ListaTrazabilidad.LineasUDO.Add(UDTTrazabilidad)

        UDOVehiculo.Company = m_oCompany
        UDOVehiculo.Insert()

    End Sub

    'Private Sub ModificarVehiculoUDO(ByRef p_strIDVehiculo As String, _
    '                             ByVal p_strTipo As String,
    '                             ByVal p_strAnoVehiculo As String, _
    '                             ByVal p_strCodColor As String, _
    '                             ByVal p_strCodEstilo As String, _
    '                             ByVal p_strCodMarca As String,
    '                             ByVal p_strCodUnidad As String,
    '                             ByVal p_strDescColor As String, _
    '                             ByVal p_strDescEstilo As String, _
    '                             ByVal p_strDescMarca As String,
    '                             ByVal p_strNumMotor As String, _
    '                             ByVal p_strPlaca As String, _
    '                             ByVal p_strVIN As String,
    '                             ByVal p_strDisponibilidad As String, _
    '                             ByVal p_strNumNotaCred As String, _
    '                             ByVal p_dtFhaNotaCred As Date, _
    '                             ByVal p_strNumContVenta As String, _
    '                             ByVal p_dtFehaContVenta As Date, _
    '                             ByVal p_strNombreVendedor As String, _
    '                             ByVal p_decValorRecibo As Decimal,
    '                             ByVal p_strObservaciones As String, _
    '                             ByVal p_strMonedaCont As String, _
    '                             ByVal p_doubleKm As Integer, _
    '                             ByVal p_strCodClasif As String, _
    '                             ByVal p_decValorVenta As Integer, _
    '                             ByVal p_FhaIngresoInv As Date, _
    '                             ByVal p_strEstadoNuevo As String, _
    '                             ByVal p_strCategoria As String, _
    '                             ByVal p_dblKmIngreso As Integer, _
    '                             ByVal p_strTipoContrato As String, _
    '                                   Optional ByVal p_strCodProv As String = "", _
    '                                   Optional ByVal p_strNomProv As String = ""
    '                             )

    '    Dim UDOVehiculo As UDOVehiculos
    '    Dim UDTTrazabilidad As TrazabilidadUDOVehiculo

    '    UDOVehiculo = New UDOVehiculos(m_oCompany)
    '    UDTTrazabilidad = New TrazabilidadUDOVehiculo()

    '    UDOVehiculo.Encabezado = New EncabezadoUDOVehiculos()
    '    UDOVehiculos.ListaTrazabilidad = New ListaTrazabilidadUDOVehiculo()
    '    UDOVehiculos.ListaTrazabilidad.LineasUDO = New List(Of ILineaUDO)()

    '    UDOVehiculo.Encabezado.Code = p_strIDVehiculo

    '    UDOVehiculo.Company = m_oCompany

    '    UDOVehiculo.ListaTrazabilidad.LineasUDO.Add(UDTTrazabilidad)

    '    UDOVehiculo.Load()

    '    Dim strClienteUsadoExiste As String
    '    Dim strTipoReingreso As String
    '    Dim strNombreClienteExiste As String
    '    Dim strMonedaVehiculo As String
    '    Dim decTotalVehiculo As Decimal
    '    Dim decTotalML As Decimal
    '    Dim decTotalVentaVehiculo As Decimal
    '    Dim blnNuevaTraza As Boolean
    '    Dim strMonedaLocal As String
    '    Dim strMonedaSistema As String

    '    dataTableVehRecibido = oForm.DataSources.DataTables.Item("MonVehRec")
    '    dataTableVehRecibido.Rows.Clear()

    '    dataTableVehRecibido.ExecuteQuery("Select U_CardCode, U_CardName, U_Tipo_Ven, U_Moneda FROM [@SCGD_VEHICULO] with (nolock) WHERE Code = '" & p_strIDVehiculo & "'")

    '    strClienteUsadoExiste = dataTableVehRecibido.GetValue("U_CardCode", 0)
    '    strNombreClienteExiste = dataTableVehRecibido.GetValue("U_CardName", 0)
    '    strTipoReingreso = dataTableVehRecibido.GetValue("U_Tipo_Ven", 0)
    '    strMonedaVehiculo = dataTableVehRecibido.GetValue("U_Moneda", 0)

    'UDOVehiculo.Encabezado.Ano = p_strAnoVehiculo
    'UDOVehiculo.Encabezado.Categoria = p_strCategoria
    'UDOVehiculo.Encabezado.U_TipoCo = p_strTipoContrato
    'UDOVehiculo.Encabezado.CodigoColor = p_strCodColor
    'UDOVehiculo.Encabezado.CodigoEstilo = p_strCodEstilo
    'UDOVehiculo.Encabezado.CodigoMarca = p_strCodMarca
    'UDOVehiculo.Encabezado.NoUnidad = p_strCodUnidad
    'UDOVehiculo.Encabezado.Color = p_strDescColor
    'UDOVehiculo.Encabezado.Estilo = p_strDescEstilo
    'UDOVehiculo.Encabezado.Marca = p_strDescMarca
    'UDOVehiculo.Encabezado.NumeroMotor = p_strNumMotor
    'UDOVehiculo.Encabezado.Placa = p_strPlaca
    'UDOVehiculo.Encabezado.Vin = p_strVIN
    'UDOVehiculo.Encabezado.Disponibilidad = p_strDisponibilidad
    'UDOVehiculo.Encabezado.Tipo = p_strTipo

    'If Not String.IsNullOrEmpty(p_doubleKm.ToString().Trim()) Then
    'UDOVehiculo.Encabezado.Kilometraje = p_doubleKm
    'Else
    '    UDOVehiculo.Encabezado.Kilometraje = 0
    'End If
    'UDOVehiculo.Encabezado.Clasificacion = p_strCodClasif
    'UDOVehiculo.Encabezado.EstadoNuevo = p_strEstadoNuevo
    'If Not String.IsNullOrEmpty(p_FhaIngresoInv.ToString()) Then
    '    UDOVehiculo.Encabezado.FechaIngInventario = p_FhaIngresoInv
    'End If
    'UDOVehiculo.Encabezado.Categoria = p_strCategoria
    'UDOVehiculo.Encabezado.TipoInventario = mc_strCosteado
    'UDOVehiculo.Encabezado.CodigoClienteVenta = strClienteUsadoExiste
    'UDOVehiculo.Encabezado.NombreClienteVenta = strNombreClienteExiste
    'UDOVehiculo.Encabezado.TipoInventarioReing = strTipoReingreso

    'If strMonedaVehiculo <> p_strMonedaCont Then
    '    decTotalVentaVehiculo = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaVehiculo, p_decValorVenta, p_strMonedaCont, 1, dtFechaDocumento)
    'Else
    '    decTotalVentaVehiculo = p_decValorVenta
    'End If
    'UDOVehiculo.Encabezado.Precio = decTotalVentaVehiculo.ToString(n)

    'If String.IsNullOrEmpty(strMonedaVehiculo) Then
    '    UDOVehiculo.Encabezado.Moneda = p_strMonedaCont
    '    strMonedaVehiculo = p_strMonedaCont
    'End If

    'If strMonedaVehiculo <> p_strMonedaCont Then
    '    decTotalVehiculo = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaVehiculo, p_decValorRecibo, p_strMonedaCont, 1, dtFechaDocumento)
    'Else
    '    decTotalVehiculo = p_decValorRecibo
    'End If
    'UDOVehiculo.Encabezado.CostoProyectado = decTotalVehiculo

    'If Not String.IsNullOrEmpty(p_strCodProv) Then
    '    UDOVehiculo.Encabezado.CodigoProveedor = p_strCodProv
    '    UDOVehiculo.Encabezado.NombreProveedor = p_strNomProv
    'End If

    'blnNuevaTraza = False

    'If UDOVehiculo.ListaTrazabilidad.LineasUDO.Count = 0 Then

    '    UDTTrazabilidad = New TrazabilidadUDOVehiculo()
    '    blnNuevaTraza = True
    'Else

    '    UDTTrazabilidad = UDOVehiculo.ListaTrazabilidad.LineasUDO.Item(0)
    'End If

    'UDTTrazabilidad.ContIng = p_strNumContVenta
    'UDTTrazabilidad.FechaCVIng = p_dtFehaContVenta
    'UDTTrazabilidad.NotaCred = p_strNumNotaCred
    'UDTTrazabilidad.FechaNC = p_dtFhaNotaCred
    'UDTTrazabilidad.VendIng = p_strNombreVendedor
    'UDTTrazabilidad.ValorRecibo = p_decValorRecibo
    'UDTTrazabilidad.ObsIng = p_strObservaciones
    '    DMS_Connector.Helpers.GetCurrencies(strMonedaLocal, strMonedaSistema)
    '    If strMonedaLocal <> p_strMonedaCont Then
    '        decTotalML = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaLocal, p_decValorRecibo, p_strMonedaCont, 1, dtFechaDocumento)
    '    Else
    '        decTotalML = p_decValorRecibo
    '    End If
    '    UDTTrazabilidad.ValorVeh = decTotalML

    '    If Not String.IsNullOrEmpty(p_dblKmIngreso.ToString().Trim()) Then
    '        UDTTrazabilidad.KmIngreso = p_dblKmIngreso
    '    Else
    '        UDTTrazabilidad.KmIngreso = 0
    '    End If

    '    If blnNuevaTraza Then

    '        UDOVehiculo.ListaTrazabilidad.LineasUDO.Add(UDTTrazabilidad)
    '    End If

    '    UDOVehiculo.Update()

    'End Sub

    ''' <summary>
    ''' Actualiza Dato Maestro y Trazabilidad del Vehiculo
    ''' </summary>
    ''' <param name="p_strIDVehiculo"></param>
    ''' <param name="p_strTipo"></param>
    ''' <param name="p_strAnoVehiculo"></param>
    ''' <param name="p_strCodColor"></param>
    ''' <param name="p_strCodEstilo"></param>
    ''' <param name="p_strCodMarca"></param>
    ''' <param name="p_strCodUnidad"></param>
    ''' <param name="p_strDescColor"></param>
    ''' <param name="p_strDescEstilo"></param>
    ''' <param name="p_strDescMarca"></param>
    ''' <param name="p_strNumMotor"></param>
    ''' <param name="p_strPlaca"></param>
    ''' <param name="p_strVIN"></param>
    ''' <param name="p_strDisponibilidad"></param>
    ''' <param name="p_strNumNotaCred"></param>
    ''' <param name="p_dtFhaNotaCred"></param>
    ''' <param name="p_strNumContVenta"></param>
    ''' <param name="p_dtFehaContVenta"></param>
    ''' <param name="p_strNombreVendedor"></param>
    ''' <param name="p_decValorRecibo"></param>
    ''' <param name="p_strObservaciones"></param>
    ''' <param name="p_strMonedaCont"></param>
    ''' <param name="p_doubleKm"></param>
    ''' <param name="p_strCodClasif"></param>
    ''' <param name="p_decValorVenta"></param>
    ''' <param name="p_FhaIngresoInv"></param>
    ''' <param name="p_strEstadoNuevo"></param>
    ''' <param name="p_strCategoria"></param>
    ''' <param name="p_dblKmIngreso"></param>
    ''' <param name="p_strTipoContrato"></param>
    ''' <param name="p_strCodeModelo"></param>
    ''' <param name="p_strDescModelo"></param>
    ''' <param name="p_strCodeTrasm"></param>
    ''' <param name="p_strCodeCombus"></param>
    ''' <param name="p_strCodProv"></param>
    ''' <param name="p_strNomProv"></param>
    ''' <remarks></remarks>
    Private Sub ActualizarVehiculoUsado(ByRef p_strIDVehiculo As String, _
                                 ByVal p_strTipo As String,
                                 ByVal p_strAnoVehiculo As String, _
                                 ByVal p_strCodColor As String, _
                                 ByVal p_strCodEstilo As String, _
                                 ByVal p_strCodMarca As String,
                                 ByVal p_strCodUnidad As String,
                                 ByVal p_strDescColor As String, _
                                 ByVal p_strDescEstilo As String, _
                                 ByVal p_strDescMarca As String,
                                 ByVal p_strNumMotor As String, _
                                 ByVal p_strPlaca As String, _
                                 ByVal p_strVIN As String,
                                 ByVal p_strDisponibilidad As String, _
                                 ByVal p_strNumNotaCred As String, _
                                 ByVal p_dtFhaNotaCred As Date, _
                                 ByVal p_strNumContVenta As String, _
                                 ByVal p_dtFehaContVenta As Date, _
                                 ByVal p_strNombreVendedor As String, _
                                 ByVal p_decValorRecibo As Decimal,
                                 ByVal p_strObservaciones As String, _
                                 ByVal p_strMonedaCont As String, _
                                 ByVal p_doubleKm As Integer, _
                                 ByVal p_strCodClasif As String, _
                                 ByVal p_decValorVenta As Integer, _
                                 ByVal p_FhaIngresoInv As Date, _
                                 ByVal p_strEstadoNuevo As String, _
                                 ByVal p_strCategoria As String, _
                                 ByVal p_dblKmIngreso As Integer, _
                                 ByVal p_strTipoContrato As String, _
                                 ByVal p_strCodeModelo As String, _
                                 ByVal p_strDescModelo As String, _
                                 ByVal p_strCodeTrasm As String, _
                                 ByVal p_strCodeCombus As String, _
                                       Optional ByVal p_strCodProv As String = "", _
                                       Optional ByVal p_strNomProv As String = "")
        Dim oGeneralService As SAPbobsCOM.GeneralService
        Dim oGeneralParams As SAPbobsCOM.GeneralDataParams
        Dim oGeneralData As SAPbobsCOM.GeneralData
        Dim oChildren As SAPbobsCOM.GeneralDataCollection
        Dim oChild As SAPbobsCOM.GeneralData
        Dim decTotalVentaVehiculo As Decimal
        Dim decTotalVehiculo As Decimal
        Dim strMonedaLocal As String
        Dim strMonedaSistema As String
        Dim decTotalML As Decimal
        Dim decTotalMS As Decimal

        oGeneralService = m_oCompany.GetCompanyService.GetGeneralService("SCGD_VEH")
        oGeneralParams = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
        oGeneralParams.SetProperty("Code", p_strIDVehiculo)
        oGeneralData = oGeneralService.GetByParams(oGeneralParams)

        ''''''''' ACTUALIZA DATO MAESTRO DEL VEHICULO''''''''''
        oGeneralData.SetProperty("U_Cod_Unid", p_strCodUnidad)
        oGeneralData.SetProperty("U_Cod_Marc", p_strCodMarca)
        oGeneralData.SetProperty("U_Des_Marc", p_strDescMarca)
        oGeneralData.SetProperty("U_Cod_Esti", p_strCodEstilo)
        oGeneralData.SetProperty("U_Des_Esti", p_strDescEstilo)
        If Not String.IsNullOrEmpty(p_strCodeModelo) Then
            oGeneralData.SetProperty("U_Cod_Mode", p_strCodeModelo)
            oGeneralData.SetProperty("U_Des_Mode", p_strDescModelo)
        End If
        oGeneralData.SetProperty("U_Cod_Col", p_strCodColor)
        oGeneralData.SetProperty("U_Des_Col", p_strDescColor)
        oGeneralData.SetProperty("U_Transmis", p_strCodeTrasm)
        If Not String.IsNullOrEmpty(p_doubleKm.ToString().Trim()) Then
            oGeneralData.SetProperty("U_Km_Unid", p_doubleKm.ToString())
        Else
            oGeneralData.SetProperty("U_Km_Unid", "0")
        End If
        oGeneralData.SetProperty("U_Clasificacion", p_strCodClasif)
        oGeneralData.SetProperty("U_Num_Mot", p_strNumMotor)
        oGeneralData.SetProperty("U_Num_VIN", p_strVIN)
        oGeneralData.SetProperty("U_Ano_Vehi", p_strAnoVehiculo)
        oGeneralData.SetProperty("U_Num_Plac", p_strPlaca)
        oGeneralData.SetProperty("U_Combusti", p_strCodeCombus)
        oGeneralData.SetProperty("U_Tipo", p_strTipo)
        oGeneralData.SetProperty("U_Categori", p_strCategoria)
        oGeneralData.SetProperty("U_Dispo", p_strDisponibilidad)
        oGeneralData.SetProperty("U_Estado_Nuevo", p_strEstadoNuevo)
        oGeneralData.SetProperty("U_TIPINV", mc_strCosteado)
        oGeneralData.SetProperty("U_TipoCo", p_strTipoContrato)

        If Not String.IsNullOrEmpty(p_FhaIngresoInv.ToString()) Then
            oGeneralData.SetProperty("U_Fha_Ing_Inv", p_FhaIngresoInv.ToString())
        End If

        If oGeneralData.GetProperty("U_Moneda") <> p_strMonedaCont Then
            decTotalVentaVehiculo = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, oGeneralData.GetProperty("U_Moneda"), p_decValorVenta, p_strMonedaCont, 1, dtFechaDocumento)
            decTotalVehiculo = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, oGeneralData.GetProperty("U_Moneda"), p_decValorRecibo, p_strMonedaCont, 1, dtFechaDocumento)
        Else
            decTotalVentaVehiculo = p_decValorVenta
            decTotalVehiculo = p_decValorRecibo
        End If

        oGeneralData.SetProperty("U_Precio", decTotalVentaVehiculo.ToString(n))
        oGeneralData.SetProperty("U_CosPro", decTotalVehiculo.ToString(n))

        If String.IsNullOrEmpty(oGeneralData.GetProperty("U_Moneda")) Then
            oGeneralData.SetProperty("U_Moneda", p_strMonedaCont)
        End If

        If Not String.IsNullOrEmpty(p_strCodProv) Then
            oGeneralData.SetProperty("U_Cod_Prov", p_strCodProv)
            oGeneralData.SetProperty("U_Nom_Prov", p_strNomProv)
        End If

        ''''''''' ACTUALIZA LA TRAZABILIDAD DEL VEHICULO''''''''''
        oChildren = oGeneralData.Child("SCGD_VEHITRAZA")
        DMS_Connector.Helpers.GetCurrencies(strMonedaLocal, strMonedaSistema)
        If strMonedaLocal <> p_strMonedaCont Then
            decTotalML = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaLocal, p_decValorRecibo, p_strMonedaCont, 1, dtFechaDocumento)
        Else
            decTotalML = p_decValorRecibo
        End If

        If strMonedaSistema <> p_strMonedaCont Then
            decTotalMS = Utilitarios.CalcularCostosPorCambioMoneda(m_oCompany, strMonedaSistema, p_decValorRecibo, p_strMonedaCont, 1, dtFechaDocumento)
        Else
            decTotalMS = p_decValorRecibo
        End If

        If oChildren.Count = 0 Then
            oChild = oChildren.Add()
        Else
            oChild = oChildren.Item(0)
        End If

        oChild.SetProperty("U_NumCV_I", p_strNumContVenta)
        oChild.SetProperty("U_FhaCV_I", p_dtFehaContVenta.ToString())
        oChild.SetProperty("U_NumDoc_I", p_strNumNotaCred)
        oChild.SetProperty("U_FhaDoc_I", p_dtFhaNotaCred.ToString())
        oChild.SetProperty("U_CodVen_I", p_strNombreVendedor)
        oChild.SetProperty("U_TotDoc_I", p_decValorRecibo.ToString())
        oChild.SetProperty("U_Obs_I", p_strObservaciones)
        oChild.SetProperty("U_ValVeh", decTotalML.ToString())
        oChild.SetProperty("U_ValVehS", decTotalMS.ToString())
        If Not String.IsNullOrEmpty(p_dblKmIngreso.ToString().Trim()) Then
            oChild.SetProperty("U_Km_Ingreso", p_dblKmIngreso.ToString())
        Else
            oChild.SetProperty("U_Km_Ingreso", "0")
        End If

        oGeneralService.Update(oGeneralData)


    End Sub

    Private Function BuscarVehiculo(ByVal p_strPlaca As String, ByVal p_strVIN As String, ByVal p_strUnidad As String, ByRef p_strIDVehiculo As String) As Boolean

        Dim blnVehiculoExiste As Boolean = False
        Dim strVIN As String = String.Empty
        Dim strPlaca As String = String.Empty
        Dim strConsulta As String = " SELECT Code FROM [@SCGD_VEHICULO] with (nolock) WHERE "
        Dim blnPrimero As Boolean = True

        Try
            strVIN = oDataTableConfiguracionesDMS.GetValue("U_SCGD_VIN", 0)
            strPlaca = oDataTableConfiguracionesDMS.GetValue("U_SCGD_Pla", 0)

            If Not String.IsNullOrEmpty(p_strUnidad) Then
                strConsulta = String.Format("{0} U_Cod_Unid = '{1}' ", strConsulta, p_strUnidad)
                blnPrimero = False
            End If

            If Not String.IsNullOrEmpty(strVIN) Then
                If strVIN.Trim = "Y" AndAlso Not String.IsNullOrEmpty(p_strVIN) Then
                    If blnPrimero Then
                        strConsulta = String.Format("{0} U_Num_VIN = '{1}' ", strConsulta, p_strVIN)
                    Else
                        strConsulta = String.Format("{0} or U_Num_VIN = '{1}' ", strConsulta, p_strVIN)
                    End If
                    blnPrimero = False
                End If
            End If

            If Not String.IsNullOrEmpty(strPlaca) Then
                If strPlaca.Trim = "Y" AndAlso Not String.IsNullOrEmpty(p_strPlaca) Then
                    If blnPrimero Then
                        strConsulta = String.Format("{0} U_Num_Plac = '{1}' ", strConsulta, p_strPlaca)
                    Else
                        strConsulta = String.Format("{0} or U_Num_Plac = '{1}' ", strConsulta, p_strPlaca)
                    End If
                    blnPrimero = False
                End If
            End If

            If Not blnPrimero Then
                p_strIDVehiculo = Utilitarios.EjecutarConsulta(strConsulta, m_oCompany.CompanyDB, m_oCompany.Server)
                If Not String.IsNullOrEmpty(p_strIDVehiculo) Then
                    blnVehiculoExiste = True
                End If
            End If

            Return blnVehiculoExiste

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Private Function DevuelveCodigoVehiculo() As System.Nullable(Of Integer)

        Dim intCodigo As System.Nullable(Of Integer)

        m_tadConsultasVehiculos.Connection = m_cnConeccionTransaccion
        m_tadConsultasVehiculos.SetTransaction(m_tnTransaccion)

        intCodigo = m_tadConsultasVehiculos.SelectONNM()
        If Not intCodigo.HasValue Then
            intCodigo = 1
        End If

        Return intCodigo

    End Function

    Private Sub ActualizarVehículoUDO(ByVal p_strIDVehiculo As String, ByVal p_strCardCode As String, ByVal p_strCardName As String, ByVal p_EstadoDisponibilidad As String, ByVal p_InventarioVendidos As String, _
                                  ByVal p_NoContrato As String, ByVal p_NoFactura As String, ByVal p_Tipo As String, ByVal p_strTipoVenta As String, ByVal p_dtFechaVenta As Date, ByVal p_strFacturaVeh As String, ByVal p_strNumUnid As String)

        Dim oCompanyService As SAPbobsCOM.CompanyService
        Dim oGeneralService As SAPbobsCOM.GeneralService
        Dim oGeneralParams As SAPbobsCOM.GeneralDataParams
        Dim oGeneralData As SAPbobsCOM.GeneralData

        Dim m_strTipoInventario As String = String.Empty

        oCompanyService = m_oCompany.GetCompanyService()
        oGeneralService = oCompanyService.GetGeneralService("SCGD_VEH")
        oGeneralParams = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
        oGeneralParams.SetProperty("Code", p_strIDVehiculo)
        oGeneralData = oGeneralService.GetByParams(oGeneralParams)

        oGeneralData.SetProperty("U_CardName", p_strCardName)
        oGeneralData.SetProperty("U_CardCode", p_strCardCode)
        oGeneralData.SetProperty("U_Dispo", p_EstadoDisponibilidad)
        If Not String.IsNullOrEmpty(p_NoFactura) Then
            oGeneralData.SetProperty("U_NUMFAC", p_NoFactura)
        ElseIf Not String.IsNullOrEmpty(p_strFacturaVeh) Then
            oGeneralData.SetProperty("U_NUMFAC", p_strFacturaVeh)
        End If
        oGeneralData.SetProperty("U_CTOVTA", p_NoContrato)
        m_strTipoInventario = oGeneralData.GetProperty("U_TIPINV").ToString.Trim
        If String.IsNullOrEmpty(m_strTipoInventario) OrElse m_strTipoInventario = mc_strNoCosteable Then
            oGeneralData.SetProperty("U_TIPINV", mc_strSinCostear)
        End If
        oGeneralData.SetProperty("U_Tipo", p_InventarioVendidos)
        oGeneralData.SetProperty("U_Tipo_Ven", p_strTipoVenta)
        oGeneralData.SetProperty("U_FechaVen", p_dtFechaVenta)

        For index As Integer = 0 To oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").Size - 1
            If oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", index).Trim() = p_strNumUnid Then
                If EnableKmUni Then
                    Dim kmU As Integer = Integer.Parse(oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Km_Venta", index), n)
                    oGeneralData.SetProperty("U_Km_Unid", kmU)
                    Exit For
                End If
            End If
        Next

        oGeneralService.Update(oGeneralData)

    End Sub

    Public Sub ActualizaContratoVentas()
        Dim oCompanyService As SAPbobsCOM.CompanyService
        Dim oGeneralService As SAPbobsCOM.GeneralService
        Dim oGeneralData As SAPbobsCOM.GeneralData
        Dim oGeneralParams As SAPbobsCOM.GeneralDataParams
        Dim oGeneralDataCollection As SAPbobsCOM.GeneralDataCollection
        Dim oGeneralDataH As SAPbobsCOM.GeneralData
        Dim cboEstado As SAPbouiCOM.ComboBox
        Dim cboPeriodo As SAPbouiCOM.ComboBox

        Dim strNumFact As String = oForm.Items.Item("txtNofac").Specific.String.ToString().Trim()
        Dim strNumFacUs As String = oForm.Items.Item("txtFac_Acr").Specific.String.ToString().Trim()
        Dim strNotaDebito As String = oForm.Items.Item("txtNota_De").Specific.String.ToString().Trim()
        Dim strPrestamo As String = oForm.Items.Item("txtPrestam").Specific.String.ToString().Trim()
        Dim strFacGast As String = oForm.Items.Item("txtFactGA").Specific.String.ToString().Trim()
        Dim strAsOtCos As String = oForm.Items.Item("txtAsOCos").Specific.String.ToString().Trim()
        Dim strNCDesc As String = oForm.Items.Item("txtNot_cre").Specific.String.ToString().Trim()
        Dim strNCUs As String = oForm.Items.Item("txtNot_us").Specific.String.ToString().Trim()
        Dim strAsAjuCos As String = oForm.Items.Item("txtAjus_Co").Specific.String.ToString().Trim()
        Dim strPagPri As String = oForm.Items.Item("txtNCPri").Specific.String.ToString().Trim()
        Dim strAsFinExt As String = oForm.Items.Item("txtAsFinEx").Specific.String.ToString().Trim()
        Dim strAsCom As String = oForm.Items.Item("txtAsCom").Specific.String.ToString().Trim()
        Dim strNDDeuUs As String = oForm.Items.Item("txtAs_CPC").Specific.String.ToString().Trim()
        Dim strEntVehUs As String = oForm.Items.Item("txtEntrada").Specific.String.ToString().Trim()
        Dim strSalAcc As String = oForm.Items.Item("txtSalida").Specific.String.ToString().Trim()
        Dim strFacAcc As String = oForm.Items.Item("txtFactAcc").Specific.String.ToString().Trim()
        Dim strAsTram As String = oForm.Items.Item("txtAsTram").Specific.String.ToString().Trim()
        Dim strAsBon As String = oForm.Items.Item("txtAsBon").Specific.String.ToString().Trim()
        Dim strAsCS As String = oForm.Items.Item("txtAsCS").Specific.String.ToString().Trim()
        Dim strFCConsig As String = oForm.Items.Item("txtFcCs").Specific.String.ToString().Trim()
        Dim strAsReg As String = oForm.Items.Item("txtAsReg").Specific.String.ToString().Trim()
        Dim strObsGV As String = oForm.Items.Item("txtGen_Ven").Specific.String.ToString().Trim()
        Dim strObsGG As String = oForm.Items.Item("txtObs_GG").Specific.String.ToString().Trim()

        Dim strFecFac As String = oForm.Items.Item("txtFec_Fac").Specific.String.ToString().Trim()
        Dim strFecCan As String = oForm.Items.Item("txtFec_Can").Specific.String.ToString().Trim()
        Dim strFecTra As String = oForm.Items.Item("txtFec_Tra").Specific.String.ToString().Trim()

        Dim strUsuFac As String = oForm.Items.Item("txtUs_Fac").Specific.String.ToString().Trim()
        Dim strUsuCan As String = oForm.Items.Item("txtUs_Can").Specific.String.ToString().Trim()
        Dim strUsuTra As String = oForm.Items.Item("txtUs_Tra").Specific.String.ToString().Trim()
        Dim strFacTram As String = oForm.Items.Item("txtFaTram").Specific.String.ToString.Trim()
        Dim strAsTramFac As String = oForm.Items.Item("txtAsTrFc").Specific.String.ToString.Trim()

        Dim strFPVU As String = oForm.Items.Item("txtNoFPU").Specific.String.ToString.Trim()
        Dim strAsFPVU As String = oForm.Items.Item("txtAsFPU").Specific.String.ToString.Trim()

        Dim strGasLocales As String = oForm.Items.Item("txtGas_Loc").Specific.String.ToString().Trim()
        Dim strDocEntry As String = String.Empty
        'Dim strAsCSV As String = oForm.Items.Item("txtACS").Specific.String.ToString().Trim()
        'Dim strAsPvVeh As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_AsPVeh", 0)

        strDocEntry = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0)

        oCompanyService = m_oCompany.GetCompanyService()
        oGeneralService = oCompanyService.GetGeneralService("SCGD_CVT")
        oGeneralParams = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
        oGeneralParams.SetProperty("DocEntry", strDocEntry)
        oGeneralData = oGeneralService.GetByParams(oGeneralParams)

        cboEstado = DirectCast(oForm.Items.Item("cboSta").Specific, SAPbouiCOM.ComboBox)
        cboPeriodo = DirectCast(oForm.Items.Item("cboPeriodo").Specific, SAPbouiCOM.ComboBox)

        If Not String.IsNullOrEmpty(strNumFact) Then
            oGeneralData.SetProperty("U_No_Fac", strNumFact)
        End If
        If Not String.IsNullOrEmpty(strNumFacUs) Then
            oGeneralData.SetProperty("U_Cod_FP", strNumFacUs)
        End If
        If Not String.IsNullOrEmpty(strNotaDebito) Then
            oGeneralData.SetProperty("U_Cod_NotD", strNotaDebito)
        End If
        If Not String.IsNullOrEmpty(strPrestamo) Then
            oGeneralData.SetProperty("U_Prestamo", strPrestamo)
        End If
        If Not String.IsNullOrEmpty(strFacGast) Then
            oGeneralData.SetProperty("U_Fact_GA", strFacGast)
        End If
        If Not String.IsNullOrEmpty(strAsOtCos) Then
            oGeneralData.SetProperty("U_AsOCos", strAsOtCos)
        End If
        If Not String.IsNullOrEmpty(strNCDesc) Then
            oGeneralData.SetProperty("U_Cod_Nota", strNCDesc)
        End If
        If Not String.IsNullOrEmpty(strNCUs) Then
            oGeneralData.SetProperty("U_Cod_N_Us", strNCUs)
        End If
        If Not String.IsNullOrEmpty(strAsAjuCos) Then
            oGeneralData.SetProperty("U_Cod_A_Co", strAsAjuCos)
        End If
        If Not String.IsNullOrEmpty(strPagPri) Then
            oGeneralData.SetProperty("U_NC_Prima", strPagPri)
        End If
        If Not String.IsNullOrEmpty(strAsFinExt) Then
            oGeneralData.SetProperty("U_As_FExt", strAsFinExt)
        End If
        If Not String.IsNullOrEmpty(strAsCom) Then
            oGeneralData.SetProperty("U_AsCom", strAsCom)
        End If
        If Not String.IsNullOrEmpty(strNDDeuUs) Then
            oGeneralData.SetProperty("U_Cod_A_DU", strNDDeuUs)
        End If
        If Not String.IsNullOrEmpty(strEntVehUs) Then
            oGeneralData.SetProperty("U_Dat_Pre", strEntVehUs)
        End If
        If Not String.IsNullOrEmpty(strSalAcc) Then
            oGeneralData.SetProperty("U_SCGD_Salida", strSalAcc)
        End If
        If Not String.IsNullOrEmpty(strFacAcc) Then
            oGeneralData.SetProperty("U_Fact_Acc", strFacAcc)
        End If
        If Not String.IsNullOrEmpty(strAsTram) Then
            oGeneralData.SetProperty("U_As_Tram", strAsTram)
        End If
        If Not String.IsNullOrEmpty(strAsBon) Then
            oGeneralData.SetProperty("U_AsBon", strAsBon)
        End If
        If Not String.IsNullOrEmpty(strAsCS) Then
            oGeneralData.SetProperty("U_AsCS", strAsCS.Trim())
        End If
        If Not String.IsNullOrEmpty(strFCConsig) Then
            oGeneralData.SetProperty("U_FCConsig", strFCConsig.Trim())
        End If
        If Not String.IsNullOrEmpty(strAsReg) Then
            oGeneralData.SetProperty("U_AsReg", strAsReg.Trim())
        End If
        If Not String.IsNullOrEmpty(strObsGV) Then
            oGeneralData.SetProperty("U_Obs_GV", strObsGV)
        End If
        If Not String.IsNullOrEmpty(strObsGG) Then
            oGeneralData.SetProperty("U_Obs_GG", strObsGG)
        End If
        If Not String.IsNullOrEmpty(strGasLocales) Then
            oGeneralData.SetProperty("U_Gas_Loc", strGasLocales)
        End If
        If Not String.IsNullOrEmpty(cboPeriodo.Value.Trim()) Then
            oGeneralData.SetProperty("U_GroupNum", CInt(cboPeriodo.Value))
        End If
        If Not String.IsNullOrEmpty(strFecFac) Then
            oGeneralData.SetProperty("U_Fec_Fac", strFecFac.Trim())
        End If
        If Not String.IsNullOrEmpty(strUsuFac) Then
            oGeneralData.SetProperty("U_Usu_Fac", strUsuFac.Trim())
        End If
        If Not String.IsNullOrEmpty(strFecCan) Then
            oGeneralData.SetProperty("U_Fec_Can", strFecFac.Trim())
        End If
        If Not String.IsNullOrEmpty(strUsuCan) Then
            oGeneralData.SetProperty("U_Usu_Can", strUsuCan.Trim())
        End If
        If Not String.IsNullOrEmpty(strFecTra) Then
            oGeneralData.SetProperty("U_Fec_Tra", strFecFac.Trim())
        End If
        If Not String.IsNullOrEmpty(strUsuTra) Then
            oGeneralData.SetProperty("U_Usu_Tra", strUsuTra.Trim())
        End If
        If Not String.IsNullOrEmpty(strFacTram) Then
            oGeneralData.SetProperty("U_FacTram", strFacTram.Trim())
        End If
        If Not String.IsNullOrEmpty(strAsTramFac) Then
            oGeneralData.SetProperty("U_AsTraFc", strAsTramFac.Trim())
        End If

        If Not String.IsNullOrEmpty(strFPVU) Then
            oGeneralData.SetProperty("U_NoFPVU", strFPVU.Trim())
        End If
        If Not String.IsNullOrEmpty(strAsFPVU) Then
            oGeneralData.SetProperty("U_AsFPVU", strAsFPVU.Trim())
        End If

        'If Not String.IsNullOrEmpty(strAsCSV) Then
        '    oGeneralData.SetProperty("U_AsSCPV", strAsCSV.Trim())
        'End If

        'If Not String.IsNullOrEmpty(strAsPvVeh) Then
        '    oGeneralData.SetProperty("U_AsPVeh", strAsPvVeh.Trim())
        'End If

        oGeneralData.SetProperty("U_Estado", oDataTableEstadosLimites.GetValue("Superior", 0))

        oGeneralDataCollection = oGeneralData.Child("SCGD_VEHIXCONT")
        For index As Integer = 0 To oGeneralDataCollection.Count - 1
            oGeneralDataH = oGeneralDataCollection.Item(index)
            With oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT")
                For index2 As Integer = 0 To .Size - 1
                    If .GetValue("U_Cod_Unid", index2).Trim().Equals(CStr(oGeneralDataH.GetProperty("U_Cod_Unid")).Trim()) Then
                        oGeneralDataH.SetProperty("U_TipIn", .GetValue("U_TipIn", index2).Trim())
                        Exit For
                    End If
                Next
            End With
        Next

        oGeneralService.Update(oGeneralData)

        oForm.Refresh()

    End Sub

    Private Sub ActualizarDatosTrazabilidad(ByVal strIDVehiculo As String, ByVal strCont As String, ByVal dtFechaContrato As Date, ByVal strFactura As String, ByVal dtFechaFact As Date, ByVal strVendedor As String, _
                                            ByVal decPrecioVta As Decimal, ByVal strMonedaVeh As String, ByVal strMonedaCont As String, ByVal dblKmIngreso As Integer, ByVal dblKmVenta As Integer, Optional ByVal dtFechaEntrega As DateTime = Nothing)

        Dim oCompanyService As SAPbobsCOM.CompanyService
        Dim oGeneralService As SAPbobsCOM.GeneralService
        Dim oGeneralData As SAPbobsCOM.GeneralData
        Dim oChildTrazabilidad As SAPbobsCOM.GeneralData
        Dim oChildrenTrazabilidad As SAPbobsCOM.GeneralDataCollection
        Dim oGeneralParams As SAPbobsCOM.GeneralDataParams
        Dim intKmVenta As Integer = 0
        Dim intKmIngreso As Integer = 0

        Try
            oCompanyService = m_oCompany.GetCompanyService()
            oGeneralService = oCompanyService.GetGeneralService("SCGD_VEH")
            oGeneralParams = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
            oGeneralParams.SetProperty("Code", strIDVehiculo)
            oGeneralData = oGeneralService.GetByParams(oGeneralParams)

            If String.IsNullOrEmpty(strMonedaVeh) Then
                oGeneralData.SetProperty("U_Moneda", strMonedaCont)
            End If

            oChildrenTrazabilidad = oGeneralData.Child("SCGD_VEHITRAZA")

            If 0 = oChildrenTrazabilidad.Count Then
                oChildTrazabilidad = oChildrenTrazabilidad.Add()
            Else
                oChildTrazabilidad = oChildrenTrazabilidad.Item(0)
            End If

            oChildTrazabilidad.SetProperty("U_NumCV_V", strCont)
            oChildTrazabilidad.SetProperty("U_FhaCV_V", dtFechaContrato)
            oChildTrazabilidad.SetProperty("U_NumFac_V", strFactura)
            oChildTrazabilidad.SetProperty("U_FhaFac_V", dtFechaFact)
            oChildTrazabilidad.SetProperty("U_CodVen_V", strVendedor)
            oChildTrazabilidad.SetProperty("U_TotCV_V", CDbl(decPrecioVta))
            oChildTrazabilidad.SetProperty("U_FecEntCV", dtFechaEntrega)
            'Revision de casos 
            intKmIngreso = Integer.Parse(dblKmIngreso)
            If Not String.IsNullOrEmpty(intKmIngreso) Then
                If intKmIngreso.ToString() <> "-1" Then
                    oChildTrazabilidad.SetProperty("U_Km_Ingreso", intKmIngreso)
                End If

            End If

            intKmVenta = Integer.Parse(dblKmVenta)
            If Not String.IsNullOrEmpty(intKmVenta) Then
                If intKmVenta <> -1 Then
                    oChildTrazabilidad.SetProperty("U_Km_Venta", intKmVenta)
                End If
            End If

            oGeneralService.Update(oGeneralData)

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Sub

    Private Function GenerarNoUnidadUsado(ByVal p_strUnidadNuevo As String, Optional ByVal position As Integer = -1) As String

        Dim a_strUnidadesConfiguradas() As String
        Dim strUnidadesConfiguradas As String
        Dim strParteUnidad As String = String.Empty
        Dim strParteInicialUnidadNuevo As String
        Dim strParteInicialUnidadNuevoAnterior As String
        Dim strParteFinalUnidadNuevo As String
        Dim intTamañoParteUnidadNuevo As Integer
        Dim strUnidadParaUsado As String
        Dim blnAsignarUnidad As Boolean = False
        Dim intIndiceUnidad As Integer = 0
        Dim intDondeInsertaLetra As Integer
        Dim blnSeguirBuscando As Boolean = True
        Dim oMatriz As SAPbouiCOM.Matrix = DirectCast(oForm.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)

        strUnidadesConfiguradas = objConfiguracionGeneral.SerieUnidades
        If String.IsNullOrEmpty(strUnidadesConfiguradas) Then Return String.Empty
        a_strUnidadesConfiguradas = strUnidadesConfiguradas.Split(",")
        For Each strParteUnidad In a_strUnidadesConfiguradas
            If intIndiceUnidad = 0 Then
                If IsNumeric(strParteUnidad) Then
                    intDondeInsertaLetra = CInt(strParteUnidad)
                Else
                    intDondeInsertaLetra = 0
                End If
            Else

                intTamañoParteUnidadNuevo = strParteUnidad.Length
                If p_strUnidadNuevo.Length > intTamañoParteUnidadNuevo AndAlso blnSeguirBuscando Then
                    strParteInicialUnidadNuevoAnterior = strParteInicialUnidadNuevo
                    strParteInicialUnidadNuevo = p_strUnidadNuevo.Substring(0, intTamañoParteUnidadNuevo)
                    If String.IsNullOrEmpty(strParteInicialUnidadNuevoAnterior) Then
                        strParteInicialUnidadNuevoAnterior = strParteInicialUnidadNuevo
                    End If
                    strParteFinalUnidadNuevo = p_strUnidadNuevo.Substring(intTamañoParteUnidadNuevo, p_strUnidadNuevo.Length - intTamañoParteUnidadNuevo)
                    If strParteUnidad = strParteInicialUnidadNuevo AndAlso (intIndiceUnidad - 1) <> a_strUnidadesConfiguradas.GetUpperBound(0) Then
                        blnAsignarUnidad = True
                    Else
                        If blnAsignarUnidad Then
                            blnSeguirBuscando = False
                        End If
                    End If
                End If
                If blnAsignarUnidad AndAlso Not blnSeguirBuscando Then
                    If (intIndiceUnidad - 1) = a_strUnidadesConfiguradas.GetUpperBound(0) - 1 Then
                        If p_strUnidadNuevo.Length > intDondeInsertaLetra Then
                            strUnidadParaUsado = p_strUnidadNuevo.Substring(0, intDondeInsertaLetra) & strParteUnidad & p_strUnidadNuevo.Substring(intDondeInsertaLetra, p_strUnidadNuevo.Length - intDondeInsertaLetra)
                        End If
                    Else
                        strParteFinalUnidadNuevo = p_strUnidadNuevo.Substring(strParteInicialUnidadNuevoAnterior.Length, p_strUnidadNuevo.Length - strParteInicialUnidadNuevoAnterior.Length)
                        strUnidadParaUsado = strParteUnidad & strParteFinalUnidadNuevo
                    End If
                    Exit For
                End If
            End If
            intIndiceUnidad += 1

        Next

        If Not String.IsNullOrEmpty(strUnidadesConfiguradas) Then
            If String.IsNullOrEmpty(strUnidadParaUsado) Then
                If (intIndiceUnidad - 1) = a_strUnidadesConfiguradas.GetUpperBound(0) Then
                    strUnidadParaUsado = p_strUnidadNuevo.Substring(0, intDondeInsertaLetra) & strParteUnidad & p_strUnidadNuevo.Substring(intDondeInsertaLetra, p_strUnidadNuevo.Length - intDondeInsertaLetra)
                End If
            End If
        End If
        If position = -1 Then
            If oMatriz.RowCount >= 1 Then
                If String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", 0).Trim) Then
                    strUnidadParaUsado = String.Format("{0}", strUnidadParaUsado)
                Else
                    strUnidadParaUsado = String.Format("{0}-{1}", strUnidadParaUsado, oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").Size + 1)
                End If

            End If
        ElseIf position > 0 Then
            strUnidadParaUsado = String.Format("{0}-{1}", strUnidadParaUsado, position + 1)
        End If

        Return strUnidadParaUsado
    End Function

    Private Sub ActualizarValoresVehículo()

        Dim strValorTemporal As String
        Dim strIDVehiculo As String
        Dim strUnidad As String

        Dim oMatrix As SAPbouiCOM.Matrix

        oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

        For i As Integer = 0 To oMatrix.RowCount - 1

            strUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i)
            strIDVehiculo = Utilitarios.EjecutarConsulta("Select Code from [@SCGD_VEHICULO]  with (nolock) where U_Cod_Unid = '" & strUnidad.Trim() & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)

            strValorTemporal = Utilitarios.EjecutarConsulta("Select U_Des_Marc from [@SCGD_VEHICULO]  with (nolock) where Code = '" & strIDVehiculo & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)
            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Des_Marc", i, strValorTemporal)

            strValorTemporal = Utilitarios.EjecutarConsulta("Select U_Des_Esti from [@SCGD_VEHICULO]  with (nolock) where Code = '" & strIDVehiculo & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)
            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Des_Esti", i, strValorTemporal)

            strValorTemporal = Utilitarios.EjecutarConsulta("Select U_Des_Mode from [@SCGD_VEHICULO]  with (nolock) where Code = '" & strIDVehiculo & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)
            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Des_Mode", i, strValorTemporal)

            strValorTemporal = Utilitarios.EjecutarConsulta("Select U_Num_Mot from [@SCGD_VEHICULO]  with (nolock) where Code = '" & strIDVehiculo & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)
            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Num_Mot", i, strValorTemporal)

            strValorTemporal = Utilitarios.EjecutarConsulta("Select U_Num_VIN from [@SCGD_VEHICULO]  with (nolock) where Code = '" & strIDVehiculo & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)
            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Num_VIN", i, strValorTemporal)

            strValorTemporal = Utilitarios.EjecutarConsulta("Select U_Ano_Vehi from [@SCGD_VEHICULO]  with (nolock) where Code = '" & strIDVehiculo & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)
            If IsNumeric(strValorTemporal) Then
                oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Ano_Vehi", i, strValorTemporal)
            End If

            strValorTemporal = Utilitarios.EjecutarConsulta("Select U_Num_Plac from [@SCGD_VEHICULO]  with (nolock) where Code = '" & strIDVehiculo & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)
            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Num_Plac", i, strValorTemporal)

            strValorTemporal = Utilitarios.EjecutarConsulta("Select COL.Name from [@SCGD_VEHICULO] VEH  with (nolock) inner join [@SCGD_COLOR] COL  with (nolock) on COL.Code = VEH.U_Cod_Col where VEH.Code = '" & strIDVehiculo & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)
            If strValorTemporal <> "" Then
                oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Des_Col", i, strValorTemporal)
            End If

            strValorTemporal = Utilitarios.EjecutarConsulta("Select U_Transmis from [@SCGD_VEHICULO]  with (nolock) where Code = '" & strIDVehiculo & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)

            If strValorTemporal <> "" Then
                strValorTemporal = Utilitarios.EjecutarConsulta("Select Name from [@SCGD_TRANSMISION]  with (nolock) where Code = '" & strValorTemporal & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)
            End If
            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Transmi", i, strValorTemporal)

            strValorTemporal = Utilitarios.EjecutarConsulta("Select U_Cod_Unid from [@SCGD_VEHICULO]  with (nolock) where Code = '" & strIDVehiculo & "'", m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)
            oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Cod_Unid", i, strValorTemporal)

        Next i

        oMatrix.LoadFromDataSource()

        If oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE Then
            oForm.Mode = SAPbouiCOM.BoFormMode.fm_UPDATE_MODE
        End If

    End Sub

    Private Sub CargarMatrizReportes(ByRef oform As SAPbouiCOM.Form)

        Dim oMatriz As SAPbouiCOM.Matrix
        oMatriz = DirectCast(oform.Items.Item("224").Specific, SAPbouiCOM.Matrix)

        Dim table As DataTable = oform.DataSources.DataTables.Add("REP")
        table.Columns.Add("Code", BoFieldsType.ft_Integer)
        table.Columns.Add("Name", BoFieldsType.ft_AlphaNumeric)
        table.Columns.Add("Ch", BoFieldsType.ft_Integer)

        Dim column As Column = oMatriz.Columns.Item("V_1")
        column.DataBind.Bind("REP", "Code")
        column = oMatriz.Columns.Item("V_0")
        column.DataBind.Bind("REP", "Name")
        column = oMatriz.Columns.Item("V_-1")
        column.DataBind.Bind("REP", "Ch")
        column.ValOff = "0"
        column.ValOn = "1"
        column.AffectsFormMode = False
        Call oform.EnableMenu("4876", True)

        table.ExecuteQuery("SELECT Code, Name, 0 as Ch FROM [@SCGD_RPT_PV]")

        oMatriz.LoadFromDataSource()

    End Sub

    '20/03/2012: Cambiar forma de carga de pagos realizados, ahora lo hace de los pagos recibidos y los muestra en una matriz

    Private Sub CargarPagosRealizados(ByRef oform As SAPbouiCOM.Form, Optional ByVal blnCargaReal As Boolean = True)

        Dim n As NumberFormatInfo

        Dim strNoUnidad As String
        Dim strMonedaContrato As String

        Dim oMatrizVeh As SAPbouiCOM.Matrix
        Dim blnUnidadesCargadas As Boolean = False

        Dim strConsulta As String

        Dim strDocTotal As String
        Dim decDocTotal As Decimal
        Dim decTotalUnidad As Decimal = 0
        Dim decPagosTotal As Decimal = 0

        Dim oMatrixPagos As SAPbouiCOM.Matrix
        Dim strNumDoc As String
        Dim intNumDoc As Integer
        Dim strFechaDoc As String
        Dim dtFechaDoc As Date
        Dim strUnidad As String
        Dim intPagos As Integer = 0

        Dim blnCargaData As Boolean = True

        oMatrizVeh = DirectCast(oform.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)
        oMatrixPagos = DirectCast(oform.Items.Item("mtx_Pagos").Specific, SAPbouiCOM.Matrix)

        strMonedaContrato = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0)
        strMonedaContrato = strMonedaContrato.Trim

        oDataTablePagosUni = oform.DataSources.DataTables.Item("PagosUni")

        oDataTablePagosRealizados = oform.DataSources.DataTables.Item("Pagos")

        n = DIHelper.GetNumberFormatInfo(m_oCompany)

        Dim strValorSeleccionado As String

        'tipo de cambio del contrato de ventas 
        Dim strTipoCambioCV As String

        strTipoCambioCV = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0)
        strTipoCambioCV = strTipoCambioCV.Trim()
        If strTipoCambioCV = "0" Or strTipoCambioCV = "-1" Then
            strTipoCambioCV = "1"
        End If


        If blnCargaReal = True Then

            oDataTablePagosRealizados.Rows.Clear()

            oMatrixPagos.Clear()

            For i As Integer = 0 To oMatrizVeh.RowCount - 1

                strNoUnidad = oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i)
                strNoUnidad = strNoUnidad.Trim

                If Not String.IsNullOrEmpty(strNoUnidad) Then

                    oDataTablePagosUni.Clear()

                    'strConsulta = "Declare @MainCurrncy as varchar(10) Select @MainCurrncy = MainCurncy from OADM " & _
                    '"Select DocNum, DocDate, ObjType, U_SCGD_Cod_Unid, " & _
                    '"Isnull(( Case '" & strMonedaContrato & "' when @MainCurrncy then DocTotal when DocCurr then DocTotalFC else (DocTotal/rate) end),0) as DocTotal " & _
                    '"from ORCT LEFT OUTER JOIN ORTT ON Currency = '" & strMonedaContrato & "' AND RateDate = DocDate where U_SCGD_Cod_Unid = '" & strNoUnidad & "'"

                    strConsulta = " Declare @TCContrato as numeric (10,6) " & _
                                "Declare @MonedaContrato as varchar(10) " & _
                                "Declare @MainCurrncy as varchar(10)  " & _
                                "Select @MainCurrncy = MainCurncy  from OADM " & _
                                "set @TCContrato= " & strTipoCambioCV & " " & _
                                "set @MonedaContrato ='" & strMonedaContrato & "' " & _
                                "Select DocNum, DocDate, ObjType, U_SCGD_Cod_Unid,  " & _
                                        "Isnull((Case  " & _
                                             "when @MainCurrncy=  @MonedaContrato then DocTotal  " & _
                                             "when @MainCurrncy= DocCurr  then (DocTotal/@TCContrato)  " & _
                                             "when DocCurr=  @MonedaContrato then DocTotalFC  " & _
                                             "else (DocTotal/rate)  " & _
                                             "end),0) as DocTotal  " & _
                                "from ORCT  with (nolock) LEFT OUTER JOIN ORTT  with (nolock) ON Currency = @MonedaContrato AND RateDate = DocDate " & _
                                " where U_SCGD_Cod_Unid = '" & strNoUnidad & "'" +
                                " AND Canceled <> 'Y' "


                    oDataTablePagosUni.ExecuteQuery(strConsulta)

                    blnCargaData = True

                    If oDataTablePagosUni.Rows.Count = 1 Then

                        strNumDoc = oDataTablePagosUni.GetValue("DocNum", 0)
                        intNumDoc = Integer.Parse(strNumDoc)
                        If intNumDoc <= 0 Then
                            blnCargaData = False
                        End If

                    End If

                    If blnCargaData = True Then

                        For intDTPagos As Integer = 0 To oDataTablePagosUni.Rows.Count - 1

                            strDocTotal = oDataTablePagosUni.GetValue("DocTotal", intDTPagos)

                            If Not String.IsNullOrEmpty(strDocTotal) Then

                                If g_strSeparadorDecimalesSAP <> "," Then
                                    strValorSeleccionado = strDocTotal
                                    strValorSeleccionado = strValorSeleccionado.Replace(System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, g_strSeparadorDecimalesSAP)
                                    decDocTotal = Decimal.Parse(strValorSeleccionado, n)
                                    decTotalUnidad += decDocTotal
                                Else
                                    strValorSeleccionado = strDocTotal
                                    strValorSeleccionado = strValorSeleccionado.Replace(g_strSeparadorDecimalesSAP, g_strSeparadorMilesSAP)
                                    decDocTotal = Decimal.Parse(strValorSeleccionado, n)
                                    decTotalUnidad += decDocTotal
                                End If
                            End If


                            strNumDoc = oDataTablePagosUni.GetValue("DocNum", intDTPagos)
                            intNumDoc = Integer.Parse(strNumDoc)
                            strFechaDoc = oDataTablePagosUni.GetValue("DocDate", intDTPagos)
                            If Not String.IsNullOrEmpty(dtFechaDoc) Then
                                dtFechaDoc = Date.Parse(strFechaDoc)
                            End If
                            strUnidad = oDataTablePagosUni.GetValue("U_SCGD_Cod_Unid", intDTPagos)

                            oDataTablePagosRealizados.Rows.Add()
                            oDataTablePagosRealizados.SetValue("doc", intPagos, intNumDoc)


                            If g_strSeparadorDecimalesSAP <> "," Then
                                strValorSeleccionado = strDocTotal
                                strValorSeleccionado = strValorSeleccionado.Replace(System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, g_strSeparadorDecimalesSAP)
                                oDataTablePagosRealizados.SetValue("monto", intPagos, strValorSeleccionado)
                            Else
                                strValorSeleccionado = strDocTotal
                                strValorSeleccionado = strValorSeleccionado.Replace(g_strSeparadorDecimalesSAP, g_strSeparadorMilesSAP)
                                oDataTablePagosRealizados.SetValue("monto", intPagos, strValorSeleccionado)
                            End If

                            If Not dtFechaDoc = Nothing Then
                                oDataTablePagosRealizados.SetValue("fecha", intPagos, dtFechaDoc.ToString("yyyyMMdd"))
                            End If
                            oDataTablePagosRealizados.SetValue("unidad", intPagos, strUnidad)

                            intPagos = oDataTablePagosRealizados.Rows.Count

                        Next

                        oMatrixPagos.LoadFromDataSource()

                        oform.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").SetValue("U_Pagos", i, decTotalUnidad.ToString(n))

                        oMatrizVeh.LoadFromDataSource()

                        decPagosTotal += decTotalUnidad

                        oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pagos", 0, decPagosTotal.ToString(n))

                        decTotalUnidad = 0

                        blnUnidadesCargadas = True

                    End If

                End If

            Next i

        ElseIf blnCargaReal = False Then

            strNoUnidad = oform.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Cod_Unid", 0)
            strNoUnidad = strNoUnidad.Trim

            If Not String.IsNullOrEmpty(strNoUnidad) Then

                oDataTablePagosUni.Clear()

                'strConsulta = "Declare @MainCurrncy as varchar(10) Select @MainCurrncy = MainCurncy from OADM " & _
                '"Select DocNum, DocDate, ObjType, U_SCGD_Cod_Unid, " & _
                '"Isnull(( Case '" & strMonedaContrato & "' when @MainCurrncy then DocTotal when DocCurr then DocTotalFC else (DocTotal/rate) end),0) as DocTotal " & _
                '"from ORCT LEFT OUTER JOIN ORTT ON Currency = '" & strMonedaContrato & "' AND RateDate = DocDate where U_SCGD_Cod_Unid = '" & strNoUnidad & "'"

                strConsulta = " Declare @TCContrato as numeric " & _
                                "Declare @MonedaContrato as varchar(10) " & _
                                "Declare @MainCurrncy as varchar(10)  " & _
                                "Select @MainCurrncy = MainCurncy  from OADM " & _
                                "set @TCContrato= " & strTipoCambioCV & " " & _
                                "set @MonedaContrato ='" & strMonedaContrato & "' " & _
                                "Select DocNum, DocDate, ObjType, U_SCGD_Cod_Unid,  " & _
                                        "Isnull((Case  " & _
                                             "when @MainCurrncy=  @MonedaContrato then DocTotal  " & _
                                             "when @MainCurrncy= DocCurr  then (DocTotal/@TCContrato)  " & _
                                             "when DocCurr=  @MonedaContrato then DocTotalFC  " & _
                                             "else (DocTotal/rate)  " & _
                                             "end),0) as DocTotal  " & _
                                "from ORCT  with (nolock) LEFT OUTER JOIN ORTT  with (nolock) ON Currency = @MonedaContrato AND RateDate = DocDate " & _
                                " where U_SCGD_Cod_Unid = '" & strNoUnidad & "'"

                oDataTablePagosUni.ExecuteQuery(strConsulta)

                blnCargaData = True

                If oDataTablePagosUni.Rows.Count = 1 Then

                    strNumDoc = oDataTablePagosUni.GetValue("DocNum", 0)
                    intNumDoc = Integer.Parse(strNumDoc)
                    If intNumDoc <= 0 Then
                        blnCargaData = False
                    End If

                End If

                If blnCargaData = True Then

                    For intDTPagos As Integer = 0 To oDataTablePagosUni.Rows.Count - 1

                        strDocTotal = oDataTablePagosUni.GetValue("DocTotal", intDTPagos)

                        If Not String.IsNullOrEmpty(strDocTotal) Then

                            If g_strSeparadorDecimalesSAP <> "," Then
                                strValorSeleccionado = strDocTotal
                                strValorSeleccionado = strValorSeleccionado.Replace(System.Globalization.CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, g_strSeparadorDecimalesSAP)
                                decDocTotal = Decimal.Parse(strValorSeleccionado, n)
                                decTotalUnidad += decDocTotal
                            Else
                                strValorSeleccionado = strDocTotal
                                strValorSeleccionado = strValorSeleccionado.Replace(g_strSeparadorDecimalesSAP, g_strSeparadorMilesSAP)
                                decDocTotal = Decimal.Parse(strValorSeleccionado, n)
                                decTotalUnidad += decDocTotal
                            End If
                        End If

                    Next

                    oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pago_Vh", 0, decTotalUnidad.ToString(n))

                    blnUnidadesCargadas = True

                End If

            End If

        End If

        If blnUnidadesCargadas = False AndAlso blnCargaReal = True Then

            oform.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Pagos", 0, "0")

        End If

    End Sub

    Public Function IDEntradaMercancia() As Integer
        Dim strIDEntrada As String
        Dim intDocEntry As Integer = -1

        strIDEntrada = oForm.Items.Item("txtEntrada").Specific.String()

        If Not String.IsNullOrEmpty(strIDEntrada) Then
            intDocEntry = CInt(strIDEntrada)
        End If
        Return intDocEntry

    End Function

    '****************************************************************************************
    ''' <summary>
    ''' Genera la salida contable automatica del Vehiculo
    ''' </summary>
    ''' <param name="p_CodUnidad">codigo de unidad del vehiculo</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Private Function GenerarSalidaAutomatica(ByVal p_CodUnidad As String,
                                             ByVal p_IDVeh As String,
                                             ByVal p_strMonedaLocal As String,
                                             ByVal p_strMonedaSistema As String,
                                             ByVal p_strFechaContaContratoBD As String,
                                             ByVal p_dateFechaContratoSBO As Date,
                                             ByVal p_strNoContrato As String,
                                             Optional ByRef sqlConnection As SqlClient.SqlConnection = Nothing,
                                             Optional ByVal usaCompTransaction As Boolean = True,
                                             Optional ByRef sqlTransaction As SqlClient.SqlTransaction = Nothing) As Boolean

        Dim query = String.Format(My.Resources.Resource.QueryGR, p_CodUnidad)
        Dim dtGR As Data.DataTable
        dtGR = Utilitarios.EjecutarConsultaDataTable(query, m_SBO_Application.Company.DatabaseName, m_SBO_Application.Company.ServerName)

        Dim strConectionString As String = ""
        Dim cnConeccionBD As SqlClient.SqlConnection
        If sqlConnection Is Nothing Then
            Configuracion.CrearCadenaDeconexion(m_oCompany.Server, _
                                                         m_oCompany.CompanyDB, _
                                                         strConectionString)
        End If

        Dim dtaGoodIssue As New GoodIssueDataSetTableAdapters.SCG_GOODISSUETableAdapter
        Dim dtaGoodReceive As New GoodIssueDataSetTableAdapters.SCG_GOODRECEIVETableAdapter

        Dim dtaONNM As New GoodIssueDataSetTableAdapters.ONNMTableAdapter
        If sqlConnection Is Nothing Then
            cnConeccionBD = New SqlClient.SqlConnection
            cnConeccionBD.ConnectionString = strConectionString
            cnConeccionBD.Open()
            dtaGoodIssue.Connection = New SqlClient.SqlConnection(strConectionString)
            dtaGoodIssue.Connection = cnConeccionBD

            dtaGoodReceive.Connection = New SqlClient.SqlConnection(strConectionString)
            dtaGoodReceive.Connection = cnConeccionBD

            dtaONNM.Connection = New SqlClient.SqlConnection(strConectionString)
            dtaONNM.Connection = cnConeccionBD
        Else
            dtaGoodIssue.Connection = sqlConnection
            dtaGoodReceive.Connection = sqlConnection
            dtaONNM.Connection = sqlConnection
            If Not sqlTransaction Is Nothing Then
                dtaGoodIssue.Transaction = sqlTransaction
                dtaGoodReceive.Transaction = sqlTransaction
                dtaONNM.Transaction = sqlTransaction
            End If
        End If


        If Not dtGR.Rows.Count = 0 Then
            'drwGoodReceive = dstGoodReceive.SCG_GOODRECEIVE.Rows(0)
        Else
            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.UnidadSinEntrada, SAPbouiCOM.BoMessageTime.bmt_Medium, SAPbouiCOM.BoStatusBarMessageType.smt_Warning)
            Exit Function
        End If

        Dim strValorSeleccionado As String
        Dim strIDFactura As String
        Dim m_strIDVehiculo As String

        Dim oCompanyService As SAPbobsCOM.CompanyService
        Dim oGeneralService As SAPbobsCOM.GeneralService
        Dim oGeneralData As SAPbobsCOM.GeneralData
        Dim oChild As SAPbobsCOM.GeneralData
        Dim oChildren As SAPbobsCOM.GeneralDataCollection

        Dim oCompanyServiceEntrada As SAPbobsCOM.CompanyService
        Dim oGeneralServiceEntrada As SAPbobsCOM.GeneralService
        Dim oGeneralDataEntrada As SAPbobsCOM.GeneralData
        Dim oGeneralParamsEntrada As SAPbobsCOM.GeneralDataParams

        Dim strMontoSistema As String

        Dim strCountEntradas As String = String.Empty
        Dim intCountEntradas As Integer = 0

        strCountEntradas = Utilitarios.EjecutarConsulta(
                                String.Format("select COUNT(DocEntry)from [@SCGD_GOODRECEIVE] WITH (nolock) where(U_Unidad ='{0}') and (U_As_Entr <> - 1) and U_SCGD_Trasl = 'N' and (U_SCGD_DocSalida is null or U_SCGD_DocSalida = '')",
                                            p_CodUnidad), m_oCompany.CompanyDB, m_oCompany.Server)


        If Not String.IsNullOrEmpty(strCountEntradas) And IsNumeric(strCountEntradas) Then
            intCountEntradas = CInt(strCountEntradas)
        End If

        oCompanyService = m_oCompany.GetCompanyService()
        oGeneralService = oCompanyService.GetGeneralService("SCGD_GOODISSUE")
        oGeneralData = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralData)
        oGeneralData.SetProperty("U_Unidad", p_CodUnidad)

        If intCountEntradas <= 1 Then
            oGeneralData.SetProperty("U_Doc_Entr", dtGR.Rows(0).Item("DocEntry").ToString().Trim())
        End If
        If Not IsDBNull(dtGR.Rows(0).Item("U_Marca")) Then
            oGeneralData.SetProperty("U_Marca", dtGR.Rows(0).Item("U_Marca").ToString().Trim())
        End If
        If Not IsDBNull(dtGR.Rows(0).Item("U_Estilo")) Then
            oGeneralData.SetProperty("U_Estilo", dtGR.Rows(0).Item("U_Estilo").ToString().Trim())
        End If
        If Not IsDBNull(dtGR.Rows(0).Item("U_Modelo")) Then
            oGeneralData.SetProperty("U_Modelo", dtGR.Rows(0).Item("U_Modelo").ToString().Trim())
        End If
        If intCountEntradas <= 1 Then
            oGeneralData.SetProperty("U_As_Entr", dtGR.Rows(0).Item("U_As_Entr").ToString().Trim())
        End If
        If Not IsDBNull(dtGR.Rows(0).Item("U_VIN").ToString().Trim()) Then
            oGeneralData.SetProperty("U_VIN", dtGR.Rows(0).Item("U_VIN").ToString().Trim())
        End If
        If intCountEntradas <= 1 Then
            strValorSeleccionado = Utilitarios.EjecutarConsulta(
                             String.Format("Select U_GASTRA from [@SCGD_GOODRECEIVE] WITH (nolock) where (DocEntry ='{0}') and (U_As_Entr <> - 1) and U_SCGD_Trasl = 'N' and (U_SCGD_DocSalida is null or U_SCGD_DocSalida = '')",
                                        dtGR.Rows(0).Item("DocEntry").ToString().Trim()), m_oCompany.CompanyDB, m_oCompany.Server)
            If Not String.IsNullOrEmpty(strValorSeleccionado) Then
                oGeneralData.SetProperty("U_Cos_Loc", strValorSeleccionado)
            End If
        Else
            strValorSeleccionado = Utilitarios.EjecutarConsulta(
                               String.Format("select SUM(U_GASTRA) U_Tot_Loc from [@SCGD_GOODRECEIVE] WITH (nolock) where(U_Unidad ='{0}')  and (U_As_Entr <> - 1) and U_SCGD_Trasl = 'N' and (U_SCGD_DocSalida is null or U_SCGD_DocSalida = '')",
                                           p_CodUnidad), m_oCompany.CompanyDB, m_oCompany.Server)
            If Not String.IsNullOrEmpty(strValorSeleccionado) Then
                oGeneralData.SetProperty("U_Cos_Loc", strValorSeleccionado)
            End If
        End If
        If intCountEntradas <= 1 Then
            strValorSeleccionado = Utilitarios.EjecutarConsulta(
                              String.Format("Select U_GASTRA_S from [@SCGD_GOODRECEIVE] WITH (nolock) where (DocEntry ='{0}')  and (U_As_Entr <> - 1) and U_SCGD_Trasl = 'N' and (U_SCGD_DocSalida is null or U_SCGD_DocSalida = '')",
                                          dtGR.Rows(0).Item("DocEntry").ToString().Trim()), m_oCompany.CompanyDB, m_oCompany.Server)
            If Not String.IsNullOrEmpty(strValorSeleccionado) Then
                oGeneralData.SetProperty("U_Cos_Sis", strValorSeleccionado)
            End If
        Else
            strValorSeleccionado = Utilitarios.EjecutarConsulta(
                               String.Format("select SUM(U_GASTRA_S)  from [@SCGD_GOODRECEIVE] WITH (nolock) where(U_Unidad ='{0}')  and (U_As_Entr <> - 1) and U_SCGD_Trasl = 'N' and (U_SCGD_DocSalida is null or U_SCGD_DocSalida = '')",
                                           p_CodUnidad), m_oCompany.CompanyDB, m_oCompany.Server)
            If Not String.IsNullOrEmpty(strValorSeleccionado) Then
                oGeneralData.SetProperty("U_Cos_Sis", strValorSeleccionado)
            End If
        End If

        oGeneralData.SetProperty("U_ID_Veh", dtGR.Rows(0).Item("U_ID_Vehiculo").ToString().Trim())

        m_strIDVehiculo = p_IDVeh
        If m_strIDVehiculo <> "" Then
            strValorSeleccionado = Utilitarios.EjecutarConsulta("Select U_CTOVTA from [@SCGD_VEHICULO] WITH (nolock) where Code = " & m_strIDVehiculo, m_oCompany.CompanyDB, m_oCompany.Server)
            If Not String.IsNullOrEmpty(strValorSeleccionado) Then
                oGeneralData.SetProperty("U_NoCont", strValorSeleccionado)
            End If
            strIDFactura = Utilitarios.EjecutarConsulta("Select U_NUMFAC from [@SCGD_VEHICULO] WITH (nolock) where Code = " & m_strIDVehiculo, m_oCompany.CompanyDB, m_oCompany.Server)
            If Not String.IsNullOrEmpty(strValorSeleccionado) Then
                oGeneralData.SetProperty("U_NoFact", strIDFactura)
            End If
            If p_dateFechaContratoSBO <> Nothing Then
                oGeneralData.SetProperty("U_Fech_Con", p_dateFechaContratoSBO)
            End If
        Else
            If p_dateFechaContratoSBO <> Nothing Then
                oGeneralData.SetProperty("U_Fech_Con", p_dateFechaContratoSBO)
            End If
        End If

        Dim blnCosteoLocal As String = String.Empty
        blnCosteoLocal = Utilitarios.EjecutarConsulta("Select U_CosteoLocal from dbo.[@SCGD_ADMIN] with (nolock)", m_oCompany.CompanyDB, m_oCompany.Server)
        If String.IsNullOrEmpty(blnCosteoLocal) Then
            blnCosteoLocal = "N"
        End If
        Dim intNoAsiento As Integer = 0


        oChildren = oGeneralData.Child("SCGD_GILINES")
        Dim dtLines As Data.DataTable = New Data.DataTable

        dtLines.Columns.Add("DocEntry")
        dtLines.Columns.Add("U_SCGD_DocEntrada")
        dtLines.Columns.Add("U_SCGD_AsEntrada")

        For i As Integer = 0 To dtGR.Rows.Count - 1
            oChild = oChildren.Add()
            oChild.SetProperty("U_SCGD_DocEntrada", CStr(dtGR.Rows(i).Item("DocEntry").ToString().Trim()))
            oChild.SetProperty("U_SCGD_AsEntrada", CStr(dtGR.Rows(i).Item("U_As_Entr").ToString().Trim()))
            oChild.SetProperty("U_SCGD_Monto", CStr(dtGR.Rows(i).Item("U_GASTRA").ToString().Trim()))
            strMontoSistema = Utilitarios.EjecutarConsulta("Select U_GASTRA_S from [@SCGD_GOODRECEIVE] WITH (nolock) where DocEntry = " & dtGR.Rows(0).Item("DocEntry").ToString().Trim(), m_oCompany.CompanyDB, m_oCompany.Server)
            oChild.SetProperty("U_SCGD_MontoSist", strMontoSistema)
            Dim dtRow As Data.DataRow = dtLines.NewRow()
            dtRow.Item("DocEntry") = ""
            dtRow.Item("U_SCGD_DocEntrada") = dtGR.Rows(i).Item("DocEntry").ToString().Trim()
            dtRow.Item("U_SCGD_AsEntrada") = dtGR.Rows(i).Item("U_As_Entr").ToString().Trim()
            dtLines.Rows.Add(dtRow)
        Next

        Dim strNoSalida As String

        Dim m_oGoodIssue As New GoodIssueCls(m_SBO_Application, m_oCompany, Nothing)
        Dim strContraCuenta As String
        If Not String.IsNullOrEmpty(p_CodUnidad) And p_dateFechaContratoSBO <> Nothing Then
            intNoAsiento = m_oGoodIssue.CrearAsientoSalida(dtLines, strNoSalida, p_CodUnidad, strContraCuenta, blnCosteoLocal, p_dateFechaContratoSBO, blnUsaDimensiones, Nothing, False)
        End If
        If intNoAsiento > 0 Then
            oGeneralData.SetProperty("U_As_Sali", intNoAsiento.ToString.Trim())
            oGeneralData.SetProperty("U_NCuenCnt", strContraCuenta)
        End If

        oGeneralService.Add(oGeneralData)
        strNoSalida = m_oCompany.GetNewObjectKey()

        For i As Integer = 0 To dtGR.Rows.Count - 1 ' Each drwGoodReceive In dstGoodReceive.SCG_GOODRECEIVE
            oCompanyServiceEntrada = m_oCompany.GetCompanyService()
            oGeneralServiceEntrada = oCompanyServiceEntrada.GetGeneralService("SCGD_GOODENT")
            oGeneralParamsEntrada = oGeneralServiceEntrada.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
            oGeneralParamsEntrada.SetProperty("DocEntry", dtGR.Rows(i).Item("DocEntry").ToString().Trim())
            oGeneralDataEntrada = oGeneralServiceEntrada.GetByParams(oGeneralParamsEntrada)
            oGeneralDataEntrada.SetProperty("U_SCGD_DocSalida", CStr(strNoSalida))
            If Not String.IsNullOrEmpty(p_strNoContrato) Then
                oGeneralDataEntrada.SetProperty("U_Num_Cont", p_strNoContrato)
            End If
            oGeneralServiceEntrada.Update(oGeneralDataEntrada)
            oGeneralServiceEntrada.Close(oGeneralParamsEntrada)

        Next

    End Function

    ' ''' <summary>
    ' ''' Genera un asiento de salida para el vehículo por el costo proyecto, que reduce la cuenta de existencias y la cuenta del costo.
    ' ''' Corresponde a un requerimiento desarrollado para SAIS entre octubre y diciembre 2017
    ' ''' </summary>
    ' ''' <param name="p_strNumContrato">Número de contrato en formato texto</param>
    ' ''' <param name="p_strNumUnidad">Número de unidad en formato texto</param>
    ' ''' <param name="p_strMonedaContrato">Moneda del contrato de ventas</param>
    ' ''' <returns>Devuelve el número de asiento creado</returns>
    ' ''' <remarks></remarks>
    'Private Function GenerarAsientoSalidaVehiculoCostoProyectado(ByVal p_strNumContrato As String, ByVal p_strNumUnidad As String, ByVal p_strMonedaContrato As String) As String

    '    'Variables
    '    Dim strCuentaInventario As String = String.Empty
    '    Dim strCuentaCosto As String = String.Empty
    '    Dim decCostoProyectado As Decimal = 0
    '    Dim intError As Integer
    '    Dim strMensajeError As String = String.Empty
    '    Dim strMonedaAsiento As String = String.Empty
    '    Dim boolAgregarDimension As Boolean = False
    '    Dim strNumAsiento = String.Empty
    '    Dim strTipoInventario As String = String.Empty

    '    'Objetos
    '    Dim oJournalEntry As SAPbobsCOM.JournalEntries
    '    Dim oJournalEntryLines As SAPbobsCOM.JournalEntries_Lines

    '    Try

    '        strTipoInventario = Utilitarios.EjecutarConsulta("Select U_TipIn From dbo.[@SCGD_VEHIXCONT] WITH (nolock) Where U_Cod_Unid = '" & p_strNumUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)

    '        strCuentaInventario = objConfiguracionGeneral.CuentaStock(strTipoInventario)
    '        strCuentaCosto = objConfiguracionGeneral.CuentaCosto(strTipoInventario)

    '        If Not String.IsNullOrEmpty(strCuentaInventario) Then
    '            If Not String.IsNullOrEmpty(strCuentaCosto) Then

    '                'Manejo de dimensiones
    '                If blnUsaDimensiones Then

    '                    Dim strAsientoSalidaVehiculo As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoSalidaCostoProyectado
    '                    Dim strValorDimension As String = ListaConfiguracion.Item(strAsientoSalidaVehiculo)

    '                    ClsLineasDocumentosDimension = New AgregarDimensionLineasDocumentosCls(m_oCompany, m_SBO_Application)

    '                    If Not String.IsNullOrEmpty(strValorDimension) Then
    '                        If strValorDimension.ToUpper() = "Y" Then
    '                            Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from [@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & p_strNumUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
    '                            oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipoInventario, strCodigoMarca, oDataTableDimensionesContablesDMS))

    '                            'Si hay dimensiones contables definidas para el tipo de inventario y marca
    '                            'se procede a agregarlas para todas las líneas del asiento por igual
    '                            If oDataTableDimensionesContablesDMS.Rows.Count > 0 Then
    '                                boolAgregarDimension = True
    '                            End If
    '                        End If
    '                    End If
    '                End If

    '                'Inicializa el objeto JournalEntry
    '                oJournalEntry = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oJournalEntries)

    '                'Obtiene el costo proyectado
    '                decCostoProyectado = ObtenerCostoProyectado(p_strNumUnidad)

    '                'Encabezado del asiento contable
    '                oJournalEntry.ReferenceDate = dtFechaDocumento
    '                oJournalEntry.Reference = p_strNumUnidad.Trim()
    '                oJournalEntry.Reference2 = p_strNumContrato.Trim()
    '                oJournalEntry.Memo = String.Format(My.Resources.Resource.MensajeAsientoSalidaCostoProyectado, p_strNumUnidad.Trim())

    '                'Lineas del asiento contable

    '                'Linea 1 Cuenta del stock/inventario
    '                oJournalEntry.Lines.AccountCode = strCuentaInventario

    '                If p_strMonedaContrato = m_strMonedaLocal Then
    '                    oJournalEntry.Lines.Credit = decCostoProyectado
    '                Else
    '                    oJournalEntry.Lines.FCCredit = decCostoProyectado
    '                    oJournalEntry.Lines.FCCurrency = p_strMonedaContrato
    '                End If

    '                oJournalEntry.Lines.Reference1 = p_strNumUnidad.Trim()
    '                oJournalEntry.Lines.Reference2 = p_strNumContrato.Trim()
    '                oJournalEntry.Lines.LineMemo = String.Format(My.Resources.Resource.MensajeAsientoSalidaCostoProyectado, p_strNumUnidad.Trim())
    '                oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

    '                If boolAgregarDimension = True Then
    '                    ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)
    '                End If

    '                oJournalEntry.Lines.Add()

    '                'Linea 2 Cuenta del costo
    '                oJournalEntry.Lines.AccountCode = strCuentaCosto

    '                If p_strMonedaContrato = m_strMonedaLocal Then
    '                    oJournalEntry.Lines.Debit = decCostoProyectado
    '                Else
    '                    oJournalEntry.Lines.FCDebit = decCostoProyectado
    '                    oJournalEntry.Lines.FCCurrency = p_strMonedaContrato
    '                End If

    '                oJournalEntry.Lines.Reference1 = p_strNumUnidad.Trim()
    '                oJournalEntry.Lines.Reference2 = p_strNumContrato.Trim()
    '                oJournalEntry.Lines.LineMemo = String.Format(My.Resources.Resource.MensajeAsientoSalidaCostoProyectado, p_strNumUnidad.Trim())
    '                oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

    '                If boolAgregarDimension = True Then
    '                    ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)
    '                End If

    '                oJournalEntry.Lines.Add()

    '                'Crea el asiento contable
    '                If oJournalEntry.Add <> 0 Then
    '                    m_oCompany.GetLastError(intError, strMensajeError)
    '                    If m_oCompany.InTransaction() Then
    '                        m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
    '                    End If

    '                    Throw New Exception(String.Format("{0} Error: {1} {2}", My.Resources.Resource.AsientoCostoProyectado, intError, strMensajeError))
    '                Else
    '                    m_oCompany.GetNewObjectCode(strNumAsiento)
    '                    oForm.Items.Item("txtACS").Specific.String = strNumAsiento
    '                End If

    '            Else
    '                'Mensaje de error, la cuenta de costo no puede estar en blanco
    '                Dim strErrorCuentaCosto As String = My.Resources.Resource.ErrorCuentaCostos
    '                m_SBO_Application.StatusBar.SetText(strErrorCuentaCosto, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
    '            End If
    '        Else
    '            'Mensaje de error, la cuenta de stock/inventario no puede estar en blanco
    '            Dim strErrorCuentaInventario As String = My.Resources.Resource.ErrorCuentaInventario
    '            m_SBO_Application.StatusBar.SetText(strErrorCuentaInventario, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
    '        End If

    '        Return strNumAsiento

    '    Catch ex As Exception
    '        Utilitarios.ManejadorErrores(ex, m_SBO_Application)
    '    End Try

    'End Function

    ' ''' <summary>
    ' ''' Genera un asiento hacia una cuenta de provisión para vehículos que no hayan sido costeados, es decir no tengan facturas de proveedor ligadas.
    ' ''' Corresponde a un requerimiento desarrollado para SAIS entre octubre y diciembre 2017
    ' ''' </summary>
    ' ''' <param name="p_strNumContrato">Número de contrato en formato texto</param>
    ' ''' <param name="p_strNumUnidad">Número de unidad en formato texto</param>
    ' ''' <param name="p_strMonedaContrato">Moneda del contrato de ventas</param>
    ' ''' <returns>Devuelve el número de asiento creado</returns>
    ' ''' <remarks></remarks>
    'Private Function GenerarAsientoProvisionVehiculos(ByVal p_strNumContrato As String, ByVal p_strNumUnidad As String, ByVal p_strMonedaContrato As String) As String

    '    'Variables
    '    Dim strCuentaInventario As String = String.Empty
    '    Dim strCuentaProvision As String = String.Empty
    '    Dim decCostoProyectado As Decimal = 0
    '    Dim intError As Integer
    '    Dim strMensajeError As String = String.Empty
    '    Dim strMonedaAsiento As String = String.Empty
    '    Dim boolAgregarDimension As Boolean = False
    '    Dim strNumAsiento = String.Empty
    '    Dim strTipoInventario As String = String.Empty

    '    'Objetos
    '    Dim oJournalEntry As SAPbobsCOM.JournalEntries
    '    Dim oJournalEntryLines As SAPbobsCOM.JournalEntries_Lines

    '    Try

    '        strTipoInventario = Utilitarios.EjecutarConsulta("Select U_TipIn From dbo.[@SCGD_VEHIXCONT] WITH (nolock) Where U_Cod_Unid = '" & p_strNumUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)

    '        strCuentaInventario = objConfiguracionGeneral.CuentaStock(strTipoInventario)
    '        strCuentaProvision = Utilitarios.EjecutarConsulta("Select U_CtaProvVeh From [@SCGD_ADMIN] WITH (nolock)")

    '        If Not String.IsNullOrEmpty(strCuentaInventario) Then
    '            If Not String.IsNullOrEmpty(strCuentaProvision) Then

    '                'Manejo de dimensiones
    '                If blnUsaDimensiones Then

    '                    Dim strAsientoSalidaVehiculo As String = ConfiguracionesGeneralesAddon.scgTipoDocumentosCV.AsientoSalidaCostoProyectado
    '                    Dim strValorDimension As String = ListaConfiguracion.Item(strAsientoSalidaVehiculo)

    '                    ClsLineasDocumentosDimension = New AgregarDimensionLineasDocumentosCls(m_oCompany, m_SBO_Application)

    '                    If Not String.IsNullOrEmpty(strValorDimension) Then
    '                        If strValorDimension.ToUpper() = "Y" Then
    '                            Dim strCodigoMarca As String = Utilitarios.EjecutarConsulta("Select U_Cod_Marc from [@SCGD_VEHICULO] WITH (nolock) where U_Cod_Unid = '" & p_strNumUnidad.Trim & "'", m_oCompany.CompanyDB, m_oCompany.Server)
    '                            oDataTableDimensionesContablesDMS = (ClsLineasDocumentosDimension.DatatableDimensionesContables(oForm, strTipoInventario, strCodigoMarca, oDataTableDimensionesContablesDMS))

    '                            'Si hay dimensiones contables definidas para el tipo de inventario y marca
    '                            'se procede a agregarlas para todas las líneas del asiento por igual
    '                            If oDataTableDimensionesContablesDMS.Rows.Count > 0 Then
    '                                boolAgregarDimension = True
    '                            End If
    '                        End If
    '                    End If
    '                End If

    '                'Inicializa el objeto JournalEntry
    '                oJournalEntry = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oJournalEntries)

    '                'Obtiene el costo proyectado en la moneda del contrato de ventas
    '                decCostoProyectado = ObtenerCostoProyectado(p_strNumUnidad)

    '                'Encabezado del asiento contable
    '                oJournalEntry.ReferenceDate = dtFechaDocumento
    '                oJournalEntry.Reference = p_strNumUnidad.Trim()
    '                oJournalEntry.Reference2 = p_strNumContrato.Trim()
    '                oJournalEntry.Memo = String.Format(My.Resources.Resource.MensajeProvisionVehiculo, p_strNumUnidad.Trim())

    '                'Lineas del asiento contable

    '                'Linea 1 Cuenta del stock/inventario/existencias
    '                oJournalEntry.Lines.AccountCode = strCuentaInventario

    '                If p_strMonedaContrato = m_strMonedaLocal Then
    '                    oJournalEntry.Lines.Debit = decCostoProyectado
    '                Else
    '                    oJournalEntry.Lines.FCDebit = decCostoProyectado
    '                    oJournalEntry.Lines.FCCurrency = p_strMonedaContrato
    '                End If

    '                oJournalEntry.Lines.Reference1 = p_strNumUnidad.Trim()
    '                oJournalEntry.Lines.Reference2 = p_strNumContrato.Trim()
    '                oJournalEntry.Lines.LineMemo = String.Format(My.Resources.Resource.MensajeProvisionVehiculo, p_strNumUnidad.Trim())
    '                oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

    '                If boolAgregarDimension = True Then
    '                    ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)
    '                End If

    '                oJournalEntry.Lines.Add()

    '                'Linea 2 Cuenta de provision
    '                oJournalEntry.Lines.AccountCode = strCuentaProvision

    '                If p_strMonedaContrato = m_strMonedaLocal Then
    '                    oJournalEntry.Lines.Credit = decCostoProyectado
    '                Else
    '                    oJournalEntry.Lines.FCCredit = decCostoProyectado
    '                    oJournalEntry.Lines.FCCurrency = p_strMonedaContrato
    '                End If

    '                oJournalEntry.Lines.Reference1 = p_strNumUnidad.Trim()
    '                oJournalEntry.Lines.Reference2 = p_strNumContrato.Trim()
    '                oJournalEntry.Lines.LineMemo = String.Format(My.Resources.Resource.MensajeProvisionVehiculo, p_strNumUnidad.Trim())
    '                oJournalEntry.Lines.VatLine = SAPbobsCOM.BoYesNoEnum.tNO

    '                If boolAgregarDimension = True Then
    '                    ClsLineasDocumentosDimension.AgregarDimensionesLineasAsiento(oJournalEntry.Lines, Nothing, oDataTableDimensionesContablesDMS)
    '                End If

    '                oJournalEntry.Lines.Add()

    '                'Crea el asiento contable
    '                If oJournalEntry.Add <> 0 Then
    '                    m_oCompany.GetLastError(intError, strMensajeError)
    '                    If m_oCompany.InTransaction() Then
    '                        m_oCompany.EndTransaction(SAPbobsCOM.BoWfTransOpt.wf_RollBack)
    '                    End If
    '                    Throw New Exception(String.Format("{0} Error: {1} {2}", My.Resources.Resource.AsientoProvisionVehiculo, intError, strMensajeError))
    '                Else
    '                    m_oCompany.GetNewObjectCode(strNumAsiento)
    '                    'oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0)
    '                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_AsPVeh", 0, strNumAsiento)
    '                    'oForm.Items.Item("txtACS").Specific.String = strNumAsiento
    '                End If

    '            Else
    '                'Mensaje de error, la cuenta de provisión no puede estar en blanco
    '                Dim strErrorCuentaProvision As String = My.Resources.Resource.ErrorCuentaProvision
    '                m_SBO_Application.StatusBar.SetText(strErrorCuentaProvision, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
    '            End If
    '        Else
    '            'Mensaje de error, la cuenta de stock/inventario no puede estar en blanco
    '            Dim strErrorCuentaInventario As String = My.Resources.Resource.ErrorCuentaInventario
    '            m_SBO_Application.StatusBar.SetText(strErrorCuentaInventario, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
    '        End If

    '        Return strNumAsiento

    '    Catch ex As Exception
    '        Utilitarios.ManejadorErrores(ex, m_SBO_Application)
    '    End Try

    'End Function


    ''' <summary>
    ''' Valida si se ha ingresado alguna factura por concepto de costeo para la unidad especificada
    ''' </summary>
    ''' <param name="p_strNumUnidad">Número de unidad en formato texto</param>
    ''' <returns>True = Si existen facturas de costeo, False = No Existen facturas de costeo</returns>
    ''' <remarks></remarks>
    Private Function ValidarFacturasCosteo(ByVal p_strNumUnidad As String) As Boolean
        Dim blnResultado As Boolean = False
        Dim intCuenta As Integer = 0
        Dim strQuery As String = " SELECT Count(*) FROM PCH1 T0 WITH (nolock) WHERE T0.U_SCGD_Cod_Tran IS NOT NULL AND T0.U_SCGD_Cod_Unid = '{0}' "

        Try
            strQuery = String.Format(strQuery, p_strNumUnidad)
            intCuenta = Utilitarios.EjecutarConsulta(strQuery)

            If intCuenta > 0 Then
                blnResultado = True
            End If

            Return blnResultado

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Function


    ''' <summary>
    ''' Valida que la unidad tenga un costo proyectado
    ''' </summary>
    ''' <param name="p_strNumUnidad">Número de unidad en formato texto, UDF "U_Cod_Unid" de la tabla "@SCGD_VEHICULO"</param>
    ''' <returns>True = Tiene un costo proyectado mayor a cero, False = No tiene costo proyectado o es menor a cero</returns>
    ''' <remarks></remarks>
    Private Function ValidarCostoProyectado(ByVal p_strNumUnidad As String) As Boolean

        Try

            If ObtenerCostoProyectado(p_strNumUnidad) > 0 Then
                Return True
            Else
                Return False
            End If

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Function

    ''' <summary>
    ''' Obtiene el costo proyectado del vehículo convertido a la moneda del contrato de ventas
    ''' </summary>
    ''' <param name="p_strNumUnidad">Número de unidad en formato texto, UDF "U_Cod_Unid" de la tabla "@SCGD_VEHICULO"</param>
    ''' <returns>Costo proyectado del vehículo en formato decimal UDF "U_CosPro" de la tabla "@SCGD_VEHICULO"</returns>
    ''' <remarks></remarks>
    Private Function ObtenerCostoProyectado(ByVal p_strNumUnidad As String) As Decimal
        Dim decCostoProyectado As Decimal = 0
        Dim strQueryCostoProyectado As String = "SELECT TOP 1 T0.""U_CosPro"" FROM ""@SCGD_VEHICULO"" T0 WITH (nolock) WHERE T0.""U_Cod_Unid"" = '{0}'"
        Dim strQueryMoneda As String = "SELECT ""U_Moneda"" FROM ""@SCGD_VEHICULO"" WITH (nolock) where ""U_Cod_Unid"" = '{0}'"

        'Monedas y tipos de cambio
        Dim strMonedaLocal As String
        Dim strMonedaSistema As String
        Dim strMonedaVehiculo As String
        Dim strMonedaCV As String
        Dim strTipoCambioSistema As String
        Dim strTipoCambioCV As String
        Dim strFechaCV As String
        Dim strFecha As String
        Dim dtFechaCV As Date
        Dim decTCDoc As Decimal
        Dim objGlobal As DMSOneFramework.BLSBO.GlobalFunctionsSBO

        Try

            strQueryCostoProyectado = String.Format(strQueryCostoProyectado, p_strNumUnidad)
            strQueryMoneda = String.Format(strQueryMoneda, p_strNumUnidad)

            decCostoProyectado = Utilitarios.EjecutarConsultaDecimal(strQueryCostoProyectado, m_oCompany.CompanyDB, m_oCompany.Server)
            strMonedaVehiculo = Utilitarios.EjecutarConsulta(strQueryMoneda, m_oCompany.CompanyDB, m_oCompany.Server).Trim()

            objGlobal = New DMSOneFramework.BLSBO.GlobalFunctionsSBO
            'Fechas de documento y del contrato de ventas
            strFechaCV = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)
            strFecha = Utilitarios.RetornaFechaFormatoRegional(strFechaCV)
            dtFechaCV = Date.Parse(strFechaCV)
            dtFechaCV = New Date(dtFechaCV.Year, dtFechaCV.Month, dtFechaCV.Day, 0, 0, 0)

            'Monedas
            strMonedaCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Moneda", 0).Trim()
            strMonedaLocal = objGlobal.RetornarMonedaLocal
            strMonedaSistema = objGlobal.RetornarMonedaSistema
            strTipoCambioCV = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_TipoCambio", 0)
            decTCDoc = Decimal.Parse(strTipoCambioCV, n)

            If Not String.IsNullOrEmpty(strMonedaVehiculo) Then
                If decCostoProyectado > 0 Then
                    decCostoProyectado = Utilitarios.ManejoMultimoneda(decCostoProyectado, strMonedaLocal, strMonedaSistema, strMonedaVehiculo, strMonedaCV, decTCDoc.ToString(), Date.Parse(strFecha), n, m_oCompany)
                End If
            Else
                'Mensaje de error, el vehículo no tiene moneda asignada
                Dim strErrorMonedaVehiculo As String = My.Resources.Resource.ErrorVehiculoSinMoneda
                strErrorMonedaVehiculo = String.Format(strErrorMonedaVehiculo, p_strNumUnidad)
                m_SBO_Application.StatusBar.SetText(strErrorMonedaVehiculo, SAPbouiCOM.BoMessageTime.bmt_Medium, BoStatusBarMessageType.smt_Error)
            End If

            Return decCostoProyectado

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Public Function ObternerFechaServer() As DateTime
        Try
            Dim l_fhaActual As DateTime

            l_fhaActual = Utilitarios.EjecutarConsulta("select GETDATE()", m_oCompany.CompanyDB, m_oCompany.Server)

            Return l_fhaActual
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Function

    Private Function FechaParaDocumentos(ByVal p_strDocCurrency As String, ByVal p_strFechaDocumento As String) As Date

        If Not String.IsNullOrEmpty(strFechaDocumento) Then

            Dim Valor As String

            If Not p_strDocCurrency = m_strMonedaLocal Then

                Valor = Utilitarios.EjecutarConsulta("Select Rate from ORTT  with (nolock) where RateDate = '" & strFechaDocumento & "' and Currency = '" & p_strDocCurrency & "'", m_oCompany.CompanyDB, m_oCompany.Server)

            End If

            If Not String.IsNullOrEmpty(Valor) OrElse p_strDocCurrency = m_strMonedaLocal Then
                dtFechaDocumento = Date.ParseExact(strFechaDocumento, "yyyyMMdd", Nothing)

                Return dtFechaDocumento

            Else
                m_SBO_Application.SetStatusBarMessage(String.Format(My.Resources.Resource.MensajeFechaSinTipoCambio, p_strDocCurrency), BoMessageTime.bmt_Medium, True)

                m_cnConeccionTransaccion.Close()
                Exit Function
            End If

        Else
            dtFechaDocumento = Date.Now
            Return dtFechaDocumento

        End If

    End Function


    Private Function MonedaParaDocumento(ByVal p_codigoItem As String) As String

        Dim TipoMoneda As String = String.Empty

        TipoMoneda = Utilitarios.EjecutarConsulta("Select U_Moneda from [@SCGD_ADMIN7]  with (nolock) where u_Cod_Item = '" & p_codigoItem & "'", m_oCompany.CompanyDB, m_oCompany.Server)

        Return TipoMoneda

    End Function

    ''' <summary>
    ''' Verifica el nivel de aprobacion en el contrato 
    ''' para no facturarlo si alguien ya lo facturo
    ''' </summary>
    ''' <param name="FormUID"></param>
    ''' <param name="BubbleEvent"></param>
    ''' <remarks></remarks>
    Private Sub VerificaNivelAprobacionContrato(ByVal FormUID As String, ByRef BubbleEvent As Boolean)

        Dim oForm As Form
        Dim strEstado As String = String.Empty
        Dim strDocNum As String = String.Empty
        Dim strEstadoEnBD As String = String.Empty

        Try
            oForm = m_SBO_Application.Forms.Item(FormUID)
            strEstado = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Estado", 0).Trim
            strDocNum = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocNum", 0).Trim
            strEstadoEnBD = Utilitarios.EjecutarConsulta(
                String.Format("Select U_Estado from [@SCGD_CVENTA]  with (nolock) where DocNum = '{0}'", strDocNum),
                                            m_oCompany.CompanyDB,
                                            m_oCompany.Server).Trim()
            If Not strEstadoEnBD = strEstado Then

                m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ContratoModificadoOtroUsuario, BoMessageTime.bmt_Short, BoStatusBarMessageType.smt_Error)
                BubbleEvent = False

            End If

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

#End Region

    Private Sub ValidaPorTipoInventario(ByRef intEstado As Integer,
                                        ByVal Aprueba As Boolean,
                                        ByRef blnValidaNivUsaFin As Boolean,
                                        ByVal strEstadoUsados As String,
                                        ByVal strEstadoFinanciamiento As String,
                                        ByVal oMatrixUsados As SAPbouiCOM.Matrix)

        'Validacion por tipo de inventario  
        Dim strConsultaValidaTI As String = "select U_ValTI from [@SCGD_ADMIN9] WITH (nolock) where U_Prio = '{0}'"
        Dim strValidaTI As String = String.Empty
        Dim strConsultaTIUsado As String = "select U_EsUsad from [@SCGD_ADMIN9] WITH (nolock) where U_Prio = '{0}'"
        Dim strTIUsado As String = String.Empty
        Dim blnNuevo As Boolean = False
        Dim blnUsado As Boolean = False

        strValidaTI = Utilitarios.EjecutarConsulta(String.Format(strConsultaValidaTI, intEstado),
                                                   m_oCompany.CompanyDB, m_oCompany.Server).Trim

        If strValidaTI = "Y" Then

            strTIUsado = Utilitarios.EjecutarConsulta(String.Format(strConsultaTIUsado, intEstado),
                                                       m_oCompany.CompanyDB, m_oCompany.Server).Trim

            ValidaTIUnidades(oForm, blnNuevo, blnUsado)

            If strTIUsado = "Y" And blnUsado = False Then
                'llamar siguiente nivel de aprobacion
                If Aprueba Then
                    intEstado = intEstado + 1
                    ValidaAprobUsaFin(intEstado, strEstadoUsados, strEstadoFinanciamiento, oMatrixUsados, blnValidaNivUsaFin)
                ElseIf Not Aprueba Then
                    intEstado = intEstado - 1
                    ValidaRechaUsaFin(intEstado, strEstadoUsados, strEstadoFinanciamiento, oMatrixUsados, blnValidaNivUsaFin)
                End If
            ElseIf strTIUsado = "N" And blnNuevo = False Then
                'llamar siguiente nivel de aprobacion
                If Aprueba Then
                    intEstado = intEstado + 1
                    ValidaAprobUsaFin(intEstado, strEstadoUsados, strEstadoFinanciamiento, oMatrixUsados, blnValidaNivUsaFin)
                ElseIf Not Aprueba Then
                    intEstado = intEstado - 1
                    ValidaRechaUsaFin(intEstado, strEstadoUsados, strEstadoFinanciamiento, oMatrixUsados, blnValidaNivUsaFin)
                End If
            End If

        End If

    End Sub

    Private Sub ValidaAprobUsaFin(ByRef intEstado As Integer,
                                  ByVal strEstadoUsados As String,
                                  ByVal strEstadoFinanciamiento As String,
                                  ByVal oMatrixUsados As SAPbouiCOM.Matrix,
                                  ByRef blnValidaNivUsaFin As Boolean)

        Dim intEstadoUsados As Integer = -1
        Dim intEstadoFinanciamiento As Integer = -1
        Dim strUniUsado As String
        Dim strFinPropio As String
        Dim strFinExterno As String

        If (Not String.IsNullOrEmpty(strEstadoUsados) And Not strEstadoUsados = "--") Or (Not String.IsNullOrEmpty(strEstadoFinanciamiento) And Not strEstadoFinanciamiento = "--") Then

            If Not String.IsNullOrEmpty(strEstadoUsados) And Not strEstadoUsados = "--" Then
                intEstadoUsados = Integer.Parse(strEstadoUsados)
            End If
            If Not String.IsNullOrEmpty(strEstadoFinanciamiento) And Not strEstadoFinanciamiento = "--" Then
                intEstadoFinanciamiento = Integer.Parse(strEstadoFinanciamiento)
            End If

            If intEstado = intEstadoUsados AndAlso Not intEstadoUsados = -1 Then

                oMatrixUsados = DirectCast(oForm.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)

                If oMatrixUsados.RowCount = 1 Then
                    strUniUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", 0).Trim
                End If

                If oMatrixUsados.RowCount = 0 Or (oMatrixUsados.RowCount = 1 AndAlso String.IsNullOrEmpty(strUniUsado)) Then

                    If intEstado < m_intEstadoSuperior Then

                        intEstado += 1
                        'validacion tipo inventario
                        blnValidaNivUsaFin = False
                        ValidaPorTipoInventario(intEstado, True, blnValidaNivUsaFin, strEstadoUsados, strEstadoFinanciamiento, oMatrixUsados)

                    End If

                End If

            End If

            If intEstado = intEstadoFinanciamiento AndAlso Not intEstadoFinanciamiento = -1 Then

                strFinPropio = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Fin_Prop", 0).Trim
                strFinExterno = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinE", 0).Trim

                If (String.IsNullOrEmpty(strFinPropio) OrElse strFinPropio = "N") AndAlso (String.IsNullOrEmpty(strFinExterno) OrElse strFinExterno = "N") Then

                    If intEstado < m_intEstadoSuperior Then

                        intEstado += 1
                        'validacion tipo inventario
                        blnValidaNivUsaFin = False
                        ValidaPorTipoInventario(intEstado, True, blnValidaNivUsaFin, strEstadoUsados, strEstadoFinanciamiento, oMatrixUsados)

                    End If

                End If

            End If

            'validacion financimiento y usados
            blnValidaNivUsaFin = True

        End If

    End Sub

    Private Sub ValidaRechaUsaFin(ByRef intEstado As Integer,
                                  ByVal strEstadoUsados As String,
                                  ByVal strEstadoFinanciamiento As String,
                                  ByVal oMatrixUsados As Matrix,
                                  ByRef blnValidaNivUsaFin As Boolean)

        Dim intEstadoUsados As Integer = -1
        Dim intEstadoFinanciamiento As Integer = -1
        Dim strUniUsado As String
        Dim strFinPropio As String
        Dim strFinExterno As String

        If (Not String.IsNullOrEmpty(strEstadoUsados) And Not strEstadoUsados = "--") Or (Not String.IsNullOrEmpty(strEstadoFinanciamiento) And Not strEstadoFinanciamiento = "--") Then

            If Not String.IsNullOrEmpty(strEstadoUsados) And Not strEstadoUsados = "--" Then
                intEstadoUsados = Integer.Parse(strEstadoUsados)
            End If
            If Not String.IsNullOrEmpty(strEstadoFinanciamiento) And Not strEstadoFinanciamiento = "--" Then
                intEstadoFinanciamiento = Integer.Parse(strEstadoFinanciamiento)
            End If

            If intEstado = intEstadoFinanciamiento AndAlso Not intEstadoFinanciamiento = -1 Then

                strFinPropio = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Fin_Prop", 0)
                strFinPropio = strFinPropio.Trim()

                strFinExterno = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinE", 0)
                strFinExterno = strFinExterno.Trim()

                If (String.IsNullOrEmpty(strFinPropio) OrElse strFinPropio = "N") AndAlso (String.IsNullOrEmpty(strFinExterno) OrElse strFinExterno = "N") Then

                    If intEstado > m_intEstadoInferior AndAlso intEstado < m_intEstadoPrefacturacion Then

                        intEstado -= 1
                        'validacion tipo inventario
                        blnValidaNivUsaFin = False
                        ValidaPorTipoInventario(intEstado, False, blnValidaNivUsaFin, strEstadoUsados, strEstadoFinanciamiento, oMatrixUsados)

                    End If

                End If

            End If

            If intEstado = intEstadoUsados AndAlso Not intEstadoUsados = -1 Then

                oMatrixUsados = DirectCast(oForm.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)

                If oMatrixUsados.RowCount = 1 Then
                    strUniUsado = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", 0)
                    strUniUsado = strUniUsado.Trim()
                End If

                If oMatrixUsados.RowCount = 0 Or (oMatrixUsados.RowCount = 1 AndAlso String.IsNullOrEmpty(strUniUsado)) Then

                    If intEstado > m_intEstadoInferior AndAlso intEstado < m_intEstadoPrefacturacion Then

                        intEstado -= 1
                        'validacion tipo inventario
                        blnValidaNivUsaFin = False
                        ValidaPorTipoInventario(intEstado, False, blnValidaNivUsaFin, strEstadoUsados, strEstadoFinanciamiento, oMatrixUsados)

                    End If

                End If

            End If

            'validacion financimiento y usados
            blnValidaNivUsaFin = True

        End If
    End Sub

    Private Sub MostrarItems(ByVal p_oForm As Form, ByVal p_lsItems As List(Of String), ByVal p_visible As Boolean)

        For Each strItem As String In p_lsItems
            p_oForm.Items.Item(strItem).Visible = p_visible
        Next

    End Sub

    Private Sub HabilitaItems(ByVal p_oForm As Form, ByVal p_lsItems As List(Of String), ByVal p_Habilitado As Boolean)

        If p_Habilitado Then
            For Each strItem As String In p_lsItems
                oForm.Items.Item(strItem).SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            Next
        Else
            For Each strItem As String In p_lsItems
                oForm.Items.Item(strItem).SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            Next
        End If
    End Sub
    'Valida DT
    Public Sub ValidarDataTable(ByRef p_form As SAPbouiCOM.Form)

        Dim ExisteDataTable As Boolean = Utilitarios.ValidaExisteDataTable(p_form, mc_strDataTableDimensiones)

        If Not ExisteDataTable Then
            oDataTableDimensionesContablesDMS = p_form.DataSources.DataTables.Add(mc_strDataTableDimensiones)
        End If

    End Sub

    Private Sub ActualizaCodUnidUsados(ByVal p_form As SAPbouiCOM.Form, ByVal p_strCodUnidNew As String)

        Try
            Dim oMatriz As SAPbouiCOM.Matrix
            Dim strCodUnid As String
            Dim intExisteUnidad As Integer
            Dim count As Integer
            Dim strCodUnidUsada As String

            oMatriz = DirectCast(oForm.Items.Item("mtx_Usado").Specific, SAPbouiCOM.Matrix)

            For index As Integer = 0 To oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").Size - 1

                strCodUnidUsada = oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", index).Trim

                If Not String.IsNullOrEmpty(strCodUnidUsada) Then
                    Do
                        strCodUnid = GenerarNoUnidadUsado(oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", 0).Trim, count)
                        intExisteUnidad = ValidaExisteCodUnidad(strCodUnid, True, oForm)
                        If intExisteUnidad = 0 Then
                            oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").SetValue("U_Cod_Unid", index, strCodUnid)
                        End If
                        count += 1

                    Loop While intExisteUnidad > 0
                End If
            Next
            oMatriz.LoadFromDataSource()

        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    ''' <summary>
    ''' Carga el formulario de tipo de ot para generar la factura
    ''' </summary>
    Private Sub CargarFormularioHistorialApr(ByRef pVal As SAPbouiCOM.ItemEvent, ByRef BubbleEvent As Boolean)
        Dim strPath As String
        Dim oForm As SAPbouiCOM.Form

        Try
            oForm = m_SBO_Application.Forms.GetForm(pVal.FormTypeEx, pVal.FormTypeCount)
            Dim strDocEntry As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0).Trim()

            oGestorFormularios = New GestorFormularios(m_SBO_Application)
            objHistorial = New HistorialAprobaciones(m_oCompany, m_SBO_Application)

            objHistorial.FormType = g_strFormcomentariosApr
            objHistorial.Titulo = My.Resources.Resource.TituloSolicitaOTEspecial

            strPath = System.Windows.Forms.Application.StartupPath & My.Resources.Resource.XMLFomularioComentarioHistorial
            objHistorial.NombreXml = strPath
            objHistorial.FormularioSBO = oGestorFormularios.CargaFormulario(objHistorial)
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Public Function ObtenerCuentaGastosItem(ByVal p_itemCode As String, ByVal strAlmacen As String)

        Dim oItemArticulo As SAPbobsCOM.IItems
        Dim cuentaContable As String = String.Empty

        Try

            oItemArticulo = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oItems)
            oItemArticulo.GetByKey(p_itemCode)

            Select Case oItemArticulo.GLMethod
                Case SAPbobsCOM.BoGLMethods.glm_WH
                    cuentaContable = Utilitarios.EjecutarConsulta(String.Format("Select ExpensesAc FROM OWHS WITH (nolock) Where WhsCode = '{0}'",
                                                        strAlmacen), m_oCompany.CompanyDB, m_oCompany.Server)

                Case SAPbobsCOM.BoGLMethods.glm_ItemClass
                    cuentaContable = Utilitarios.EjecutarConsulta(String.Format("Select ExpensesAc From OITB WITH (nolock) Where ItmsGrpCod = '{0}'",
                                                        oItemArticulo.ItemsGroupCode.ToString.Trim()),
                                                        m_oCompany.CompanyDB,
                                                        m_oCompany.Server)

                Case SAPbobsCOM.BoGLMethods.glm_ItemLevel

                    cuentaContable = Utilitarios.EjecutarConsulta(String.Format("Select ExpensesAc From OITW WITH (nolock) Where ItemCode= '{0}' AND WhsCode = '{1}'",
                                                        p_itemCode, strAlmacen), m_oCompany.CompanyDB, m_oCompany.Server)

                Case Else
                    cuentaContable = Utilitarios.EjecutarConsulta(String.Format("Select ExpensesAc FROM OWHS WITH (nolock) Where WhsCode = '{0}'",
                                                        strAlmacen), m_oCompany.CompanyDB, m_oCompany.Server)

            End Select

            Return cuentaContable
        Catch ex As Exception

        Finally
            If Not oItemArticulo Is Nothing Then
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oItemArticulo)
                oItemArticulo = Nothing
            End If
        End Try

    End Function


    Public Function ObtenerCuentaItem(ByVal p_itemCode As String, ByVal strAlmacen As String, Optional ByVal p_ClasificacionCuenta As String = "") As String

        Dim oItemArticulo As SAPbobsCOM.IItems
        Dim cuentaContable As String = String.Empty

        Try

            oItemArticulo = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oItems)
            oItemArticulo.GetByKey(p_itemCode)

            Select Case oItemArticulo.GLMethod
                Case SAPbobsCOM.BoGLMethods.glm_WH
                    cuentaContable = Utilitarios.EjecutarConsulta(String.Format("Select " & p_ClasificacionCuenta & " FROM OWHS WITH (nolock) Where WhsCode = '{0}'",
                                                        strAlmacen), m_oCompany.CompanyDB, m_oCompany.Server)

                Case SAPbobsCOM.BoGLMethods.glm_ItemClass
                    cuentaContable = Utilitarios.EjecutarConsulta(String.Format("Select " & p_ClasificacionCuenta & " From OITB WITH (nolock) Where ItmsGrpCod = '{0}'",
                                                        oItemArticulo.ItemsGroupCode.ToString.Trim()),
                                                        m_oCompany.CompanyDB,
                                                        m_oCompany.Server)

                Case SAPbobsCOM.BoGLMethods.glm_ItemLevel

                    cuentaContable = Utilitarios.EjecutarConsulta(String.Format("Select " & p_ClasificacionCuenta & " From OITW WITH (nolock) Where ItemCode= '{0}' AND WhsCode = '{1}'",
                                                        p_itemCode, strAlmacen), m_oCompany.CompanyDB, m_oCompany.Server)

                Case Else
                    cuentaContable = Utilitarios.EjecutarConsulta(String.Format("Select " & p_ClasificacionCuenta & " FROM OWHS WITH (nolock) Where WhsCode = '{0}'",
                                                        strAlmacen), m_oCompany.CompanyDB, m_oCompany.Server)

            End Select

            Return cuentaContable
        Catch ex As Exception

        Finally
            If Not oItemArticulo Is Nothing Then
                System.Runtime.InteropServices.Marshal.ReleaseComObject(oItemArticulo)
                oItemArticulo = Nothing
            End If
        End Try

    End Function

    Private Sub manejaCamposBtnMas(ByVal p_lsItems As List(Of String))
        Dim btnMas As SAPbouiCOM.Button
        btnMas = DirectCast(oForm.Items.Item("btnMas").Specific, SAPbouiCOM.Button)
        Select Case blnBtnMas
            Case False
                p_lsItems.Clear()
                p_lsItems.Add("163")
                p_lsItems.Add("txtGen_Ven")
                p_lsItems.Add("165")
                p_lsItems.Add("txtObs_GG")
                MostrarItems(oForm, p_lsItems, False)
                p_lsItems.Clear()
                p_lsItems.Add("lbCoEjBa")
                p_lsItems.Add("lbNrReBa")
                p_lsItems.Add("lbNrOpLe")
                p_lsItems.Add("txtCoEjBa")
                p_lsItems.Add("txtNrReBa")
                p_lsItems.Add("txtNrOpLe")
                MostrarItems(oForm, p_lsItems, True)
                blnBtnMas = True
                btnMas.Caption = My.Resources.Resource.btnMasFlechaArriba
            Case True
                p_lsItems.Clear()
                p_lsItems.Add("lbCoEjBa")
                p_lsItems.Add("lbNrReBa")
                p_lsItems.Add("lbNrOpLe")
                p_lsItems.Add("txtCoEjBa")
                p_lsItems.Add("txtNrReBa")
                p_lsItems.Add("txtNrOpLe")
                MostrarItems(oForm, p_lsItems, False)
                p_lsItems.Clear()
                p_lsItems.Add("163")
                p_lsItems.Add("txtGen_Ven")
                p_lsItems.Add("165")
                p_lsItems.Add("txtObs_GG")
                MostrarItems(oForm, p_lsItems, True)
                blnBtnMas = False
                btnMas.Caption = My.Resources.Resource.btnMasFlechaAbajo
        End Select
    End Sub
    ''' <summary>
    ''' Calcula lo impuestos del monto Otros 
    ''' Modificacion: Eder Vasquez Fecha: 27/9/2018
    ''' </summary>
    ''' <param name="p_rate">Impuesto</param>
    ''' <param name="oForm">Formulario de Contrato de Ventas</param>
    ''' <returns>Impuesto de Otros</returns>
    ''' <remarks></remarks>
    Private Function calculaImpuestosOtros(ByVal p_rate As Decimal, ByVal oForm As SAPbouiCOM.Form) As Decimal
        Dim decImpOtros As Decimal = 0
        Dim decDescLinea As Decimal = 0
        Dim blnImpConf As Boolean
        Dim strCode As String
        Dim dbTax As Double
        Dim dtFechaContrato As DateTime
        If p_rate <> 0 Then
            strCode = String.Empty
            dbTax = 0
            '' Define la fecha del contrato
            If Nothing <> oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0) Then
                dtFechaContrato = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_SCGD_FDc", 0), "yyyyMMdd", Nothing)
            ElseIf Nothing <> oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0) Then
                dtFechaContrato = Date.ParseExact(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DocDate", 0), "yyyyMMdd", Nothing)
            Else
                dtFechaContrato = DateTime.Now
            End If

            ''Recorre las lineas de SCGD_LINEASSUM
            For index As Integer = 0 To oForm.DataSources.DBDataSources.Item("@" & TablaLineasSuma).Size - 1
                blnImpConf = False
                decDescLinea = 0
                '' Si el item en SCGD_LINEASSUM tiene impuesto y monton entra al if a calcular el impuesto
                If Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_CodImp", index)) AndAlso oForm.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Monto", index) > 0 Then
                    strCode = oForm.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_CodImp", index).Trim
                    dbTax = Utilitarios.RetornaImpuestoVenta(strCode, dtFechaContrato)
                    blnImpConf = True
                    ''Si solamente tiene monto
                ElseIf oForm.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Monto", index) > 0 Then
                    blnImpConf = False
                Else
                    Continue For
                End If

                '' Si el item tiene configuracion suma el resultado del impuesto por el monto del item
                '' Si no usa el valor del impuesto del vehículo
                If blnImpConf Then
                    If Not dbTax = 0 Then
                        decDescLinea = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Monto", index), n) * (Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Descuent", index), n) / 100)
                        decImpOtros += (dbTax / 100) * (Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Monto", index), n) - decDescLinea)
                    End If
                Else
                    decDescLinea = Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Monto", index), n) * (Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Descuent", index), n) / 100)
                    decImpOtros += p_rate * (Utilitarios.ConvierteDecimal(oForm.DataSources.DBDataSources.Item("@" & TablaLineasSuma).GetValue("U_Monto", index), n) - decDescLinea)
                End If
            Next
        End If
        Return decImpOtros
    End Function

    ''' <summary>
    ''' Devuelve informacion unidad usada cuando se esta ingresando manualmente
    ''' </summary>
    ''' <param name="strCodUnid">Codigo unidad usado</param>
    ''' <param name="strVIN">VIN unidad usado</param>
    ''' <param name="strPlac">Placa unidad usada</param>
    ''' <returns>DataTable con informacion de unidad usada</returns>
    ''' <remarks></remarks>
    Private Function getInfoVehiUsado(ByVal strCodUnid As String, ByVal strVIN As String, ByVal strPlac As String) As SAPbouiCOM.DataTable

        Dim oDataTable As SAPbouiCOM.DataTable
        Dim strConsulta As String = " SELECT TOP (1) U_Cod_Unid,U_Cod_Marc,U_Cod_Esti,U_Cod_Mode,U_Num_Mot,U_Num_VIN,U_Ano_Vehi,U_Num_Plac," & _
                                    " U_Cod_Col,U_Transmis,U_Km_Unid,U_Clasificacion,U_Combusti,U_Categori,U_Tipo,U_Inven_V " & _
                                    " FROM [@SCGD_VEHICULO] V with (nolock) INNER JOIN [@SCGD_ADMIN] A with (nolock) ON 1=1 WHERE "
        Dim blnPrimero As Boolean = True

        Try
            oDataTable = oForm.DataSources.DataTables.Item("Consultas")
            If Not String.IsNullOrEmpty(strCodUnid) Then
                strConsulta = String.Format("{0} U_Cod_Unid = '{1}' ", strConsulta, strCodUnid)
                blnPrimero = False
            End If

            If Not String.IsNullOrEmpty(strVIN) Then
                If blnPrimero Then
                    strConsulta = String.Format("{0} U_Num_VIN = '{1}' ", strConsulta, strVIN)
                Else
                    strConsulta = String.Format("{0} OR U_Num_VIN = '{1}' ", strConsulta, strVIN)
                End If
                blnPrimero = False
            End If

            If oDataTableConfiguracionesDMS.GetValue("U_SCGD_Pla", 0).ToString.Trim = "Y" AndAlso Not String.IsNullOrEmpty(strPlac) Then
                If blnPrimero Then
                    strConsulta = String.Format("{0} U_Num_Plac = '{1}' ", strConsulta, strPlac)
                Else
                    strConsulta = String.Format("{0} OR U_Num_Plac = '{1}' ", strConsulta, strPlac)
                End If
            End If

            oDataTable.ExecuteQuery(strConsulta)
            Return oDataTable

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try

    End Function

    ''' <summary>
    ''' Metodo que calcula el impuesto sobre el usado
    ''' </summary>
    ''' <param name="BubbleEvent"></param>
    ''' <remarks></remarks>
    Private Sub calculaImpuestodeusado(ByRef BubbleEvent As Boolean, ByVal TipoInventario As String)

        Dim ValorImpuesto As Double
        Dim Totalimpuesto As Double = 0
        Dim Totalsinimpuesto As Double
        Dim TotalConimpuesto As Double = 0
        Dim TotalUsado As Double
        Dim ValorPantalla As String

        'Limpieza de campos
        ValorPantalla = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Us", 0)
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ImpUsa", 0, "0")
        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TImpusa", 0, ValorPantalla.ToString(n))

        If (String.IsNullOrEmpty(TipoInventario.Trim()) = False) Then

            Dim strItemCode As String = Utilitarios.EjecutarConsulta("Select ISNULL(A2.Rate,0) from [@SCGD_ADMIN3] as A1 , OSTA as A2 WITH (nolock) where A1.U_Tipo = " + TipoInventario.Trim() + " and A1.U_Cod_Item = 2 and UPPER(A1.U_Cod_Imp) = UPPER(A2.Code)", m_oCompany.CompanyDB, m_oCompany.Server)
            If Decimal.TryParse(strItemCode, ValorImpuesto) Then
                If ValorImpuesto > 0 Then
                    ValorPantalla = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Us", 0)
                    Totalsinimpuesto = Utilitarios.ConvierteDecimal(ValorPantalla, n)
                    If Double.TryParse(Totalsinimpuesto, TotalUsado) Then
                        Totalimpuesto = (TotalUsado * (ValorImpuesto / 100))
                        TotalConimpuesto = Totalimpuesto + TotalUsado
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_ImpUsa", 0, Totalimpuesto.ToString(n))
                        oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_TImpusa", 0, TotalConimpuesto.ToString(n))
                    End If
                End If
            End If
        End If


        BubbleEvent = False

    End Sub

    ''' <summary>
    ''' Metodo que maneja la carga de la unidad cuando se ingresa manualmente una unidad
    ''' </summary>
    ''' <param name="BubbleEvent"></param>
    ''' <remarks></remarks>
    Private Sub cargaUnidadUsadaTab(ByRef BubbleEvent As Boolean)
        Try
            Dim oDataTable As SAPbouiCOM.DataTable

            If Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Unid_Us", 0).Trim) OrElse _
                            Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_VIN_Us", 0).Trim) OrElse _
                            (Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Plac_Us", 0).Trim) AndAlso oDataTableConfiguracionesDMS.GetValue("U_SCGD_Pla", 0).ToString.Trim = "Y") Then

                oDataTable = getInfoVehiUsado(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Unid_Us", 0).Trim, _
                                       oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_VIN_Us", 0).Trim, _
                                       oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Plac_Us", 0).Trim)

                If Not String.IsNullOrEmpty(oDataTable.Columns.Item("U_Cod_Unid").Cells.Item(0).Value.ToString.Trim) Then

                    If oDataTable.Columns.Item("U_Tipo").Cells.Item(0).Value.ToString.Trim = oDataTable.Columns.Item("U_Inven_V").Cells.Item(0).Value.ToString.Trim Then
                        Call LimpiarUsadoTemporal(oForm)
                        Call CargarUnidadVendida(oForm, oDataTable)
                        oForm.Items.Item("txtUnid_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                        oForm.Items.Item("txtVIN_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                        If oDataTableConfiguracionesDMS.GetValue("U_SCGD_Pla", 0).ToString.Trim = "Y" Then
                            oForm.Items.Item("txtPlac_Us").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
                        End If
                        oForm.Items.Item("btnEditUs").Enabled = False
                        oForm.Items.Item("btnAgregaU").Enabled = True
                        BubbleEvent = False
                    Else
                        BubbleEvent = False
                        If Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Unid_Us", 0).Trim) Then
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.CodUnidadUsadoNoPermitido, BoMessageTime.bmt_Short, BoStatusBarMessageType.smt_Warning)
                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Unid_Us", 0, "")
                        ElseIf Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_VIN_Us", 0).Trim) Then
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.VINUnidadUsadoNoPermitido, BoMessageTime.bmt_Short, BoStatusBarMessageType.smt_Warning)
                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_VIN_Us", 0, "")
                        ElseIf oDataTableConfiguracionesDMS.GetValue("U_SCGD_Pla", 0).ToString.Trim = "Y" Then
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.PlacaUnidadUsadoNoPermitido, BoMessageTime.bmt_Short, BoStatusBarMessageType.smt_Warning)
                            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Plac_Us", 0, "")
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub
    ''' <summary>
    ''' Metodo que controla el evento lost focus del contrato de venta
    ''' </summary>
    ''' <param name="pval"></param>
    ''' <param name="FormUID"></param>
    ''' <param name="BubbleEvent"></param>
    ''' <remarks></remarks>
    Private Sub ManejadorEventoLostFocus(ByRef pval As SAPbouiCOM.ItemEvent, _
                                                 ByVal FormUID As String, _
                                                 ByRef BubbleEvent As Boolean)
        Try
            If pval.ActionSuccess Then
                Select Case pval.ItemUID
                    Case "txtUnid_Us", "txtVIN_Us"
                        cargaUnidadUsadaTab(BubbleEvent)

                    Case "txtPlac_Us"
                        If oDataTableConfiguracionesDMS.GetValue("U_SCGD_Pla", 0).ToString.Trim = "Y" Then
                            cargaUnidadUsadaTab(BubbleEvent)
                        End If

                    Case "txtVal_Inv"
                        Dim strTipoInventario As String = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Tip_Us", 0)
                        calculaImpuestodeusado(BubbleEvent, strTipoInventario)
                    Case "txtPorTemp", "txtDescUni", "txtPrecioV"
                        CalculaDescXUnidad()

                End Select
            End If

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Private Sub ManejoFinanciamientoExterno()
        Dim editText As SAPbouiCOM.EditText
        If Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinE", 0).Trim()) AndAlso oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinE", 0).Trim() = "Y" Then
            oForm.Items.Item("txtEntFinE").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
            editText = CType(oForm.Items.Item("txtEntFinE").Specific, EditText)
            editText.ChooseFromListUID = "CFL_Banks3"
            editText.ChooseFromListAlias = "BankName"
            oForm.Items.Item("txtMonFinE").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_True)
        Else
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_EntFinE", 0, "")
            oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_FinanciaE", 0, 0)
            oForm.Items.Item("txtEntFinE").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
            oForm.Items.Item("txtMonFinE").SetAutoManagedAttribute(SAPbouiCOM.BoAutoManagedAttr.ama_Editable, 11, SAPbouiCOM.BoModeVisualBehavior.mvb_False)
        End If
    End Sub

    Private Sub LimpiarDisponibilidad()

        Dim oCompanyServiceVH As SAPbobsCOM.CompanyService
        Dim oGeneralServiceVH As SAPbobsCOM.GeneralService
        Dim oGeneralDataVH As SAPbobsCOM.GeneralData
        Dim oGeneralParamsVH As SAPbobsCOM.GeneralDataParams

        Dim oMatrix As SAPbouiCOM.Matrix
        Dim strCodeVeh As String = String.Empty
        Dim strCodUnidad As String = String.Empty
        Dim strEstadoDispo As String = String.Empty

        oMatrix = DirectCast(oForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)

        For i As Integer = 0 To oMatrix.RowCount - 1

            strCodUnidad = oForm.DataSources.DBDataSources.Item("@SCGD_VEHIXCONT").GetValue("U_Cod_Unid", i).Trim

            If Not String.IsNullOrEmpty(strCodUnidad) Then

                strCodeVeh = Utilitarios.EjecutarConsulta(String.Format("SELECT code FROM [@SCGD_VEHICULO] with(nolock) WHERE U_Cod_Unid = '{0}'", strCodUnidad), m_oCompany.CompanyDB, m_oCompany.Server)

                strEstadoDispo = oDataTableConfiguracionesDMS.GetValue("U_Disp_R", 0)

                oCompanyServiceVH = m_oCompany.GetCompanyService()
                oGeneralServiceVH = oCompanyServiceVH.GetGeneralService("SCGD_VEH")
                oGeneralParamsVH = oGeneralServiceVH.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
                oGeneralParamsVH.SetProperty("Code", strCodeVeh)
                oGeneralDataVH = oGeneralServiceVH.GetByParams(oGeneralParamsVH)
                oGeneralDataVH.SetProperty("U_Dispo", strEstadoDispo)
                oGeneralDataVH.SetProperty("U_FchRsva", String.Empty)
                oGeneralDataVH.SetProperty("U_VENRES", String.Empty)
                oGeneralDataVH.SetProperty("U_ContratoV", String.Empty)
                oGeneralServiceVH.Update(oGeneralDataVH)

            End If

        Next i
    End Sub

#Region "Eventos"
    Private Sub ItemEvent(ByVal FormUID As String, _
                                         ByRef pVal As SAPbouiCOM.ItemEvent, _
                                         ByRef BubbleEvent As Boolean) Handles m_SBO_Application.ItemEvent
        Try
            If Not pVal.BeforeAction Then
                Select Case FormUID
                    Case "SCGD_frmContVent"
                        Select Case pVal.EventType
                            Case BoEventTypes.et_LOST_FOCUS
                                ManejadorEventoLostFocus(pVal, FormUID, BubbleEvent)
                                Exit Sub
                        End Select
                End Select
            End If

        Catch ex As Exception
            Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub
#End Region


#Region "Metodos Nuevos"
    Private Sub SBO_Application_ItemEvent(ByVal FormUID As String, _
                                          ByRef pVal As SAPbouiCOM.ItemEvent, _
                                          ByRef BubbleEvent As Boolean) Handles m_SBO_Application.ItemEvent
        Try
            If pVal.ActionSuccess AndAlso pVal.FormTypeEx = mc_strControlCVenta Then
                If pVal.FormTypeEx = mc_strControlCVenta Then
                    Call EventoItemPressAprobacionRechazo(pVal, pVal.FormUID, BubbleEvent)
                End If
            End If

        Catch ex As Exception
            m_SBO_Application.StatusBar.SetText(ex.Message, SAPbouiCOM.BoMessageTime.bmt_Long, BoStatusBarMessageType.smt_Error)
        End Try
    End Sub

    <System.CLSCompliant(False)> _
    Public Sub EventoItemPressAprobacionRechazo(ByRef pval As SAPbouiCOM.ItemEvent, _
                                                ByVal FormUID As String, _
                                                ByRef BubbleEvent As Boolean)
        Try
            '********Declaración de data contract*************
            Dim oNivelAprobacionList As NivelAprobacion_List = New NivelAprobacion_List()
            Dim oContratoVentaEncabezadoList As ContratoVentaEncabezado_List = New ContratoVentaEncabezado_List()
            Dim oConfiguracionNivelAprobacionList As ConfiguracionNivelAprobacion_List = New ConfiguracionNivelAprobacion_List()
            '********Listas genericas*************
            Dim oUsuariosMensajeriaList As List(Of String) = New Generic.List(Of String)
            '********Declaración de variables*************
            Dim oForm As SAPbouiCOM.Form
            Dim oCombo As SAPbouiCOM.ComboBox
            Dim intNivelAprobacionSiguiente As Integer = 0
            Dim intNivelAprobacionSuperior As Integer = 0

            If pval.EventType <> BoEventTypes.et_FORM_UNLOAD AndAlso pval.ItemUID = "btnAprobar" Then
                oForm = m_SBO_Application.Forms.Item(FormUID)
                If oForm IsNot Nothing Then
                    If (pval.ItemUID = "btnAprobar") AndAlso oForm.Items.Item("btnAprobar").Enabled = True AndAlso Not pval.BeforeAction _
                        AndAlso (oForm.Mode <> SAPbouiCOM.BoFormMode.fm_ADD_MODE AndAlso oForm.Mode <> SAPbouiCOM.BoFormMode.fm_FIND_MODE) Then

                        If oForm.Mode = SAPbouiCOM.BoFormMode.fm_UPDATE_MODE Then
                            m_SBO_Application.StatusBar.SetText(My.Resources.Resource.ActualizarAntesAprobar, SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Warning)
                        ElseIf oForm.Mode = SAPbouiCOM.BoFormMode.fm_OK_MODE Then
                            oForm.Freeze(True)
                            CargaNivelesAprobacion(oNivelAprobacionList, intNivelAprobacionSuperior)
                            CargaEncabezadoContratoVentas(oForm, oContratoVentaEncabezadoList)
                            oForm.Freeze(False)

                            If pval.ItemUID = "btnAprobar" Then
                                Utilitarios.bLoadInputEvents = False
                                If m_SBO_Application.MessageBox(My.Resources.Resource.PreguntaAprobarContrato, 2, My.Resources.Resource.Si, My.Resources.Resource.No) = 1 Then
                                    If oContratoVentaEncabezadoList.Count > 0 And oNivelAprobacionList.Count > 0 Then
                                        If oContratoVentaEncabezadoList.Item(0).Estado < intNivelAprobacionSuperior Then
                                            intNivelAprobacionSiguiente = ValidarSiguienteNivelAprobacion(oNivelAprobacionList, oContratoVentaEncabezadoList)
                                            If intNivelAprobacionSiguiente > 0 AndAlso intNivelAprobacionSiguiente < intNivelAprobacionSuperior Then
                                                CargarConfiguracionNivelAprobacionSucursal(oNivelAprobacionList, oContratoVentaEncabezadoList, intNivelAprobacionSiguiente, oConfiguracionNivelAprobacionList)
                                                CargaListaUsuariosMensajeriaAprobacion(oConfiguracionNivelAprobacionList, oUsuariosMensajeriaList)

                                                ActualizarInformacion(oNivelAprobacionList, oContratoVentaEncabezadoList, intNivelAprobacionSiguiente, TipoAprobacion.Aprobacion)
                                                oForm.Close()
                                                EnviarMensajeriaNivelesAprobacion(oContratoVentaEncabezadoList, oUsuariosMensajeriaList, TipoAprobacion.Aprobacion)
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Catch ex As Exception
            m_SBO_Application.StatusBar.SetText(ex.Message, SAPbouiCOM.BoMessageTime.bmt_Long, BoStatusBarMessageType.smt_Error)
        End Try
    End Sub

    Public Function ValidarSiguienteNivelAprobacion(ByRef p_oNivelAprobacionList As NivelAprobacion_List, _
                                                    ByRef p_oContratoVentaEncabezadoList As ContratoVentaEncabezado_List) As Integer
        Try
            '********Declaración de data contract*************
            Dim oNivelAprobacion As NivelAprobacion
            '********Declaración de variables*****************
            Dim blnValidaNivelAprobacionUsado As Boolean = False
            Dim intNivelSiguiente As Integer = 0
            Dim blnBanderaValidoFinanciamiento As Boolean = False
            Dim intNivelUsado As Integer = -1
            Dim intNivelFinanciamiento As Integer = -1

            ValidaExisteVehiculoUsado(blnValidaNivelAprobacionUsado)

            If Not String.IsNullOrEmpty(p_oNivelAprobacionList.Item(0).NivelUsado) Then
                If p_oNivelAprobacionList.Item(0).NivelUsado <> "--" Then
                    intNivelUsado = p_oNivelAprobacionList.Item(0).NivelUsado
                Else
                    intNivelUsado = -1
                End If
            Else
                intNivelUsado = -1
            End If

            If Not String.IsNullOrEmpty(p_oNivelAprobacionList.Item(0).NivelFinanciamiento) Then
                If p_oNivelAprobacionList.Item(0).NivelFinanciamiento <> "--" Then
                    intNivelFinanciamiento = p_oNivelAprobacionList.Item(0).NivelFinanciamiento
                Else
                    intNivelFinanciamiento = -1
                End If
            Else
                intNivelFinanciamiento = -1
            End If

            If p_oContratoVentaEncabezadoList.Count > 0 Then
                intNivelSiguiente = p_oContratoVentaEncabezadoList.Item(0).Estado + 1
            End If

            For Each rowNivelAprobacion As NivelAprobacion In p_oNivelAprobacionList
                If rowNivelAprobacion.Prioridad = intNivelSiguiente Then
                    '******* Valida Nivel Usado *******
                    If intNivelSiguiente = intNivelUsado Then
                        If blnValidaNivelAprobacionUsado Then
                            Return intNivelSiguiente
                        Else
                            intNivelSiguiente += 1
                            Continue For
                        End If
                    End If
                    '******* Valida Nivel Financiamiento *******
                    If intNivelSiguiente = intNivelFinanciamiento Then
                        If p_oContratoVentaEncabezadoList.Item(0).UsaFinPropio OrElse p_oContratoVentaEncabezadoList.Item(0).UsaFinExterno Then
                            Return intNivelSiguiente
                        Else
                            intNivelSiguiente += 1
                            Continue For
                        End If
                    End If
                    Return intNivelSiguiente
                End If
            Next
            Return intNivelSiguiente
        Catch ex As Exception
            m_SBO_Application.StatusBar.SetText(ex.Message, SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
        End Try
    End Function

    Public Sub CargarConfiguracionNivelAprobacionSucursal(ByRef p_oNivelAprobacionList As NivelAprobacion_List, _
                                                          ByRef p_oContratoVentaEncabezadoList As ContratoVentaEncabezado_List, _
                                                          ByRef p_intNivelAprobacionSiguiente As Integer, _
                                                          ByRef p_oConfiguracionNivelAprobacion As ConfiguracionNivelAprobacion_List)
        Try
            '********Declaración de data contract*************
            Dim oConfiguracionNivelAprobacion As ConfiguracionNivelAprobacion
            '********Declaración de variables*****************
            Dim strCodigoNivel As String = String.Empty
            Dim strCodigoSucursal As String = String.Empty
            Dim oDataTableConfiguracionNivelAprobacion As System.Data.DataTable = Nothing
            Dim oDataRowConfiguracionNivelAprobacion As System.Data.DataRow

            For Each rowNivelAprobacion As NivelAprobacion In p_oNivelAprobacionList
                If rowNivelAprobacion.Prioridad = p_intNivelAprobacionSiguiente Then
                    strCodigoNivel = rowNivelAprobacion.Codigo
                End If
            Next

            If Not String.IsNullOrEmpty(p_oContratoVentaEncabezadoList.Item(0).CodigoSucursal) Then
                strCodigoSucursal = p_oContratoVentaEncabezadoList.Item(0).CodigoSucursal
            End If
            '******************************************************************************
            '******************** Carga Configuración de tabla @SCGD_MSJS1*******
            '******************************************************************************
            oDataTableConfiguracionNivelAprobacion = Utilitarios.EjecutarConsultaDataTable(String.Format("select U_CSucu,U_CNAp,U_Usua,U_Name,U_RMsj,U_MCV,U_ManejaApro  from dbo.[@SCGD_MSJS1] with(nolock) where U_CSucu = '{0}' and U_CNAp='{1}'", _
                                                                                            strCodigoSucursal, strCodigoNivel), m_oCompany.CompanyDB, m_oCompany.Server)
            '***************************************************************************
            '******************** Recorre configuraciones y agrega a objeto list*******
            '******************************************************************************
            For Each oDataRowConfiguracionNivelAprobacion In oDataTableConfiguracionNivelAprobacion.Rows
                oConfiguracionNivelAprobacion = New ConfiguracionNivelAprobacion()
                With oConfiguracionNivelAprobacion
                    If Not IsDBNull(oDataRowConfiguracionNivelAprobacion.Item("U_CSucu")) Then
                        .CodigoSucursal = oDataRowConfiguracionNivelAprobacion.Item("U_CSucu").ToString.Trim()
                    End If
                    '****************************************************
                    If Not IsDBNull(oDataRowConfiguracionNivelAprobacion.Item("U_CNAp")) Then
                        .CodigoNivelAprobacion = oDataRowConfiguracionNivelAprobacion.Item("U_CNAp")
                    End If
                    '****************************************************
                    If Not IsDBNull(oDataRowConfiguracionNivelAprobacion.Item("U_Usua")) Then
                        .CodigoUsuario = oDataRowConfiguracionNivelAprobacion.Item("U_Usua")
                    End If
                    '****************************************************
                    If Not IsDBNull(oDataRowConfiguracionNivelAprobacion.Item("U_Name")) Then
                        .NombreUsuario = oDataRowConfiguracionNivelAprobacion.Item("U_Name")
                    End If
                    '****************************************************
                    If Not IsDBNull(oDataRowConfiguracionNivelAprobacion.Item("U_RMsj")) Then
                        If oDataRowConfiguracionNivelAprobacion.Item("U_RMsj") = "Y" Then
                            .RecibeMensaje = True
                        Else
                            .RecibeMensaje = False
                        End If
                    Else
                        .RecibeMensaje = False
                    End If
                    '****************************************************
                    If Not IsDBNull(oDataRowConfiguracionNivelAprobacion.Item("U_ManejaApro")) Then
                        If oDataRowConfiguracionNivelAprobacion.Item("U_ManejaApro") = "Y" Then
                            .ManejaAprobacion = True
                        Else
                            .ManejaAprobacion = False
                        End If
                    Else
                        .ManejaAprobacion = False
                    End If
                End With
                p_oConfiguracionNivelAprobacion.Add(oConfiguracionNivelAprobacion)
            Next
        Catch ex As Exception
            m_SBO_Application.StatusBar.SetText(ex.Message, SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
        End Try
    End Sub

    Public Sub CargaNivelesAprobacion(ByRef p_oNivelAprobacionList As NivelAprobacion_List, _
                                      ByRef p_intNivelAprobacionSuperior As Integer)
        Try
            '********Declaración de data contract*************
            Dim oNivelAprobacion As NivelAprobacion
            '********Declaración de variables*****************
            Dim oDataTableNivelAprobacion As System.Data.DataTable = Nothing
            Dim oDataRowNivelAprobacion As System.Data.DataRow
            '******************************************************************************
            '******************** Carga Configuración de tabla Admin9*******
            '******************************************************************************
            oDataTableNivelAprobacion = Utilitarios.EjecutarConsultaDataTable(String.Format("select A9.U_Codigo,A9.U_Prio,A9.U_PEmp,A9.U_Estado, A9.U_ValTI,A9.U_EsUsad, A. U_Niv_Usa,A.U_Niv_Fin from dbo.[@SCGD_ADMIN9] A9 with(nolock), dbo.[@SCGD_ADMIN] A with(nolock)order by U_Prio"),
                                                       m_oCompany.CompanyDB,
                                                       m_oCompany.Server)
            '******************************************************************************
            '******************** Recorre configuraciones y agrega a objeto list*******
            '******************************************************************************
            For Each oDataRowNivelAprobacion In oDataTableNivelAprobacion.Rows
                oNivelAprobacion = New NivelAprobacion()
                With oNivelAprobacion
                    If Not IsDBNull(oDataRowNivelAprobacion.Item("U_Codigo")) Then
                        .Codigo = oDataRowNivelAprobacion.Item("U_Codigo").ToString.Trim()
                    End If
                    '****************************************************
                    If Not IsDBNull(oDataRowNivelAprobacion.Item("U_Prio")) Then
                        .Prioridad = oDataRowNivelAprobacion.Item("U_Prio")
                    End If
                    '****************************************************
                    If Not IsDBNull(oDataRowNivelAprobacion.Item("U_PEmp")) Then
                        .PEmp = oDataRowNivelAprobacion.Item("U_PEmp")
                    End If
                    '****************************************************
                    If Not IsDBNull(oDataRowNivelAprobacion.Item("U_Estado")) Then
                        .Estado = oDataRowNivelAprobacion.Item("U_Estado")
                    End If
                    '****************************************************
                    If Not IsDBNull(oDataRowNivelAprobacion.Item("U_ValTI")) Then
                        If oDataRowNivelAprobacion.Item("U_ValTI") = "Y" Then
                            .ValidaTipoInventario = True
                        Else
                            .ValidaTipoInventario = False
                        End If
                    Else
                        .ValidaTipoInventario = False
                    End If
                    '****************************************************
                    If Not IsDBNull(oDataRowNivelAprobacion.Item("U_EsUsad")) Then
                        If oDataRowNivelAprobacion.Item("U_EsUsad") = "Y" Then
                            .EsUsado = True
                        Else
                            .EsUsado = False
                        End If
                    Else
                        .EsUsado = False
                    End If
                    '****************************************************
                    If Not IsDBNull(oDataRowNivelAprobacion.Item("U_Niv_Usa")) Then
                        .NivelUsado = oDataRowNivelAprobacion.Item("U_Niv_Usa")
                    End If
                    '****************************************************
                    If Not IsDBNull(oDataRowNivelAprobacion.Item("U_Niv_Fin")) Then
                        .NivelFinanciamiento = oDataRowNivelAprobacion.Item("U_Niv_Fin")
                    End If
                    '************** Nivel Aprobacion Superior *************
                    If Not IsDBNull(oDataRowNivelAprobacion.Item("U_Prio")) Then
                        If oDataRowNivelAprobacion.Item("U_Prio") >= p_intNivelAprobacionSuperior Then
                            p_intNivelAprobacionSuperior = oDataRowNivelAprobacion.Item("U_Prio")
                        End If
                    End If
                End With
                p_oNivelAprobacionList.Add(oNivelAprobacion)
            Next
        Catch ex As Exception
            m_SBO_Application.StatusBar.SetText(ex.Message, SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
        End Try
    End Sub

    Public Sub CargaEncabezadoContratoVentas(ByRef p_oForm As SAPbouiCOM.Form, _
                                             ByRef p_oContratoVentaEncabezadoList As ContratoVentaEncabezado_List)
        Try
            '********Declaración de data contract*************
            Dim oContratoVentaEncabezado As ContratoVentaEncabezado
            '********Declaración de variables*****************
            Dim strUsaFinPropio As String = String.Empty
            Dim strUsaFinExterno As String = String.Empty
            Dim oComboEstado As SAPbouiCOM.ComboBox
            Dim oEditComentarios As SAPbouiCOM.EditText
            Dim strComentario As String = String.Empty

            If Not p_oForm Is Nothing Then
                strUsaFinPropio = p_oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Fin_Prop", 0).Trim()
                strUsaFinExterno = p_oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_FinE", 0).Trim()
                oComboEstado = DirectCast(p_oForm.Items.Item(mc_strEstado).Specific, SAPbouiCOM.ComboBox)

                oEditComentarios = DirectCast(p_oForm.Items.Item("txtH_RC").Specific, SAPbouiCOM.EditText)
                strComentario = String.Format(My.Resources.Resource.TXTContratoRechazado, oEditComentarios.Value.Trim())
                If strComentario.Length > 254 Then
                    strComentario = strComentario.Substring(0, 254)
                End If

                oContratoVentaEncabezado = New ContratoVentaEncabezado()
                With oContratoVentaEncabezado
                    .DocEntry = p_oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("DocEntry", 0)
                    .CodigoSucursal = p_oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CSucu", 0).Trim()
                    .Vendedor = p_oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Foo", 0).Trim()
                    .CodigoClienteVehiculo = p_oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_CCl_Veh", 0).Trim()
                    .DocNum = p_oForm.Items.Item(mc_strNumContrato).Specific.String
                    '****************** Usa Financiamiento Propio *****************
                    If Not String.IsNullOrEmpty(strUsaFinPropio) Then
                        If strUsaFinPropio = "Y" Then
                            .UsaFinPropio = True
                        Else
                            .UsaFinPropio = False
                        End If
                    Else
                        .UsaFinPropio = False
                    End If
                    '****************** Usa Financiamiento Externo *****************
                    If Not String.IsNullOrEmpty(strUsaFinExterno) Then
                        If strUsaFinExterno = "Y" Then
                            .UsaFinExterno = True
                        Else
                            .UsaFinExterno = False
                        End If
                    Else
                        .UsaFinExterno = False
                    End If
                    '****************** Estado *****************
                    If Not String.IsNullOrEmpty(oComboEstado.Selected.Value) Then
                        .Estado = CInt(oComboEstado.Selected.Value)
                    End If
                    '***************** Comentario Rechaza Contrato Venta
                    .ComentarioRechazo = strComentario
                End With
                p_oContratoVentaEncabezadoList.Add(oContratoVentaEncabezado)
            End If
        Catch ex As Exception
            m_SBO_Application.StatusBar.SetText(ex.Message, SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
        End Try
    End Sub

    Public Sub ValidaExisteVehiculoUsado(ByRef p_blnValidaNivelAprobacionUsado As Boolean)
        Try
            If oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").Size > 0 AndAlso Not String.IsNullOrEmpty(oForm.DataSources.DBDataSources.Item("@SCGD_USADOXCONT").GetValue("U_Cod_Unid", 0)) Then
                p_blnValidaNivelAprobacionUsado = True
            Else
                p_blnValidaNivelAprobacionUsado = False
            End If
        Catch ex As Exception
            m_SBO_Application.StatusBar.SetText(ex.Message, SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
        End Try
    End Sub

    Public Sub CargaListaUsuariosMensajeriaAprobacion(ByRef p_oConfiguracionNivelAprobacion As ConfiguracionNivelAprobacion_List, _
                                                      ByRef p_oUsuariosMensajeriaList As Generic.List(Of String))
        Try
            For Each rowConfiguracionNivelAprobacion As ConfiguracionNivelAprobacion In p_oConfiguracionNivelAprobacion
                If rowConfiguracionNivelAprobacion.RecibeMensaje Then
                    If Not p_oUsuariosMensajeriaList.Contains(rowConfiguracionNivelAprobacion.CodigoUsuario) Then
                        p_oUsuariosMensajeriaList.Add(rowConfiguracionNivelAprobacion.CodigoUsuario)
                    End If
                End If
            Next
        Catch ex As Exception
            m_SBO_Application.StatusBar.SetText(ex.Message, SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
        End Try
    End Sub

    Private Sub EnviarMensajeriaNivelesAprobacion(ByRef p_oContratoVentaEncabezadoList As ContratoVentaEncabezado_List, _
                                                  ByRef p_oUsuariosMensajeriaList As Generic.List(Of String), _
                                                  ByRef p_TipoAprobacion As TipoAprobacion)
        Try
            '***************** Variables ************
            Dim strMensaje As String = String.Empty
            Dim oMsg As SAPbobsCOM.Messages
            Dim intResultado As Integer
            Dim strError As String = ""

            If p_oUsuariosMensajeriaList.Count > 0 Then
                Select Case p_TipoAprobacion
                    Case TipoAprobacion.Aprobacion
                        strMensaje = My.Resources.Resource.ElContratoVenta & p_oContratoVentaEncabezadoList.Item(0).DocNum.ToString() & My.Resources.Resource.ContratoVendedor & p_oContratoVentaEncabezadoList.Item(0).Vendedor & " " & My.Resources.Resource.Contratode & p_oContratoVentaEncabezadoList.Item(0).CodigoClienteVehiculo & My.Resources.Resource.RequiereRevision
                    Case TipoAprobacion.Rechazo
                        strMensaje = My.Resources.Resource.ElContratoVenta & p_oContratoVentaEncabezadoList.Item(0).DocNum.ToString() & My.Resources.Resource.ContratoVendedor & p_oContratoVentaEncabezadoList.Item(0).Vendedor & " " & My.Resources.Resource.Contratode & p_oContratoVentaEncabezadoList.Item(0).CodigoClienteVehiculo & My.Resources.Resource.RechazadoPor & m_oCompany.UserName
                    Case TipoAprobacion.Cancelacion
                        'strMensaje = My.Resources.Resource.ElContratoVenta & p_oContratoVentaEncabezadoList.Item(0).DocNum.ToString() & My.Resources.Resource.ContratoVendedor & p_oContratoVentaEncabezadoList.Item(0).Vendedor & " " & My.Resources.Resource.Contratode & p_oContratoVentaEncabezadoList.Item(0).CodigoClienteVehiculo & My.Resources.Resource.ContratoEstado & strEstado
                End Select
                oMsg = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oMessages)
                oMsg.Priority = SAPbobsCOM.BoMsgPriorities.pr_High
                oMsg.MessageText = strMensaje
                oMsg.Subject = My.Resources.Resource.MensajeContratoAprobado
                For Each strUsuario As String In p_oUsuariosMensajeriaList
                    oMsg.Recipients.Add()
                    oMsg.Recipients.UserCode = strUsuario
                    oMsg.Recipients.NameTo = strUsuario
                    oMsg.Recipients.SendInternal = SAPbobsCOM.BoYesNoEnum.tYES
                Next
                intResultado = oMsg.Add
                If (intResultado <> 0) Then
                    m_oCompany.GetLastError(intResultado, strError)
                    Throw New ExceptionsSBO(intResultado, strError)
                End If
            End If
        Catch ex As Exception
            m_SBO_Application.StatusBar.SetText(ex.Message, SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
        End Try
    End Sub

    Public Sub ActualizarInformacion(ByRef p_oNivelAprobacionList As NivelAprobacion_List, _
                                     ByRef p_oContratoVentaEncabezadoList As ContratoVentaEncabezado_List, _
                                     ByRef p_intNivelAprobacion As Integer, _
                                     ByRef p_oTipoAprobacion As TipoAprobacion)
        Try
            Dim oCompanyService As SAPbobsCOM.CompanyService
            Dim oGeneralService As SAPbobsCOM.GeneralService
            Dim oGeneralData As SAPbobsCOM.GeneralData
            Dim oGeneralDataChilds As SAPbobsCOM.GeneralDataCollection
            Dim oGDChild As SAPbobsCOM.GeneralData
            Dim oGeneralParams As SAPbobsCOM.GeneralDataParams

            Dim strDocEntry As String = String.Empty
            Dim dtFecha As Date = Date.Now
            Dim strComentario As String = String.Empty
            Dim intNivelAprobacionInferior As Integer = 0
            Dim intNivelAprobacionSuperior As Integer = 0
            Dim blnSaltarPrimeraLinea As Boolean = False
            Dim strNombreNivelAnterior As String = String.Empty
            Dim strNombreNivelSiguiente As String = String.Empty
            Dim strCodigoNivelSiguiente As String = String.Empty
            Dim intNivelAnterior As Integer = 0

            intNivelAnterior = p_oContratoVentaEncabezadoList.Item(0).Estado
            strDocEntry = p_oContratoVentaEncabezadoList.Item(0).DocEntry

            For Each rowNivelAprobacion As NivelAprobacion In p_oNivelAprobacionList
                '********* Nivel Inferior *************
                If Not blnSaltarPrimeraLinea Then
                    intNivelAprobacionInferior = rowNivelAprobacion.Prioridad
                    blnSaltarPrimeraLinea = True
                End If
                '********* Nivel Anterior ******************
                If intNivelAnterior = rowNivelAprobacion.Prioridad Then
                    strNombreNivelAnterior = rowNivelAprobacion.Estado
                End If
                '********* Nivel Siguiente ******************
                If p_intNivelAprobacion = rowNivelAprobacion.Prioridad Then
                    strNombreNivelSiguiente = rowNivelAprobacion.Estado
                    strCodigoNivelSiguiente = rowNivelAprobacion.Codigo
                End If
                '******** Nivel Superior *******************
                intNivelAprobacionSuperior = rowNivelAprobacion.Prioridad
            Next
            '*********************** Asigna comentario *****************************
            If p_oTipoAprobacion = TipoAprobacion.Aprobacion Then
                Select Case p_intNivelAprobacion
                    Case intNivelAprobacionSuperior
                        strComentario = My.Resources.Resource.TXTContratoFacturado
                    Case Else
                        strComentario = String.Format(My.Resources.Resource.TXTContratoAprobado, strNombreNivelAnterior, strNombreNivelSiguiente)
                End Select
            ElseIf p_oTipoAprobacion = TipoAprobacion.Rechazo Then
                strComentario = p_oContratoVentaEncabezadoList.Item(0).ComentarioRechazo
            End If
            '****************** Maneja General Service *********************
            oCompanyService = m_oCompany.GetCompanyService()
            oGeneralService = oCompanyService.GetGeneralService("SCGD_CVT")
            oGeneralParams = oGeneralService.GetDataInterface(SAPbobsCOM.GeneralServiceDataInterfaces.gsGeneralDataParams)
            oGeneralParams.SetProperty("DocEntry", strDocEntry)
            oGeneralData = oGeneralService.GetByParams(oGeneralParams)

            Select Case p_intNivelAprobacion
                Case intNivelAprobacionSuperior
                    oGeneralData.SetProperty("U_Usu_Fac", m_SBO_Application.Company.UserName)
                    oGeneralData.SetProperty("U_Fec_Fac", dtFecha)
                Case intNivelAprobacionInferior
                    oGeneralData.SetProperty("U_Usu_Can", m_SBO_Application.Company.UserName)
                    oGeneralData.SetProperty("U_Fec_Can", dtFecha)
                Case Else
                    oGeneralData.SetProperty("U_Usu_Tra", m_SBO_Application.Company.UserName)
                    oGeneralData.SetProperty("U_Fec_Tra", dtFecha)
            End Select

            oGeneralData.SetProperty("U_Estado", p_intNivelAprobacion)
            oGeneralDataChilds = oGeneralData.Child("SCGD_HIST_CV")

            oGDChild = oGeneralDataChilds.Add()

            '*******************Asignación de los valores ***************************
            oGDChild.SetProperty("U_Usuario", m_SBO_Application.Company.UserName)
            oGDChild.SetProperty("U_Fecha", DateTime.Now)
            oGDChild.SetProperty("U_Hora", DateTime.Now)
            oGDChild.SetProperty("U_Comentario", strComentario)
            oGDChild.SetProperty("U_Nivel", Convert.ToString(p_intNivelAprobacion))
            oGDChild.SetProperty("U_Niv_Code", strCodigoNivelSiguiente)


            If m_oCompany.InTransaction Then
                m_oCompany.EndTransaction(BoWfTransOpt.wf_RollBack)
            End If
            '*********** inicia la transaccion **********
            m_oCompany.StartTransaction()
            '******Realiza el Update ***************
            oGeneralService.Update(oGeneralData)

            If m_oCompany.InTransaction Then
                m_oCompany.EndTransaction(BoWfTransOpt.wf_Commit)
                m_SBO_Application.StatusBar.SetText(String.Format(My.Resources.Resource.AprobacionCV, p_oContratoVentaEncabezadoList.Item(0).DocNum.ToString()), SAPbouiCOM.BoMessageTime.bmt_Short, SAPbouiCOM.BoStatusBarMessageType.smt_Success)
            End If
        Catch ex As Exception
            m_SBO_Application.StatusBar.SetText(ex.Message, SAPbouiCOM.BoMessageTime.bmt_Long, SAPbouiCOM.BoStatusBarMessageType.smt_Error)
            If m_oCompany.InTransaction Then
                m_oCompany.EndTransaction(BoWfTransOpt.wf_RollBack)
            End If
        End Try
    End Sub
#End Region

    Sub CargarVentanaDMVehiculo(pVal As SAPbouiCOM.ItemEvent, ByVal SBO_Application As Application, p__oVehiculos As VehiculosCls)

        Dim otmpForm As Form = SBO_Application.Forms.ActiveForm
        Dim editCell As EditText
        If pVal.ItemUID = "mtx_Vehi" Then

            'editCell = DirectCast(otmpForm.Items.Item("txtIDVehi").Specific, EditText)
            Dim oMatrix As SAPbouiCOM.Matrix
            Dim strUnidad As String
            Dim strIDVeh As String

            oMatrix = DirectCast(otmpForm.Items.Item("mtx_Vehi").Specific, SAPbouiCOM.Matrix)
            strUnidad = oMatrix.Columns.Item("Col_Unidad").Cells.Item(pVal.Row).Specific.String()
            strIDVeh = Utilitarios.EjecutarConsulta("SELECT ""DocEntry"" FROM ""@SCGD_VEHICULO"" WHERE ""U_Cod_Unid"" = '" & strUnidad & "'", SBO_Application.Company.DatabaseName, SBO_Application.Company.ServerName)

            Call p__oVehiculos.DibujarFormularioDetalleInformacionVehiculo("", _
                                         strIDVeh, _
                                         True, _
                                         "", _
                                         0, True, False, VehiculosCls.ModoFormulario.scgVentas)
        ElseIf pVal.ItemUID = "lkVehUs" Then

            editCell = DirectCast(otmpForm.Items.Item("txtIDV_Us").Specific, EditText)
            Call p__oVehiculos.DibujarFormularioDetalleInformacionVehiculo("", _
                                         editCell.String, _
                                         True, _
                                         "", _
                                         0, True, False, VehiculosCls.ModoFormulario.scgVentas)
        End If
        otmpForm = Nothing
    End Sub

    ''' <summary>
    ''' Metodo que calcula el descuento por unidad basado en el porcentaje o monton de descuento
    ''' </summary>
    ''' <remarks></remarks>
    Private Sub CalculaDescXUnidad()

        Dim strCheckDes As String
        Dim dblPorDesc As Double
        Dim dblDescuento As Double
        Dim dblPreVehiculo As Double
        Dim dblTotal As Double

        Try

            strCheckDes = oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_PorDesV", 0).Trim
            dblPorDesc = Double.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Por_Temp", 0).Trim, n)
            dblDescuento = Double.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_DescUni", 0).Trim, n)
            dblPreVehiculo = Double.Parse(oForm.DataSources.DBDataSources.Item(TablaContrato).GetValue("U_Pre_Vh", 0).Trim, n)

            If strCheckDes = "Y" Then
                If dblPorDesc = 0 Then
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_DescUni", 0, "0")
                Else
                    dblTotal = (dblPorDesc * dblPreVehiculo) / 100
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_DescUni", 0, dblTotal.ToString(n))
                End If

            Else
                If dblDescuento < 0 Then
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Por_Temp", 0, "0")
                Else
                    dblTotal = (dblDescuento * 100) / dblPreVehiculo
                    oForm.DataSources.DBDataSources.Item(TablaContrato).SetValue("U_Por_Temp", 0, dblTotal.ToString(n))
                End If
            End If

        Catch ex As Exception

        End Try


    End Sub

    Private Function GetItemCode(ByVal p_artVent As String, ByVal p_U_TipIn As String) As String
        Dim strItemCodeVehiculo As String
        Try
            If String.IsNullOrEmpty(p_artVent) Then
                strItemCodeVehiculo = GetItemCodeAdmin1(p_U_TipIn)
            Else
                strItemCodeVehiculo = p_artVent
            End If

        Catch ex As Exception
            DMS_Connector.Helpers.ManejoErrores(ex)
            strItemCodeVehiculo = String.Empty
        End Try
        Return strItemCodeVehiculo
    End Function

    Private Function GetItemCodeAdmin1(ByVal p_TipIn As String) As String
        Dim strItemCode As String
        Try
            strItemCode = String.Empty
            If DMS_Connector.Configuracion.ParamGenAddon.Admin1.Any(Function(admin1) admin1.U_Tipo.Equals(p_TipIn) AndAlso admin1.U_Cod_Item.Equals("1")) Then
                strItemCode = DMS_Connector.Configuracion.ParamGenAddon.Admin1.First(Function(admin1) admin1.U_Tipo.Equals(p_TipIn) AndAlso admin1.U_Cod_Item.Equals("1")).U_ItemCode
            End If
            If String.IsNullOrEmpty(strItemCode) Then
                Throw New Exception(String.Format(My.Resources.Resource.ErrorItemCodeAdmin1NoDefinido, p_TipIn))
            End If
        Catch ex As Exception
            DMS_Connector.Helpers.ManejoErrores(ex)
            strItemCode = String.Empty
        End Try
        Return strItemCode
    End Function

    Public Function ConsultaVehiculoEnInventario(ByRef p_strCondicion As String) As Boolean
        Dim oCondition As SAPbouiCOM.Condition
        Dim oConditions As SAPbouiCOM.Conditions
        Dim dsInformacion As DBDataSource
        Dim index As Integer
        Try
            oForm.DataSources.DBDataSources.Add("@SCGD_GOODRECEIVE")
            dsInformacion = oForm.DataSources.DBDataSources.Item("@SCGD_GOODRECEIVE")

            oConditions = m_SBO_Application.CreateObject(SAPbouiCOM.BoCreatableObjectType.cot_Conditions)

            oCondition = oConditions.Add()
            oCondition.BracketOpenNum = 1
            oCondition.Alias = "U_Unidad"
            oCondition.Operation = SAPbouiCOM.BoConditionOperation.co_EQUAL
            oCondition.CondVal = p_strCondicion
            oCondition.BracketCloseNum = 1

            dsInformacion.Query(oConditions)

            For index = 0 To dsInformacion.Size - 1
                If String.IsNullOrEmpty(dsInformacion.GetValue("U_SCGD_DocSalida", index)) And dsInformacion.GetValue("U_As_Entr", index) <> "-1" Then
                    Return True
                End If
            Next
            Return False
        Catch ex As Exception
            DMS_Connector.Helpers.ManejoErrores(ex)
        End Try
    End Function

#Region "CABYS"
    Public Sub ManejaCABYS(ByRef p_oCABYS As CABYS)
        Dim oArticulo As SAPbobsCOM.Items
        Try
            If Not String.IsNullOrEmpty(p_oCABYS.CodigoArticulo) Then
                oArticulo = DMS_Connector.Company.CompanySBO.GetBusinessObject(BoObjectTypes.oItems)
                If oArticulo.GetByKey(p_oCABYS.CodigoArticulo) Then
                    p_oCABYS.CABYS_AE = oArticulo.UserFields.Fields.Item("U_SCG_IVA2_Act_Econ").Value
                    p_oCABYS.CABYS_TI = oArticulo.UserFields.Fields.Item("U_SCG_IVA2_TipoItem").Value
                    p_oCABYS.CodigoHaciendaUDO = oArticulo.UserFields.Fields.Item("U_SCGCE_CodArtHac").Value
                    If Not String.IsNullOrEmpty(p_oCABYS.IndicadorIVA) Then
                        ObtieneTasaImpuesto(p_oCABYS)
                    End If
                    If Not String.IsNullOrEmpty(p_oCABYS.CodigoHaciendaUDO) Then
                        ObtieneCodigosHacienda(p_oCABYS)
                    End If
                End If
                Utilitarios.DestruirObjeto(oArticulo)
            End If
        Catch ex As Exception
            Call Utilitarios.ManejadorErrores(ex, m_SBO_Application)
        End Try
    End Sub

    Private Sub ObtieneCodigosHacienda(ByRef p_oCABYS As CABYS)
        Dim oGeneralData As GeneralData
        Dim oGereralDataParams As GeneralDataParams
        Dim oGeneralDataChild As GeneralData
        Dim oGeneralDataColletion As GeneralDataCollection
        Dim oGeneralService As GeneralService
        Dim dblPorcentajeIVA As Double = 0
        Try
            oGeneralService = DMS_Connector.Company.CompanyService.GetGeneralService("COD_ITEM")
            oGereralDataParams = oGeneralService.GetDataInterface(GeneralServiceDataInterfaces.gsGeneralDataParams)
            oGereralDataParams.SetProperty("Code", p_oCABYS.CodigoHaciendaUDO)
            oGeneralData = oGeneralService.GetByParams(oGereralDataParams)
            oGeneralDataColletion = oGeneralData.Child("COD_ITEM_DET")
            For index As Integer = 0 To oGeneralDataColletion.Count - 1
                oGeneralDataChild = oGeneralDataColletion.Item(index)
                dblPorcentajeIVA = oGeneralDataChild.GetProperty("U_SCG_IVA2_Porc")
                If dblPorcentajeIVA = p_oCABYS.TasaIVA Then
                    p_oCABYS.CABYS_CH = oGeneralDataChild.GetProperty("U_SCG_IVA2_Codigo")
                    Exit For
                End If
            Next


        Catch ex As Exception
            DMS_Connector.Helpers.ManejoErrores(ex)
        Finally
            Utilitarios.DestruirObjeto(oGeneralDataChild)
            Utilitarios.DestruirObjeto(oGeneralDataColletion)
            Utilitarios.DestruirObjeto(oGeneralData)
            Utilitarios.DestruirObjeto(oGereralDataParams)
            Utilitarios.DestruirObjeto(oGeneralService)
        End Try
    End Sub

    Private Sub ObtieneTasaImpuesto(ByRef p_oCABYS As CABYS)
        Dim oSalesTaxCodes As SAPbobsCOM.SalesTaxCodes
        Try
            oSalesTaxCodes = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oSalesTaxCodes)
            If oSalesTaxCodes.GetByKey(p_oCABYS.IndicadorIVA) Then
                p_oCABYS.TasaIVA = oSalesTaxCodes.Rate
            End If
        Catch ex As Exception
            DMS_Connector.Helpers.ManejoErrores(ex)
        Finally
            Utilitarios.DestruirObjeto(oSalesTaxCodes)
        End Try
    End Sub

    Private Sub ObtieneValoresExoneracionSN(ByRef p_oCABYS As CABYS)
        Dim oSocioNegocios As SAPbobsCOM.BusinessPartners
        Try
            oSocioNegocios = m_oCompany.GetBusinessObject(SAPbobsCOM.BoObjectTypes.oBusinessPartners)
            If oSocioNegocios.GetByKey(p_oCABYS.CardCode) Then
                p_oCABYS.OrigenTributario = oSocioNegocios.UserFields.Fields.Item("U_SCG_IVA2_Origen").Value
                p_oCABYS.TipoExoneracion = oSocioNegocios.UserFields.Fields.Item("U_SCG_IVA2_TipoExo").Value
            End If
        Catch ex As Exception
            DMS_Connector.Helpers.ManejoErrores(ex)
        Finally
            Utilitarios.DestruirObjeto(oSocioNegocios)
        End Try
    End Sub
#End Region

End Class

' Clase para la definición de la lista
Public Class ListaLineaAsientoContable

    Public Property FCCurrency() As String
        Get
            Return strFCCurrency
        End Get
        Set(ByVal value As String)
            strFCCurrency = value
        End Set
    End Property
    Private strFCCurrency As String

    Public Property Debit() As Decimal
        Get
            Return decDebit
        End Get
        Set(ByVal value As Decimal)
            decDebit = value
        End Set
    End Property
    Private decDebit As Decimal

    Public Property Credit() As Decimal
        Get
            Return decCredit
        End Get
        Set(ByVal value As Decimal)
            decCredit = value
        End Set
    End Property
    Private decCredit As Decimal

    Public Property FCDebit() As Decimal
        Get
            Return decFCDebit
        End Get
        Set(ByVal value As Decimal)
            decFCDebit = value
        End Set
    End Property
    Private decFCDebit As Decimal


    Public Property FCCredit() As Decimal
        Get
            Return decFCCredit
        End Get
        Set(ByVal value As Decimal)
            decFCCredit = value
        End Set
    End Property
    Private decFCCredit As Decimal

    Public Property Account() As String
        Get
            Return strAccount
        End Get
        Set(ByVal value As String)
            strAccount = value
        End Set
    End Property
    Private strAccount As String

    Public Property Aplicado() As Boolean
        Get
            Return blnAplicado
        End Get
        Set(ByVal value As Boolean)
            blnAplicado = value
        End Set
    End Property
    Private blnAplicado As Boolean

    Public Property ImpNeg() As String
        Get
            Return strImpNeg
        End Get
        Set(ByVal value As String)
            strImpNeg = value
        End Set
    End Property
    Private strImpNeg As String

    Public Property AccountExpenses() As String
        Get
            Return strAccountExpenses
        End Get
        Set(ByVal value As String)
            strAccountExpenses = value
        End Set
    End Property
    Private strAccountExpenses As String

End Class

