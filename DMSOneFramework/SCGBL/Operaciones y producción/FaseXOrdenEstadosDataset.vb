'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(), _
 System.ComponentModel.DesignerCategoryAttribute("code"), _
 System.Diagnostics.DebuggerStepThrough(), _
 System.ComponentModel.ToolboxItem(True)> _
Public Class FaseXOrdenEstadosDataset
    Inherits DataSet

    Private tableSCGTA_TB_FasesxOrden_Estados As SCGTA_TB_FasesxOrden_EstadosDataTable

    Public Sub New()
        MyBase.New()
        Me.InitClass()
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New()
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)), String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SCGTA_TB_FasesxOrden_Estados")) Is Nothing) Then
                Me.Tables.Add(New SCGTA_TB_FasesxOrden_EstadosDataTable(ds.Tables("SCGTA_TB_FasesxOrden_Estados")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.InitClass()
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property SCGTA_TB_FasesxOrden_Estados() As SCGTA_TB_FasesxOrden_EstadosDataTable
        Get
            Return Me.tableSCGTA_TB_FasesxOrden_Estados
        End Get
    End Property

    Public Overrides Function Clone() As DataSet
        Dim cln As FaseXOrdenEstadosDataset = CType(MyBase.Clone, FaseXOrdenEstadosDataset)
        cln.InitVars()
        Return cln
    End Function

    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset()
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("SCGTA_TB_FasesxOrden_Estados")) Is Nothing) Then
            Me.Tables.Add(New SCGTA_TB_FasesxOrden_EstadosDataTable(ds.Tables("SCGTA_TB_FasesxOrden_Estados")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
        Me.InitVars()
    End Sub

    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function

    Friend Sub InitVars()
        Me.tableSCGTA_TB_FasesxOrden_Estados = CType(Me.Tables("SCGTA_TB_FasesxOrden_Estados"), SCGTA_TB_FasesxOrden_EstadosDataTable)
        If (Not (Me.tableSCGTA_TB_FasesxOrden_Estados) Is Nothing) Then
            Me.tableSCGTA_TB_FasesxOrden_Estados.InitVars()
        End If
    End Sub

    Private Sub InitClass()
        Me.DataSetName = "FaseXOrdenEstados"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/FaseXOrdenEstados.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = False
        Me.EnforceConstraints = True
        Me.tableSCGTA_TB_FasesxOrden_Estados = New SCGTA_TB_FasesxOrden_EstadosDataTable
        Me.Tables.Add(Me.tableSCGTA_TB_FasesxOrden_Estados)
    End Sub

    Private Function ShouldSerializeSCGTA_TB_FasesxOrden_Estados() As Boolean
        Return False
    End Function

    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    Public Delegate Sub SCGTA_TB_FasesxOrden_EstadosRowChangeEventHandler(ByVal sender As Object, ByVal e As SCGTA_TB_FasesxOrden_EstadosRowChangeEvent)

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Class SCGTA_TB_FasesxOrden_EstadosDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable

        Private columnID As DataColumn

        Private columnNoOrden As DataColumn

        Private columnNoFase As DataColumn

        Private columnIDReferencia As DataColumn

        Private columnFecha_Ini As DataColumn

        Private columnFecha_Fin As DataColumn

        Private columnEstado As DataColumn

        Private columnTotalEfectivo As DataColumn

        Friend Sub New()
            MyBase.New("SCGTA_TB_FasesxOrden_Estados")
            Me.InitClass()
        End Sub

        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub

        <System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        Friend ReadOnly Property IDColumn() As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property

        Friend ReadOnly Property NoOrdenColumn() As DataColumn
            Get
                Return Me.columnNoOrden
            End Get
        End Property

        Friend ReadOnly Property NoFaseColumn() As DataColumn
            Get
                Return Me.columnNoFase
            End Get
        End Property

        Friend ReadOnly Property IDReferenciaColumn() As DataColumn
            Get
                Return Me.columnIDReferencia
            End Get
        End Property

        Friend ReadOnly Property Fecha_IniColumn() As DataColumn
            Get
                Return Me.columnFecha_Ini
            End Get
        End Property

        Friend ReadOnly Property Fecha_FinColumn() As DataColumn
            Get
                Return Me.columnFecha_Fin
            End Get
        End Property

        Friend ReadOnly Property EstadoColumn() As DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property

        Friend ReadOnly Property TotalEfectivoColumn() As DataColumn
            Get
                Return Me.columnTotalEfectivo
            End Get
        End Property

        Default Public ReadOnly Property Item(ByVal index As Integer) As SCGTA_TB_FasesxOrden_EstadosRow
            Get
                Return CType(Me.Rows(index), SCGTA_TB_FasesxOrden_EstadosRow)
            End Get
        End Property

        Public Event SCGTA_TB_FasesxOrden_EstadosRowChanged As SCGTA_TB_FasesxOrden_EstadosRowChangeEventHandler

        Public Event SCGTA_TB_FasesxOrden_EstadosRowChanging As SCGTA_TB_FasesxOrden_EstadosRowChangeEventHandler

        Public Event SCGTA_TB_FasesxOrden_EstadosRowDeleted As SCGTA_TB_FasesxOrden_EstadosRowChangeEventHandler

        Public Event SCGTA_TB_FasesxOrden_EstadosRowDeleting As SCGTA_TB_FasesxOrden_EstadosRowChangeEventHandler

        Public Overloads Sub AddSCGTA_TB_FasesxOrden_EstadosRow(ByVal row As SCGTA_TB_FasesxOrden_EstadosRow)
            Me.Rows.Add(row)
        End Sub

        Public Overloads Function AddSCGTA_TB_FasesxOrden_EstadosRow(ByVal NoOrden As String, ByVal NoFase As Integer, ByVal IDReferencia As Integer, ByVal Fecha_Ini As Date, ByVal Fecha_Fin As Date, ByVal Estado As String, ByVal TotalEfectivo As Decimal) As SCGTA_TB_FasesxOrden_EstadosRow
            Dim rowSCGTA_TB_FasesxOrden_EstadosRow As SCGTA_TB_FasesxOrden_EstadosRow = CType(Me.NewRow, SCGTA_TB_FasesxOrden_EstadosRow)
            rowSCGTA_TB_FasesxOrden_EstadosRow.ItemArray = New Object() {Nothing, NoOrden, NoFase, IDReferencia, Fecha_Ini, Fecha_Fin, Estado, TotalEfectivo}
            Me.Rows.Add(rowSCGTA_TB_FasesxOrden_EstadosRow)
            Return rowSCGTA_TB_FasesxOrden_EstadosRow
        End Function

        Public Function FindByID(ByVal ID As Integer) As SCGTA_TB_FasesxOrden_EstadosRow
            Return CType(Me.Rows.Find(New Object() {ID}), SCGTA_TB_FasesxOrden_EstadosRow)
        End Function

        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        Public Overrides Function Clone() As DataTable
            Dim cln As SCGTA_TB_FasesxOrden_EstadosDataTable = CType(MyBase.Clone, SCGTA_TB_FasesxOrden_EstadosDataTable)
            cln.InitVars()
            Return cln
        End Function

        Protected Overrides Function CreateInstance() As DataTable
            Return New SCGTA_TB_FasesxOrden_EstadosDataTable
        End Function

        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnNoOrden = Me.Columns("NoOrden")
            Me.columnNoFase = Me.Columns("NoFase")
            Me.columnIDReferencia = Me.Columns("IDReferencia")
            Me.columnFecha_Ini = Me.Columns("Fecha_Ini")
            Me.columnFecha_Fin = Me.Columns("Fecha_Fin")
            Me.columnEstado = Me.Columns("Estado")
            Me.columnTotalEfectivo = Me.Columns("TotalEfectivo")
        End Sub

        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnNoOrden = New DataColumn("NoOrden", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoOrden)
            Me.columnNoFase = New DataColumn("NoFase", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoFase)
            Me.columnIDReferencia = New DataColumn("IDReferencia", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDReferencia)
            Me.columnFecha_Ini = New DataColumn("Fecha_Ini", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Ini)
            Me.columnFecha_Fin = New DataColumn("Fecha_Fin", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha_Fin)
            Me.columnEstado = New DataColumn("Estado", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEstado)
            Me.columnTotalEfectivo = New DataColumn("TotalEfectivo", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalEfectivo)
            Me.Constraints.Add(New UniqueConstraint("FaseXOrdenEstadosKey1", New DataColumn() {Me.columnID}, True))
            Me.columnID.AutoIncrement = True
            Me.columnID.AllowDBNull = False
            Me.columnID.ReadOnly = True
            Me.columnID.Unique = True
            Me.columnNoOrden.AllowDBNull = False
            Me.columnNoFase.AllowDBNull = False
        End Sub

        Public Function NewSCGTA_TB_FasesxOrden_EstadosRow() As SCGTA_TB_FasesxOrden_EstadosRow
            Return CType(Me.NewRow, SCGTA_TB_FasesxOrden_EstadosRow)
        End Function

        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SCGTA_TB_FasesxOrden_EstadosRow(builder)
        End Function

        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SCGTA_TB_FasesxOrden_EstadosRow)
        End Function

        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SCGTA_TB_FasesxOrden_EstadosRowChangedEvent) Is Nothing) Then
                RaiseEvent SCGTA_TB_FasesxOrden_EstadosRowChanged(Me, New SCGTA_TB_FasesxOrden_EstadosRowChangeEvent(CType(e.Row, SCGTA_TB_FasesxOrden_EstadosRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SCGTA_TB_FasesxOrden_EstadosRowChangingEvent) Is Nothing) Then
                RaiseEvent SCGTA_TB_FasesxOrden_EstadosRowChanging(Me, New SCGTA_TB_FasesxOrden_EstadosRowChangeEvent(CType(e.Row, SCGTA_TB_FasesxOrden_EstadosRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SCGTA_TB_FasesxOrden_EstadosRowDeletedEvent) Is Nothing) Then
                RaiseEvent SCGTA_TB_FasesxOrden_EstadosRowDeleted(Me, New SCGTA_TB_FasesxOrden_EstadosRowChangeEvent(CType(e.Row, SCGTA_TB_FasesxOrden_EstadosRow), e.Action))
            End If
        End Sub

        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SCGTA_TB_FasesxOrden_EstadosRowDeletingEvent) Is Nothing) Then
                RaiseEvent SCGTA_TB_FasesxOrden_EstadosRowDeleting(Me, New SCGTA_TB_FasesxOrden_EstadosRowChangeEvent(CType(e.Row, SCGTA_TB_FasesxOrden_EstadosRow), e.Action))
            End If
        End Sub

        Public Sub RemoveSCGTA_TB_FasesxOrden_EstadosRow(ByVal row As SCGTA_TB_FasesxOrden_EstadosRow)
            Me.Rows.Remove(row)
        End Sub
    End Class

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Class SCGTA_TB_FasesxOrden_EstadosRow
        Inherits DataRow

        Private tableSCGTA_TB_FasesxOrden_Estados As SCGTA_TB_FasesxOrden_EstadosDataTable

        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSCGTA_TB_FasesxOrden_Estados = CType(Me.Table, SCGTA_TB_FasesxOrden_EstadosDataTable)
        End Sub

        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableSCGTA_TB_FasesxOrden_Estados.IDColumn), Integer)
            End Get
            Set(ByVal Value As Integer)
                Me(Me.tableSCGTA_TB_FasesxOrden_Estados.IDColumn) = Value
            End Set
        End Property

        Public Property NoOrden() As String
            Get
                Return CType(Me(Me.tableSCGTA_TB_FasesxOrden_Estados.NoOrdenColumn), String)
            End Get
            Set(ByVal Value As String)
                Me(Me.tableSCGTA_TB_FasesxOrden_Estados.NoOrdenColumn) = Value
            End Set
        End Property

        Public Property NoFase() As Integer
            Get
                Return CType(Me(Me.tableSCGTA_TB_FasesxOrden_Estados.NoFaseColumn), Integer)
            End Get
            Set(ByVal Value As Integer)
                Me(Me.tableSCGTA_TB_FasesxOrden_Estados.NoFaseColumn) = Value
            End Set
        End Property

        Public Property IDReferencia() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSCGTA_TB_FasesxOrden_Estados.IDReferenciaColumn), Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As Integer)
                Me(Me.tableSCGTA_TB_FasesxOrden_Estados.IDReferenciaColumn) = Value
            End Set
        End Property

        Public Property Fecha_Ini() As Date
            Get
                Try
                    Return CType(Me(Me.tableSCGTA_TB_FasesxOrden_Estados.Fecha_IniColumn), Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As Date)
                Me(Me.tableSCGTA_TB_FasesxOrden_Estados.Fecha_IniColumn) = Value
            End Set
        End Property

        Public Property Fecha_Fin() As Date
            Get
                Try
                    Return CType(Me(Me.tableSCGTA_TB_FasesxOrden_Estados.Fecha_FinColumn), Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As Date)
                Me(Me.tableSCGTA_TB_FasesxOrden_Estados.Fecha_FinColumn) = Value
            End Set
        End Property

        Public Property Estado() As String
            Get
                Try
                    Return CType(Me(Me.tableSCGTA_TB_FasesxOrden_Estados.EstadoColumn), String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As String)
                Me(Me.tableSCGTA_TB_FasesxOrden_Estados.EstadoColumn) = Value
            End Set
        End Property

        Public Property TotalEfectivo() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableSCGTA_TB_FasesxOrden_Estados.TotalEfectivoColumn), Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set(ByVal Value As Decimal)
                Me(Me.tableSCGTA_TB_FasesxOrden_Estados.TotalEfectivoColumn) = Value
            End Set
        End Property

        Public Function IsIDReferenciaNull() As Boolean
            Return Me.IsNull(Me.tableSCGTA_TB_FasesxOrden_Estados.IDReferenciaColumn)
        End Function

        Public Sub SetIDReferenciaNull()
            Me(Me.tableSCGTA_TB_FasesxOrden_Estados.IDReferenciaColumn) = System.Convert.DBNull
        End Sub

        Public Function IsFecha_IniNull() As Boolean
            Return Me.IsNull(Me.tableSCGTA_TB_FasesxOrden_Estados.Fecha_IniColumn)
        End Function

        Public Sub SetFecha_IniNull()
            Me(Me.tableSCGTA_TB_FasesxOrden_Estados.Fecha_IniColumn) = System.Convert.DBNull
        End Sub

        Public Function IsFecha_FinNull() As Boolean
            Return Me.IsNull(Me.tableSCGTA_TB_FasesxOrden_Estados.Fecha_FinColumn)
        End Function

        Public Sub SetFecha_FinNull()
            Me(Me.tableSCGTA_TB_FasesxOrden_Estados.Fecha_FinColumn) = System.Convert.DBNull
        End Sub

        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tableSCGTA_TB_FasesxOrden_Estados.EstadoColumn)
        End Function

        Public Sub SetEstadoNull()
            Me(Me.tableSCGTA_TB_FasesxOrden_Estados.EstadoColumn) = System.Convert.DBNull
        End Sub

        Public Function IsTotalEfectivoNull() As Boolean
            Return Me.IsNull(Me.tableSCGTA_TB_FasesxOrden_Estados.TotalEfectivoColumn)
        End Function

        Public Sub SetTotalEfectivoNull()
            Me(Me.tableSCGTA_TB_FasesxOrden_Estados.TotalEfectivoColumn) = System.Convert.DBNull
        End Sub
    End Class

    <System.Diagnostics.DebuggerStepThrough()> _
    Public Class SCGTA_TB_FasesxOrden_EstadosRowChangeEvent
        Inherits EventArgs

        Private eventRow As SCGTA_TB_FasesxOrden_EstadosRow

        Private eventAction As DataRowAction

        Public Sub New(ByVal row As SCGTA_TB_FasesxOrden_EstadosRow, ByVal action As DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        Public ReadOnly Property Row() As SCGTA_TB_FasesxOrden_EstadosRow
            Get
                Return Me.eventRow
            End Get
        End Property

        Public ReadOnly Property Action() As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
